C//////////////////////////////////////////////////////////////////////
C ANALYSIS OF THE RESULTS OBTAINED BY SOLVING THE GENERALIZED
C EIGENVALUE PROBLEM.
C
C  1989 MADE BY J-F.GIBRAT
C  1990 MODIFIED AND INSTALLED BY K.MIZUGUCHI
C
C LAST UPDATE 92/10/26  K.M.
C
C INPUT FILES:  41 ==> PRECEP OUTPUT (INFORMATION ABOUT THE MOLECULE)
C               43 ==> EIGENVECTORS
C               43 ==> EIGENVALUES
C               45 ==> K-MATRIX
C               47 ==> KV-MATRIX
C
C OUTPUT FILES: 48 ==> M.S. FLUCTUATIONS (IN DEGREE) OF THE PHI, PSI,
C                      OMEGA, KHI ANGLES
C               50 ==> PEAK  REQUENCY FOR PHI, PSI AND OMEGA
C               52 ==> M.S. FLUCTUATIONS OF CA CONTRIBUTED BY FREQ BELOW
C                      A GIVEN THRESHOLD THRSH
C               54 ==> CHARACTERISTIC FREQUENCIES FOR THE SECONDARY
C                      STRUCTURES: H, E, T
C               56 ==> M.S. FLUCTUATIONS OF CA ATOMS CONTRIBUTED BY
C                      LOW FREQUENCY MODES (1ST TO IFRMX-TH).
C               58 ==> AVERAGE FLUCTUATION OF CA AND BACKBONE ANGLES
C                      AS A FUNCTION OF THE FREQUENCIES
C               60 ==> DISPLACEMENT VECTORS FOR ALL THE ATOMS
C               62 ==> M.S. FLUCTUATIONS OF PHI, PSI & OMEGA ANGLES
C                      CONTRIBUTED BY LOW FREQUENCY MODES.
C               64 ==> M.S. FLUCTUATIONS OF N, CA, CB, C, O ATOMS
C                      FOR COMPARISON WITH THE TEMPERATURE B FACTOR
C               66 ==> KV-MATRIX
C
C FILE 5 CONTAINS SOME CONTROL PARAMETERS
C
C/////////////////////////////////////////////////////////////////////
C
      SUBROUTINE ANALYS
C
      IMPLICIT REAL*8 (A-H,O-Z)
C
CMSP  INCLUDE (MAXSIZE)
      PARAMETER(MAXATM=2050,MAXVAR=800,MAXRES=150,MAXSS=10,
     >          MXRS1=MAXRES+1,MXRS10=10*MAXRES,MAXLEN=6000,
     >          MAXDBL=1000,MAXDP=700,MAXDPL=MAXATM+MAXDBL/2,
     >          MAXDP2=MAXDP*2,MXPAIR=MAXVAR*(MAXVAR+1)/2,
     >          MXPAR1=(MAXVAR+1)*(MAXVAR+2)/2,MAXPER=16000,
     >          MAXCNS=900,MAXJ=2*MAXVAR,MAXSS2=MAXSS*2,
     >          MAXINT=40000,MAXI1=MAXINT/2,MAXI2=MAXINT-MAXI1,
     >          MXATM1=MAXATM+1,MVAR1=MAXVAR+1,
     >          MWORK=100000,MIWORK=100000,MCHWOR=100000)
C
C  MAXAT:  MAXIMUM NUMBER OF ATOMS IN A PROTEIN
C  MAXVAR: MAXMUM NUMBER OF DIHEDRAL ANGLE VARIABLES
C  MAXRS:  MAXMUM NUMBER OF RESIDUES
C  MAXSS:  MAXMUM NUMBER OF S-S CROSSLINK
C  MXRS1:  MAXRS+1
C  MXRS10: MAXRS*10
C  MAXLEN: ARRAY SIZE OF INTER IN PREP IN PRECEP ?
C  MAXDBL: MAXMUM NUMBER OF DIPOLES (?)
C  MWORK:  MAXIMUM SIZE OF REAL WORK ARRAY
C  MIWORK: MAXIMUM SIZE OF INTEGER WORK ARRAY
C  MCWORK: MAXIMUM SIZE OF CHARACTER WORK ARRAY
CMSP  INCLUDE (SIZE)
C...Translated by FPP 6.0 (3.06G3) 02/26/96  10:11:01   -dc
      INTEGER NPK11U(800),NPK21U(800),NPK31U(800),IND11U(800)
      REAL FL1U(800),FL2U(800),FL3U(800),SCAL1U(800)
      LOGICAL L1V(800),L2V(800),L3V(800)
      REAL QQQ
      TASK COMMON/Z1FPP1CM/ QQQ(8191)
      EQUIVALENCE (QQQ(1),FL1U),(QQQ(801),L1V),(QQQ(1601),NPK11U),(QQQ(1
     .),FL2U),(QQQ(801),L2V),(QQQ(1601),NPK21U),(QQQ(1),FL3U),(QQQ(801),
     .L3V),(QQQ(1601),NPK31U),(QQQ(1),IND11U),(QQQ(801),SCAL1U)
C SIZE
C  THIS COMMON BLOCK STORES THE NUMBERS RELATED TO PROTEIN SIZE
C
      COMMON/SIZE/NUMATM,NUMVAR,NN2,NUMINT,NSS,NUMRES
      COMMON/SIZE1/NATM1,NVAR1,NPAIR1
C
C  NUMATM:   NUMBER OF ATOMS IN A PROTEIN
C  NUMVAR:   NUMBER OF (DIHEDRAL) ANGLE VARIABLES
C  NN2:      NUMVAR*(NUMVAR+1)/2
C  NUMINT:     ?
C  NSS:      NUMBER OF S-S CROSSLINK (?)
C  NUMRES:   NUMBER OF RESIDUES
C  NATM1=NUMATM+1
C  NVAR1=NUMVAR+1
C  NPAIR1=(NUMVAR+1)*(NUMVAR+2)/2
CMSP  INCLUDE (COMMAND)
C COMMAND.CMN
C
C PURPOSE : COMMON BLOCKS FOR PARSER
C
      COMMON/COMMAN /COMLYN(2000)
      COMMON/COMMSI  /COMLEN,MXCMSZ
      CHARACTER*1 COMLYN
      INTEGER COMLEN
      EQUIVALENCE (COMLYN(1),COMLY2 )
      CHARACTER*2000 COMLY2
C
C     COMLYN  - STORES CHARACTERS IN INPUT (COMMAND) LINE, UP TO 2000
C               CHARACTERS
C     COMLEN  - ACTUAL NUMBER OF NON-BLANK CHARACTERS
C     MXCMSZ  - MAX NUMBER OF CHARACTERS = 2000
C     COMLYN2 - A CHARACTER*2000 REPRESENTATION OF THE COMMAND LINE
C
CMSP  INCLUDE (UNITNUMS)
      COMMON/UNITNU  /IN1,IN2,IN3,IN4,IFN4,
     *               IOUT1,IOUT2,IOUT3,
     * IN01,IOUT02,IOUT06,
C
C PREIN
C
     * IN11,IN13,IOUT12,IOUT14,IOUT16,IN15,IN17,IOUT18,IN19,IOUT20,
C
C PRECEP
C
     * IN21,IN23,IN25,IN27,IN29,
     * IOUT22,IOUT24,IOUT26,IOUT28,IOUT30,
C
C MINIMIZATION
C
     * IN31,IN33,IN35,IN37,IN39,
     * IOUT32,IOUT34,IOUT36,IOUT38,IOUT39,IOUT40,
C
C NORMAL MODE
C
     * IN41,IN43,IN45,IN47,IN49,
     * IOUT42,IOUT44,IOUT46,IOUT48,IOUT50,IOUT52,IOUT54,IOUT56,IOUT58,
     * IOUT60,IOUT62,IOUT64,IOUT66,
C
C MONTE CARLO
C
     * IN71,IN73,IN75,IN77,IN79,
     * IOUT72,IOUT74,IOUT76,IOUT78
C
C PRIMARY INPUT FILE ----- IN01
C PRIMARY OUTPUT FILE ---- IOUT02
C PRIMARY LOG FILE ------- IOUT06
C
C ODD NUMBERS ARE RESERVED FOR INPUT,
C EVEN NUMBERS ARE RESERVED FOR OUTPUT
C FOR EXPLICIT DEFINITIONS OF INPUT AND OUTPUT FILES, PLEASE SEE MAIN
      PARAMETER(NBMODE=10)
C
C  FOR PRECEP OUTPUT
C
CKM   DIMENSION INDXV(MAXVAR),JBTYPE(MAXATM),LUNIT(MAXATM),KATOM(MAXATM)
CKM   DIMENSION NBTYPE(MAXATM),KUNIT(MAXATM)
CMSP  INCLUDE (VARANG)
      COMMON/VARANG/ANGRAD(10,MAXRES),VAR(MAXVAR),INDXV(MAXVAR),
     >              ANGLES(10,MAXRES)
C
C  ANGRAD :  DIHEDRAL ANGLES IN ECCEP ORDER (RADIAN)
C  VAR:    DIHEDRAL ANGLES IN WAKO ORDER (RADIAN)
C  INDXV : INDVX=NNN*100+MMM (MMM:1-10)
C            NNN: RESIDUE NUMBER
C            MMM: DIHEDRAL ANGLE NUMBER IN THE RESIDUE(NNN) IN ECEPP
C                 ORDER
C  ANGLES: DIHEDRAL ANGLES IN ECEPP ORDER (DEGREE)
C          USED AS THE WORK]]
CKM        ANGRAD(10,MAXRES),VAR(MAXVAR),INDXV(MAXVAR),ANGLES(10,MAXRES)
CMSP  INCLUDE (ATOM)
C ATOM
C
      COMMON/ATOM00/KUNIT(MAXATM),KATOM(MXATM1),JATOM(MAXATM)
      COMMON/ATOM01/LATOM0(0:MAXVAR),LATOM1(MAXATM)
C
C  KUNIT:  UNIT NUMBER WHICH THE ATOM BELONGS TO.
C  KATOM:  SEQUENTIAL NUMBER OF THE ATOM IN WAKO ORDER.
C  JATOM:  SEQUENTIAL NUMBER OF THE ATOM IN ECEPP ORDER.
C   EXAMPLE:
C   ECEPP  WAKO         WAKO     ECEPP
C    1    KATOM(1)       1      JATOM(1)
C    2    KATOM(2)       2      JATOM(2)
C    3    KATOM(3)       3      JATOM(3)
C    .      .            .        .
C    .      .            .        .
C
C  LATOM0:
C  LATOM1:
C
CKM        KUNIT(MAXATM),KATOM(MXATM1)
CMSP  INCLUDE (NBTYPE)
C NBTYPE
C
      COMMON/NBTYPE/NBTYPE(MAXATM)
C
C  NBTYPE:   ATOM TYPE  (ECEPP ORDER)
C
CKM        NBTYPE(MAXATM)
CMSP  INCLUDE (ALPHA)
C ALPHA
C
      CHARACTER*4  ATNAME,RENAME
      CHARACTER*80 TITLE
      COMMON/ALPHA1/ATNAME(MAXATM),RENAME(MAXATM)
      COMMON/ALPHA2/NMBRES(MAXATM)
      COMMON/TITLE/TITLE
C
C  ATNAME:   ATOM NAMES (ECEPP ORDER)
C  RENAME :   RESIDUE NAMES (ECEPP ORDER)
C  NMBRES :   RESIDUE NUMBER (NORMAL NUMBERING)
C  TITLE  :   TITLE OF PRECEP
C
CKM        ATNAME(MAXATM),RENAME(MAXATM),NMBRES(MAXATM),TITLE
C
C EIGEN VALUES AND EIGEN VECTORS
CMSP  INCLUDE (EIGEN)
C EIGEN
        COMMON/EIGEN/ EIGVAL(MAXVAR),EIGVEC(MAXVAR,MAXVAR)
C EIGVAL: EIGEN VALUES
C EIGVEC : EIGEN VECTORS
CKM        EIGVAL(MAXVAR),EIGVEC(MAXVAR,MAXVAR)
C
C K-MATRIX
C
CKM   DIMENSION AKX(MAXATM,MAXVAR),AKY(MAXATM,MAXVAR),AKZ(MAXATM,MAXVAR)
      DIMENSION AKX(MAXVAR),AKY(MAXVAR),AKZ(MAXVAR)
C
C KV-MATRIX
C
      DIMENSION AKVX(MAXVAR),AKVY(MAXVAR),AKVZ(MAXVAR)
C
C  FOR PARSER
      CHARACTER*4 SSTAS,NXTWD
      CHARACTER*20 FORMA
      CHARACTER*80 NAME
C
C WORK ARRAYS
      DIMENSION FLUPHI(MAXRES),FLUPSI(MAXRES),FLUOME(MAXRES)
      DIMENSION FLUKHI(400)
      DIMENSION NPK1(MAXRES),NPK2(MAXRES),NPK3(MAXRES)
      DIMENSION FLUCA(2,MAXRES)
      DIMENSION FLCM(MAXVAR),FLCMH(MAXVAR),FLCME(MAXVAR),FLCMT(MAXVAR)
      DIMENSION IZONEH(2,20),IZONEE(2,20),IZONET(2,20)
      DIMENSION FLFRQ(MAXRES,15)
      DIMENSION ACAFRQ(MAXVAR),AANFRQ(MAXVAR)
      DIMENSION DX(MAXATM,NBMODE),DY(MAXATM,NBMODE),DZ(MAXATM,NBMODE)
      DIMENSION MODSTR(NBMODE)
      DIMENSION PHINM(MAXRES,NBMODE),PSINM(MAXRES,NBMODE),
     +          OMENM(MAXRES,NBMODE)
      DIMENSION BFACTR(MAXRES)
C
      DATA RKB/1.987D-3/
      DATA PI/3.141592653589793D0/
CKM   DATA BFACTR/NUMRES*0.D0/
      DATA BFACTR/MAXRES*0.D0/
C
      DEG=180.D0/PI
      IKMAT=0
      IKVMAT=0
C
C-----GET KEYWORD
C
  999 CONTINUE
      CALL NXTCMN(SSTAS)
      IF(SSTAS.EQ.'END ') GOTO 1090
C
C-----R E A D   I N   P R E C E P   O U T P U T   D A T A --------------
C                     (FROM UNIT 41)
      IF (SSTAS.EQ.'READ') THEN
        WRITE(IOUT02,'(/,5X,A,/)') ' NEXT SUBSUBTASK : READ '
        WRITE(IOUT06,'(/,5X,A,/)') ' NEXT SUBSUBTASK : READ '
        CALL NXTWRD(COMLY2,COMLEN,NXTWD,4)
        IF(NXTWD.EQ.'PREC') THEN
          CALL GTFLNM(NAME)
          CALL OPENRD(IN41,'FORMATTED',NAME,IOUT06)
          WRITE(IOUT06,1000) NXTWD,NAME
 1000     FORMAT(5X,A4,' READ FROM ',A60)
          CALL RDPREC(IN41)
          CLOSE (IN41)
          WRITE(IOUT02,1100) NAME
 1100     FORMAT (5X,'PRECEP OUTPUT DATA ARE READ IN FROM FILE: ',A60)
        END IF
        GOTO 999
      END IF
C
C-----R E A D   I N   E I G E N   V A L U E S   A N D   E I G E N ------
C     V E C T O R S
C                     (FROM UNIT43)
      IF (SSTAS.EQ.'GET ') THEN
        WRITE(IOUT02,'(/,5X,A,/)') ' NEXT SUBSUBTASK : GET '
        WRITE(IOUT06,'(/,5X,A,/)') ' NEXT SUBSUBTASK : GET '
        CALL NXTWRD(COMLY2,COMLEN,NXTWD,4)
        IF(NXTWD.EQ.'EIGE') THEN
          CALL GTFLNM(NAME)
          CALL OPENRD(IN43,'UNFORMATTED',NAME,IOUT06)
          WRITE(IOUT06,2000) NXTWD,NAME
 2000     FORMAT(5X,A4,' READ FROM ',A60)
          CALL GTEIG(IN43)
          CLOSE (IN43)
          WRITE(IOUT02,2100) NAME
 2100     FORMAT (5X,'EIGEN VALUES AND EIGEN VECTORS ARE READ IN ',
     &            'FROM FILE: ',A60)
        END IF
C
C-----R E A D   I N   K - M A T R I X ----------------------------------
C                     (FROM UNIT45)
        IF(NXTWD.EQ.'KMAT') THEN
          CALL GTFLNM(NAME)
          CALL OPENRD(IN45,'UNFORMATTED',NAME,IOUT06)
          WRITE(IOUT06,3000) NXTWD,NAME
 3000     FORMAT(5X,A4,' READ FROM ',A60)
          IKMAT=1
          WRITE(IOUT02,3100) NAME
 3100     FORMAT (5X,'K-MATRIX IS READ IN FROM FILE: ',A60)
        END IF
C
C-----R E A D   I N   K V - M A T R I X ---------------------------------
C                     (FROM UNIT47)
        IF(NXTWD.EQ.'KVMA') THEN
          CALL GTFLNM(NAME)
          CALL OPENRD(IN47,'UNFORMATTED',NAME,IOUT06)
          WRITE(IOUT06,4000) NXTWD,NAME
 4000     FORMAT(5X,A4,' READ FROM ',A60)
          IKVMAT=1
          WRITE(IOUT02,4100) NAME
 4100     FORMAT (5X,'KV-MATRIX IS READ IN FROM FILE: ',A60)
        END IF
        GOTO 999
      END IF
C
C-----P R I N T   O U T   K V - M A T R I X -----------------------------
C                     (TO UNIT66)
      IF (SSTAS.EQ.'PUT ') THEN
        WRITE(IOUT02,'(/,5X,A,/)') ' NEXT SUBSUBTASK : PUT '
        WRITE(IOUT06,'(/,5X,A,/)') ' NEXT SUBSUBTASK : PUT '
        CALL NXTWRD(COMLY2,COMLEN,NXTWD,4)
        IF(NXTWD.EQ.'KVMA') THEN
          CALL GTFLNM(NAME)
          CALL NXTWRD(COMLY2,COMLEN,NXTWD,4)
          FORMA='UNFORMATTED'
          IF (NXTWD.EQ.'OVER') FORMA='OVERWRITE  '
          CALL OPENWT(IOUT66,FORMA,NAME,IOUT06)
          WRITE(IOUT06,5000) NXTWD,NAME
 5000     FORMAT(5X,A4,' WRITTEN TO ',A60)
          CALL PUTKV(IOUT66)
          CLOSE (IOUT66)
          WRITE(IOUT02,5100) NAME
 5100     FORMAT (5X,'KV-MATRIX IS WRITTEN TO FILE:',A60)
        END IF
        GOTO 999
      END IF
C
C-----R E A D   I N   C O N T R O L   P A R A M E T E R S --------------
C
C  TEMP   = TEMPERATURE IN K
C  THRESH = FREQUENCY IN CM-1 ( CONTRIBUTION OF FREQ. BELOW THIS
C           THRESHOLD TO THE M.S. FLUCT. OF CA ATOMS)
C  NZX    = NUMBER OF ELEMENTS OF SEC. STRUCTURE X IN THE PROTEIN
C  IZONEX = THIS ARRAY CONTAINS THE FIRST AND LAST RESIDUES OF EACH
C           ELEMENT OF SECONDARY STRUCTURE X IN THE PROTEIN.
C  IFRMX  = NUMBER OF FREQUENCIES FOR WHICH THE M.S. FLUCTUATIONS OF
C           THE CA ARE COMPUTED
C  NBMOD  = NUMBER OF FREQUENCIES FOR WHICH THE DEPLACEMENT VECTORS
C           ARE COMPUTED
C  MODSTR = ARRAY CONTAINING THE NUMBER OF THE FREQUENCIES FOR WHICH
C           THE DISPLACEMENT VECTORS ARE COMPUTED
C
      IF (SSTAS.EQ.'INPU') THEN
        WRITE(IOUT02,'(/,5X,A,A,/)') ' NEXT SUBSUBTASK : INPUT '
        WRITE(IOUT06,'(/,5X,A,A,/)') ' NEXT SUBSUBTASK : INPUT '
        CALL NXTWRD(COMLY2,COMLEN,NXTWD,4)
        IF(NXTWD.EQ.'CNTL') THEN
          CALL GETPAF(COMLY2,COMLEN,'TEMP',4,' ',0,TEMP)
          WRITE(IOUT06,'(1X,A,F7.2,A)') 'TEMPERATURE: ',TEMP, 'K'
          WRITE(IOUT02,'(1X,A,F7.2,A)') 'TEMPERATURE: ',TEMP, 'K'
          RT=TEMP*RKB
          CALL GETPAF(COMLY2,COMLEN,'THRESH',6,' ',0,THRESH)
          WRITE(IOUT06,'(1X,A,F7.2,A)') 'THRESHOLD :',THRESH,' CM-1'
          WRITE(IOUT02,'(1X,A,F7.2,A)') 'THRESHOLD :',THRESH,' CM-1'
CKM
          CALL GETPAI(COMLY2,COMLEN,'NZH',3,' ',0,NZH)
          IF(NZH.GT.20) THEN
            PRINT *,'YOU HAVE TO INCREASE THE SIZE OF ARRAY IZONEH'
          ENDIF
          DO 503 J=1,NZH
            CALL GETPAI(COMLY2,COMLEN,'HS',2,' ',0,IZONEH(1,J))
            CALL GETPAI(COMLY2,COMLEN,'HE',2,' ',0,IZONEH(2,J))
 503      CONTINUE
          WRITE(IOUT06,'(1X,A,I4)') 'NUMBER OF HELICES: ',NZH
          WRITE(IOUT06,511) ((IZONEH(I,J),J=1,NZH),I=1,2)
CKM
          CALL GETPAI(COMLY2,COMLEN,'NZE ',4,' ',0,NZE)
          IF(NZE.GT.20) THEN
            PRINT *,'YOU HAVE TO INCREASE THE SIZE OF ARRAY IZONEE'
          ENDIF
          DO 505 J=1,NZH
            CALL GETPAI(COMLY2,COMLEN,'SS',2,' ',0,IZONEE(1,J))
            CALL GETPAI(COMLY2,COMLEN,'SE',2,' ',0,IZONEE(2,J))
 505      CONTINUE
          WRITE(IOUT06,'(1X,A,I4)') 'NUMBER OF BETA SHEETS: ',NZE
          WRITE(IOUT06,511) ((IZONEE(I,J),J=1,NZE),I=1,2)
CKM
          CALL GETPAI(COMLY2,COMLEN,'NZT ',4,' ',0,NZT)
          IF(NZT.GT.20) THEN
            PRINT *,'YOU HAVE TO INCREASE THE SIZE OF ARRAY IZONET'
          ENDIF
          DO 507 J=1,NZT
            CALL GETPAI(COMLY2,COMLEN,'TS',2,' ',0,IZONET(1,J))
            CALL GETPAI(COMLY2,COMLEN,'TE',2,' ',0,IZONET(2,J))
 507      CONTINUE
          WRITE(IOUT06,'(1X,A,I4)') 'NUMBER OF TURNS: ',NZT
          WRITE(IOUT06,511) ((IZONET(I,J),J=1,NZT),I=1,2)
 511      FORMAT(1X,20I4)
CKM
          CALL GETPAI(COMLY2,COMLEN,'IFRMX',5,' ',0,IFRMX)
          WRITE(IOUT06,'(1X,A,I5)') 'IFRMX :',IFRMX
          WRITE(IOUT02,'(1X,A,I5)') 'IFRMX :',IFRMX
          IF(IFRMX.GT.15) THEN
            PRINT *,'YOU HAVE TO INCREASE THE SIZE OF ARRAY FLFRQ'
            STOP
          ENDIF
CKM
C         CALL GETPAI(COMLY2,COMLEN,'NBMOD ',6,' ',0,NBMOD)
C         PRINT *,'NBMOD: ',NBMOD
C         IF(NBMOD.GT.10) THEN
C           PRINT *,'THE MAXIMUM NUMBER OF MODES YOU CAN SELECT IS 10'
C           STOP
C         ENDIF
CKM
          CALL GETPAI(COMLY2,COMLEN,'NBMOD ',6,' ',0,NBMOD)
          DO 509 I=1,NBMOD
            CALL GETPAI(COMLY2,COMLEN,'MODSTR',6,' ',0,MODSTR(I))
 509      CONTINUE
          WRITE(IOUT06,'(1X,20I4)') (MODSTR(I),I=1,NBMOD)
CKM
          CALL GETPAI(COMLY2,COMLEN,'NMOD',4,' ',0,NMOD)
          IF(NMOD.GT.NBMODE) THEN
            PRINT *,'TO MANY MODES SELECTED, THE LIMIT IS: ',NBMODE
            STOP
          ENDIF
          WRITE(IOUT06,'(1X,A,I5)') 'NMOD :',NMOD
          WRITE(IOUT02,'(1X,A,I5)') 'NMOD :',NMOD
        END IF
        GOTO 999
      END IF
C
C-----INPUT OF THE DATA NEEDED
C
CKMEIGEN VECTORS
C     READ(10) EIGVEC
C  EIGENVALUES
C     READ(11) EIGVAL
C     K MATRIX
C     READ(13) I1,I2
C     READ(13) AKX
C     READ(13) AKY
C     READ(13) AKZ
C
C
C-----C O M M A N D   S E C T I O N ------------------------------------
C
      IF (SSTAS.EQ.'COM1') THEN
        WRITE(IOUT02,'(/,5X,A,A,/)') ' NEXT SUBSUBTASK :',
     &        ' FLUCTUATIONS OF PHI, PSI, OMEGA AND KHI'
        WRITE(IOUT06,'(/,5X,A,A,/)') ' NEXT SUBSUBTASK :',
     &        ' FLUCTUATIONS OF PHI, PSI, OMEGA AND KHI'
        CALL GTFLNM(NAME)
        CALL NXTWRD(COMLY2,COMLEN,NXTWD,4)
        FORMA='FORMATTED'
CKM     IF (NXTWD.EQ.'OVER') FORMA='OVERWRITE  '
        CALL OPENWT(IOUT48,FORMA,NAME,IOUT06)
        WRITE(IOUT06,6801) NXTWD,NAME
 6801   FORMAT(5X,A4,' WRITTEN TO ',A60)
        WRITE(IOUT02,6901) NAME
 6901   FORMAT (5X,'WRITTEN TO FILE:',A60)
C
C*****STEP 1: FLUCTUATIONS OF PHI, PSI, OMEGA AND KHI
C
      IK=0
      N1=0
      N2=0
      N3=0
C
      DO 100 IV=1,NUMVAR
C
C  TEST FOR THE ANGLE TYPE: K=1 ==> PHI, K=2 ==> PSI, K=3 ==> OMEGA
      IR=INDXV(IV)/100
      K=INDXV(IV)-100*IR
C
      IF(K.EQ.1) THEN
C
        N1=N1+1
CDIR@ IVDEP
        DO 60 NM=1,NUMVAR
          FLUPHI(IR)=FLUPHI(IR)+RT*(EIGVEC(IV,NM)*DEG)**2/EIGVAL(NM)
 60     CONTINUE
C
      ELSE IF(K.EQ.2) THEN
C
        N2=N2+1
CDIR@ IVDEP
        DO 70 NM=1,NUMVAR
          FLUPSI(IR)=FLUPSI(IR)+RT*(EIGVEC(IV,NM)*DEG)**2/EIGVAL(NM)
 70     CONTINUE
C
      ELSE IF(K.EQ.3) THEN
C
        N3=N3+1
CDIR@ IVDEP
        DO 80 NM=1,NUMVAR
          FLUOME(IR)=FLUOME(IR)+RT*(EIGVEC(IV,NM)*DEG)**2/EIGVAL(NM)
 80     CONTINUE
C
      ELSE
C
        IK=IK+1
CDIR@ IVDEP
        DO 90 NM=1,NUMVAR
          FLUKHI(IK)=FLUKHI(IK)+RT*(EIGVEC(IV,NM)*DEG)**2/EIGVAL(NM)
 90     CONTINUE
C
      ENDIF
C
 100  CONTINUE
C
CKM   WRITE(IOUT48) (FLUPHI(I),I=1,NUMRES),(FLUPSI(I),I=1,NUMRES),
CKM  &              (FLUOME(I),I=1,NUMRES),IK,(FLUKHI(I),I=1,IK)
C
      DO 200 I=1,NUMRES
        WRITE(IOUT48,'(1X,3F10.3)') FLUPHI(I),FLUPSI(I),FLUOME(I)
  200 CONTINUE
      WRITE(IOUT48,'(1X,I5)') IK
      WRITE(IOUT48,'(10F8.3)') (FLUKHI(I),I=1,IK)
C
C-----AVERAGED FLUCTUATIONS
C
      PHIFL=0.0
      PSIFL=0.0
      OMEFL=0.0
      CHIFL=0.0
CDIR@ IVDEP
      DO 210 IR=2,NUMRES-1
        PHIFL=PHIFL+FLUPHI(IR)
        PSIFL=PSIFL+FLUPSI(IR)
        OMEFL=OMEFL+FLUOME(IR)
 210  CONTINUE
      PHIFL=PHIFL/FLOAT(N1)
      PSIFL=PSIFL/FLOAT(N2)
      OMEFL=OMEFL/FLOAT(N3)
C
CDIR@ IVDEP
      DO 220 K=1,IK
        CHIFL=CHIFL+FLUKHI(K)
 220  CONTINUE
      CHIFL=CHIFL/FLOAT(IK)
C
      WRITE(IOUT06,211) PHIFL,PSIFL,OMEFL,CHIFL
      WRITE(IOUT02,211) PHIFL,PSIFL,OMEFL,CHIFL
 211  FORMAT(1X,'AVERAGE MEAN SQUARE FLUCTUATIONS FOR THE PHI:',F6.1/
     + 1X,'AVERAGE MEAN SQUARE FLUCTUATIONS FOR THE PSI:',F6.1/
     + 1X,'AVERAGE MEAN SQUARE FLUCTUATIONS FOR THE OMEGA:',F6.1/
     + 1X,'AVERAGE MEAN SQUARE FLUCTUATIONS FOR THE KHI:',F6.1)
C
        CLOSE (IOUT48)
        GOTO 999
      END IF
C
C*****STEP 2: PEAK FREQUENCY IN THE FLUCTUATIONS OF THE BACKBONE ANGLES
C
      IF (SSTAS.EQ.'COM2') THEN
        WRITE(IOUT02,'(/,5X,A,A,/)') ' NEXT SUBSUBTASK :',
     &     ' PEAK FREQUENCY IN THE FLUCTUATIONS OF THE BACKBONE ANGLES'
        WRITE(IOUT06,'(/,5X,A,A,/)') ' NEXT SUBSUBTASK :',
     &     ' PEAK FREQUENCY IN THE FLUCTUATIONS OF THE BACKBONE ANGLES'
        CALL GTFLNM(NAME)
        CALL NXTWRD(COMLY2,COMLEN,NXTWD,4)
        FORMA='FORMATTED'
CKM     IF (NXTWD.EQ.'OVER') FORMA='OVERWRITE  '
        CALL OPENWT(IOUT50,FORMA,NAME,IOUT06)
        WRITE(IOUT06,7001) NXTWD,NAME
 7001   FORMAT(5X,A4,' WRITTEN TO ',A60)
        WRITE(IOUT02,7101) NAME
 7101   FORMAT (5X,'WRITTEN TO FILE:',A60)
C
      DO 400 IV=1,NUMVAR
C
C  TEST FOR THE ANGLE TYPE: K=1 ==> PHI, K=2 ==> PSI, K=3 ==> OMEGA
      IR=INDXV(IV)/100
      K=INDXV(IV)-100*IR
C
      IF(K.EQ.1) THEN
C
        FLMAX=0.
      IF (NUMVAR .GE. 10) THEN
CDIR@    IVDEP
         DO 360 NM = 1, NUMVAR
            FL1U(NM) = RT*(EIGVEC(IV,NM)*DEG)**2/EIGVAL(NM)
  360    CONTINUE
         DO NM = 1, NUMVAR
            L1V(NM) = FL1U(NM) .GT. FLMAX
            IF (L1V(NM)) FLMAX = FL1U(NM)
         END DO
CDIR@    IVDEP
         DO NM = 1, NUMVAR
            IF (L1V(NM)) NPK11U(NM) = NM
         END DO
         DO NM = 1, NUMVAR
            IF (L1V(NM)) NPK1(IR) = NPK11U(NM)
         END DO
      ELSE
CDIR@    NEXTSCALAR
         DO NM = 1, NUMVAR
            FL = RT*(EIGVEC(IV,NM)*DEG)**2/EIGVAL(NM)
            IF (FL .GT. FLMAX) THEN
               FLMAX = FL
               NPK1(IR) = NM
            ENDIF
         END DO
      ENDIF
C
      ELSE IF(K.EQ.2) THEN
C
        FLMAX=0.
      IF (NUMVAR .GE. 10) THEN
CDIR@    IVDEP
         DO 370 NM = 1, NUMVAR
            FL2U(NM) = RT*(EIGVEC(IV,NM)*DEG)**2/EIGVAL(NM)
  370    CONTINUE
         DO NM = 1, NUMVAR
            L2V(NM) = FL2U(NM) .GT. FLMAX
            IF (L2V(NM)) FLMAX = FL2U(NM)
         END DO
CDIR@    IVDEP
         DO NM = 1, NUMVAR
            IF (L2V(NM)) NPK21U(NM) = NM
         END DO
         DO NM = 1, NUMVAR
            IF (L2V(NM)) NPK2(IR) = NPK21U(NM)
         END DO
      ELSE
CDIR@    NEXTSCALAR
         DO NM = 1, NUMVAR
            FL = RT*(EIGVEC(IV,NM)*DEG)**2/EIGVAL(NM)
            IF (FL .GT. FLMAX) THEN
               FLMAX = FL
               NPK2(IR) = NM
            ENDIF
         END DO
      ENDIF
C
      ELSE IF(K.EQ.3) THEN
C
        FLMAX=0.
      IF (NUMVAR .GE. 10) THEN
CDIR@    IVDEP
         DO 380 NM = 1, NUMVAR
            FL3U(NM) = RT*(EIGVEC(IV,NM)*DEG)**2/EIGVAL(NM)
  380    CONTINUE
         DO NM = 1, NUMVAR
            L3V(NM) = FL3U(NM) .GT. FLMAX
            IF (L3V(NM)) FLMAX = FL3U(NM)
         END DO
CDIR@    IVDEP
         DO NM = 1, NUMVAR
            IF (L3V(NM)) NPK31U(NM) = NM
         END DO
         DO NM = 1, NUMVAR
            IF (L3V(NM)) NPK3(IR) = NPK31U(NM)
         END DO
      ELSE
CDIR@    NEXTSCALAR
         DO NM = 1, NUMVAR
            FL = RT*(EIGVEC(IV,NM)*DEG)**2/EIGVAL(NM)
            IF (FL .GT. FLMAX) THEN
               FLMAX = FL
               NPK3(IR) = NM
            ENDIF
         END DO
      ENDIF
C
      ENDIF
C
 400  CONTINUE
C
      DO 420 I=1,NUMRES
        WRITE(IOUT50,'(1X,3I8)') NPK1(I),NPK2(I),NPK3(I)
 420  CONTINUE
CKM   WRITE(IOUT50) (NPK1(I),I=1,NUMRES),(NPK2(I),I=1,NUMRES),
CKM  &              (NPK3(I),I=1,NUMRES)
CKM   WRITE(IOUT50) NPK1,NPK2,NPK3
C
        CLOSE (IOUT50)
        GOTO 999
      END IF
C
C*****STEP 3: CONTRIBUTION OF FREQUENCIES BELOW A GIVEN THRESHOLD TO
C     THE MEAN SQUARE FLUCTUATIONS OF CA
C
      IF (SSTAS.EQ.'COM3') THEN
        WRITE(IOUT02,'(/,5X,A,A,/)') ' NEXT SUBSUBTASK :',
     &     ' M.S. FLUCTUATIONS OF CA BY FREQ. BELOW A THRESHOLD VALUE'
        WRITE(IOUT06,'(/,5X,A,A,/)') ' NEXT SUBSUBTASK :',
     &     ' M.S. FLUCTUATIONS OF CA BY FREQ. BELOW A THRESHOLD VALUE'
        CALL GTFLNM(NAME)
        CALL NXTWRD(COMLY2,COMLEN,NXTWD,4)
        FORMA='FORMATTED'
CKM     IF (NXTWD.EQ.'OVER') FORMA='OVERWRITE  '
        CALL OPENWT(IOUT52,FORMA,NAME,IOUT06)
        WRITE(IOUT06,7002) NXTWD,NAME
 7002   FORMAT(5X,A4,' WRITTEN TO ',A60)
        WRITE(IOUT02,7102) NAME
 7102   FORMAT (5X,'WRITTEN TO FILE:',A60)
C
      WRITE(IOUT06,'(1X,A,F7.2,A)') 'THRESHOLD :',THRESH,' CM-1'
      WRITE(IOUT02,'(1X,A,F7.2,A)') 'THRESHOLD :',THRESH,' CM-1'
C
      IR=1
      FACT=DSQRT(4.184D0)/(2.997925D0*PI*2.D0)*1.D+3
C
      DO 500 IAT=1,NUMATM
C
C READ IN KV-MATRIX
C
      READ(IN47) (AKVX(I),I=1,NUMVAR),(AKVY(I),I=1,NUMVAR),
     &           (AKVZ(I),I=1,NUMVAR)
C
      IF(ATNAME(IAT).EQ.'CA') THEN
         IR=IR+1
C  LOOP ON THE MODES
      IF (NUMVAR .GE. 10) THEN
CDIR@    IVDEP
         DO 490 NM = 1, NUMVAR
            IF (SNGL(FACT*DSQRT(EIGVAL(NM))) .LT. THRESH) THEN
               IND11U(NM) = 1
            ELSE
               IND11U(NM) = 2
            ENDIF
C
            SCAL1U(NM) = AKVX(NM)*AKVX(NM) + AKVY(NM)*AKVY(NM) + AKVZ(NM
     1         )*AKVZ(NM)
  490    CONTINUE
         DO NM = 1, NUMVAR
            FLUCA(IND11U(NM),IR) = FLUCA(IND11U(NM),IR) + SCAL1U(NM)/
     1         EIGVAL(NM)
         END DO
      ELSE
CDIR@    NEXTSCALAR
         DO NM = 1, NUMVAR
            ETMP = FACT*DSQRT(EIGVAL(NM))
            IF (ETMP .LT. THRESH) THEN
               IND1 = 1
            ELSE
               IND1 = 2
            ENDIF
            SCAL=AKVX(NM)*AKVX(NM)+AKVY(NM)*AKVY(NM)+AKVZ(NM)*AKVZ(NM)
            FLTERM = SCAL/EIGVAL(NM)
            FLUCA(IND1,IR) = FLUCA(IND1,IR) + FLTERM
         END DO
      ENDIF
C
         FLUCA(1,IR)=FLUCA(1,IR)*RT
         FLUCA(2,IR)=FLUCA(2,IR)*RT
      ENDIF
C
 500  CONTINUE
C
      DO 510 I=1,NUMRES
        WRITE(IOUT52,'(1X,2F10.4)') FLUCA(1,I),FLUCA(2,I)
 510  CONTINUE
CKM   WRITE(IOUT52) FLUCA
CKM   WRITE(IOUT52) ((FLUCA(J,I),J=1,2),I=1,NUMRES)
C
      CAFL=0.
CDIR@ IVDEP
      DO 497 IR = 1, 2*NUMRES - 4
         CAFL = CAFL + FLUCA(IR,2)
  497 CONTINUE
C
      CAFL=CAFL/FLOAT(NUMRES-2)
      WRITE(IOUT06,499) CAFL
      WRITE(IOUT02,499) CAFL
 499  FORMAT(1X,'AVERAGE MEAN SQUARE FLUCTUATIONS FOR THE CA:',F5.2)
C
        REWIND IN47
        CLOSE (IOUT52)
        GOTO 999
      END IF
C
C*****STEP 4: CHARACTERISTIC NORMAL MODES OF SECONDARY STRUCTURES
C
      IF (SSTAS.EQ.'COM4') THEN
        WRITE(IOUT02,'(/,5X,A,A,/)') ' NEXT SUBSUBTASK :',
     &     ' CHARACTERISTIC NORMAL MODES OF SECONDARY STRUCTURES '
        WRITE(IOUT06,'(/,5X,A,A,/)') ' NEXT SUBSUBTASK :',
     &     ' CHARACTERISTIC NORMAL MODES OF SECONDARY STRUCTURES '
        CALL GTFLNM(NAME)
        CALL NXTWRD(COMLY2,COMLEN,NXTWD,4)
        FORMA='FORMATTED'
CKM     IF (NXTWD.EQ.'OVER') FORMA='OVERWRITE  '
        CALL OPENWT(IOUT54,FORMA,NAME,IOUT06)
        WRITE(IOUT06,7003) NXTWD,NAME
 7003   FORMAT(5X,A4,' WRITTEN TO ',A60)
        WRITE(IOUT02,7103) NAME
 7103   FORMAT (5X,'WRITTEN TO FILE:',A60)
CKM   READ(5,*) NZH
C     IF(NZH.GT.20) THEN
C        PRINT *,'YOU HAVE TO INCREASE THE SIZE OF ARRAY IZONEH'
C     ENDIF
C     DO 503 I=1,2
C503  READ(5,'(20I4)') (IZONEH(I,J),J=1,NZH)
C     PRINT *,'NUMBER OF HELICES: ',NZH
C     WRITE(IOUT06,511) ((IZONEH(I,J),J=1,NZH),I=1,2)
C     READ(5,*) NZE
C     IF(NZE.GT.20) THEN
C        PRINT *,'YOU HAVE TO INCREASE THE SIZE OF ARRAY IZONEE'
C     ENDIF
C     DO 505 I=1,2
C505  READ(5,'(20I4)') (IZONEE(I,J),J=1,NZE)
C     PRINT *,'NUMBER OF BETA SHEETS: ',NZE
C     WRITE(IOUT06,511) ((IZONEE(I,J),J=1,NZE),I=1,2)
C     READ(5,*) NZT
C     IF(NZT.GT.20) THEN
C        PRINT *,'YOU HAVE TO INCREASE THE SIZE OF ARRAY IZONET'
C     ENDIF
C     DO 507 I=1,2
C507  READ(5,'(20I4)') (IZONET(I,J),J=1,NZT)
C     PRINT *,'NUMBER OF TURNS: ',NZT
C     WRITE(IOUT06,511) ((IZONET(I,J),J=1,NZT),I=1,2)
C511  FORMAT(1X,20I4)
C
      DO 600 IV=1,NUMVAR
C
C  TEST FOR THE ANGLE TYPE: K=1 ==> PHI, K=2 ==> PSI, K=3 ==> OMEGA
      IR=INDXV(IV)/100
      K=INDXV(IV)-100*IR
C
      IF(K.EQ.1.OR.K.EQ.2.OR.K.EQ.3) THEN
CDIR@ IVDEP
         DO 550 NM=1,NUMVAR
           FLCM(NM)=FLCM(NM)+RT*(EIGVEC(IV,NM)*DEG)**2/EIGVAL(NM)
 550     CONTINUE
C
         DO 560 LH=1,NZH
           I1=IZONEH(1,LH)
           I2=IZONEH(2,LH)
           IF(IR.GE.I1.AND.IR.LE.I2) THEN
CDIR@ IVDEP
             DO 555 NM=1,NUMVAR
             FLCMH(NM)=FLCMH(NM)+RT*(EIGVEC(IV,NM)*DEG)**2/EIGVAL(NM)
 555         CONTINUE
           ENDIF
 560     CONTINUE
C
         DO 570 LH=1,NZE
           I1=IZONEE(1,LH)
           I2=IZONEE(2,LH)
           IF(IR.GE.I1.AND.IR.LE.I2) THEN
CDIR@ IVDEP
             DO 565 NM=1,NUMVAR
             FLCME(NM)=FLCME(NM)+RT*(EIGVEC(IV,NM)*DEG)**2/EIGVAL(NM)
 565         CONTINUE
           ENDIF
 570     CONTINUE
C
         DO 580 LH=1,NZT
           I1=IZONET(1,LH)
           I2=IZONET(2,LH)
           IF(IR.GE.I1.AND.IR.LE.I2) THEN
CDIR@ IVDEP
             DO 575 NM=1,NUMVAR
             FLCMT(NM)=FLCMT(NM)+RT*(EIGVEC(IV,NM)*DEG)**2/EIGVAL(NM)
 575         CONTINUE
           ENDIF
 580     CONTINUE
C
      ENDIF
C
 600  CONTINUE
C
CDIR@ IVDEP
      DO 610 NM=1,NUMVAR
        FLCMH(NM)=FLCMH(NM)/FLCM(NM)
        FLCME(NM)=FLCME(NM)/FLCM(NM)
        FLCMT(NM)=FLCMT(NM)/FLCM(NM)
 610  CONTINUE
C
      DO 620 I=1,NUMVAR
        WRITE(IOUT54,'(3F10.3)') FLCM(I),FLCMH(I),FLCME(I),FLCMT(I)
 620  CONTINUE
CKM   WRITE(IOUT54) (FLCM(I),I=1,NUMVAR),(FLCMH(I),I=1,NUMVAR),
CKM  &              (FLCME(I),I=1,NUMVAR),(FLCMT(I),I=1,NUMVAR)
CKM   WRITE(IOUT54) FLCM,FLCMH,FLCME,FLCMT
C
        CLOSE (IOUT54)
        GOTO 999
      END IF
C
C*****STEP 5: INFLUENCE OF THE LOW FREQUENCIES ABOUT THE MSD OF CA
C
      IF (SSTAS.EQ.'COM5') THEN
        WRITE(IOUT02,'(/,5X,A,A,/)') ' NEXT SUBSUBTASK :',
     &     ' M.S. FLUCTUATIONS OF CA BY LOW FREQUENCY MODES '
        WRITE(IOUT06,'(/,5X,A,A,/)') ' NEXT SUBSUBTASK :',
     &     ' M.S. FLUCTUATIONS OF CA BY LOW FREQUENCY MODES '
        CALL GTFLNM(NAME)
        CALL NXTWRD(COMLY2,COMLEN,NXTWD,4)
        FORMA='FORMATTED'
CKM     IF (NXTWD.EQ.'OVER') FORMA='OVERWRITE  '
        CALL OPENWT(IOUT56,FORMA,NAME,IOUT06)
        WRITE(IOUT06,7004) NXTWD,NAME
 7004   FORMAT(5X,A4,' WRITTEN TO ',A60)
        WRITE(IOUT02,7104) NAME
 7104   FORMAT (5X,'WRITTEN TO FILE:',A60)
CKM   READ(5,*) IFRMX
C     PRINT *,'IFRMX: ',IFRMX
C     IF(IFRMX.GT.15) THEN
C        PRINT *,'YOU HAVE TO INCREASE THE SIZE OF ARRAY FLFRQ'
C        STOP
C     ENDIF
      IR=1
C
      DO 700 IAT=1,NUMATM
C
C READ IN KV-MATRIX
C
      READ(IN47) (AKVX(I),I=1,NUMVAR),(AKVY(I),I=1,NUMVAR),
     &           (AKVZ(I),I=1,NUMVAR)
C
      IF(ATNAME(IAT).EQ.'CA') THEN
         IR=IR+1
C
C  LOOP ON THE FIRST IFRMX MODES
C
CDIR@ IVDEP
         DO 690 NM=1,IFRMX
C
           SCAL=AKVX(NM)*AKVX(NM)+AKVY(NM)*AKVY(NM)+
     1          AKVZ(NM)*AKVZ(NM)
           FLTERM=SCAL/EIGVAL(NM)*RT
           FLFRQ(IR,NM)=FLFRQ(IR,NM)+FLTERM
 690     CONTINUE
      ENDIF
C
 700  CONTINUE
C
      WRITE(IOUT56,*) IFRMX
      DO 710 I=1,NUMRES
        WRITE(IOUT56,'(10F8.4)') (FLFRQ(I,J),J=1,IFRMX)
 710  CONTINUE
CKM   WRITE(IOUT56) IFRMX,FLFRQ
CKM   WRITE(IOUT56) IFRMX,((FLFRQ(I,J),I=1,NUMRES),J=1,15)
C
        REWIND IN47
        CLOSE (IOUT56)
        GOTO 999
      END IF
C
C*****STEP 6: AVERAGE M.S. FLUCT. FOR CA AND SINGLE BOND TORSION ANGLES
C             AS A FUNCTION OF NORMAL MODE FREQUENCIES.
      IF (SSTAS.EQ.'COM6') THEN
        WRITE(IOUT02,'(/,5X,A,A,/)') ' NEXT SUBSUBTASK :',
     &     ' M.S. FLUCTUATIONS AS A FUNCTION OF NORMAL MODES '
        WRITE(IOUT06,'(/,5X,A,A,/)') ' NEXT SUBSUBTASK :',
     &     ' M.S. FLUCTUATIONS AS A FUNCTION OF NORMAL MODES '
        CALL GTFLNM(NAME)
        CALL NXTWRD(COMLY2,COMLEN,NXTWD,4)
        FORMA='FORMATTED'
CKM     IF (NXTWD.EQ.'OVER') FORMA='OVERWRITE  '
        CALL OPENWT(IOUT58,FORMA,NAME,IOUT06)
        WRITE(IOUT06,7005) NXTWD,NAME
 7005   FORMAT(5X,A4,' WRITTEN TO ',A60)
        WRITE(IOUT02,7105) NAME
 7105   FORMAT (5X,'WRITTEN TO FILE:',A60)
C
C  LOOP ON ATOMS
      DO 790 IAT=1,NUMATM
C
C READ IN KV-MATRIX
C
        READ(IN47) (AKVX(I),I=1,NUMVAR),(AKVY(I),I=1,NUMVAR),
     &             (AKVZ(I),I=1,NUMVAR)
        IF(ATNAME(IAT).EQ.'CA') THEN
C  LOOP ON THE MODES
CDIR@ IVDEP
          DO 800 NM=1,NUMVAR
C
           SCAL=AKVX(NM)*AKVX(NM)+AKVY(NM)*AKVY(NM)+
     1          AKVZ(NM)*AKVZ(NM)
           FLTERM=SCAL/EIGVAL(NM)*RT
           ACAFRQ(NM)=ACAFRQ(NM)+FLTERM
C
 800      CONTINUE
        ENDIF
C
 790  CONTINUE
C
      FLIR=FLOAT(NUMRES-2)
CDIR@ IVDEP
      DO 801 NM=1,NUMVAR
        ACAFRQ(NM)=ACAFRQ(NM)/FLIR
 801  CONTINUE
C
      DO 810 IV = 1, NUMVAR
CDIR@    IVDEP
         DO NM = 1, NUMVAR
            AANFRQ(NM)=AANFRQ(NM)+RT*(EIGVEC(IV,NM)*DEG)**2/EIGVAL(NM)
         END DO
  810 CONTINUE
C
      FLNVAR=FLOAT(NUMVAR)
CDIR@ IVDEP
      DO 811 NM=1,NUMVAR
        AANFRQ(NM)=AANFRQ(NM)/FLNVAR
 811  CONTINUE
C
      DO 820 I=1,NUMVAR
        WRITE(IOUT58,'(F10.4,F10.3)') ACAFRQ(I),AANFRQ(I)
 820  CONTINUE
CKM   WRITE(IOUT58) ACAFRQ,AANFRQ
CKM   WRITE(IOUT58) (ACAFRQ(I),I=1,NUMVAR),(AANFRQ(I),I=1,NUMVAR)
C
        REWIND IN47
        CLOSE (IOUT58)
        GOTO 999
      END IF
C
C****STEP 7: DISPLACEMENT VECTORS OF ATOMS
C
      IF (SSTAS.EQ.'COM7') THEN
        WRITE(IOUT02,'(/,5X,A,A,/)') ' NEXT SUBSUBTASK :',
     &     ' DISPLACEMENT VECTORS OF AOTMS '
        WRITE(IOUT06,'(/,5X,A,A,/)') ' NEXT SUBSUBTASK :',
     &     ' DISPLACEMENT VECTORS OF AOTMS '
        CALL GTFLNM(NAME)
        CALL NXTWRD(COMLY2,COMLEN,NXTWD,4)
        FORMA='UNFORMATTED'
        IF (NXTWD.EQ.'OVER') FORMA='OVERWRITE  '
        CALL OPENWT(IOUT60,FORMA,NAME,IOUT06)
        WRITE(IOUT06,7006) NXTWD,NAME
 7006   FORMAT(5X,A4,' WRITTEN TO ',A60)
        WRITE(IOUT02,7106) NAME
 7106   FORMAT (5X,'WRITTEN TO FILE:',A60)
CKM   READ(5,*) NBMOD
C     PRINT *,'NBMOD: ',NBMOD
C     IF(NBMOD.GT.10) THEN
C        PRINT *,'THE MAXIMUM NUMBER OF MODES YOU CAN SELECT IS 10'
C        STOP
C     ENDIF
C     READ(5,*) (MODSTR(I),I=1,NBMOD)
C     WRITE(IOUT06,'(1X,20I4)') (MODSTR(I),I=1,NBMOD)
C
      DO 900 IT=1,NBMOD
      NM=MODSTR(IT)
      FCT=DSQRT(RT/EIGVAL(NM))
C
      DO 890 IAT=1,NUMATM
C
C READ IN KV-MATRIX
C
         READ(IN47) (AKVX(I),I=1,NUMVAR),(AKVY(I),I=1,NUMVAR),
     &              (AKVZ(I),I=1,NUMVAR)
C
           DX(IAT,IT)=AKVX(IT)*FCT
           DY(IAT,IT)=AKVY(IT)*FCT
           DZ(IAT,IT)=AKVZ(IT)*FCT
C
 890  CONTINUE
C
 900  CONTINUE
C
CKM   WRITE(IOUT60) DX,DY,DZ
      WRITE(IOUT60) ((DX(I,J),I=1,NUMATM),J=1,NBMOD),
     &              ((DY(I,J),I=1,NUMATM),J=1,NBMOD),
     &              ((DY(I,J),I=1,NUMATM),J=1,NBMOD)
        REWIND IN47
        CLOSE (IOUT60)
        GOTO 999
      END IF
C
C****STEP 8: CONTRIBUTIONS OF THE LOW FREQUENCY MODES TO M. S. FLUCT.
C            OF PHI, PSI AND OMEGA ANGLES
C
      IF (SSTAS.EQ.'COM8') THEN
        WRITE(IOUT02,'(/,5X,A,A,/)') ' NEXT SUBSUBTASK :',
     &     ' M.S. FLUCTUATIONS OF D.A. BY LOW FREQUENCY MODES '
        WRITE(IOUT06,'(/,5X,A,A,/)') ' NEXT SUBSUBTASK :',
     &     ' M.S. FLUCTUATIONS OF D.A. BY LOW FREQUENCY MODES '
        CALL GTFLNM(NAME)
        CALL NXTWRD(COMLY2,COMLEN,NXTWD,4)
        FORMA='FORMATTED'
CKM     IF (NXTWD.EQ.'OVER') FORMA='OVERWRITE  '
        CALL OPENWT(IOUT62,FORMA,NAME,IOUT06)
        WRITE(IOUT06,7007) NXTWD,NAME
 7007   FORMAT(5X,A4,' WRITTEN TO ',A60)
        WRITE(IOUT02,7107) NAME
 7107   FORMAT (5X,'WRITTEN TO FILE:',A60)
CKM   READ(5,*) NMOD
C     IF(NMOD.GT.NBMODE) THEN
C         PRINT *,'TO MANY MODES SELECTED, THE LIMIT IS: ',NBMODE
C         STOP
C     ENDIF
      DO 990 IV=1,NUMVAR
        IR=INDXV(IV)/100
        K=INDXV(IV)-100*IR
C
        IF(K.EQ.1)THEN
CDIR@ IVDEP
           DO 920 NM=1,NMOD
           PHINM(IR,NM)=RT*(EIGVEC(IV,NM)*DEG)**2/EIGVAL(NM)
 920       CONTINUE
        ELSE IF(K.EQ.2) THEN
CDIR@ IVDEP
           DO 930 NM=1,NMOD
           PSINM(IR,NM)=RT*(EIGVEC(IV,NM)*DEG)**2/EIGVAL(NM)
 930       CONTINUE
        ELSE IF(K.EQ.3) THEN
CDIR@ IVDEP
           DO 940 NM=1,NMOD
           OMENM(IR,NM)=RT*(EIGVEC(IV,NM)*DEG)**2/EIGVAL(NM)
 940       CONTINUE
        ENDIF
C
 990  CONTINUE
C
      DO 1004 I=1,NMOD
        DO 1005 J=1,NUMRES
          WRITE(IOUT62,'(1X,3F10.3)') PHINM(J,I),PSINM(J,I),OMENM(J,I)
 1005   CONTINUE
        WRITE(IOUT62,'(/)')
 1004 CONTINUE
CKM   WRITE(IOUT62) ((PHINM(J,I),J=1,NUMRES),I=1,NBMOD)
CKM   WRITE(IOUT62) ((PSINM(J,I),J=1,NUMRES),I=1,NBMOD)
CKM   WRITE(IOUT62) ((OMENM(J,I),J=1,NUMRES),I=1,NBMOD)
CKM   WRITE(IOUT62) PHINM,PSINM,OMENM
C
        CLOSE (IOUT62)
        GOTO 999
      END IF
C
C*****STEP 9: M.S. FLUCTUATIONS OF N, CA, CB, C, O ATOMS FOR COMPARISON
C             WITH TEMPERATURE B FACTORS (STERNBERG ET AL.)
C
      IF (SSTAS.EQ.'COM9') THEN
        WRITE(IOUT02,'(/,5X,A,A,/)') ' NEXT SUBSUBTASK :',
     &        ' M.S. FLUCTUATIONS OF N, CA, CB, C, O ATOMS '
        WRITE(IOUT06,'(/,5X,A,A,/)') ' NEXT SUBSUBTASK :',
     &        ' M.S. FLUCTUATIONS OF N, CA, CB, C, O ATOMS '
        CALL GTFLNM(NAME)
        CALL NXTWRD(COMLY2,COMLEN,NXTWD,4)
        FORMA='FORMATTED'
CKM     IF (NXTWD.EQ.'OVER') FORMA='OVERWRITE  '
        CALL OPENWT(IOUT64,FORMA,NAME,IOUT06)
        WRITE(IOUT06,7008) NXTWD,NAME
 7008   FORMAT(5X,A4,' WRITTEN TO ',A60)
        WRITE(IOUT02,7108) NAME
 7108   FORMAT (5X,'WRITTEN TO FILE:',A60)
C
      IR=1
CKM   IR=0
      DO 1080 IAT=1,NUMATM
C
C READ IN KV-MATRIX
C
        READ(IN47) (AKVX(I),I=1,NUMVAR),(AKVY(I),I=1,NUMVAR),
     &             (AKVZ(I),I=1,NUMVAR)
        IF(ATNAME(IAT).EQ.'N ') IR=IR+1
        IF(ATNAME(IAT).EQ.'N '.OR.ATNAME(IAT).EQ.'CA'.OR.
     +     ATNAME(IAT).EQ.'CB'.OR.ATNAME(IAT).EQ.'C '.OR.
     +     ATNAME(IAT).EQ.'O ') THEN
CKM     IF(ATOM(IAT).EQ.'N '.OR.ATOM(IAT).EQ.'CA'.OR.ATOM(IAT).EQ.'CB'
C    +     .OR.ATOM(IAT).EQ.'C '.OR.ATOM(IAT).EQ.'O ') THEN
C  LOOP ON THE MODES
CDIR@ IVDEP
           DO 1070 NM=1,NUMVAR
C
             SCAL=AKVX(NM)*AKVX(NM)+AKVY(NM)*AKVY(NM)+
     1            AKVZ(NM)*AKVZ(NM)
             FLTERM=SCAL/EIGVAL(NM)
             BFACTR(IR)=BFACTR(IR)+FLTERM
 1070      CONTINUE
        ENDIF
 1080 CONTINUE
C
CDIR@ IVDEP
      DO 1085 IR=1,NUMRES
        BFACTR(IR)=BFACTR(IR)/5.D0*RT
 1085 CONTINUE
C
      DO 1200 I=1,NUMRES
        WRITE(IOUT64,'(1X,F10.4)') BFACTR(I)
 1200 CONTINUE
CKM   WRITE(IOUT64) BFACTR
CKM   WRITE(IOUT64) (BFACTR(I),I=1,NUMRES)
C
        REWIND IN47
        CLOSE (IOUT64)
        GOTO 999
      END IF
C
 1090 IF (IKMAT.EQ.1) THEN
        CLOSE (IN45)
      END IF
      IF (IKVMAT.EQ.1) THEN
        CLOSE (IN47)
      END IF
C
      RETURN
      END
C-----------------------------------------------------------------------
      SUBROUTINE RDPREC(IIN)
C-----------------------------------------------------------------------
C  INFORMATION ABOUT THE MOLECULE
      IMPLICIT REAL*8(A-H,O-Z)
CMSP  INCLUDE (MAXSIZE)
C MAXSIZE
C     MAXSIZE DEFINES MAXIMUM ARRAY SIZE
C
      PARAMETER(MAXATM=2050,MAXVAR=800,MAXRES=150,MAXSS=10,
     >          MXRS1=MAXRES+1,MXRS10=10*MAXRES,MAXLEN=6000,
     >          MAXDBL=1000,MAXDP=700,MAXDPL=MAXATM+MAXDBL/2,
     >          MAXDP2=MAXDP*2,MXPAIR=MAXVAR*(MAXVAR+1)/2,
     >          MXPAR1=(MAXVAR+1)*(MAXVAR+2)/2,MAXPER=16000,
     >          MAXCNS=900,MAXJ=2*MAXVAR,MAXSS2=MAXSS*2,
     >          MAXINT=40000,MAXI1=MAXINT/2,MAXI2=MAXINT-MAXI1,
     >          MXATM1=MAXATM+1,MVAR1=MAXVAR+1,
     >          MWORK=100000,MIWORK=100000,MCHWOR=100000)
C
C  MAXAT:  MAXIMUM NUMBER OF ATOMS IN A PROTEIN
C  MAXVAR: MAXMUM NUMBER OF DIHEDRAL ANGLE VARIABLES
C  MAXRS:  MAXMUM NUMBER OF RESIDUES
C  MAXSS:  MAXMUM NUMBER OF S-S CROSSLINK
C  MXRS1:  MAXRS+1
C  MXRS10: MAXRS*10
C  MAXLEN: ARRAY SIZE OF INTER IN PREP IN PRECEP ?
C  MAXDBL: MAXMUM NUMBER OF DIPOLES (?)
C  MWORK:  MAXIMUM SIZE OF REAL WORK ARRAY
C  MIWORK: MAXIMUM SIZE OF INTEGER WORK ARRAY
C  MCWORK: MAXIMUM SIZE OF CHARACTER WORK ARRAY
CMSP  INCLUDE (SIZE)
C SIZE
C  THIS COMMON BLOCK STORES THE NUMBERS RELATED TO PROTEIN SIZE
C
      COMMON/SIZE/NUMATM,NUMVAR,NN2,NUMINT,NSS,NUMRES
      COMMON/SIZE1/NATM1,NVAR1,NPAIR1
C
C  NUMATM:   NUMBER OF ATOMS IN A PROTEIN
C  NUMVAR:   NUMBER OF (DIHEDRAL) ANGLE VARIABLES
C  NN2:      NUMVAR*(NUMVAR+1)/2
C  NUMINT:     ?
C  NSS:      NUMBER OF S-S CROSSLINK (?)
C  NUMRES:   NUMBER OF RESIDUES
C  NATM1=NUMATM+1
C  NVAR1=NUMVAR+1
C  NPAIR1=(NUMVAR+1)*(NUMVAR+2)/2
CMSP  INCLUDE (ATOM)
C ATOM
C
      COMMON/ATOM00/KUNIT(MAXATM),KATOM(MXATM1),JATOM(MAXATM)
      COMMON/ATOM01/LATOM0(0:MAXVAR),LATOM1(MAXATM)
C
C  KUNIT:  UNIT NUMBER WHICH THE ATOM BELONGS TO.
C  KATOM:  SEQUENTIAL NUMBER OF THE ATOM IN WAKO ORDER.
C  JATOM:  SEQUENTIAL NUMBER OF THE ATOM IN ECEPP ORDER.
C   EXAMPLE:
C   ECEPP  WAKO         WAKO     ECEPP
C    1    KATOM(1)       1      JATOM(1)
C    2    KATOM(2)       2      JATOM(2)
C    3    KATOM(3)       3      JATOM(3)
C    .      .            .        .
C    .      .            .        .
C
C  LATOM0:
C  LATOM1:
C
CKM        KUNIT(MAXATM),KATOM(MXATM1)
CMSP  INCLUDE (NBTYPE)
C NBTYPE
C
      COMMON/NBTYPE/NBTYPE(MAXATM)
C
C  NBTYPE:   ATOM TYPE  (ECEPP ORDER)
C
CKM        NBTYPE(MAXATM)
CMSP  INCLUDE (VARANG)
C VARANG
C
      COMMON/VARANG/ANGRAD(10,MAXRES),VAR(MAXVAR),INDXV(MAXVAR),
     >              ANGLES(10,MAXRES)
C
C  ANGRAD :  DIHEDRAL ANGLES IN ECCEP ORDER (RADIAN)
C  VAR:    DIHEDRAL ANGLES IN WAKO ORDER (RADIAN)
C  INDXV : INDVX=NNN*100+MMM (MMM:1-10)
C            NNN: RESIDUE NUMBER
C            MMM: DIHEDRAL ANGLE NUMBER IN THE RESIDUE(NNN) IN ECEPP
C                 ORDER
C  ANGLES: DIHEDRAL ANGLES IN ECEPP ORDER (DEGREE)
C          USED AS THE WORK]]
CKM        ANGRAD(10,MAXRES),VAR(MAXVAR),INDXV(MAXVAR),ANGLES(10,MAXRES)
CMSP  INCLUDE (ALPHA)
C ALPHA
C
      CHARACTER*4  ATNAME,RENAME
      CHARACTER*80 TITLE
      COMMON/ALPHA1/ATNAME(MAXATM),RENAME(MAXATM)
      COMMON/ALPHA2/NMBRES(MAXATM)
      COMMON/TITLE/TITLE
C
C  ATNAME:   ATOM NAMES (ECEPP ORDER)
C  RENAME :   RESIDUE NAMES (ECEPP ORDER)
C  NMBRES :   RESIDUE NUMBER (NORMAL NUMBERING)
C  TITLE  :   TITLE OF PRECEP
C
CKM        ATNAME(MAXATM),RENAME(MAXATM),NMBRES(MAXATM),TITLE
C     DIMENSION INDXV(MAXVAR),JBTYPE(MAXATM),LUNIT(MAXATM),KATOM(MAXATM)
C     DIMENSION NBTYPE(MAXATM),KUNIT(MAXATM)
      DIMENSION JBTYPE(MAXATM),LUNIT(MAXATM)
C     CHARACTER TITLE*80,DUMMY*80,ATOM(MAXATM)*2,ATWK(MAXATM)*2
      CHARACTER DUMMY*80,ATWK(MAXATM)*2
C
      READ(IIN,'(A80)') TITLE
      READ(IIN,'(5I5)') NUMATM,NUMVAR,NUMRES,NUMINT,NSS
C
      DO 10 I=1,NUMRES
        READ(IIN,'(A80)') DUMMY
 10   CONTINUE
C
      READ(IIN,'(A80)') DUMMY
C
      DO 20 I=1,NUMVAR
        READ(IIN,'(I4,I2)') INDXV1,INDXV2
        INDXV(I)=100*INDXV1+INDXV2
 20   CONTINUE
CKM   DO 20 I=1,NUMVAR
C       READ(IIN,'(I6)') INDXV(I)
C20   CONTINUE
C
      DO 30 I=1,NUMATM
        READ(IIN,'(44X,3I5,7X,A2)') JBTYPE(I),LUNIT(I),KATOM(I),ATWK(I)
 30   CONTINUE
C
C  REARRANGEMENT OF THE ATOMS ORDER
C
      DO 31 I=1,NUMATM
       J=KATOM(I)
        KUNIT(J)=LUNIT(I)
        NBTYPE(J)=JBTYPE(I)
        ATNAME(J)=ATWK(I)
 31   CONTINUE
C
      RETURN
      END
C-----------------------------------------------------------------------
      SUBROUTINE PUTKV(IOUT)
C-----------------------------------------------------------------------
      IMPLICIT REAL*8(A-H,O-Z)
CMSP  INCLUDE (MAXSIZE)
      PARAMETER(MAXATM=2050,MAXVAR=800,MAXRES=150,MAXSS=10,
     >          MXRS1=MAXRES+1,MXRS10=10*MAXRES,MAXLEN=6000,
     >          MAXDBL=1000,MAXDP=700,MAXDPL=MAXATM+MAXDBL/2,
     >          MAXDP2=MAXDP*2,MXPAIR=MAXVAR*(MAXVAR+1)/2,
     >          MXPAR1=(MAXVAR+1)*(MAXVAR+2)/2,MAXPER=16000,
     >          MAXCNS=900,MAXJ=2*MAXVAR,MAXSS2=MAXSS*2,
     >          MAXINT=40000,MAXI1=MAXINT/2,MAXI2=MAXINT-MAXI1,
     >          MXATM1=MAXATM+1,MVAR1=MAXVAR+1,
     >          MWORK=100000,MIWORK=100000,MCHWOR=100000)
C
C  MAXAT:  MAXIMUM NUMBER OF ATOMS IN A PROTEIN
C  MAXVAR: MAXMUM NUMBER OF DIHEDRAL ANGLE VARIABLES
C  MAXRS:  MAXMUM NUMBER OF RESIDUES
C  MAXSS:  MAXMUM NUMBER OF S-S CROSSLINK
C  MXRS1:  MAXRS+1
C  MXRS10: MAXRS*10
C  MAXLEN: ARRAY SIZE OF INTER IN PREP IN PRECEP ?
C  MAXDBL: MAXMUM NUMBER OF DIPOLES (?)
C  MWORK:  MAXIMUM SIZE OF REAL WORK ARRAY
C  MIWORK: MAXIMUM SIZE OF INTEGER WORK ARRAY
C  MCWORK: MAXIMUM SIZE OF CHARACTER WORK ARRAY
CMSP  INCLUDE (SIZE)
C...Translated by FPP 6.0 (3.06G3) 02/26/96  10:11:01   -dc
C SIZE
C  THIS COMMON BLOCK STORES THE NUMBERS RELATED TO PROTEIN SIZE
C
      COMMON/SIZE/NUMATM,NUMVAR,NN2,NUMINT,NSS,NUMRES
      COMMON/SIZE1/NATM1,NVAR1,NPAIR1
C
C  NUMATM:   NUMBER OF ATOMS IN A PROTEIN
C  NUMVAR:   NUMBER OF (DIHEDRAL) ANGLE VARIABLES
C  NN2:      NUMVAR*(NUMVAR+1)/2
C  NUMINT:     ?
C  NSS:      NUMBER OF S-S CROSSLINK (?)
C  NUMRES:   NUMBER OF RESIDUES
C  NATM1=NUMATM+1
C  NVAR1=NUMVAR+1
C  NPAIR1=(NUMVAR+1)*(NUMVAR+2)/2
CMSP  INCLUDE (EIGEN)
C EIGEN
        COMMON/EIGEN/ EIGVAL(MAXVAR),EIGVEC(MAXVAR,MAXVAR)
C EIGVAL: EIGEN VALUES
C EIGVEC : EIGEN VECTORS
CMSP  INCLUDE (UNITNUMS)
      COMMON/UNITNU  /IN1,IN2,IN3,IN4,IFN4,
     *               IOUT1,IOUT2,IOUT3,
     * IN01,IOUT02,IOUT06,
C
C PREIN
C
     * IN11,IN13,IOUT12,IOUT14,IOUT16,IN15,IN17,IOUT18,IN19,IOUT20,
C
C PRECEP
C
     * IN21,IN23,IN25,IN27,IN29,
     * IOUT22,IOUT24,IOUT26,IOUT28,IOUT30,
C
C MINIMIZATION
C
     * IN31,IN33,IN35,IN37,IN39,
     * IOUT32,IOUT34,IOUT36,IOUT38,IOUT39,IOUT40,
C
C NORMAL MODE
C
     * IN41,IN43,IN45,IN47,IN49,
     * IOUT42,IOUT44,IOUT46,IOUT48,IOUT50,IOUT52,IOUT54,IOUT56,IOUT58,
     * IOUT60,IOUT62,IOUT64,IOUT66,
C
C MONTE CARLO
C
     * IN71,IN73,IN75,IN77,IN79,
     * IOUT72,IOUT74,IOUT76,IOUT78
C
C PRIMARY INPUT FILE ----- IN01
C PRIMARY OUTPUT FILE ---- IOUT02
C PRIMARY LOG FILE ------- IOUT06
C
C ODD NUMBERS ARE RESERVED FOR INPUT,
C EVEN NUMBERS ARE RESERVED FOR OUTPUT
C FOR EXPLICIT DEFINITIONS OF INPUT AND OUTPUT FILES, PLEASE SEE MAIN
      DIMENSION AKX(MAXVAR),AKY(MAXVAR),AKZ(MAXVAR)
      DIMENSION AKVX(MAXVAR),AKVY(MAXVAR),AKVZ(MAXVAR)
C
      DO 100 IAT=1, NUMATM
C
C READ IN K-MATRIX
C
        READ(IN45) (AKX(I),I=1,NUMVAR),(AKY(I),I=1,NUMVAR),
     &             (AKZ(I),I=1,NUMVAR)
C
C INITIALIZATION
C
CDIR@ IVDEP
      DO 150 NM=1,NUMVAR
        AKVX(NM) = 0.D0
        AKVY(NM) = 0.D0
        AKVZ(NM) = 0.D0
150   CONTINUE
C
C LOOP ON THE MODES
C
      CALL SGEMVX@ (NUMVAR, NUMVAR, 1., EIGVEC(1,1), 800, 1, AKX(1), 1, 
     1   1., AKVX(1), 1)
      CALL SGEMVX@ (NUMVAR, NUMVAR, 1., EIGVEC(1,1), 800, 1, AKY(1), 1, 
     1   1., AKVY(1), 1)
      CALL SGEMVX@ (NUMVAR, NUMVAR, 1., EIGVEC(1,1), 800, 1, AKZ(1), 1, 
     1   1., AKVZ(1), 1)
C
C PRINT OUT KV-MATRIX
C
        WRITE(IOUT) (AKVX(NM),NM=1,NUMVAR),(AKVY(NM),NM=1,NUMVAR),
     1              (AKVZ(NM),NM=1,NUMVAR)
100   CONTINUE
C
      REWIND IN45
C
      RETURN
      END
