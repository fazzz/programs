C***********************************************************************
C
C                             I  N  S  P  I  D  A  S
C
C  INSPIDAS DEVELOPMENT TEAM
C
C           MIZUGUCHI
C           SHIRAI
C           KITAO
C           YAMATO
C           IKURA
C           IRISA
C           HIRATA
C           GO
C                                                   JAN. 29, 1990
C
C***********************************************************************
C
C PROGRAM MAIN
C   MAIN PROGRAM FOR INSPIDAS
      IMPLICIT REAL*8 (A-H,O-Z)
      IMPLICIT INTEGER*4 (I-N)
CMSP  INCLUDE (MAXSIZE)
CTTN  INCLUDE '/labo/qclib/inspidas/common/maxsize'
CMSP  INCLUDE (COMMAND)
CTTN  INCLUDE '/labo/qclib/inspidas/common/command'
CMSP  INCLUDE (UNITNUMS)
CTTN  INCLUDE '/labo/qclib/inspidas/common/unitnums'
CMSP  INCLUDE (ECHO)
CTTN  INCLUDE '/labo/qclib/inspidas/common/echo'
CMSP  INCLUDE (FILEIO)
CTTN  INCLUDE '/labo/qclib/inspidas/common/fileio'
CMSP  INCLUDE (WORK)
CTTN  INCLUDE '/labo/qclib/inspidas/common/work'
CMSP  INCLUDE (WORKMANA)
CTTN  INCLUDE '/labo/qclib/inspidas/common/workmana'
      CHARACTER*1 DEL
      CHARACTER*4 TASK
      CHARACTER*5 KEYWOR
      CHARACTER*10 DAY,WHEN
      CHARACTER*80 OUTPUT,TITLE
      CHARACTER*80 UNIT1
      CHARACTER*8  CMCVAX,CMCCVX,CMCCYB,CMCIBM,CMCTTN,VERSN
      LOGICAL ECH
      DATA  CMCVAX,CMCCVX,CMCCYB  /'VAX/VMS ','CONVEX  ','CYBER205'/
      DATA  CMCIBM                /'FACOM   '/
      DATA  CMCTTN                /'TITAN   '/
C
C   ************
      CALL TIMIT(0,0)
      ECH=.TRUE.
      DEL = '*'
C
C INITIALIZE WORKMANAGE COMMON BLOCK
C
        ILSTRE   = 1
        ILSTIN  = 1
        ILSTCH   = 1
        PRNTME  = .FALSE.
C
CVAX  VERSN=CMCVAX
CCVX  VERSN=CMCCVX
CMSP  VERSN=CMCIBM
CCYB  VERSN=CMCCYB
CTTN  VERSN=CMCTTN
C
C***********************************************************************
C   ASSIGN ALL I/O UNIT NUMBERS FOR ALL TASKS HERE
C   SEE UNITNUMS.CMN FOR A SUMMARY OF ALL I/O INFORMATION
C
C
      IN1=1
      IN2=2
      IN3=3
      IN4=4
      IFN4=4
      IOUT1=1
      IOUT2=2
      IOUT3=3
C
C  MAIN INPUT AND OUTPUT FILES
C
      IN01=1
CTTN    CALL GETARG(1,UNIT1)
CTTN    OPEN(IN01,FILE=UNIT1,FORM='FORMATTED',STATUS='OLD')

CFH   CALL GETENV('FOR001',UNIT1)
CCVX  OPEN(IN01,FILE=UNIT1,FORM='FORMATTED',STATUS='OLD')
C MAIN INPUT FILE
      IOUT02=2
C MAIN OUTPUT FILE
      IOUT06=6
C MAIN LOG FILE
C
C ----------------------------------------------------------------------
C  TASK PREIN ...
      IN11=11
      IN13=13
      IOUT12=12
      IOUT14=14
C
C  UNIT 11: AMINO ACID SEQUENCE (ABE FORMAT)
C  UNIT 13: DIHEDRAL ANGLE (ECEPP FORMAT)
C  UNIT 12: INPUT FILE TO PRECEP
C  UNIT 14: DIHEDRAL ANGLE (ECEPP FORMAT)
C
C  TASK PRECEP...
       IN21=21
       IN23=23
       IN25=25
       IN27=27
       IN29=29
       IOUT22=22
       IOUT24=24
       IOUT26=26
       IOUT28=28
C  UNIT 21: OUTPUT FROM PREIN
C  UNIT 22: INPUT TO MINIMIZE
C  TASK MINIM...
C
       IN31=31
       IN33=33
       IN35=35
       IN37=37
       IOUT32=32
       IOUT34=34
       IOUT36=36
       IOUT38=38
       IOUT39=39
       IOUT40=40
C UNIT 31:  PRECEP OUTPUT DATA
C UNIT 33:  ENERGY PARAMETERS (BD8)
C UNIT 35:  INITIAL ANGLES IN UNIT OF DEGREES (ECCEP FORMAT)
C UNIT 37:  INITIAL ANGLES IN UNIT OF RADIANS (UNFORMATTED)
C             (RESTART FILE)
C UNIT 32:  FINAL ANGLES (FORMATTED)
C UNIT 34:  FLEX FORMATTED DATA (ANGLES AND COORDINATES)
C UNIT 36:  FIRST AND SECOND DERIVATIVE OF POTENTIAL ENERGY
C               (UNFORMATTED)
C UNIT 38:  FINAL COORDINATES AND ANGLES (FORMATTED)
C UNIT 39:  FINAL COORDINATES (UNFORMATTED)
C UNIT 40:  FINAL ANGLES IN UNITS OF RADIANS (UNFORMATTED)
C             (RESTART FILE)
C  TASK NMA
C
       IN41=41
       IN43=43
       IN45=45
       IN47=47
       IOUT42=42
       IOUT44=44
       IOUT46=46
       IOUT48=48
       IOUT50=50
       IOUT52=52
       IOUT54=54
       IOUT56=56
       IOUT58=58
       IOUT60=60
       IOUT62=62
       IOUT64=64
       IOUT66=66
C UNIT 41:  PRECEP OUTPUT
C UNIT 43:  EIGEN VALUES AND EIGEN VECTORS (UNFORMATTED)
C UNIT 45:  K-MATRIX
C UNIT 42:  EIGEN VALUES AND EIGEN VECTORS (FORMATTED)
C UNIT 44:  EIGEN VALUES AND EIGEN VECTORS (UNFORMATTED)
C UNIT 47:  K-MATRIX * EIGEN VECTORS
C
C  TASK MONT
C
       IN71=71
       IN73=73
       IN75=75
       IN77=77
       IN79=79
       IOUT72=72
       IOUT74=74
       IOUT76=76
       IOUT78=78
C --- INPUT
C UNIT 71:  PRECEP OUTPUT
C UNIT 73:  ENERGY PARAMETERS (BD8)
C UNIT 75:  INITIAL ANGLES IN UNIT OF DEGREES (ECEPP FORMAT)
C UNIT 77:  INITIAL ANGLES IN UNIT OF RADIANS (UNFORMATTED)
C UNIT 79:  THE DATA FOR CONTINUING A PREVIOUS JOB
C --- OUTPUT
C UNIT 72:  THE DATA FOR CONTINUING A PREVIOUS JOB
C UNIT 74:  OUTPUT OF ENERGY
C UNIT 76:  OUTPUT OF ANGLES
C UNIT 78:  OUTPUT OF COORDINATE IN SINGLE PRECISON
C
C***********************************************************************
C READ IN UNIT 1 DATA FOR ECHO AND REWIND UNIT 1
C
      CALL ECHOIN(NLINE)
C***********************************************************************
C
C  TASK LOOP...
C  READ IN THE TASK AND DECIDE WHAT TO DO.
C
    2 CONTINUE
C
      CALL NXTCMN (TASK)
C
C PRINT OUT MEMORY USAGE INFO. FOR THIS TASK?
C
      IF (LCRMST (COMLY2 ,COMLEN,'MEMO',4,'RY',2) .GT. 0) THEN
          PRNTME  = .TRUE.
      ENDIF
C
      IF(TASK.EQ.'WRIT') THEN
        CALL GTFLNM(OUTPUT)
CFHCVAX    CALL DATE(DAY)
CFHCVAX    CALL TIME(WHEN)
CTTN    CALL DATE(DAY)
CTTN    CALL TIME(WHEN)
CMSP    CALL DATE(DAY)
CMSP    CALL TIME(ITIME)
CMSP        ITIME = ITIME/1000
CMSP        IHOUR = ITIME/3600
CMSP        IMINT = (ITIME-IHOUR*3600)/60
CMSP        ISCND =ITIME-IHOUR*3600-IMINT*60
CFHCCYB    DAY = DATE()
CFHCCYB    WHEN = TIME()
C
        CALL OPENWT(IOUT02,'FORMATTED',OUTPUT,IOUT06)
        REWIND IOUT02
        WRITE(IOUT06,779)OUTPUT
 779    FORMAT(5X,' OUTPUT WRITTEN TO : ',A80,/)
C
CTTN    WRITE(IOUT02,766)VERSN,DAY(1:9),WHEN
CTTN    WRITE(IOUT06,766)VERSN,DAY,WHEN
CCYB    WRITE(IOUT02,766)VERSN,DAY,WHEN
CCYB    WRITE(IOUT06,766)VERSN,DAY,WHEN
CVAX    WRITE(IOUT02,766)VERSN,DAY,WHEN
CVAX    WRITE(IOUT06,766)VERSN,DAY,WHEN
CMSP    WRITE(IOUT02,769)VERSN,DAY,IHOUR,IMINT,ISCND
CMSP    WRITE(IOUT06,769)VERSN,DAY,IHOUR,IMINT,ISCND
 766    FORMAT(/,5X,'INSPIDAS V 0.0  ',A8,' VERSION :   ',A10,5X,A10,/)
 769    FORMAT(/,5X,'INSPIDAS V 0.0  ',A8,' VERSION :   ',A8,7X,
     .         I2,':',I2,':',I2/)
        CALL GTRMST (COMLY2 ,COMLEN,'TITL',4,'E',1,TITLE,DEL,LENTIT)
        CALL TRIMST (TITLE,LENTIT)
        WRITE(IOUT02,*)
        WRITE(IOUT02,*)'      TITLE : ',TITLE(1:LENTIT)
        WRITE(IOUT02,*)
        WRITE(IOUT02,*)'     INPUT: '
        WRITE(IOUT02,*)
C **  ECHO UNIT 1 DATA
        IF (ECH) THEN
           CALL ECHOOU (NLINE)
           ECH=.FALSE.
        ENDIF
C
        GO TO 2
      ENDIF
C
C  TASK PREIN....
C
      IF(TASK.EQ.'PREI') THEN
        WRITE(IOUT02,10)
        WRITE(IOUT06,10)
 10     FORMAT(/,5X,' NEXT TASK :  PREIN ',/)
        CALL PREIN
        GO TO 2
      ENDIF
C
C  TASK PRECEP....
C
      IF(TASK.EQ.'PREC') THEN
        WRITE(IOUT02,20)
        WRITE(IOUT06,20)
 20     FORMAT(/,5X,' NEXT TASK :  PRECEP ',/)
        CALL PRECEP
        GO TO 2
      ENDIF
C
C  TASK MINIMIZATION....
C
      IF(TASK.EQ.'MINI')THEN
        WRITE(IOUT02,30)
        WRITE(IOUT06,30)
 30     FORMAT(/,5X,' NEXT TASK :  MINIMIZATION ',/)
        CALL MINIM
        GO TO 2
      ENDIF
C
C  TASK NOMAL MODE ANALYSIS....
C
      IF(TASK.EQ.'NMA ') THEN
        WRITE(IOUT02,40)
        WRITE(IOUT06,40)
 40     FORMAT(/,5X,' NEXT TASK :  NORMAL MODE ANALYSIS',/)
        CALL NMA
        GO TO 2
      ENDIF
C
C  TASK MONTE CARLO SIMULATION....
C
      IF(TASK.EQ.'MONT') THEN
        WRITE(IOUT02,70)
        WRITE(IOUT06,70)
 70     FORMAT(/,5X,' NEXT TASK :  MONTE CARLO SIMULATION',/)
        CALL MC
        GO TO 2
      ENDIF
C
C
C  TASK END....
C
      IF(TASK.EQ.'END ')GO TO 5
C
      WRITE(IOUT02,*)' WARNING TASK NOT AVAILABLE ',TASK
      WRITE(IOUT06,*)' WARNING TASK NOT AVAILABLE ',TASK
      GO TO 2
C
  5   CONTINUE
      CALL TIMIT(IOUT02,1)
      STOP' INSPIDAS CONTROLLER: ALL TASKS COMPLETED'
      END
        INTEGER FUNCTION IREQWR (ISIZE,TYPE)
        IMPLICIT REAL*8 (A-H,O-Z)
CMSP  INCLUDE (MAXSIZE)
CTTN  INCLUDE '/labo/qclib/inspidas/common/maxsize'
CMSP  INCLUDE (UNITNUMS)
CTTN  INCLUDE '/labo/qclib/inspidas/common/unitnums'
CMSP  INCLUDE (WORKMANA)
CTTN  INCLUDE '/labo/qclib/inspidas/common/workmana'
CMSP  INCLUDE (WORK)
CTTN  INCLUDE '/labo/qclib/inspidas/common/work'
        CHARACTER*4 TYPE
        CHARACTER*4 BLANK
        DATA ZERO,IZERO/0.0D+00,0/
C
C  IREQWRK - RETURNS THE LAST AVAILABLE SPACE IN ONE OF THE WORK COMMON
C            BLOCKS
C  TYPE - CHARACTER STRING - TYPE OF COMMON BLOCK - 'REAL','INTE','CHAR'
C           'LOGI'
C  ISIZE - SIZE OF ARRAY REQUESTED
C
C  ROUTINE CHECKS TO SEE IF ARRAY BOUNDS HAVE BEEN EXCEEDED
C
C  THE ELEMENTS IN THE WORK ARRAY WILL THEN BE BOUNDED BY IREQWRK AND
C    IREQWRK + ISIZE
C
        BLANK = CHAR(0)
        IF (TYPE .EQ. 'REAL') THEN
           ILSTUS  = ILSTRE
           ILSTRE   = ILSTRE   + ISIZE
           IMAXWR  = MWORK + 1
           IF (ILSTRE   .GT. IMAXWR ) THEN
             WRITE(6,*) ' INSUFFICIENT REAL WORK ARRAY SIZE'
             WRITE(6,*) ' REDIMENSION PROGRAM'
         WRITE(6,*) ' REQUESTED SIZE = ',ILSTRE  ,' MWORK SIZE = ',MWORK
             CALL DIE
           ENDIF
           IREQWR  = ILSTUS
           DO 10 I=ILSTUS ,ILSTRE
10         WRK(I) = ZERO
           ILST = ILSTRE
        ELSE IF (TYPE .EQ. 'INTE') THEN
           ILSTUS  = ILSTIN
           ILSTIN  = ILSTIN  + ISIZE
           IIMAX = MIWORK + 1
           IF (ILSTIN  .GT. IIMAX) THEN
             WRITE(6,*) ' INSUFFICIENT INTEGER WORK ARRAY SIZE'
             WRITE(6,*) ' REDIMENSION PROGRAM'
        WRITE(6,*)' REQUESTED SIZE = ',ILSTIN ,' MIWORK SIZE = ',MIWORK
             CALL DIE
           ENDIF
           IREQWR  = ILSTUS
           DO 20 I=ILSTUS ,ILSTIN
20         IWRK(I) = IZERO
           ILST = ILSTIN
        ELSE IF (TYPE .EQ. 'CHAR') THEN
           ILSTUS  = ILSTCH
           ILSTCH   = ILSTCH   + ISIZE
           ICHMAX = MCHWOR  + 1
           IF (ILSTCH   .GT. ICHMAX) THEN
             WRITE(6,*) ' INSUFFICIENT CHARACTER WORK ARRAY SIZE'
             WRITE(6,*) ' REDIMENSION PROGRAM'
         WRITE(6,*)' REQUESTED SIZE = ',ILSTCH  ,
     *       ' MCHWORK SIZE = ',MCHWOR
             CALL DIE
           ENDIF
           IREQWR  = ILSTUS
           DO 30 I=ILSTUS ,ILSTCH
30         CWRK(I) = BLANK
           ILST = ILSTCH
        ELSE
           WRITE(6,*) ' PROGRAMMING ERROR: UNKNOWN WORK ARRAY TYPE '
           CALL DIE
        ENDIF
        IF (PRNTME ) THEN
          WRITE(IOUT02,*)' %I - NEW WORK MEMORY USED: '
          WRITE(IOUT02,*)'   WORK ARRAY: ',TYPE
          WRITE(IOUT02,*)'   STARTING LOCATION : ',ILSTUS
          WRITE(IOUT02,*)'   SIZE: ',ISIZE,' LAST USED ELEMENT: ',ILST
        ENDIF
        RETURN
        END
        INTEGER FUNCTION IRELWR (ISIZE,IBEG,TYPE)
        IMPLICIT REAL*8 (A-H,O-Z)
CMSP  INCLUDE (MAXSIZE)
CTTN  INCLUDE '/labo/qclib/inspidas/common/maxsize'
CMSP  INCLUDE (UNITNUMS)
CTTN  INCLUDE '/labo/qclib/inspidas/common/unitnums'
CMSP  INCLUDE (WORKMANA)
CTTN  INCLUDE '/labo/qclib/inspidas/common/workmana'
CMSP  INCLUDE (WORK)
CTTN  INCLUDE '/labo/qclib/inspidas/common/work'
        CHARACTER*4 TYPE
C
C ROUTINE WHICH RELEASES MEMORY FROM WORK ARRAYS
C
C ISIZE - AMOUNT OF MEMORY TO BE RELEASED
C IBEG - ELEMENT IN WORK ARRAY WHERE SECTION OF MEMORY BEGINS
C TYPE - CHARACTER STRING WHICH INDICATES WHICH INDICATES THE
C         WHICH WORK ARRAY SHOULD HAVE THE MEMORY RELEASED
C         'REAL','INTE','CHAR' ARE THE ACCEPTABLE VALUES
C
        IF (TYPE .EQ. 'REAL') THEN
           ITMP = ILSTRE
           INEW = ILSTRE   - ISIZE
          IF (INEW .LT. 1) THEN
            WRITE(6,*) ' PROGRAMMING ERROR: CANNOT RELEASE THIS MEMORY '
            WRITE(6,*) ' READ WORK ARRAY'
            CALL DIE
          ENDIF
          DO 10 I=IBEG,INEW
            WRK(I) = WRK(I+ISIZE)
10        CONTINUE
           ILSTRE   = INEW
           IRELWR  = ILSTRE
           ILST = ILSTRE
        ELSE IF (TYPE .EQ. 'INTE') THEN
           ITMP = ILSTIN
           INEW = ILSTIN  - ISIZE
          IF (INEW .LT. 1) THEN
            WRITE(6,*) ' PROGRAMMING ERROR: CANNOT RELEASE THIS MEMORY '
            WRITE(6,*) ' INTEGER WORK ARRAY'
            CALL DIE
          ENDIF
          DO 20 I=IBEG,INEW
            IWRK(I) = IWRK(I+ISIZE)
20        CONTINUE
           ILSTIN  = INEW
           IRELWR  = ILSTIN
           ILST = ILSTIN
        ELSE IF (TYPE .EQ. 'CHAR') THEN
           ITMP = ILSTCH
           INEW = ILSTCH   - ISIZE
          IF (INEW .LT. 1) THEN
            WRITE(6,*) ' PROGRAMMING ERROR: CANNOT RELEASE THIS MEMORY '
            WRITE(6,*) ' CHARACTER WORK ARRAY'
            CALL DIE
          ENDIF
          DO 30 I=IBEG,INEW
            CWRK(I) = CWRK(I+ISIZE)
30        CONTINUE
           ILSTCH   = INEW
           IRELWR  = ILSTCH
           ILST = ILSTCH
        ELSE
           WRITE(6,*) ' PROGRAMMING ERROR: UNKNOWN WORK ARRAY TYPE '
           CALL DIE
        ENDIF
        IF (PRNTME ) THEN
          WRITE(IOUT02,*)' %I - WORK MEMORY RELEASED: '
          WRITE(IOUT02,*)'   WORK ARRAY: ',TYPE
          WRITE(IOUT02,*)'   NEW LAST LOCATION : ',ILST
          WRITE(IOUT02,*)'   SIZE: ',ISIZE
        ENDIF
        RETURN
        END
