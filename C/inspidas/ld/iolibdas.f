C*MODULE IOLIB *DECK OPENRD
      SUBROUTINE OPENRD(IUNIT,CFORM,CNAME,IOERR)
C* 23-MAR-88 ROUTINE OPENRD OPENS A SEQUENTIAL FILE FOR READ ACCESS.
C*
      IMPLICIT REAL*8 (A-H,O-Z)
      CHARACTER*(*) CFORM,CNAME
      CHARACTER  CEXTEN(9)*1,CNAME1*60,CONAME*60
      LOGICAL LEXIST,LOPEN,LNAME
      DATA CEXTEN /'1','2','3','4','5','6','7','8','9'/
      LEXIST=.FALSE.
      IVER=1
C  DELETE PRECEDING BLANKS FROM FILENAME
      CALL DLPRBL (CNAME)
      CALL CLCSPC(CNAME,NCLEN)
      CALL CLCSPC(CFORM,NFLEN)
      WRITE(IOERR,11) CFORM(1:NFLEN-1),CNAME(1:NCLEN-1),IUNIT
  11  FORMAT(' %OPENRD-I, REQUEST TO OPEN ',A,' FILE ',A,
     .       ' ON UNIT ',I3)
C
C             FIRST CHECK FOR AN OPEN FILE ON UNIT= IUNIT
C                     AND CLOSE ANY OPENED FILES.
C
      INQUIRE(IUNIT,OPENED=LOPEN,NAME=CONAME,NAMED=LNAME)
CMSP  INQUIRE(UNIT=IUNIT,OPENED=LOPEN,NAME=CONAME,NAMED=LNAME)
CCYB  INQUIRE(IUNIT,OPENED=LOPEN,NAME=CONAME,NAMED=LNAME)
CVAX  INQUIRE(IUNIT,OPENED=LOPEN,NAME=CONAME,NAMED=LNAME)
      IF (LOPEN) THEN
         CLOSE(IUNIT,STATUS='KEEP',ERR=110)
      ENDIF
      GO TO 150
C
C
 110  CONTINUE
      WRITE(IOERR,1001) IUNIT,CNAME
 1001 FORMAT(' %OPENRD-E, UNABLE TO CLOSE OPENED FILE ON UNIT ',I4,
     .       ' BEFORE OPENING NEW FILE ',A)
      WRITE(IOERR,993) LOPEN
  993 FORMAT(' %OPENRD-E, OPENED FILE IS NAMED ',L1)
      WRITE(IOERR,991) CONAME
  991 FORMAT(' %OPENRD-E, OPENED FILE IS NAMED ',A)
      WRITE(IOERR,992) LNAME
  992 FORMAT(' %OPENRD-E, OPENED FILE IS NAMED ',L1)
      CALL DIE
C
C               CHECK FOR EXISTING FILE NAME = CNAME
C  MODIFY THE INPUT FILE NAME IF THERE IS AN EXISTING OF THE SAME NAME
C
 150  CONTINUE
      INQUIRE(FILE=CNAME(1:NCLEN-1),
     .        EXIST=LEXIST,
     .        OPENED=LOPEN,
     .        NUMBER=JUNIT)
C
      IF (.NOT.LEXIST) THEN
         WRITE(IOERR,1002) CNAME(1:NCLEN-1)
 1002    FORMAT(' %OPENRD-I, DETECTED NO FILE NAMED ',A)
         CALL DIE
      ENDIF
C
      IF (LOPEN) THEN
         WRITE(IOERR,1004) CNAME(1:NCLEN-1),JUNIT,IUNIT
 1004    FORMAT(' %OPENRD-I, DETECTED AN OPEN FILE NAMED ',A,
     .          ' ON UNIT ',I3,' WHILE OPENING THIS FILE ON UNIT ',I3)
         CALL DIE
      ENDIF
C
C         AT THIS POINT IT IS SAFE TO OPEN THE FILE WITH
C             NAME = CNAME(1:NCLEN1-1) ON UNIT=IUNIT
C
CVAX      OPEN(IUNIT,
CVAX .     FILE=CNAME(1:NCLEN-1),
CVAX .     FORM=CFORM(1:NFLEN-1),
CVAX .     ACCESS='SEQUENTIAL',
CVAX .     STATUS='OLD',
CVAX .     SHARED,READONLY,
CVAX .     ERR=200)
          OPEN(IUNIT,
     .     FILE=CNAME(1:NCLEN-1),
     .     FORM=CFORM(1:NFLEN-1),
     .     ACCESS='SEQUENTIAL',
     .     STATUS='OLD',
     .     ERR=200)
CMSP      OPEN(UNIT=IUNIT,
CMSP .     FILE=CNAME(1:NCLEN-1),
CMSP .     FORM=CFORM(1:NFLEN-1),
CMSP .     STATUS='SHR',
CMSP .     ERR=200)
CCYB      OPEN(IUNIT,
CCYB .     FILE=CNAME(1:NCLEN-1),
CCYB .     FORM=CFORM(1:NFLEN-1),
CCYB .     ACCESS='SEQUENTIAL',
CCYB .     STATUS='OLD',
CCYB .     ERR=200)
      REWIND IUNIT
      RETURN
 200  CONTINUE
      WRITE(IOERR,1006) CNAME(1:NCLEN-1),IUNIT,CFORM(1:NFLEN-1)
 1006 FORMAT(' %OPENRD-E, ERROR OPENING FILE ',A,' ON UNIT ',I3,
     .       ' WITH ATTRIBUTES NEW, SEQUENTIAL, AND ',A)
      CALL DIE
      RETURN
      END
C*MODULE IOLIB *DECK OPENWT
      SUBROUTINE OPENWT(KUNIT,CFORM,CNAME,IOERR)
C* 23-MAR-88 ROUTINE OPNWT OPENS A SEQUENTIAL FILE FOR WRITE ACCESS.
C* 28-AUG-89 MODIFIED TO WRITE TO PO-DATA SET OF FACOM
C* BY A.KITAO
C*
      IMPLICIT REAL*8 (A-H,O-Z)
      CHARACTER*(*) CFORM,CNAME
      CHARACTER  CEXTEN(9)*1,CNAME1*60,CONAME*60
      LOGICAL LEXIST,LOPEN,LNAME
      DATA CEXTEN /'1','2','3','4','5','6','7','8','9'/
      LEXIST=.FALSE.
      IVER=1
      IUNIT = KUNIT
C DELETE PRECING BLANKS FROM FILENAME
      CALL DLPRBL (CNAME)
C
      CALL CLCSPC(CNAME,NCLEN)
      CALL CLCSPC(CFORM,NFLEN)
      WRITE(IOERR,11) CFORM(1:NFLEN-1),CNAME(1:NCLEN-1),IUNIT
  11  FORMAT(' %OPENWT-I, REQUEST TO OPEN ',A,' FILE ',A,
     .       ' ON UNIT ',I3)
C
C             FIRST CHECK FOR AN OPEN FILE ON UNIT= IUNIT
C                     AND CLOSE ANY OPENED FILES.
C
      INQUIRE(IUNIT,OPENED=LOPEN,NAME=CONAME,NAMED=LNAME)
      IF (LOPEN) THEN
         CLOSE(IUNIT,STATUS='KEEP',ERR=110)
      ENDIF
      GO TO 130
C
C
 110  CONTINUE
      WRITE(IOERR,1001) IUNIT,CNAME
 1001 FORMAT(' %OPENWT-E, UNABLE TO CLOSE OPENED FILE ON UNIT ',I4,
     .       ' BEFORE OPENING NEW FILE ',A)
      WRITE(IOERR,993) LOPEN
  993 FORMAT(' %OPENWT-E, OPENED FILE IS NAMED ',L1)
      WRITE(IOERR,991) CONAME
  991 FORMAT(' %OPENWT-E, OPENED FILE IS NAMED ',A)
      WRITE(IOERR,992) LNAME
  992 FORMAT(' %OPENWT-E, OPENED FILE IS NAMED ',L1)
      CALL DIE
C
C               CHECK FOR EXISTING FILE NAME = CNAME
C  MODIFY THE INPUT FILE NAME IF THERE IS AN EXISTING OF THE SAME NAME
C
 130  CONTINUE
      CNAME1=CNAME
      NCLEN1=NCLEN
C
 150  CONTINUE
      LEXIST=.FALSE.
      LOPEN= .FALSE.
      INQUIRE(FILE=CNAME1(1:NCLEN1-1),
     .        EXIST=LEXIST,
     .        OPENED=LOPEN,
     .        NUMBER=JUNIT)
C
      IF (LEXIST .AND. CFORM(1:NFLEN-1) .EQ. 'OVERWRITE') THEN
         LEXIST=.FALSE.
         CFORM ='UNFORMATTED'
         WRITE(IOERR,7777) CNAME1(1:NCLEN1-1)
 7777    FORMAT(' %OPENWT-I, OVERWRITE TO FILE NAMED ',A)
         I1=INDEX(CNAME(1:NCLEN-1),'(')
         NFLEN = 12
      ENDIF
      IF (LEXIST) THEN
         WRITE(IOERR,1002) CNAME1(1:NCLEN1-1)
 1002    FORMAT(' %OPENWT-I, DETECTED EXISTING FILE NAMED ',A)
         I1=INDEX(CNAME(1:NCLEN-1),'(')
         I2=INDEX(CNAME(1:NCLEN-1),')')
         IF(I1.NE.0) THEN
           IF(I2-I1-1.GE.8) THEN
             CNAME1 = CNAME(1:NCLEN-3)//CEXTEN(IVER)//')'
           ELSE
             CNAME1 = CNAME(1:NCLEN-2)//CEXTEN(IVER)//')'
           ENDIF
         ELSE
           CNAME1 = CNAME(1:NCLEN-1)//CEXTEN(IVER)
         ENDIF
         IVER=IVER+1
         CALL DLPRBL (CNAME1)
         CALL CLCSPC(CNAME1,NCLEN1)
         WRITE(IOERR,1003) CNAME(1:NCLEN-1),CNAME1(1:NCLEN1-1)
 1003    FORMAT(' %OPENWT-I, RENAMING FILE ',A,' TO ',A)
         GO TO 150
      ENDIF
C
      IF (LOPEN) THEN
         WRITE(IOERR,1004) CNAME1(1:NCLEN1-1),JUNIT,IUNIT
 1004    FORMAT(' %OPENWT-I, DETECTED AN OPEN FILE NAMED ',A,
     .          ' ON UNIT ',I3,' WHILE OPENING THIS FILE ON UNIT ',I3)
         IF (IVER .GT. 9) CALL DIE
         I1=INDEX(CNAME(1:NCLEN-1),'(')
         I2=INDEX(CNAME(1:NCLEN-1),')')
         IF(I1.NE.0) THEN
           IF(I2-I1-1.GE.8) THEN
             CNAME1 = CNAME(1:NCLEN-3)//CEXTEN(IVER)//')'
           ELSE
             CNAME1 = CNAME(1:NCLEN-2)//CEXTEN(IVER)//')'
           ENDIF
         ELSE
           CNAME1 = CNAME(1:NCLEN-1)//CEXTEN(IVER)
         ENDIF
         IVER=IVER+1
         CALL DLPRBL (CNAME1)
         CALL CLCSPC(CNAME1,NCLEN1)
         WRITE(IOERR,1005) CNAME(1:NCLEN-1),CNAME1(1:NCLEN1-1)
 1005    FORMAT(' %OPENWT-I, RENAMING FILE ',A,' TO ',A)
         GO TO 150
      ENDIF
C
C         AT THIS POINT IT IS SAFE TO OPEN THE FILE WITH
C             NAME = CNAME1(1:NCLEN1-1) ON UNIT=IUNIT
C
      OPEN(IUNIT,
     .     FILE=CNAME1(1:NCLEN1-1),
     .     FORM=CFORM(1:NFLEN-1),
     .     ACCESS='SEQUENTIAL',
     .     STATUS='NEW',
     .     ERR=200)
CCYB  OPEN(IUNIT,
CCYB .     FILE=CNAME1(1:NCLEN1-1),
CCYB .     FORM=CFORM(1:NFLEN-1),
CCYB .     ACCESS='SEQUENTIAL',
CCYB .     STATUS='NEW',
CCYB .     ERR=200)
CVAX  OPEN(IUNIT,
CVAX .     FILE=CNAME1(1:NCLEN1-1),
CVAX .     FORM=CFORM(1:NFLEN-1),
CVAX .     ACCESS='SEQUENTIAL',
CVAX .     STATUS='NEW',
CVAX .     ERR=200)
CMSP  OPEN(UNIT=IUNIT,
CMSP .     FILE=CNAME1(1:NCLEN1-1),
CMSP .     FORM=CFORM(1:NFLEN-1),
CMSP .     ACCESS='SEQUENTIAL',
CMSP .     STATUS='UNKNOWN',
CMSP .     ERR=200)
      RETURN
 200  CONTINUE
      WRITE(IOERR,1006) CNAME1(1:NCLEN1-1),IUNIT,CFORM(1:NFLEN-1)
 1006 FORMAT(' %OPENWT-E, ERROR OPENING FILE ',A,' ON UNIT ',I3,
     .       ' WITH ATTRIBUTES NEW, SEQUENTIAL, AND ',A)
      CALL DIE
      RETURN
      END
C-----------------------------------------------------------------------
C***  DECK HEADER  ****
C-----------------------------------------------------------------------
C*MODULE IOLIB *DECK TIMIT
      SUBROUTINE TIMIT(IOUT,IFLAG)
      IMPLICIT REAL*8 (A-H,O-Z)
C
      COMMON /SWATCH/ TI,TX,TIM
C
C  COMPUTE AND PRINT TOTAL AND INTERVAL CPU TIME.
C  IFLAG .EQ. 0 INITIALIZES THE CLOCK..
C  IFLAG .NE. 0 WRITES THE TIME INFORMATION TO UNIT= IOUT
C               AND FLUSH OUTPUT BUFFER UNIT=IOUT ON CONVEX.
C
      IF (IFLAG .EQ. 0) THEN
         TI=0.0D+00
         TX=0.0D+00
         TIM=0.0D+00
CVAX         CALL SECOND(TIM)
!            CALL SECOND(TIM)
CMSP         CALL SECOND(TIM)
CCYB         CALL SECNDSX(TIM)
         RETURN
      ENDIF
CCVX  CALL FLUSH(IOUT)
CFH   CALL FLUSH(IOUT)
CVAX         CALL SECOND(TIM)
!            CALL SECOND(TIM)
CMSP         CALL SECOND(TIM)
CCYB         CALL SECNDSX(TIM)
      TX = TIM-TI
      TI = TIM
      TMINUT = TIM/60.0D0
      WRITE (IOUT,9008) TX,TIM,TMINUT
      RETURN
C
 9008 FORMAT(' %TIMIT-I, STEP CPU TIME (SEC) =',F10.2,
     *        '  TOTAL CPU TIME (SEC) =',F10.2,
     *        '   (',F6.1,' MIN) ')
      END
C*MODULE IOLIB   *DECK SECOND
CVAX      SUBROUTINE SECOND(TIM)
          SUBROUTINE SECOND(TIM)
CMSP      SUBROUTINE SECOND(TIM)
CCYB      SUBROUTINE SECNDSX(TIM)
C
C           MUST USE CYBER 205 COMPILER OPTION SC=1 TO RECOGNIZE SPECIAL
C           CALLS IN THIS ROUTINE....
C
CVAX  INTEGER CPUTIM, ITMLST(4), SYS$GETJPI
C
      REAL*8   CPU0,WAL0,CPU,WAL,TIM
CMSP  REAL*8   CPU0,WAL0,CPU,WAL,TIM
CVAX  REAL*8   CPU0,WAL0,CPU,WAL,TIM
      REAL*4   CPUTIME,TARRAY(2)
CMSP  REAL*4   CPUTIM ,TARRAY
CCYB  REAL     CPU0,WAL0,CPU,WAL,TIM
C
      LOGICAL FIRST
C
CVAX  PARAMETER JPI$_CPUTIM = '04070004'X ! ACCUMULATED CPU TIME (10-MS)
CFPS  SAVE FIRST
      SAVE FIRST
CMSP  SAVE FIRST
CCYB  SAVE FIRST
C
      COMMON /TIMING/ CPU0,WAL0,CPU,WAL
C
      DATA FIRST/.TRUE./
CCCYB  DATA CPU00 /X'00000000FFFFFFFF'/
C
      IF(.NOT. FIRST) GO TO 300
         FIRST=.FALSE.
C
C       ----- INITIALIZE CLOCKS -----
C
         WAL0 =0.0
         CPU0 =0.0
CCCYB     CALL Q8CLOCK(,,WAL0)
CCCYB     CALL Q8WJTIME(CPU00)
CCYB      CPU0 = SECOND()
C
C           INITIALIZE ITEM LIST FOR VAX GETJPI
C
CVAX     ITMLST(1) = JPI$_CPUTIM   ! SET ITEM CODE (INCLUDING LENGTH)
CVAX     ITMLST(2) = %LOC(CPUTIM)  ! LOCATION OF CPUTIM VARIABLE
CVAX     ITMLST(3) = 0             ! LENGTH NOT NEEDED
CVAX     ITMLST(4) = 0             ! TERMINATE ITMLST
C
C              GET CPUTIM INFORMATION FROM GETJPI
C
CVAX     IF( .NOT. SYS$GETJPI(,,,ITMLST,,,) ) WRITE(6,*) 'GETJPI ERROR'
C
C              CONVERT TO REAL SECONDS
C
CVAX     CPU0=CPUTIM*1.0E-2
CVAX     WAL0=SECNDS(SNGL(WAL0))
C
CFHCCVX     WAL0=SECNDS(SNGL(WAL0))
         WAL0=0.0
CMSP     WAL0=0.0
         CPUTIME= ETIME (TARRAY)
CFH      CPUTIM = ETIME (TARRAY)
CMSP     CALL     CLOCK(TARRAY,0,1)
         CPU0 = TARRAY(1)
CMSP     CPU0 = TARRAY
C
CFH      CALL ZTIME1(WAL0,CPU0)
C
CFPS     ISCODE = SYS$GETTIME(CPU0,WAL0)
  300 CONTINUE
C
C          - - - RETURN CPU TIME USED SINCE START OF JOB STEP - - -
C
CVAX  IF( .NOT. SYS$GETJPI(,,,ITMLST,,,) ) WRITE(6,*) 'GETJPI ERROR'
CVAX  CPU=CPUTIM*1.E-2 - CPU0
CVAX  WAL=SECNDS(SNGL(WAL0))
      CPUTIME=ETIME (TARRAY)
CFH   CPUTIM =ETIME (TARRAY)
CMSP  CALL    CLOCK (TARRAY,0,1)
      CPU = TARRAY(1) - CPU0
CMSP  CPU = TARRAY - CPU0
CFHCCVX  WAL=SECNDS(SNGL(WAL0))
          WAL=1.0
CMSP      WAL=1.0
C
C       CALL TO ZTIME2(IBM) RETURNS WALL AND CPU TIMES ELAPSED
C       SINCE WAL0 AND CPU0 WERE SET
C
CFH   CPU =CPU0
CFH   WAL =WAL0
CFH   CALL ZTIME2(WAL,CPU)
C
CFPS  ISCODE = SYS$GETTIME(CPU,WAL)
CFPS  CPU = CPU - CPU0
CFPS  WAL = WAL - WAL0
C
CCCYB  CALL Q8CLOCK(,,WAL)
CCCYB  CALL Q8RJTIME(,,CPU)
CCYB       CPU = SECOND()
CCCYB  CPU=(CPU00-CPU)/1000000
CCCYB  WAL=(WAL-WAL0)/1000000
CCYB   CPU = CPU - CPU0
      TIM=CPU
      RETURN
      END
C
      SUBROUTINE OPWTOL (IUNIT,CFORM,CNAME,IOERR)
C* 23-MAR-88 ROUTINE OPENRD OPENS A SEQUENTIAL FILE FOR WRITE ACCESS.
C*
      IMPLICIT REAL*8 (A-H,O-Z)
      CHARACTER*(*) CFORM,CNAME
      CHARACTER  CEXTEN(9)*1,CNAME1*60,CONAME*60
      LOGICAL LEXIST,LOPEN,LNAME
      DATA CEXTEN /'1','2','3','4','5','6','7','8','9'/
      LEXIST=.FALSE.
      IVER=1
C  DELETE PRECEDING BLANKS FROM FILENAME
      CALL DLPRBL (CNAME)
      CALL CLCSPC(CNAME,NCLEN)
      CALL CLCSPC(CFORM,NFLEN)
      WRITE(IOERR,11) CFORM(1:NFLEN-1),CNAME(1:NCLEN-1),IUNIT
  11  FORMAT(' %OPENRD-I, REQUEST TO OPEN ',A,' FILE ',A,
     .       ' ON UNIT ',I3)
C
C             FIRST CHECK FOR AN OPEN FILE ON UNIT= IUNIT
C                     AND CLOSE ANY OPENED FILES.
C
      INQUIRE(IUNIT,OPENED=LOPEN,NAME=CONAME,NAMED=LNAME)
      IF (LOPEN) THEN
         CLOSE(IUNIT,STATUS='KEEP',ERR=110)
      ENDIF
      GO TO 150
C
C
 110  CONTINUE
      WRITE(IOERR,1001) IUNIT,CNAME
 1001 FORMAT(' %OPENRD-E, UNABLE TO CLOSE OPENED FILE ON UNIT ',I4,
     .       ' BEFORE OPENING NEW FILE ',A)
      WRITE(IOERR,993) LOPEN
  993 FORMAT(' %OPENRD-E, OPENED FILE IS NAMED ',L1)
      WRITE(IOERR,991) CONAME
  991 FORMAT(' %OPENRD-E, OPENED FILE IS NAMED ',A)
      WRITE(IOERR,992) LNAME
  992 FORMAT(' %OPENRD-E, OPENED FILE IS NAMED ',L1)
      CALL DIE
C
C               CHECK FOR EXISTING FILE NAME = CNAME
C  MODIFY THE INPUT FILE NAME IF THERE IS AN EXISTING OF THE SAME NAME
C
 150  CONTINUE
      INQUIRE(FILE=CNAME(1:NCLEN-1),
     .        EXIST=LEXIST,
     .        OPENED=LOPEN,
     .        NUMBER=JUNIT)
C
      IF (.NOT.LEXIST) THEN
         WRITE(IOERR,1002) CNAME(1:NCLEN-1)
 1002    FORMAT(' %OPENRD-I, DETECTED NO FILE NAMED ',A)
         CALL DIE
      ENDIF
C
      IF (LOPEN) THEN
         WRITE(IOERR,1004) CNAME(1:NCLEN-1),JUNIT,IUNIT
 1004    FORMAT(' %OPENRD-I, DETECTED AN OPEN FILE NAMED ',A,
     .          ' ON UNIT ',I3,' WHILE OPENING THIS FILE ON UNIT ',I3)
         CALL DIE
      ENDIF
C
C         AT THIS POINT IT IS SAFE TO OPEN THE FILE WITH
C             NAME = CNAME(1:NCLEN1-1) ON UNIT=IUNIT
C
          OPEN(IUNIT,
     .     FILE=CNAME(1:NCLEN-1),
     .     FORM=CFORM(1:NFLEN-1),
     .     ACCESS='SEQUENTIAL',
     .     STATUS='OLD',
     .     ERR=200)
CCYB      OPEN(IUNIT,
CCYB .     FILE=CNAME(1:NCLEN-1),
CCYB .     FORM=CFORM(1:NFLEN-1),
CCYB .     ACCESS='SEQUENTIAL',
CCYB .     STATUS='OLD',
CCYB .     ERR=200)
CVAX      OPEN(IUNIT,
CVAX .     FILE=CNAME(1:NCLEN-1),
CVAX .     FORM=CFORM(1:NFLEN-1),
CVAX .     ACCESS='SEQUENTIAL',
CVAX .     STATUS='OLD',
CVAX .     ERR=200)
CMSP      OPEN(UNIT=IUNIT,
CMSP .     FILE=CNAME(1:NCLEN-1),
CMSP .     FORM=CFORM(1:NFLEN-1),
CMSP .     STATUS='SHR',
CMSP .     ERR=200)
      RETURN
 200  CONTINUE
      WRITE(IOERR,1006) CNAME(1:NCLEN-1),IUNIT,CFORM(1:NFLEN-1)
 1006 FORMAT(' %OPENRD-E, ERROR OPENING FILE ',A,' ON UNIT ',I3,
     .       ' WITH ATTRIBUTES NEW, SEQUENTIAL, AND ',A)
      CALL DIE
      RETURN
      END
