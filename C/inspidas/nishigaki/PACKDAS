//PACKDAS JOB E50214,#,CLASS=A,NOTIFY=E50214
/* INSPIDAS.COMMON
//  EXEC UPDATE,PARM=NEW
//SYSIN DD *
./ ADD NAME=ALPHA
./ NUMBER NEW1=10,INCR=10
C ALPHA                                                                 
C                                                                       
      CHARACTER*4  ATNAME,RENAME                                        
      CHARACTER*80 TITLE                                                
      COMMON/ALPHA1/ATNAME(MAXATM),RENAME(MAXATM)                       
      COMMON/ALPHA2/NMBRES(MAXATM)                                      
      COMMON/TITLE/TITLE                                                
C                                                                       
C  ATMNAME:   ATOM NAMES (ECEPP ORDER)                                  
C  RENAME :   RESIDUE NAMES (ECEPP ORDER)                               
C  NMBRES :   RESIDUE NUMBER (NORMAL NUMBERING)                         
C  TITLE  :   TITLE OF PRECEP                                           
C                                                                       
./ ADD NAME=ATOM
./ NUMBER NEW1=10,INCR=10
C ATOM
C
      COMMON/ATOM00/KUNIT(MAXATM),KATOM(MXATM1),JATOM(MAXATM)
      COMMON/ATOM01/LATOM0(0:MAXVAR),LATOM1(MAXATM)
C
C  KUNIT:  UNIT NUMBER WHICH THE ATOM BELONGS TO.
C  KATOM:  SEQUENTIAL NUMBER OF THE ATOM IN WAKO ORDER.
C  JATOM:  SEQUENTIAL NUMBER OF THE ATOM IN ECEPP ORDER.
C   EXAMPLE:
C   ECEPP  WAKO         WAKO     ECEPP
C    1    KATOM(1)       1      JATOM(1)
C    2    KATOM(2)       2      JATOM(2)
C    3    KATOM(3)       3      JATOM(3)
C    .      .            .        .
C    .      .            .        .
C
C  LATOM0:
C  LATOM1:
C
./ ADD NAME=BOND
./ NUMBER NEW1=10,INCR=10
C BOND
C
      COMMON/BOND00/DIRCOS(3,MAXVAR),IBND1(MAXVAR),IBND2(0:MVAR1)
      COMMON/BOND01/IBCHAR(3,MAXVAR)
C
C  DIRCOS:  DIRECTION COSINE FOR THE BOND
C  IBND1:   ATOM NUMBER OF AN END ATOM OF THE BOND
C  IBND2:   ATOM NUMBER OF AN END ATOM OF THE BOND (IBOND1<IBOND2)
C  IBCHAR:  THREE INTGERS WHICH CHARACTERIZE THE BOND
C
./ ADD NAME=CHARGE
./ NUMBER NEW1=10,INCR=10
C CHARGE
C
      COMMON/CHARGE/CHARGE(MAXATM)
C
C  CHARGE:  ATOMIC CHARGES
C
./ ADD NAME=CNTL
./ NUMBER NEW1=10,INCR=10
C CNTL                                                                  
C                                                                       
       COMMON /PRINT/IPRNT                                              
C                                                                       
C   IPRNT :  PRINT OPTION, 0 PART OUTPUT, 1 ALL OUTPUT                  
C                                                                       
./ ADD NAME=COMMAND
./ NUMBER NEW1=10,INCR=10
C COMMAND.CMN
C
C PURPOSE : COMMON BLOCKS FOR PARSER
C
      COMMON/COMMAN /COMLYN(2000)
      COMMON/COMMSI  /COMLEN,MXCMSZ
      CHARACTER*1 COMLYN
      INTEGER COMLEN
      EQUIVALENCE (COMLYN(1),COMLY2 )
      CHARACTER*2000 COMLY2
C
C     COMLYN  - STORES CHARACTERS IN INPUT (COMMAND) LINE, UP TO 2000 CH
C     COMLEN  - ACTUAL NUMBER OF NON-BLANK CHARACTERS
C     MXCMSZ  - MAX NUMBER OF CHARACTERS = 2000
C     COMLYN2 - A CHARACTER*2000 REPRESENTATION OF THE COMMAND LINE
C
./ ADD NAME=COORD
./ NUMBER NEW1=10,INCR=10
C COORD
C
      COMMON/COORD/CO(3,MAXATM)
C
C  CO: VARIABLE COORDINATES (ECEPP ORDER)
C
./ ADD NAME=ECHO
./ NUMBER NEW1=10,INCR=10
C  ECHO.CMN
C  HOLDS UNIT 1 DATA FOR ECHO
      COMMON/ECHO/INLINE(500)
      CHARACTER*80 INLINE

./ ADD NAME=EIGEN
./ NUMBER NEW1=10,INCR=10
C EIGEN
        COMMON/EIGEN/ EIGVAL(MAXVAR),EIGVEC(MAXVAR,MAXVAR)
C EIGVAL: EIGEN VALUES
C EIGVEC : EIGEN VECTORS
./ ADD NAME=FILEIO
./ NUMBER NEW1=10,INCR=10
        COMMON/FILEIO/IPTHSP,IRSTSP
        COMMON/FILECH  /PATHNA ,RSTFLN ,PDBFLN
        CHARACTER*60 PATHNA ,RSTFLN ,PDBFLN
C
C  FILE NAME RELATED VARIABLES
C   PATHNAM - PATH NAME TO THE RESIDUE DATABASE DIRECTORY
C   IPTHSP  - LOCATION IN PATHNAM OF FIRST SPACE
C   RSTFLNM - RESTART FILE NAME
C   IRSTSP  - LOCATION IN RSTFLNM OF FIRST SPACE
C   PDBFLNM - PDB FILENAME
C
./ ADD NAME=FMATRIX
./ NUMBER NEW1=10,INCR=10
C FMATRIX
        COMMON/FMATRX/ DF(MAXVAR),G(MXPAIR),G0(MXPAIR)
C DF: FIRST DERIVATIVE (FORCE)
C G:  SECOND DERIVATIVE
C G0: SECOND DERIVATIVE (WORK ?)
./ ADD NAME=HMATRIX
./ NUMBER NEW1=10,INCR=10
C HMATRIX
        COMMON/HMATRX/ AH(MAXVAR,MAXVAR)
C AH: H-MATRIX
C
./ ADD NAME=INTER0
./ NUMBER NEW1=10,INCR=10
C INTER0
C
      COMMON/INTER0/INTER(MAXATM),INTATM(3,MAXLEN)
C
C  INTER :    POINTER TO INTATM
C  INTATM:
C    IN ECEPPENERGY FUNCTION, THE NON-BONDED INTERACTION IS DEVIDED
C    INTO 1-4 PAIRS AND 1-5 PAIRS. INTATM IS A TABLE FOR THE ATOM
C    PAIRS OF THE TWO TYPES OF INTERACTIONS.
./ ADD NAME=MAXOLD
./ NUMBER NEW1=10,INCR=10
C MAXSIZE
C     MAXSIZE DEFINES MAXIMUM ARRAY SIZE
C
      PARAMETER(MAXATM=103,MAXVAR=40,MAXRES=12,MAXSS=8,
     >          MXRS1=MAXRES+1,MXRS10=10*MAXRES,MAXLEN=6000,
     >          MAXDBL=1000,MAXDP=700,MAXDPL=MAXATM+MAXDBL/2,
     >          MAXDP2=MAXDP*2)
C
C  MAXAT:  MAXIMUM NUMBER OF ATOMS IN A PROTEIN
C  MAXVAR: MAXMUM NUMBER OF DIHEDRAL ANGLE VARIABLES
C  MAXRS:  MAXMUM NUMBER OF RESIDUES
C  MAXSS:  MAXMUM NUMBER OF S-S CROSSLINK
C  MXRS1:  MAXRS+1
C  MXRS10: MAXRS*10
C  MAXLEN: ARRAY SIZE OF INTER IN PREP IN PRECEP ?
C  MAXDBL: MAXMUM NUMBER OF DIPOLES (?)
C
./ ADD NAME=MAXSIZE
./ NUMBER NEW1=10,INCR=10
C MAXSIZE
C     MAXSIZE DEFINES MAXIMUM ARRAY SIZE
C
      PARAMETER(MAXATM=3000,MAXVAR=800,MAXRES=150,MAXSS=10,
     >          MXRS1=MAXRES+1,MXRS10=10*MAXRES,MAXLEN=6000,
     >          MAXDBL=1000,MAXDP=700,MAXDPL=MAXATM+MAXDBL/2,
     >          MAXDP2=MAXDP*2,MXPAIR=MAXVAR*(MAXVAR+1)/2,
     >          MXPAR1=(MAXVAR+1)*(MAXVAR+2)/2,MAXPER=16000,
     >          MAXCNS=900,MAXJ=2*MAXVAR,MAXSS2=MAXSS*2,
     >          MAXINT=40000,MAXI1=MAXINT/2,MAXI2=MAXINT-MAXI1,
     >          MXATM1=MAXATM+1,MVAR1=MAXVAR+1,
     >          MWORK=100000,MIWORK=100000,MCHWOR=100000)
C
C  MAXAT:  MAXIMUM NUMBER OF ATOMS IN A PROTEIN
C  MAXVAR: MAXMUM NUMBER OF DIHEDRAL ANGLE VARIABLES
C  MAXRS:  MAXMUM NUMBER OF RESIDUES
C  MAXSS:  MAXMUM NUMBER OF S-S CROSSLINK
C  MXRS1:  MAXRS+1
C  MXRS10: MAXRS*10
C  MAXLEN: ARRAY SIZE OF INTER IN PREP IN PRECEP ?
C  MAXDBL: MAXMUM NUMBER OF DIPOLES (?)
C  MWORK:  MAXIMUM SIZE OF REAL WORK ARRAY
C  MIWORK: MAXIMUM SIZE OF INTEGER WORK ARRAY
C  MCWORK: MAXIMUM SIZE OF CHARACTER WORK ARRAY
./ ADD NAME=NBTYPE
./ NUMBER NEW1=10,INCR=10
C NBTYPE
C
      COMMON/NBTYPE/NBTYPE(MAXATM)
C
C  NBTYPE:   ATOM TYPE  (ECEPP ORDER)
C
./ ADD NAME=PRIMRY
./ NUMBER NEW1=10,INCR=10
C PRIMRY                                                                
C                                                                       
       INTEGER LIST                                                     
       COMMON /PRIMRY/LIST(MAXRES)                                      
C                                                                       
C   LIST : AMINO ACID RESIDUE NUMBER                                    
C                                                                       
./ ADD NAME=REFRNC
./ NUMBER NEW1=10,INCR=10
C REFRNC
C
      COMMON/REFRNC/REFCRD(3,MAXATM),REFANG(MAXVAR)
C
C  REFCRD:    REFERENCE COORDINATES FOR COORDINATES GENERATION
C             (ECEPP ORDER)
C  REFANG:    REFERENCE ANGLES IN RADIAN (WAKO ORDER)
./ ADD NAME=SIZE
./ NUMBER NEW1=10,INCR=10
C SIZE
C  THIS COMMON BLOCK STORES THE NUMBERS RELATED TO PROTEIN SIZE
C
      COMMON/SIZE/NUMATM,NUMVAR,NN2,NUMINT,NSS,NUMRES
      COMMON/SIZE1/NATM1,NVAR1,NPAIR1
C
C  NUMATM:   NUMBER OF ATOMS IN A PROTEIN
C  NUMVAR:   NUMBER OF (DIHEDRAL) ANGLE VARIABLES
C  NN2:      NUMVAR*(NUMVAR+1)/2
C  NUMINT:     ?
C  NSS:      NUMBER OF S-S CROSSLINK (?)
C  NUMRES:   NUMBER OF RESIDUES
C  NATM1=NUMATM+1
C  NVAR1=NUMVAR+1
C  NPAIR1=(NUMVAR+1)*(NUMVAR+2)/2
./ ADD NAME=SSPAIR
./ NUMBER NEW1=10,INCR=10
C SSPAIR
C
      COMMON/SSPAIR/KSSPER(6,2,MAXSS),JSS(3,MAXSS),KSS(MAXSS2),
     >              LSS(MAXSS2),NPAIR(MAXSS,2)
C
C  KSSPER:    THE ATOM NUMBERS WHICH BELONG TO THE DISULPHITE BONDS
C
./ ADD NAME=TABLE1
./ NUMBER NEW1=10,INCR=10
C TABLE1
C
      COMMON/TABLE1/IFRONT(MAXVAR),NBACK(0:MAXVAR),IBACK(2,0:MAXVAR)
C
C  IFRONT:  UNIT NUMBER PRECEDING TO THE I-TH BOND ANGLE
C  NBACK : NUMBER OF DIHEDRAL ANGLES BEYOND THE UNIT
C  IBACK : THE NUMBER OF THE DIHEDRAL ANGLE (IN WAKO ORDER). IF
C          THERE IS NO DIHEDRAL ANGLE BEYOND THE UNIT (EG. AT THE END)
C          IBACK=0.
./ ADD NAME=TORSNP
./ NUMBER NEW1=10,INCR=10
C TORSNP
C ** ECEPP ORDER
      COMMON/TORSNP/AP(MAXVAR),NBP(MAXVAR),NSP(MAXVAR),IFTORP(MAXVAR)
C
C        : U=A(I){1+NS(I)COS(NB(I)*(DIHEDRAL ANGLE))}
C  AP     : A(I)
C  NBP    : NB(I)
C  NSP    : NS(I)
C  IFTORP : =1,  CALCULTES TORSIONAL ENERGY FOR THE DIHEDRAL ANGLE.
C          =0,  DOES NOT CALCULATE ENERGY FOR THE DIHEDRAL ANGLE.
C  THIS IS A LOCAL COMMON IN PRECEP.
./ ADD NAME=TORSN0
./ NUMBER NEW1=10,INCR=10
C TORSN0
C
      COMMON/TORSN0/A(MAXVAR),NB(MAXVAR),NS(MAXVAR),IFTOR(MAXVAR)
C
C        : U=A(I){1+NS(I)COS(NB(I)*(DIHEDRAL ANGLE))}
C  A     : A(I)
C  NB    : NB(I)
C  NS    : NS(I)
C  IFTOR : =1,  CALCULTES TORSIONAL ENERGY FOR THE DIHEDRAL ANGLE.
C          =0,  DOES NOT CALCULATE ENERGY FOR THE DIHEDRAL ANGLE.
./ ADD NAME=UNITNUMS
./ NUMBER NEW1=10,INCR=10
C  UNITNUMS.CMN
C
C  THIS FILE CONTAINS THE  COMMON BLOCK NECESSARY
C  TO ASSIGN ALL I/0 UNIT NUMBERS. A SUMMARY OF ALL I/O FILES USED BY
C  IMPACT APPEARS BELOW, ORGANIZED BY TASK.
C
C
      COMMON/UNITNU  /IN1,IN2,IN3,IN4,IFN4,
     *               IOUT1,IOUT2,IOUT3,
     * IN01,IOUT02,IOUT06,
C
C PREIN
C
     * IN11,IN13,IOUT12,IOUT14,IOUT16,IN15,IN17,IOUT18,IN19,IOUT20,
C
C PRECEP
C
     * IN21,IN23,IN25,IN27,IN29,
     * IOUT22,IOUT24,IOUT26,IOUT28,IOUT30,
C
C MINIMIZATION
C
     * IN31,IN33,IN35,IN37,IN39,
     * IOUT32,IOUT34,IOUT36,IOUT38,IOUT39,IOUT40,
C
C NOMAL MODE
C
     *IN41,IN43,IN45,IN47,IN49,
     *IOUT42,IOUT44,IOUT46,IOUT48,IOUT50,IOUT52,IOUT54,IOUT56,IOUT58,
     *IOUT60,IOUT62,IOUT64
C
C PRIMARY INPUT FILE ----- IN01
C PRIMARY OUTPUT FILE ---- IOUT02
C PRIMARY LOG FILE ------- IOUT06
C
C ODD NUMBERS ARE RESERVED FOR INPUT,
C EVEN NUMBERS ARE RESERVED FOR OUTPUT
C FOR EXPLICIT DEFINITIONS OF INPUT AND OUTPUT FILES, PLEASE SEE MAIN
./ ADD NAME=VARANG
./ NUMBER NEW1=10,INCR=10
C VARANG
C
      COMMON/VARANG/ANGRAD(10,MAXRES),VAR(MAXVAR),INDXV(MAXVAR),
     >              ANGLES(10,MAXRES)
C
C  ANGRAD :  DIHEDRAL ANGLES IN ECCEP ORDER (RADIAN)
C  VAR:    DIHEDRAL ANGLES IN WAKO ORDER (RADIAN)
C  INDXV : INDVX=NNN*100+MMM (MMM:1-10)
C            NNN: RESIDUE NUMBER
C            MMM: DIHEDRAL ANGLE NUMBER IN THE RESIDUE(NNN) IN ECEPP
C                 ORDER
C  ANGLES: DIHEDRAL ANGLES IN ECEPP ORDER (DEGREE)
C          USED AS THE WORK]]
./ ADD NAME=WKCAL1
./ NUMBER NEW1=10,INCR=10
C ** WKCAL1
        COMMON/WKCAL1/IPA(MAXPER),IPB(MAXPER),MFLAGX(MAXPER)
C
C THIS VARIABLE APPEARS IN THE SUBROUTINES:
C     DCALA,DCALZ,ECALZ,ECALX,ECALZ,DCALX
./ ADD NAME=WKCAL2
./ NUMBER NEW1=10,INCR=10
C ** WKCAL2
        COMMON/WKCAL2/R(MAXPER),R2X(MAXPER)
C
C THIS VARIABLE APPEARS IN THE SUBROUTINES:
C     DCALZ,ECALZ,ECALX,DCALX
./ ADD NAME=WKCAL3
./ NUMBER NEW1=10,INCR=10
C ** WKCAL3
        COMMON/WKCAL3/CAB(MAXPER),DAB(MAXPER),
     >        XA(MAXPER),YA(MAXPER),ZA(MAXPER),
     >        XB(MAXPER),YB(MAXPER),ZB(MAXPER),
     >        XAB(MAXPER),YAB(MAXPER),ZAB(MAXPER),
     >        XAXB(MAXPER),YAXB(MAXPER),ZAXB(MAXPER)
C
C THIS VARIABLE APPEARS IN THE SUBROUTINES:
C     DCALA,DCALZ,DCALX
./ ADD NAME=WKDRVTV
./ NUMBER NEW1=10,INCR=10
C ** WKDRVTV
        COMMON/WKDRVT/LAB(2*MAXVAR),EF(6*MAXVAR),VECPRD(3,MAXVAR)
C
C THIS VARIABLE APPEARS IN THE SUBROUTINES:
C     DRVTVA,DRVTVZ,DRVTVX
./ ADD NAME=WKENRG
./ NUMBER NEW1=10,INCR=10
C ** WKENRG
        COMMON/WKENRG/JPAIR1(MAXPER),JPAIR2(MAXPER),JAA(2*MAXVAR),
     >                JBB(2*MAXVAR),JBF(2*MAXVAR)
C
C THIS VARIABLE APPEARS IN THE SUBROUTINES:
C     ENRGYZ,ENRGYX,DRVTVA,DRVTVZ,DRVTVX
./ ADD NAME=WORK
./ NUMBER NEW1=10,INCR=10
        COMMON/WORK/WRK(MWORK),IWRK(MIWORK)
        COMMON/WORKST /CWRK(MCHWOR )
        CHARACTER*4 CWRK
C WRK IS LARGE REAL*8 WORK ARRAY
C IWRK IS LARGE INTEGER WORK ARRAY
C CWRK IS LARGE CHARACTER ARRAY
C    IT SHOULD BE PASSED FROM MAIN TO THE SUBROUTINES BY WAY OF
C    CALL STATEMENT ARGUMENTS AND THE NECESSARY PORTIONS DIMENSIONED IN 
C    SUBROUTINE
C
./ ADD NAME=WORKMANA
./ NUMBER NEW1=10,INCR=10
        COMMON/WRKMAN / ILSTRE  ,ILSTIN ,ILSTCH  ,ILSTLO
        COMMON/WRKLOG / PRNTME
        LOGICAL PRNTME
C
C  ILSTREAL - LAST ELEMENT USED IN REAL WORK ARRAY
C  ILSTINT - LAST ELEMENT USED IN INTEGER WORK ARRAY
C  ILSTCHAR - LAST ELEMENT USED IN CHARACTER WORK ARRAY
C  ILSTLOG - LAST ELEMENT USED IN LOGICAL WORK ARRAY
C
//SYSUT2 DD DSN=INSPIDAS.COMMON,UNIT=PUB,
//  SPACE=(TRK,(100,10,40),RLSE),
//  DISP=(NEW,CATLG),
//  DCB=(RECFM=FB,LRECL=80,BLKSIZE=6320)
/* INSPIDAS.DATA
//  EXEC UPDATE,PARM=NEW
//SYSIN DD *
./ ADD NAME=BD8
./ NUMBER NEW1=10,INCR=10
  0.036674  0.047174  0.036299  0.040255  0.036299  0.033044  0.067858  
  0.033044  0.056716  0.067858  0.0       0.058609  0.058609  0.058609  
  0.080291  0.052946  0.052946  0.078815  0.078815  0.0       0.0       
  0.059833  0.057869  0.062672  0.072759
  8.526400  7.840000  8.555625  8.265625  8.555625 12.390400 11.088900 1
 12.390400 10.956100 11.088900  0.0      10.336225 10.336225 10.336225  
  9.120400  9.486400  9.486400 12.496225 12.496225  0.0       0.0       
 12.673590 14.707225 13.579219 12.852225
  0.047174  0.061354  0.046672  0.051990  0.046672  0.040689  0.084574  
  0.040689  0.070783  0.084574  0.0      -0.127311 -0.127311  0.073636  
 -0.258316 -0.719493 -0.719493  0.096962  0.096962  0.0       0.0       
  0.073500  0.070030  0.076444  0.089248
  7.840000  7.182400  7.868025  7.590025  7.868025 11.560000 10.304100 1
 11.560000 10.176100 10.304100  0.0       7.980835  7.980835  9.579025  
  5.999003  4.489329  4.489329 11.662225 11.662225  0.0       0.0       
 11.833590 13.801225 12.709220 12.006225
  0.036299  0.046672  0.035929  0.039838  0.035929  0.032764  0.067250  
  0.032764  0.056204  0.067250  0.0       0.058065  0.058065  0.058065  
  0.079498  0.052433  0.052433  0.078150  0.078150  0.0       0.0       
  0.059331  0.057418  0.062164  0.072153
  8.555625  7.868025  8.584900  8.294400  8.584900 12.425625 11.122225 1
 12.425625 10.989225 11.122225  0.0      10.368400 10.368400 10.368400  
  9.150625  9.517225  9.517225 12.531600 12.531600  0.0       0.0       
 12.709215 14.745600 13.616094 12.888100
  0.040255  0.051990  0.039838  0.044252  0.039838  0.035696  0.073630  
  0.035696  0.061570  0.073630  0.0      -0.127311 -0.127311  0.063782  
 -1.381367 -0.843454 -0.843454  0.085113  0.085113  0.0       0.0       
  0.064578  0.062116  0.067467  0.078487
  8.265625  7.590025  8.294400  8.008900  8.294400 12.075625 10.791225 1
 12.075625 10.660225 10.791225  0.0       7.980835  7.980835 10.048900  
  4.614906  4.867679  4.867679 12.180100 12.180100  0.0       0.0       
 12.355215 14.364100 13.249594 12.531600
  0.036299  0.046672  0.035929  0.039838  0.035929  0.032764  0.067250  
  0.032764  0.056204  0.067250  0.0       0.058065  0.058065  0.058065  
  0.079498  0.052433  0.052433  0.078150  0.078150  0.0       0.0       
  0.059331  0.057418  0.062164  0.072153
  8.555625  7.868025  8.584900  8.294400  8.584900 12.425625 11.122225 1
 12.425625 10.989225 11.122225  0.0      10.368400 10.368400 10.368400  
  9.150625  9.517225  9.517225 12.531600 12.531600  0.0       0.0       
 12.709215 14.745600 13.616094 12.888100
  0.033044  0.040689  0.032764  0.035696  0.032764  0.037880  0.071801  
  0.037880  0.060713  0.071801  0.0       0.062490  0.062490  0.062490  
  0.081753  0.056120  0.056120  0.091727  0.091727  0.0       0.0       
  0.066563  0.066225  0.071126  0.081572
 12.390400 11.560000 12.425625 12.075625 12.425625 16.974400 15.444900 1
 16.974400 15.288100 15.444900  0.0      14.554225 14.554225 14.554225  
 13.104400 13.542400 13.542400 17.098225 17.098225  0.0       0.0       
 17.305588 19.669225 18.361218 17.514225
  0.067858  0.084574  0.067250  0.073630  0.067250  0.071801  0.140057  
  0.071801  0.117642  0.140057  0.0       0.120653  0.120653  0.120653  
  0.159407  0.107725  0.107725  0.172720  0.172720  0.0       0.0       
  0.128243  0.127370  0.136504  0.156764
 11.088900 10.304100 11.122225 10.791225 11.122225 15.444900 13.987600 1
 15.444900 13.838400 13.987600  0.0      13.140625 13.140625 13.140625  
 11.764900 12.180100 12.180100 15.563025 15.563025  0.0       0.0       
 15.760889 18.020025 16.769019 15.960025
  0.056716  0.070783  0.056204  0.061570  0.056204  0.060713  0.117642  
  0.060713  0.099290  0.117642  0.0       0.102560  0.102560  0.102560  
  0.136300  0.092580  0.092580  0.146486  0.146486  0.0       0.0       
  0.090826  0.088598  0.096154  0.111095
 10.956100 10.176100 10.989225 10.660225 10.989225 15.288100 13.838400 1
 15.288100 13.690000 13.838400  0.0      12.996025 12.996025 12.996025  
 11.628100 12.040900 12.040900 15.405625 15.405625  0.0       0.0       
 15.602489 17.850625 16.605619 15.800625
  0.033044  0.040689  0.032764  0.035696  0.032764  0.037880  0.071801  
  0.037880  0.060713  0.071801  0.0       0.062490  0.062490  0.062490  
  0.081753  0.056120  0.056120  0.091727  0.091727  0.0       0.0       
  0.066563  0.066225  0.071126  0.081572
 12.390400 11.560000 12.425625 12.075625 12.425625 16.974400 15.444900 1
 16.974400 15.288100 15.444900  0.0      14.554225 14.554225 14.554225  
 13.104400 13.542400 13.542400 17.098225 17.098225  0.0       0.0       
 17.305588 19.669225 18.361218 17.514225
  0.056716  0.070783  0.056204  0.061570  0.056204  0.060713  0.117642  
  0.060713  0.099290  0.117642  0.0       0.102560  0.102560  0.102560  
  0.136300  0.092580  0.092580  0.146486  0.146486  0.0       0.0       
  0.090826  0.088598  0.096154  0.111095
 10.956100 10.176100 10.989225 10.660225 10.989225 15.288100 13.838400 1
 15.288100 13.690000 13.838400  0.0      12.996025 12.996025 12.996025  
 11.628100 12.040900 12.040900 15.405625 15.405625  0.0       0.0       
 15.602489 17.850625 16.605619 15.800625
  0.067858  0.084574  0.067250  0.073630  0.067250  0.071801  0.140057  
  0.071801  0.117642  0.140057  0.0       0.120653  0.120653  0.120653  
  0.159407  0.107725  0.107725  0.172720  0.172720  0.0       0.0       
  0.128243  0.127370  0.136504  0.156764
 11.088900 10.304100 11.122225 10.791225 11.122225 15.444900 13.987600 1
 15.444900 13.838400 13.987600  0.0      13.140625 13.140625 13.140625  
 11.764900 12.180100 12.180100 15.563025 15.563025  0.0       0.0       
 15.760889 18.020025 16.769019 15.960025
  0.0       0.0       0.0       0.0       0.0       0.0       0.0       
  0.0       0.0       0.0       0.0       0.0       0.0       0.0       
  0.0       0.0       0.0       0.0       0.0       0.0       0.0       
  0.0       0.0       0.0       0.0
  0.0       0.0       0.0       0.0       0.0       0.0       0.0       
  0.0       0.0       0.0       0.0       0.0       0.0       0.0       
  0.0       0.0       0.0       0.0       0.0       0.0       0.0       
  0.0       0.0       0.0       0.0
  0.058609 -0.127311  0.058065 -0.127311  0.058065  0.062490  0.120653  
  0.062490  0.102560  0.120653  0.0       0.107303  0.107303  0.107303  
  0.144733  0.098806  0.098806  0.151336  0.151336  0.0       0.0       
  0.102974  0.098769  0.108300  0.125883
 10.336225  7.980835 10.368400  7.980835 10.368400 14.554225 13.140625 1
 14.554225 12.996025 13.140625  0.0      12.320100 12.320100 12.320100  
 10.989225 11.390625 11.390625 14.668900 14.668900  0.0       0.0       
 14.861014 17.056900 15.840394 15.054400
  0.058609 -0.127311  0.058065 -0.127311  0.058065  0.062490  0.120653  
  0.062490  0.102560  0.120653  0.0       0.107303  0.107303  0.107303  
  0.144733  0.098806  0.098806  0.151336  0.151336  0.0       0.0       
  0.108623  0.104408  0.114310  0.132775
 10.336225  7.980835 10.368400  7.980835 10.368400 14.554225 13.140625 1
 14.554225 12.996025 13.140625  0.0      12.320100 12.320100 12.320100  
 10.989225 11.390625 11.390625 14.668900 14.668900  0.0       0.0       
 14.861014 17.056900 15.840394 15.054400
  0.058609  0.073636  0.058065  0.063782  0.058065  0.062490  0.120653  
  0.062490  0.102560  0.120653  0.0       0.107303  0.107303  0.107303  
  0.144733  0.098806  0.098806  0.151336  0.151336  0.0       0.0       
  0.102974  0.098769  0.108300  0.125883
 10.336225  9.579025 10.368400 10.048900 10.368400 14.554225 13.140625 1
 14.554225 12.996025 13.140625  0.0      12.320100 12.320100 12.320100  
 10.989225 11.390625 11.390625 14.668900 14.668900  0.0       0.0       
 14.861014 17.056900 15.840394 15.054400
  0.0       0.0       0.0       0.0       0.0       0.0       0.0       
  0.0       0.0       0.0       0.0       0.0       0.0       0.0       
  0.0       0.0       0.0       0.0       0.0       0.0       0.0       
  0.0       0.0       0.0       0.0
  0.0       0.0       0.0       0.0       0.0       0.0       0.0       
  0.0       0.0       0.0       0.0       0.0       0.0       0.0       
  0.0       0.0       0.0       0.0       0.0       0.0       0.0       
  0.0       0.0       0.0       0.0
  0.080291 -0.258316  0.079498 -1.381367  0.079498  0.081753  0.159407  
  0.081753  0.136300  0.159407  0.0       0.144733  0.144733  0.144733  
  0.200036  0.136367  0.136367  0.198283  0.198283  0.0       0.0       
  0.140329  0.131064  0.145892  0.171243
  9.120400  5.999003  9.150625  4.614906  9.150625 13.104400 11.764900 1
 13.104400 11.628100 11.764900  0.0      10.989225 10.989225 10.989225  
  9.734400 10.112400 10.112400 13.213225 13.213225  0.0       0.0       
 13.395590 15.484225 14.326219 13.579225
  0.052946 -0.719493  0.052433 -0.843454  0.052433  0.056120  0.107725  
  0.056120  0.092580  0.107725  0.0       0.098806  0.098806  0.098806  
  0.136367  0.093891  0.093891  0.136717  0.136717  0.0       0.0       
  0.095162  0.088546  0.098954  0.116266
  9.486400  4.489329  9.517225  4.867679  9.517225 13.542400 12.180100 1
 13.542400 12.040900 12.180100  0.0      11.390625 11.390625 11.390625  
 10.112400 10.497600 10.497600 13.653025 13.653025  0.0       0.0       
 13.838390 15.960025 14.784019 14.025025
  0.052946 -0.719493  0.052433 -0.843454  0.052433  0.056120  0.107725  
  0.056120  0.092580  0.107725  0.0       0.098806  0.098806  0.098806  
  0.136367  0.093891  0.093891  0.136717  0.136717  0.0       0.0       
  0.095162  0.088546  0.098954  0.116266
  9.486400  4.489329  9.517225  4.867679  9.517225 13.542400 12.180100 1
 13.542400 12.040900 12.180100  0.0      11.390625 11.390625 11.390625  
 10.112400 10.497600 10.497600 13.653025 13.653025  0.0       0.0       
 13.838390 15.960025 14.784019 14.025025
  0.078815  0.096962  0.078150  0.085113  0.078150  0.091727  0.172720  
  0.091727  0.146486  0.172720  0.0       0.151336  0.151336  0.151336  
  0.198283  0.136717  0.136717  0.222609  0.222609  0.0       0.0       
  0.046304  0.044023  0.048851  0.056892
 12.496225 11.662225 12.531600 12.180100 12.531600 17.098225 15.563025 1
 17.098225 15.405625 15.563025  0.0      14.668900 14.668900 14.668900  
 13.213225 13.653025 13.653025 17.222500 17.222500  0.0       0.0       
 17.430613 19.802500 18.489993 17.640000
  0.078815  0.096962  0.078150  0.085113  0.078150  0.091727  0.172720  
  0.091727  0.146486  0.172720  0.0       0.151336  0.151336  0.151336  
  0.198283  0.136717  0.136717  0.222609  0.222609  0.0       0.0       
  0.046304  0.044023  0.048851  0.056892
 12.496225 11.662225 12.531600 12.180100 12.531600 17.098225 15.563025 1
 17.098225 15.405625 15.563025  0.0      14.668900 14.668900 14.668900  
 13.213225 13.653025 13.653025 17.222500 17.222500  0.0       0.0       
 17.430613 19.802500 18.489993 17.640000
  0.0       0.0       0.0       0.0       0.0       0.0       0.0       
  0.0       0.0       0.0       0.0       0.0       0.0       0.0       
  0.0       0.0       0.0       0.0       0.0       0.0       0.0       
  0.0       0.0       0.0       0.0
  0.0       0.0       0.0       0.0       0.0       0.0       0.0       
  0.0       0.0       0.0       0.0       0.0       0.0       0.0       
  0.0       0.0       0.0       0.0       0.0       0.0       0.0       
  0.0       0.0       0.0       0.0
  0.0       0.0       0.0       0.0       0.0       0.0       0.0       
  0.0       0.0       0.0       0.0       0.0       0.0       0.0       
  0.0       0.0       0.0       0.0       0.0       0.0       0.0       
  0.0       0.0       0.0       0.0
  0.0       0.0       0.0       0.0       0.0       0.0       0.0       
  0.0       0.0       0.0       0.0       0.0       0.0       0.0       
  0.0       0.0       0.0       0.0       0.0       0.0       0.0       
  0.0       0.0       0.0       0.0
  0.0       0.0       0.0       0.0       0.0       0.0       0.0       
  0.0       0.0       0.0       0.0       0.0       0.0       0.0       
  0.0       0.0       0.0       0.0       0.0       0.0       0.0       
  0.0       0.0       0.0       0.0
  0.0       0.0       0.0       0.0       0.0       0.0       0.0       
  0.0       0.0       0.0       0.0       0.0       0.0       0.0       
  0.0       0.0       0.0       0.0       0.0       0.0       0.0       
  0.0       0.0       0.0       0.0
  0.059833  0.073500  0.059331  0.064578  0.059331  0.066563  0.128243  
  0.066563  0.090826  0.128243  0.0       0.102974  0.108623  0.102974  
  0.140329  0.095162  0.095162  0.046304  0.046304  0.0       0.0       
  0.119985  0.122348  0.129182  0.146935
 12.673590 11.833590 12.709215 12.355215 12.709215 17.305588 15.760889 1
 17.305588 15.602489 15.760889  0.0      14.861014 14.861014 14.861014  
 13.395590 13.838390 13.838390 17.430613 17.430613  0.0       0.0       
 17.639977 20.025612 18.705606 17.850613
  0.057869  0.070030  0.057418  0.062116  0.057418  0.066225  0.127370  
  0.066225  0.088598  0.127370  0.0       0.098769  0.104408  0.098769  
  0.131064  0.088546  0.088546  0.044023  0.044023  0.0       0.0       
  0.122348  0.130012  0.133821  0.150018
 14.707225 13.801225 14.745600 14.364100 14.745600 19.669225 18.020025 1
 19.669225 17.850625 18.020025  0.0      17.056900 17.056900 17.056900  
 15.484225 15.960025 15.960025 19.802500 19.802500  0.0       0.0       
 20.025612 22.562500 21.159993 20.250000
  0.062672  0.076444  0.062164  0.067467  0.062164  0.071126  0.136504  
  0.071126  0.096154  0.136504  0.0       0.108300  0.114310  0.108300  
  0.145892  0.098954  0.098954  0.048851  0.048851  0.0       0.0       
  0.129182  0.133821  0.139982  0.158320
 13.579219 12.709220 13.616094 13.249594 13.616094 18.361218 16.769019 1
 18.361218 16.605619 16.769019  0.0      15.840394 15.840394 15.840394  
 14.326219 14.784019 14.784019 18.489993 18.489993  0.0       0.0       
 18.705606 21.159993 19.802486 18.922493
  0.072759  0.089248  0.072153  0.078487  0.072153  0.081572  0.156764  
  0.081572  0.111095  0.156764  0.0       0.125883  0.132775  0.125883  
  0.171243  0.116266  0.116266  0.056892  0.056892  0.0       0.0       
  0.146935  0.150018  0.158320  0.179984
 12.852225 12.006225 12.888100 12.531600 12.888100 17.514225 15.960025 1
 17.514225 15.800625 15.960025  0.0      15.054400 15.054400 15.054400  
 13.579225 14.025025 14.025025 17.640000 17.640000  0.0       0.0       
 17.850613 20.250000 18.922493 18.062500
  2.04    3.052   3.052   3.855
   20.0    20.0    20.0    2.0
  1.40494871328474977D  1 -3.02633557544833138D  2  2.70261569447627193D
 -1.28139463054633252D  4  3.40398990186287638D  4 -4.80681160192799161D
  2.82085863608563459D  4  4.4475988          D  0  4.02892521665999084D
./ ADD NAME=SDATX
./ NUMBER NEW1=10,INCR=10
ALANINE
   10    1-0.9437972 0.3305252-0.0993245 0.9950551
  -1   1
  1.35        3    1    4
      0.333790-0.520653-0.785815       3  5  3         8
                                     N  14     -4.59    0    7 10
   -0.4226    0.9063    0.0          HN  2      2.27    7    4  6
    1.4530    0.0       0.0          CA  9      0.82    0    0  0
    1.7849   -0.4925    0.9140       HA  1      0.26    0    7 10
    1.9637   -0.7966   -1.2023       CB  6     -1.17    0    0  0
    1.9587    1.4440    0.0          C   7      5.80    0    8 10
    1.1648    2.3835    0.0          O  17     -4.95    8    0  0
    1.6006   -1.8224   -1.1392      1HB  1      0.52    0    0  0
    1.6006   -0.3386   -2.1223      2HB  1      0.52    0    0  0
    3.0537   -0.7963   -1.2019      3HB  1      0.52    0    0  0
    3.2771    1.5756    0.0
ASPARTIC ACID
   13    3-0.9437972 0.3305252-0.0993245 0.9950551
  -2   2
   1.35       3    1    4
  4.00        2   -1    6
      0.360012-0.453479-0.815321       3  5  3         8
      0.997682-0.033073-0.059480       5 10  2        11
      0.483317 0.425489 0.765090      10 11  1        13
                                     N  14     -4.59   11    7 10
   -0.4226    0.9063    0.0          HN  2      2.27    7    4  6
    1.4530    0.0       0.0          CA  9      0.82   13   11 12
    1.7394   -0.5422    0.9011       HA  1      0.26   11    7 10
    2.0038   -0.6938   -1.2474       CB  6     -1.29    0   13 13
    1.9587    1.4440    0.0          C   7      5.80   11    8 10
    1.1648    2.3835    0.0          O  17     -4.95    8    0  0
    1.6190   -1.7132   -1.2776      1HB  1      0.78   13   11 12
    1.6190   -0.1818   -2.1294      2HB  1      0.78   13   11 12
    3.5302   -0.7444   -1.3384       CG  7      6.44    0    0  0
    4.1537   -0.1955   -0.3514       OD218     -4.51    0    0  0
    4.0951   -1.2810   -2.3031       OD117     -4.64    0   13 13
    5.1416   -0.2707   -0.4866       HD2 4      2.83    0    0  0
    3.2771    1.5756    0.0
CYSTINE
   10    1-0.9494258 0.3139916-0.1166749 0.9931702
  -3   3
  1.35        3    1    4
  0.75        3    1    5
 10.0         2    1    6
      0.369731-0.515152-0.773251       3  5  3         8
                                     N  14     -4.59    0    7 10
   -0.4226    0.9063    0.0          HN  2      2.27    7    4  6
    1.4530    0.0       0.0          CA  9      0.82    0    0  0
    1.7661   -0.5112    0.9103       HA  1      0.26    0    7 10
    2.0187   -0.7882   -1.1831       CB  6     -1.16    0    0  0
    1.9334    1.4526    0.0          C   7      5.80    0    8 10
    1.1232    2.3781    0.0          O  17     -4.95    8    0  0
    1.6404   -1.8093   -1.1355      1HB  1      0.71    0    0  0
    1.6404   -0.3509   -2.1071      2HB  1      0.71    0    0  0
    3.8460   -0.8430   -1.2654       SG 21      0.13    0    0  0
    3.2494    1.6072    0.0
GLUTAMIC ACID
   16    4-0.9378933 0.3469239-0.0818840 0.9966419
  -4   3
   1.35       3    1    4
  1.35        3    1    5
   4.00       2   -1    7
      0.358376-0.514654-0.778909       3  5  3         8
      1.000000 0.0      0.0            5 10  3        11
      0.358345-0.514676-0.778908      10 13  2        14
     -0.694671-0.397220-0.599707      13 14  1        16
                                     N  14     -4.59   11    7 10
   -0.4226    0.9063    0.0          HN  2      2.27    7    4  6
    1.4530    0.0       0.0          CA  9      0.82   14   11 13
    1.7427   -0.5017    0.9233       HA  1      0.26   11    7 10
    2.0013   -0.7874   -1.1917       CB  6     -0.39   16   14 15
    1.9838    1.4350    0.0          C   7      5.80   11    8 10
    1.2064    2.3882    0.0          O  17     -4.95    8    0  0
    1.6341   -1.8130   -1.1545      1HB  1      0.39   14   11 13
    1.6341   -0.3510   -2.1206      2HB  1      0.39   14   11 13
    3.5313   -0.7874   -1.1917       CG  6     -1.42    0   16 16
    3.8985    0.2382   -1.2290      1HG  1      0.71   16   14 15
    3.8985   -1.2239   -0.2629      2HG  1      0.71   16   14 15
    4.0796   -1.5749   -2.3835       CD  7      6.44    0    0  0
    3.1835   -2.0873   -3.1571       OE218     -4.51    0    0  0
    5.3043   -1.6818   -2.5453       OE117     -4.64    0   16 16
    3.6219   -2.5827   -3.9070       HE2 4      2.71    0    0  0
    3.3044    1.5435    0.0
PHENYLALANINE
   20    2-0.9335824 0.3583627-0.0697349 0.9975656
  -5   1
   1.35       3    1    4
      0.292360-0.460991-0.837862       3  5  3         8
      0.992548-0.058693-0.106797       5 10 10        11
                                     N  14     -4.59   11    7 10
   -0.4226    0.9063    0.0          HN  2      2.27    7    4  6
    1.4530    0.0       0.0          CA  9      0.82    0   11 20
    1.7765   -0.5114    0.9066       HA  1      0.26   11    7 10
    1.9003   -0.7053   -1.2819       CB  6     -0.52    0    0  0
    2.0013    1.4284    0.0          C   7      5.80   11    8 10
    1.2356    2.3910    0.0          O  17     -4.95    8    0  0
    1.4836   -1.7124   -1.2948      1HB  1      0.32    0   11 20
    1.4836   -0.1770   -2.1395      2HB  1      0.32    0   11 20
    3.4189   -0.7951   -1.4453       CG 10      0.26    0    0  0
    3.9503   -1.3986   -2.5422       CD1 8     -0.19    0    0  0
    4.2374   -0.2716   -0.4937       CD2 8     -0.19    0    0  0
    3.2943   -1.8182   -3.3049       HD1 3      0.13    0    0  0
    5.3597   -1.4820   -2.6938       CE1 8     -0.19    0    0  0
    5.6468   -0.3550   -0.6453       CE2 8     -0.19    0    0  0
    3.8115    0.2120    0.3854       HD2 3      0.13    0    0  0
    5.7856   -1.9656   -3.5729       HE1 3      0.13    0    0  0
    6.1782   -0.9585   -1.7422       CZ  8      0.19    0    0  0
    6.3028    0.0646    0.1174       HE2 3      0.13    0    0  0
    7.2601   -1.0225   -1.8585       HZ  3      0.06    0    0  0
    3.3231    1.5208    0.0
GLYCINE
    7    0-0.9335824 0.3583627-0.0697349 0.9975656
   6
                                     N  14     -4.43    0    7  7
   -0.4226    0.9063    0.0          HN  2      2.27    7    4  6
    1.4530    0.0       0.0          CA  9     -0.11    0    0  0
    1.8202   -0.5343    0.8762      1HA  1      0.71    0    7  7
    1.8202   -0.5343   -0.8762      2HA  1      0.71    0    0  0
    2.0013    1.4284    0.0          C   7      5.80    0    0  0
    1.2356    2.3910    0.0          O  17     -4.95    0    0  0
    3.3231    1.5208    0.0
HISTIDINE
   17    2-0.9420621 0.3354387-0.0941078 0.9955620
  -7   1
   1.35       3    1    4
      0.355103-0.537785-0.764650       3  5  3         8
      0.998443-0.032118-0.045627       5 10  7        11
                                     N  14     -4.59   11    7 10
   -0.4226    0.9063    0.0          HN  2      2.27    7    4  6
    1.4530    0.0       0.0          CA  9      0.82    0   11 17
    1.7658   -0.4880    0.9231       HA  1      0.26   11    7 10
    1.9963   -0.8228   -1.1699       CB  6     -0.51    0    0  0
    1.9662    1.4413    0.0          C   7      5.80   11    8 10
    1.1773    2.3850    0.0          O  17     -4.95    8    0  0
    1.6134   -1.8405   -1.0938      1HB  1      0.19    0   11 17
    1.6134   -0.4071   -2.1019      2HB  1      0.19    0   11 17
    3.5040   -0.8713   -1.2388       CG 10      0.71    0    0  0
    4.1876   -1.5636   -2.2231       ND114     -3.22    0    0  0
    4.4515   -0.3061   -0.4368       CD2 8      1.03    0    0  0
    3.7713   -2.0867   -2.9668       HD1 2      1.93    0    0  0
    5.4873   -1.4156   -2.0126       CE1 8      2.45    0    0  0
    5.6488   -0.6364   -0.9048       NE214     -3.09    0    0  0
    4.2578    0.3120    0.4399       HD2 3      0.45    0    0  0
    6.2871   -1.8416   -2.6184       HE1 3      0.26    0    0  0
    3.2854    1.5660    0.0
ISOLEUCINE
   19    4-0.9437972 0.3305252-0.0993245 0.9950551
  -8   4
   1.35       3    1    4
  1.35        3    1    5
  1.35        3    1    6
  1.35        3    1    7
      0.350197-0.548499-0.759283       3  5  3         8
     -0.379217 0.310917-0.871508       5  9  3        14
      0.999962-0.005163-0.007059       5 10  3        11
      0.350197-0.548498-0.759284      10 16  3        17
                                     N  14     -4.59   11    7 10
   -0.4226    0.9063    0.0          HN  2      2.27    7    4  6
    1.4530    0.0       0.0          CA  9      0.82   17   11 16
    1.7797   -0.4805    0.9222       HA  1      0.26   11    7 10
    1.9888   -0.8392   -1.1617       CB  9     -0.06    0   17 19
    1.9587    1.4440    0.0          C   7      5.80   11    8 10
    1.1648    2.3835    0.0          O  17     -4.95    8    0  0
    1.6625   -1.8692   -1.0179       HB  1      0.32   17   11 16
    1.4086   -0.3635   -2.4951       CG2 6     -0.96   17   14 16
    3.5188   -0.8471   -1.1725       CG1 6     -0.25    0   11 13
    0.3225   -0.4528   -2.4713      1HG2 1      0.32   14    0  0
    1.6840    0.6781   -2.6602      2HG2 1      0.32   14    0  0
    1.8059   -0.9770   -3.3037      3HG2 1      0.32   14    0  0
    3.8906    0.1742   -1.2551      1HG1 1      0.19    0   17 19
    3.8906   -1.2463   -0.2289      2HG1 1      0.19    0   17 19
    4.0546   -1.6863   -2.3342       CD1 6     -0.96    0    0  0
    3.7005   -2.7124   -2.2348      1HD1 1      0.32    0    0  0
    3.7005   -1.2695   -3.2771      2HD1 1      0.32    0    0  0
    5.1444   -1.6749   -2.3183      3HD1 1      0.32    0    0  0
    3.2771    1.5756    0.0
LYSINE
   21    5-0.9437972 0.3305252-0.0993245 0.9950551
  -9   5
   1.35       3    1    4
   1.35       3    1    5
   1.35       3    1    6
   1.35       3    1    7
  0.90        3    1    8
      0.350197-0.548499-0.759283       3  5  3         8
      0.999962-0.005163-0.007059       5 10  3        11
      0.350197-0.548498-0.759284      10 13  3        14
      0.999963-0.005098-0.007059      13 16  3        17
      0.342023-0.550331-0.761680      16 19  2        20
                                     N  14     -4.59   11    7 10
   -0.4226    0.9063    0.0          HN  2      2.27    7    4  6
    1.4530    0.0       0.0          CA  9      0.82   14   11 13
    1.7797   -0.4805    0.9222       HA  1      0.26   11    7 10
    1.9888   -0.8392   -1.1617       CB  6     -0.39   17   14 16
    1.9587    1.4440    0.0          C   7      5.80   11    8 10
    1.1648    2.3835    0.0          O  17     -4.95    8    0  0
    1.6169   -1.8605   -1.0798      1HB  1      0.19   14   11 13
    1.6169   -0.4400   -2.1053      2HB  1      0.19   14   11 13
    3.5188   -0.8471   -1.1725       CG  6     -0.32   20   17 19
    3.8906    0.1742   -1.2551      1HG  1      0.26   17   14 16
    3.8906   -1.2463   -0.2289      2HG  1      0.26   17   14 16
    4.0546   -1.6863   -2.3342       CD  6     -0.39    0   20 21
    3.6827   -2.7076   -2.2516      1HD  1      0.26   20   17 19
    3.6827   -1.2871   -3.2778      2HD  1      0.26   20   17 19
    5.5845   -1.6941   -2.3450       CE  6      1.42    0    0  0
    5.9587   -0.6738   -2.4289      1HE  1     -0.06    0   20 21
    5.9587   -2.0943   -1.4027      2HE  1     -0.06    0   20 21
    6.0907   -2.5086   -3.4723       NZ 14     -5.09    0    0  0
    5.7789   -3.4718   -3.4151      1HZ  2      1.93    0    0  0
    7.1041   -2.5293   -3.5010      2HZ  2      1.93    0    0  0
    3.2771    1.5756    0.0
LEUCINE
   19    4-0.9437972 0.3305252-0.0993245 0.9950551
 -10   4
   1.35       3    1    4
   1.35       3    1    5
   1.35       3    1    6
   1.35       3    1    7
      0.350197-0.548499-0.759283       3  5  3         8
      0.995394-0.056142-0.077710       5 10  3        11
      0.267203-0.564276-0.781150      10 12  3        14
      0.408367 0.911964-0.039477      10 13  3        17
                                     N  14     -4.59   11    7 10
   -0.4226    0.9063    0.0          HN  2      2.27    7    4  6
    1.4530    0.0       0.0          CA  9      0.82   14   11 13
    1.7797   -0.4805    0.9222       HA  1      0.26   11    7 10
    1.9888   -0.8392   -1.1617       CB  6     -0.38    0   14 19
    1.9587    1.4440    0.0          C   7      5.80   11    8 10
    1.1648    2.3835    0.0          O  17     -4.95    8    0  0
    1.5941   -1.8507   -1.0656      1HB  1      0.28   14   11 13
    1.5941   -0.4301   -2.0917      2HB  1      0.28   14   11 13
    3.5118   -0.9251   -1.2806       CG  9     -0.13    0    0  0
    3.8975   -1.4120   -0.3849       HG  1      0.32    0   14 19
    3.9206   -1.7884   -2.4757       CD1 6     -0.95    0   17 19
    4.1366    0.4702   -1.3410       CD2 6     -0.95    0   14 16
    3.5225   -2.7953   -2.3497      1HD1 1      0.32   17    0  0
    3.5225   -1.3524   -3.3920      2HD1 1      0.32   17    0  0
    5.0080   -1.8326   -2.5369      3HD1 1      0.32   17    0  0
    3.7480    1.0051   -2.2076      1HD2 1      0.32    0    0  0
    3.8873    1.0195   -0.4331      2HD2 1      0.32    0    0  0
    5.2196    0.3800   -1.4253      3HD2 1      0.32    0    0  0
    3.2771    1.5756    0.0
METHIONINE
   17    4-0.9335824 0.3583627-0.0697349 0.9975656
 -11   4
  1.35        3    1    4
  1.35        3    1    5
  1.00        3    1    6
  1.00        3    1    7
      0.333787-0.485681-0.807899       3  5  3         8
      0.999658-0.013464-0.022418       5 10  3        11
      0.317319-0.488639-0.812737      10 13  1        14
      0.989015 0.076190 0.126666      13 14  3        15
                                     N  14     -4.59   11    7 10
   -0.4226    0.9063    0.0          HN  2      2.27    7    4  6
    1.4530    0.0       0.0          CA  9      0.82   14   11 13
    1.7457   -0.5091    0.9183       HA  1      0.26   11    7 10
    1.9637   -0.7431   -1.2361       CB  6     -0.13   15   14 14
    2.0013    1.4284    0.0          C   7      5.80   11    8 10
    1.2356    2.3910    0.0          O  17     -4.95    8    0  0
    1.5826   -1.7643   -1.2341      1HB  1      0.39   14   11 13
    1.5826   -0.2624   -2.1371      2HB  1      0.39   14   11 13
    3.4932   -0.7637   -1.2704       CG  6     -1.55    0   15 17
    3.8789    0.2557   -1.2752      1HG  1      0.58   15   14 14
    3.8789   -1.2461   -0.3722      2HG  1      0.58   15   14 14
    4.0596   -1.6359   -2.7211       SD 20      0.45    0    0  0
    5.8250   -1.4999   -2.4950       CE  6     -2.45    0    0  0
    6.1084   -0.4476   -2.4720      1HE  1      0.71    0    0  0
    6.1084   -1.9731   -1.5549      2HE  1      0.71    0    0  0
    6.3363   -1.9959   -3.3200      3HE  1      0.71    0    0  0
    3.3231    1.5208    0.0
ASPARAGINE
   14    3-0.9437972 0.3305252-0.0993245 0.9950551
 -12   2
  1.35        3    1    4
   7.50       2   -1    6
      0.360012-0.453479-0.815321       3  5  3         8
      0.999999 0.000850 0.001503       5 10  2        11
      0.405136 0.444386 0.798991      10 11  2        13
                                     N  14     -4.59   11    7 10
   -0.4226    0.9063    0.0          HN  2      2.27    7    4  6
    1.4530    0.0       0.0          CA  9      0.82   13   11 12
    1.7394   -0.5422    0.9011       HA  1      0.26   11    7 10
    2.0038   -0.6938   -1.2474       CB  6     -1.55    0   13 14
    1.9587    1.4440    0.0          C   7      5.80   11    8 10
    1.1648    2.3835    0.0          O  17     -4.95    8    0  0
    1.6375   -1.7196   -1.2891      1HB  1      0.71   13   11 12
    1.6375   -0.1881   -2.1409      2HB  1      0.71   13   11 12
    3.5338   -0.6925   -1.2451       CG  7      5.92    0    0  0
    4.0726   -0.1015   -0.1825       ND214     -5.73    0    0  0
    4.1821   -1.1949   -2.1483       OD117     -4.83    0   13 14
    3.4834    0.2913    0.5236      1HD2 2      2.58    0    0  0
    5.0670   -0.0498   -0.0896      2HD2 2      2.58    0    0  0
    3.2771    1.5756    0.0
PROLINE-DOWN
   14    0-0.9335808 0.3583671-0.0697341 0.9975656
  13   0   3
                                     N  14     -3.67    0    7  7
   -0.5705    1.3439    0.0          CD  6      1.29    0    7  7
    1.4530    0.0       0.0          CA  9      0.64    0    0  0
    1.8280   -0.7563   -0.6896       HA  1      0.51    0    7  7
    1.8464    1.4008   -0.4396       CB  6     -0.32    0    0  0
    2.0013    1.4284    0.0          C   7      5.86    0    0  0
    1.2356    2.3910    0.0          O  17     -4.95    0    8 14
    2.6920    1.7694    0.1411      1HB  1      0.19    0    0  0
    2.1502    1.4108   -1.4864      2HB  1      0.19    0    0  0
    0.6166    2.2671   -0.2211       CG  6     -0.64    0    0  0
    0.7579    2.9203    0.6400      1HG  1      0.32    0    0  0
    0.4445    2.9103   -1.0841      2HG  1      0.32    0    0  0
   -1.0711    1.5615    0.9435      1HD  1      0.13    0    0  0
   -1.3137    1.4586   -0.7890      2HD  1      0.13    0    0  0
    3.3231    1.5208    0.0
GLUTAMINE
   17    4-0.9378933 0.3469239-0.0818840 0.9966419
 -14   3
  1.35        3    1    4
  1.35        3    1    5
   7.50       2   -1    7
      0.358376-0.514654-0.778909       3  5  3         8
      1.000000 0.0      0.0            5 10  3        11
      0.358345-0.514676-0.778908      10 13  2        14
     -0.707148-0.389777-0.589929      13 14  2        16
                                     N  14     -4.59   11    7 10
   -0.4226    0.9063    0.0          HN  2      2.27    7    4  6
    1.4530    0.0       0.0          CA  9      0.82   14   11 13
    1.7427   -0.5017    0.9233       HA  1      0.26   11    7 10
    2.0013   -0.7874   -1.1917       CB  6     -0.38   16   14 15
    1.9838    1.4350    0.0          C   7      5.80   11    8 10
    1.2064    2.3882    0.0          O  17     -4.95    8    0  0
    1.6341   -1.8130   -1.1545      1HB  1      0.26   14   11 13
    1.6341   -0.3510   -2.1206      2HB  1      0.26   14   11 13
    3.5313   -0.7874   -1.1917       CG  6     -1.42    0   16 17
    3.8985    0.2382   -1.2290      1HG  1      0.64   16   14 15
    3.8985   -1.2239   -0.2629      2HG  1      0.64   16   14 15
    4.0796   -1.5749   -2.3835       CD  7      6.06    0    0  0
    3.1391   -2.0933   -3.1681       NE214     -5.54    0    0  0
    5.2772   -1.7032   -2.5777       OE117     -4.89    0   16 17
    2.1732   -1.9506   -2.9521      1HE2 2      2.38    0    0  0
    3.3980   -2.6258   -3.9740      2HE2 2      2.38    0    0  0
    3.3044    1.5435    0.0
ARGININE
   23    7-0.9378933 0.3469239-0.0818840 0.9966419
 -15   6
   1.35       3    1    4
   1.35       3    1    5
   1.35       3    1    6
  9.0         2   -1    8
 10.0         2   -1    9
 10.0         2   -1   10
      0.360000-0.483791-0.797713       3  5  3         8
      0.999999 0.000915 0.001503       5 10  3        11
      0.359989-0.483841-0.797688      10 13  3        14
      0.999815 0.010000 0.016420      13 16  2        17
      0.576441-0.423776-0.698663      16 18  2        19
      0.994152 0.055984 0.092347      18 20  1        21
     -0.411487-0.472672-0.779269      18 19  2        22
                                     N  14     -4.59   11    7 10
   -0.4226    0.9063    0.0          HN  2      2.27    7    4  6
    1.4530    0.0       0.0          CA  9      0.82   14   11 13
    1.7317   -0.5213    0.9158       HA  1      0.26   11    7 10
    2.0038   -0.7402   -1.2205       CB  6     -0.39   17   14 16
    1.9838    1.4350    0.0          C   7      5.80   11    8 10
    1.2064    2.3881    0.0          O  17     -4.95    8    0  0
    1.6375   -1.7668   -1.2235      1HB  1      0.19   14   11 13
    1.6375   -0.2685   -2.1323      2HB  1      0.19   14   11 13
    3.5338   -0.7388   -1.2182       CG  6     -0.39   19   17 18
    3.9001    0.2878   -1.2152      1HG  1      0.39   17   14 16
    3.9001   -1.2106   -0.3064      2HG  1      0.39   17   14 16
    4.0846   -1.4791   -2.4387       CD  6      1.29   21   19 20
    3.7230   -2.5073   -2.4444      1HD  1      0.13   19   17 18
    3.7230   -1.0090   -3.3532      2HD  1      0.13   19   17 18
    5.5643   -1.4643   -2.4144       NE 14     -4.51    0   21 23
    6.0160   -1.0017   -1.6515       HE  2      2.19   21   19 20
    6.3425   -2.0364   -3.3576       CZ 10      6.19    0    0  0
    5.7870   -2.6745   -4.4096       NH214     -5.28    0   21 21
    7.6548   -1.9625   -3.2357       NH114     -5.41    0   22 23
    8.3002   -2.3586   -3.8888      1HH1 2      1.16   22    0  0
    4.7919   -2.7260   -4.4945      1HH2 2      2.06    0    0  0
    6.3705   -3.0956   -5.1040      2HH2 2      2.06    0    0  0
    3.3044    1.5435    0.0
SERINE
   11    2-0.9396883 0.3420320-0.0871736 0.9961932
 -16   2
  1.35        3    1    4
   0.3000     3    1    5
      0.360004-0.500202-0.787525       3  5  3         8
      0.999876-0.008491-0.013263       5 10  1        11
                                     N  14     -4.59   11    7 10
   -0.4226    0.9063    0.0          HN  2      2.27    7    4  6
    1.4530    0.0       0.0          CA  9      0.82    0   11 11
    1.7416   -0.5122    0.9178       HA  1      0.26   11    7 10
    2.0038   -0.7653   -1.2049       CB  6      1.67    0    0  0
    1.9763    1.4377    0.0          C   7      5.80   11    8 10
    1.1939    2.3868    0.0          O  17     -4.95    8    0  0
    1.6328   -1.7901   -1.1839      1HB  1      0.26    0   11 11
    1.6328   -0.3109   -2.1235      2HB  1      0.26    0   11 11
    3.4286   -0.7774   -1.2238       OG 18     -3.99    0    0  0
    3.7558   -1.2840   -2.0214       HG  4      2.19    0    0  0
    3.2962    1.5532    0.0
THREONINE
   14    3-0.9372817 0.3485727-0.0802284 0.9967765
 -17   3
  1.35        3    1    4
  0.3000      3    1    5
   1.35       3    1    6
      0.309029-0.538644-0.783814       3  5  3         8
      0.997688 0.038526 0.056001       5 10  1        11
     -0.212020 0.438614-0.873307       5  9  3        12
                                     N  14     -4.59   11    7 10
   -0.4226    0.9063    0.0          HN  2      2.27    7    4  6
    1.4530    0.0       0.0          CA  9      0.82    0   11 14
    1.7966   -0.4689    0.9220       HA  1      0.26   11    7 10
    1.9258   -0.8241   -1.1992       CB  9      2.06    0    0  0
    1.9863    1.4340    0.0          C   7      5.80   11    8 10
    1.2106    2.3886    0.0          O  17     -4.95    8    0  0
    1.5187   -1.8345   -1.1619       HB  1      0.19    0   11 14
    1.6014   -0.1530   -2.5354       CG2 6     -1.22    0   11 11
    3.3475   -0.7692   -1.1194       OG118     -4.00    0   12 14
    3.7526   -1.2870   -1.8728      1HG1 4      2.19   12    0  0
    2.0917    0.8194   -2.5821      1HG2 1      0.39    0    0  0
    0.5230   -0.0208   -2.6232      2HG2 1      0.39    0    0  0
    1.9584   -0.7795   -3.3528      3HG2 1      0.39    0    0  0
    3.3070    1.5403    0.0
VALINE
   16    3-0.9437972 0.3305252-0.0993245 0.9950551
 -18   3
  1.35        3    1    4
  1.35        3    1    5
  1.35        3    1    6
      0.342016-0.533775-0.773375       3  5  3         8
      0.999849-0.009869-0.014314       5 10  3        11
     -0.367463-0.929901 0.015948       5  9  3        14
                                     N  14     -4.59   11    7 10
   -0.4226    0.9063    0.0          HN  2      2.27    7    4  6
    1.4530    0.0       0.0          CA  9      0.82    0   11 16
    1.7819   -0.4870    0.9180       HA  1      0.26   11    7 10
    1.9763   -0.8167   -1.1833       CB  9      0.10    0    0  0
    1.9587    1.4440    0.0          C   7      5.80   11    8 10
    1.1648    2.3835    0.0          O  17     -4.95    8    0  0
    1.6329   -0.3367   -2.0997       HB  1      0.21    0   11 16
    1.4141   -2.2394   -1.1589       CG2 6     -0.92    0   11 13
    3.5061   -0.8318   -1.2052       CG1 6     -0.92    0   14 16
    3.8783    0.1889   -1.2932      1HG1 1      0.32   14    0  0
    3.8783   -1.2761   -0.2821      2HG1 1      0.32   14    0  0
    3.8514   -1.4191   -2.0561      3HG1 1      0.32   14    0  0
    1.7137   -2.7326   -0.2341      1HG2 1      0.32    0    0  0
    0.3262   -2.2013   -1.2144      2HG2 1      0.32    0    0  0
    1.8021   -2.7980   -2.0107      3HG2 1      0.32    0    0  0
    3.2771    1.5756    0.0
TRYPTOPHAN
   24    2-0.9510543 0.3090237-0.1218886 0.9925438
 -19   1
  1.35        3    1    4
      0.358379-0.527274-0.770420       3  5  3         8
      0.998628-0.029608-0.043203       5 10 14        11
                                     N  14     -4.59   11    7 10
   -0.4226    0.9063    0.0          HN  2      2.27    7    4  6
    1.4530    0.0       0.0          CA  9      0.82    0   11 24
    1.7862   -0.5002    0.9093       HA  1      0.26   11    7 10
    2.0013   -0.8067   -1.1787       CB  6     -0.39    0    0  0
    1.9258    1.4551    0.0          C   7      5.80   11    8 10
    1.1108    2.3763    0.0          O  17     -4.95    8    0  0
    1.6202   -1.8261   -1.1167      1HB  1      0.19    0   11 24
    1.6202   -0.3799   -2.1065      2HB  1      0.19    0   11 24
    3.5292   -0.8520   -1.2448       CG 10     -0.32    0    0  0
    4.2978   -1.4719   -2.1507       CD1 8      1.10    0    0  0
    4.4485   -0.2236   -0.3267       CD210      0.06    0    0  0
    4.2018    0.5582    0.8155       CE3 8     -1.03    0    0  0
    5.7342   -0.5067   -0.7404       CE210      1.93    0    0  0
    5.6397   -1.2900   -1.8848       NE114     -3.61    0    0  0
    3.9116   -2.0476   -2.9918       HD1 3      0.00    0    0  0
    3.1962    0.7957    1.1626       HE3 3      1.03    0    0  0
    5.3514    1.0094    1.4749       CZ3 8     -0.26    0    0  0
    6.8740   -0.0475   -0.0695       CZ2 8     -0.77    0    0  0
    6.4722   -1.6873   -2.4654       HE1 2      1.68    0    0  0
    5.2167    1.6203    2.3675       HZ3 3      0.13    0    0  0
    6.6525    0.7332    1.0713       CH2 8     -0.06    0    0  0
    7.8795   -0.2851   -0.4166       HZ2 3      0.39    0    0  0
    7.4966    1.1227    1.6404       HH2 3      0.13    0    0  0
    3.2409    1.6166    0.0
TYROSINE
   21    3-0.9335824 0.3583627-0.0697349 0.9975656
 -20   2
  1.35        3    1    4
  1.75        2   -1    6
      0.275629-0.454523-0.847017       3  5  3         8
      0.990269-0.065817-0.122615       5 10 10        11
      0.990267-0.065807-0.122643      18 20  1        21
                                     N  14     -4.59   11    7 10
   -0.4226    0.9063    0.0          HN  2      2.27    7    4  6
    1.4530    0.0       0.0          CA  9      0.82   21   11 20
    1.7894   -0.5104    0.9024       HA  1      0.26   11    7 10
    1.8747   -0.6954   -1.2959       CB  6     -0.52    0   21 21
    2.0013    1.4284    0.0          C   7      5.80   11    8 10
    1.2356    2.3910    0.0          O  17     -4.95    8    0  0
    1.4494   -1.6989   -1.3128      1HB  1      0.32   21   11 20
    1.4494   -0.1548   -2.1414      2HB  1      0.32   21   11 20
    3.3898   -0.7961   -1.4835       CG 10      0.26    0   21 21
    3.9068   -1.4012   -2.6111       CD1 8     -0.13    0   21 21
    4.2394   -0.2819   -0.5253       CD2 8     -0.13    0   21 21
    3.2356   -1.8074   -3.3679       HD1 3      0.13    0   21 21
    5.3328   -1.4960   -2.7877       CE1 8     -0.77    0   21 21
    5.6654   -0.3767   -0.7019       CE2 8     -0.77    0   21 21
    3.8311    0.1960    0.3652       HD2 3      0.13    0   21 21
    5.7543   -1.9713   -3.6734       HE1 3      0.39    0   21 21
    6.1417   -0.9790   -1.8244       CZ 10      2.90    0    0  0
    6.3477    0.0253    0.0471       HE2 3      0.39    0   21 21
    7.4885   -1.0685   -1.9912       OH 18     -4.25    0    0  0
    7.9579   -0.6510   -1.2132       HH  4      2.12    0    0  0
    3.3231    1.5208    0.0
CYSTEINE
   11    2-0.9494258 0.3139916-0.1166749 0.9931702
 -21   2
  1.35        3    1    4
  0.750       3    1    5
      0.369731-0.515152-0.773251       3  5  3         8
      0.999560 0.016448 0.024700       5 10  1        11
                                     N  14     -4.59   11    7 10
   -0.4226    0.9063    0.0          HN  2      2.27    7    4  6
    1.4530    0.0       0.0          CA  9      0.82    0   11 11
    1.7661   -0.5112    0.9103       HA  1      0.26   11    7 10
    2.0187   -0.7882   -1.1831       CB  6     -1.35    0    0  0
    1.9334    1.4526    0.0          C   7      5.80   11    8 10
    1.1232    2.3781    0.0          O  17     -4.95    8    0  0
    1.6627   -1.8178   -1.1483      1HB  1      0.71    0   11 11
    1.6627   -0.3594   -2.1199      2HB  1      0.71    0   11 11
    3.8479   -0.7581   -1.1379       SG 20      0.19    0    0  0
    4.0261   -1.4888   -2.2348       HG  5      0.13    0    0  0
    3.2494    1.6072    0.0
H-PRO-DOWN
   15    1-0.9335808 0.3583671-0.0698093 0.9975604
 -22   1   3
  0.300       3    1    4
     -0.169197 0.462961-0.870081      10 11  1        15
                                     N  14     -3.67    0    7  7
   -0.5705    1.3439    0.0          CD  6      0.96    0    7  7
    1.4530    0.0       0.0          CA  9      0.64    0    0  0
    1.8280   -0.7563   -0.6896       HA  1      0.51    0    7  7
    1.8464    1.4008   -0.4396       CB  6     -0.64    0    0  0
    2.0013    1.4284    0.0          C   7      5.86    0   15 15
    1.2356    2.3910    0.0          O  17     -4.95   15    8 14
    2.6920    1.7694    0.1411      1HB  1      0.26    0   15 15
    2.1502    1.4108   -1.4864      2HB  1      0.26    0   15 15
    0.6166    2.2671   -0.2211       CG  9      2.21    0    0  0
    0.3645    2.9569   -1.5175       OD118     -4.16    0    0  0
    0.7390    2.9099    0.5351       HG  1      0.08    0   15 15
   -1.0711    1.5615    0.9435      1HD2 1      0.26    0   15 15
   -1.3137    1.4586   -0.7890      2HD2 1      0.26    0   15 15
   -0.4386    3.5476   -1.4401       HD1 4      2.12    0    0  0
    3.3231    1.5208    0.0
NORLEUCINE
   19    4-0.9437972 0.3305252-0.0993245 0.9950551
 -23   4
  1.35        3    1    4
  1.35        3    1    5
  1.35        3    1    6
  1.35        3    1    7
      0.350197-0.548499-0.759283       3  5  3         8
      0.999962-0.005163-0.007059       5 10  3        11
      0.350197-0.548498-0.759284      10 13  3        14
      0.999963-0.005098-0.007059      13 16  3        17
                                     N  14     -4.59   11    7 10
   -0.4226    0.9063    0.0          HN  2      2.27    7    4  6
    1.4530    0.0       0.0          CA  9      0.82   14   11 13
    1.7797   -0.4805    0.9222       HA  1      0.26   11    7 10
    1.9888   -0.8392   -1.1617       CB  6     -0.39   17   14 16
    1.9587    1.4440    0.0          C   7      5.80   11    8 10
    1.1648    2.3835    0.0          O  17     -4.95    8    0  0
    1.6169   -1.8605   -1.0791      1HB  1      0.26   14   11 13
    1.6169   -0.4400   -2.1053      2HB  1      0.26   14   11 13
    3.5188   -0.8471   -1.1725       CG  6     -0.32    0   17 19
    3.8906    0.1742   -1.2551      1HG  1      0.26   17   14 16
    3.8906   -1.2463   -0.2289      2HG  1      0.26   17   14 16
    4.0546   -1.6863   -2.3342       CD  6     -0.45    0    0  0
    3.6827   -2.7076   -2.2516      1HD  1      0.26    0   17 19
    3.6827   -1.2870   -3.2778      2HD  1      0.26    0   17 19
    5.5845   -1.6941   -2.3450       CE  6     -0.97    0    0  0
    5.9523   -0.6736   -2.4522      1HE  1      0.32    0    0  0
    5.9523   -2.1165   -1.4099      2HE  1      0.32    0    0  0
    5.9389   -2.2977   -3.1806      3HE  1      0.32    0    0  0
    3.2771    1.5756    0.0
ORNITHINE
   18    4-0.9378933 0.3469239-0.0818840 0.9966419
 -24   4
  1.35        3    1    4
  1.35        3    1    5
  1.35        3    1    6
  0.90        3    1    7
      0.305684-0.481239-0.821564       3  5  3         8
      0.998440-0.028236-0.048170       5 10  3        11
      0.305684-0.481239-0.821564      10 13  3        14
      0.998892-0.023783-0.040607      13 16  2        17
                                     N  14     -4.59   11    7 10
   -0.4226    0.9063    0.0          HN  2      2.27    7    4  6
    1.4530    0.0       0.0          CA  9      0.82   14   11 13
    1.7815   -0.5049    0.9084       HA  1      0.26   11    7 10
    1.9207   -0.7363   -1.2570       CB  6     -0.39   17   14 16
    1.9838    1.4350    0.0          C   7      5.80   11    8 10
    1.2064    2.3882    0.0          O  17     -4.95    8    0  0
    1.5242   -1.7516   -1.2568      1HB  1      0.26   14   11 13
    1.5242   -0.2395   -2.1425      2HB  1      0.26   14   11 13
    3.4483   -0.7795   -1.3307       CG  6     -0.32    0   17 18
    3.8448    0.2359   -1.3309      1HG  1      0.26   17   14 16
    3.8448   -1.2762   -0.4452      2HG  1      0.26   17   14 16
    3.9160   -1.5158   -2.5877       CD  6      1.41    0    0  0
    3.5218   -2.5320   -2.5889      1HD  1     -0.06    0   17 18
    3.5218   -1.0199   -3.4747      2HD  1     -0.06    0   17 18
    5.3944   -1.5510   -2.6478       NE 14     -5.09    0    0  0
    5.9346   -1.1257   -1.9217      1HE  2      1.93    0    0  0
    5.8530   -2.0002   -3.4146      2HE  2      1.93    0    0  0
    3.3044    1.5435    0.0
ORNITHINE +
   19    4-0.9378933 0.3469239-0.0818840 0.9966419
 -25   4
  1.35        3    1    4
  1.35        3    1    5
  1.35        3    1    6
  0.90        3    1    7
      0.305684-0.481239-0.821564       3  5  3         8
      0.998440-0.028236-0.048170       5 10  3        11
      0.305684-0.481239-0.821564      10 13  3        14
      0.998892-0.023783-0.040607      13 16  3        17
                                     N  14     -4.59   11    7 10
   -0.4226    0.9063    0.0          HN  2      2.27    7    4  6
    1.4530    0.0       0.0          CA  9      0.82   14   11 13
    1.7815   -0.5049    0.9084       HA  1      0.26   11    7 10
    1.9207   -0.7363   -1.2570       CB  6     -0.38   17   14 16
    1.9838    1.4350    0.0          C   7      5.80   11    8 10
    1.2064    2.3882    0.0          O  17     -4.95    8    0  0
    1.5242   -1.7516   -1.2568      1HB  1      0.19   14   11 13
    1.5242   -0.2395   -2.1425      2HB  1      0.19   14   11 13
    3.4483   -0.7795   -1.3307       CG  6     -1.29    0   17 19
    3.8448    0.2359   -1.3309      1HG  1      1.29   17   14 16
    3.8448   -1.2762   -0.4452      2HG  1      1.29   17   14 16
    3.9160   -1.5158   -2.5877       CD  6      0.64    0    0  0
    3.5218   -2.5320   -2.5889      1HD  1      1.55    0   17 19
    3.5218   -1.0199   -3.4747      2HD  1      1.55    0   17 19
    5.3944   -1.5510   -2.6478       NE 15     -4.12    0    0  0
    5.7495   -0.6164   -2.6677      1HE  2      4.12    0    0  0
    5.7495   -2.0255   -1.8423      2HE  2      4.12    0    0  0
    5.6830   -2.0349   -3.4740      3HE  2      4.12    0    0  0
    3.3044    1.5435    0.0
HIS (NEUTRAL) #2
   17    2-0.9420621 0.3354387-0.0941078 0.9955620
 -26   1
  1.35        3    1    4
      0.355103-0.537785-0.764650       3  5  3         8
      0.998443-0.032118-0.045627       5 10  7        11
                                     N  14     -4.59   11    7 10
   -0.4226    0.9063    0.0          HN  2      2.27    7    4  6
    1.4530    0.0       0.0          CA  9      0.82    0   11 17
    1.7658   -0.4880    0.9231       HA  1      0.26   11    7 10
    1.9963   -0.8228   -1.1699       CB  6     -0.97    0    0  0
    1.9662    1.4413    0.0          C   7      5.80   11    8 10
    1.1773    2.3850    0.0          O  17     -4.95    8    0  0
    1.6134   -1.8405   -1.0938      1HB  1      0.53    0   11 17
    1.6134   -0.4071   -2.1019      2HB  1      0.53    0   11 17
    3.5040   -0.8713   -1.2388       CG 10      1.29    0    0  0
    4.1876   -1.5636   -2.2231       ND114     -2.97    0    0  0
    4.4515   -0.3061   -0.4368       CD2 8      0.69    0    0  0
    4.2578    0.3120    0.4399       HD2 3      0.23    0    0  0
    5.6488   -0.6364   -0.9048       NE214     -3.28    0    0  0
    5.4873   -1.4156   -2.0126       CE1 8      2.35    0    0  0
    6.2871   -1.8416   -2.6184       HE1 3      0.14    0    0  0
    6.5236   -0.3132   -0.5438       HE2 2      1.85    0    0  0
    3.2854    1.5660    0.0
HISTIDINE +
   18    2-0.9420621 0.3354387-0.0941078 0.9955620
 -27   1
  1.35        3    1    4
      0.355103-0.537785-0.764650       3  5  3         8
      0.998443-0.032118-0.045627       5 10  8        11
                                     N  14     -4.59   11    7 10
   -0.4226    0.9063    0.0          HN  2      2.27    7    4  6
    1.4530    0.0       0.0          CA  9      0.82    0   11 18
    1.7658   -0.4880    0.9231       HA  1      0.26   11    7 10
    1.9963   -0.8228   -1.1699       CB  6     -0.64    0    0  0
    1.9662    1.4413    0.0          C   7      5.80   11    8 10
    1.1773    2.3850    0.0          O  17     -4.95    8    0  0
    1.6134   -1.8405   -1.0938      1HB  1      0.84    0   11 18
    1.6134   -0.4071   -2.1019      2HB  1      0.84    0   11 18
    3.5040   -0.8713   -1.2388       CG 10      1.93    0    0  0
    4.1876   -1.5636   -2.2231       ND115     -2.58    0    0  0
    4.4515   -0.3061   -0.4368       CD2 8      1.29    0    0  0
    3.7713   -2.0867   -2.9668       HD1 2      3.54    0    0  0
    5.4873   -1.4156   -2.0126       CE1 8      3.54    0    0  0
    5.6488   -0.6364   -0.9048       NE215     -2.58    0    0  0
    4.2578    0.3120    0.4399       HD2 3      1.74    0    0  0
    6.2871   -1.8416   -2.6184       HE1 3      1.93    0    0  0
    6.5236   -0.3132   -0.5438       HE2 2      3.42    0    0  0
    3.2854    1.5660    0.0
LYSINE +
   22    5-0.9437972 0.3305252-0.0993245 0.9950551
 -28   5
   1.35       3    1    4
   1.35       3    1    5
   1.35       3    1    6
   1.35       3    1    7
  0.90        3    1    8
      0.350197-0.548499-0.759283       3  5  3         8
      0.999962-0.005163-0.007059       5 10  3        11
      0.350197-0.548498-0.759284      10 13  3        14
      0.999963-0.005098-0.007059      13 16  3        17
      0.342023-0.550331-0.761680      16 19  3        20
                                     N  14     -4.59   11    7 10
   -0.4226    0.9063    0.0          HN  2      2.27    7    4  6
    1.4530    0.0       0.0          CA  9      0.82   14   11 13
    1.7797   -0.4805    0.9222       HA  1      0.26   11    7 10
    1.9888   -0.8392   -1.1617       CB  6     -0.39   17   14 16
    1.9587    1.4440    0.0          C   7      5.80   11    8 10
    1.1648    2.3835    0.0          O  17     -4.95    8    0  0
    1.6169   -1.8605   -1.0798      1HB  1      0.19   14   11 13
    1.6169   -0.4400   -2.1053      2HB  1      0.19   14   11 13
    3.5188   -0.8471   -1.1725       CG  6     -0.32   20   17 19
    3.8906    0.1742   -1.2551      1HG  1      0.26   17   14 16
    3.8906   -1.2463   -0.2289      2HG  1      0.26   17   14 16
    4.0546   -1.6863   -2.3342       CD  6     -1.48    0   20 22
    3.6827   -2.7076   -2.2516      1HD  1      1.29   20   17 19
    3.6827   -1.2871   -3.2778      2HD  1      1.29   20   17 19
    5.5845   -1.6941   -2.3450       CE  6      0.64    0    0  0
    5.9587   -0.6738   -2.4289      1HE  1      1.55    0   20 22
    5.9587   -2.0943   -1.4027      2HE  1      1.55    0   20 22
    6.0907   -2.5086   -3.4723       NZ 15     -4.12    0    0  0
    5.7617   -3.4483   -3.3787      1HZ  2      4.12    0    0  0
    5.7617   -2.1246   -4.3351      2HZ  2      4.12    0    0  0
    7.0907   -2.5032   -3.4648      3HZ  2      4.12    0    0  0
    3.2771    1.5756    0.0
ARGININE +
   24    7-0.9378933 0.3469239-0.0818840 0.9966419
 -29   6
   1.35       3    1    4
   1.35       3    1    5
   1.35       3    1    6
  9.0         2   -1    8
 10.0         2   -1    9
 10.0         2   -1   10
      0.360000-0.483791-0.797713       3  5  3         8
      0.999999 0.000915 0.001503       5 10  3        11
      0.359989-0.483841-0.797688      10 13  3        14
      0.999815 0.010000 0.016420      13 16  2        17
      0.576439-0.423747-0.698682      16 18  2        19
      0.995886 0.047014 0.077462      18 20  2        21
     -0.419417-0.470836-0.776146      18 19  2        23
                                     N  14     -4.59   11    7 10
   -0.4226    0.9063    0.0          HN  2      2.27    7    4  6
    1.4530    0.0       0.0          CA  9      0.82   14   11 13
    1.7317   -0.5213    0.9158       HA  1      0.26   11    7 10
    2.0038   -0.7402   -1.2205       CB  6     -0.39   17   14 16
    1.9838    1.4350    0.0          C   7      5.80   11    8 10
    1.2064    2.3881    0.0          O  17     -4.95    8    0  0
    1.6375   -1.7668   -1.2235      1HB  1      0.19   14   11 13
    1.6375   -0.2685   -2.1323      2HB  1      0.19   14   11 13
    3.5338   -0.7388   -1.2182       CG  6     -0.39   19   17 18
    3.9001    0.2878   -1.2152      1HG  1      0.39   17   14 16
    3.9001   -1.2106   -0.3064      2HG  1      0.39   17   14 16
    4.0846   -1.4791   -2.4387       CD  6      1.56   21   19 20
    3.7230   -2.5073   -2.4444      1HD  1      0.14   19   17 18
    3.7230   -1.0090   -3.3532      2HD  1      0.14   19   17 18
    5.5643   -1.4643   -2.4144       NE 14     -3.86    0   21 24
    6.0160   -1.0017   -1.6515       HE  2      2.97   21   19 20
    6.3367   -2.0321   -3.3506       CZ 10      7.48    0    0  0
    5.7747   -2.6630   -4.3906       NH215     -5.01    0   21 22
    7.6712   -1.9691   -3.2468       NH115     -5.01    0   23 24
    8.0907   -1.4983   -2.4706      1HH1 2      3.62   23    0  0
    8.2477   -2.3929   -3.9454      2HH1 2      3.62   23    0  0
    4.7788   -2.7101   -4.4681      1HH2 2      3.62    0    0  0
    6.3512   -3.0868   -5.0893      2HH2 2      3.62    0    0  0
    3.3044    1.5435    0.0
BENZYL-ASPARTATE
   26    5-0.9437972 0.3305252-0.0993245 0.9950551
 -30   1
  1.35        3    1    4
      0.360012-0.453479-0.815321       3  5  3         8
      0.997682-0.033073-0.059480       5 10  2        11
      0.360001-0.453531-0.815297      10 12  1        13
      0.998721-0.024551-0.044205      12 13  3        14
      0.294014-0.464592-0.835291      13 16 10        17
                                     N  14     -4.59   11    7 10
   -0.4226    0.9063    0.0          HN  2      2.27    7    4  6
    1.4530    0.0       0.0          CA  9      0.82   13   11 12
    1.7394   -0.5422    0.9011       HA  1      0.51   11    7 10
    2.0038   -0.6938   -1.2474       CB  6     -1.21   14   13 13
    1.9587    1.4440    0.0          C   7      5.80   11    8 10
    1.1648    2.3835    0.0          O  17     -4.95    8    0  0
    1.6190   -1.7132   -1.2776      1H2B 1      0.71   13   11 12
    1.6190   -0.1818   -2.1294      2H2B 1      0.71   13   11 12
    3.5302   -0.7444   -1.3384       CG  7      6.18   17   14 16
    4.2219   -0.2441   -0.4389       O  17     -4.64   14   13 13
    4.0198   -1.3612   -2.4472       OD 19     -4.19    0   17 26
    5.4680   -1.3968   -2.5113       CE  6      1.29    0    0  0
    5.8663   -0.3824   -2.4901      1H2E 1      0.39    0   17 26
    5.8663   -1.9139   -1.6383      2H2E 1      0.39    0   17 26
    5.9208   -2.1123   -3.7977       CZ 10      0.21    0    0  0
    4.9950   -2.5965   -4.6683       CN1 8     -0.39    0    0  0
    7.2465   -2.2599   -4.0630       CN2 8     -0.39    0    0  0
    3.9325   -2.4782   -4.4556       HN1 3      0.39    0    0  0
    5.4126   -3.2562   -5.8544       CT1 8     -0.26    0    0  0
    7.6640   -2.9196   -5.2491       CT2 8     -0.26    0    0  0
    7.9885   -1.8717   -3.3652       HN2 3      0.39    0    0  0
    4.6706   -3.6444   -6.5522       HT1 3      0.39    0    0  0
    6.7382   -3.4038   -6.1197       CI  8     -0.35    0    0  0
    8.7265   -3.0379   -5.4618       HT2 3      0.39    0    0  0
    7.0587   -3.9102   -7.0302       HI  3      0.39    0    0  0
    3.2771    1.5756    0.0
ASPARTIC ACID -
   12    2-0.9437972 0.3305252-0.0993245 0.9950551
 -31   2
   1.35       3    1    4
  4.00        2   -1    6
      0.360012-0.453479-0.815321       3  5  3         8
      0.997682-0.033073-0.059480       5 10  2        11
                                     N  14     -4.59   11    7 10
   -0.4226    0.9063    0.0          HN  2      2.27    7    4  6
    1.4530    0.0       0.0          CA  9     -0.77    0   11 12
    1.7394   -0.5422    0.9011       HA  1      0.31   11    7 10
    2.0038   -0.6938   -1.2474       CB  6     -2.19    0    0  0
    1.9587    1.4440    0.0          C   7      5.80   11    8 10
    1.1648    2.3835    0.0          O  17     -4.95    8    0  0
    1.6190   -1.7132   -1.2776      1HB  1     -0.26    0   11 12
    1.6190   -0.1818   -2.1294      2HB  1     -0.26    0   11 12
    3.5302   -0.7444   -1.3384       CG  7      6.44    0    0  0
    4.1722   -0.2231   -0.4011       OD217     -7.34    0    0  0
    4.0206   -1.3033   -2.3432       OD117     -7.34    0    0  0
    3.2771    1.5756    0.0
GLUTAMIC ACID -
   15    3-0.9378933 0.3469239-0.0818840 0.9966419
 -32   3
   1.35       3    1    4
  1.35        3    1    5
   4.00       2   -1    7
      0.358376-0.514654-0.778909       3  5  3         8
      1.000000 0.0      0.0            5 10  3        11
      0.358345-0.514676-0.778908      10 13  2        14
                                     N  14     -4.59   11    7 10
   -0.4226    0.9063    0.0          HN  2      2.27    7    4  6
    1.4530    0.0       0.0          CA  9      0.82   14   11 13
    1.7427   -0.5017    0.9233       HA  1      0.26   11    7 10
    2.0013   -0.7874   -1.1917       CB  6     -1.54    0   14 15
    1.9838    1.4350    0.0          C   7      5.80   11    8 10
    1.2064    2.3882    0.0          O  17     -4.95    8    0  0
    1.6341   -1.8130   -1.1545      1HB  1      0.26   14   11 13
    1.6341   -0.3510   -2.1206      2HB  1      0.26   14   11 13
    3.5313   -0.7874   -1.1917       CG  6     -2.19    0    0  0
    3.8985    0.2382   -1.2290      1HG  1     -0.52    0   14 15
    3.8985   -1.2239   -0.2629      2HG  1     -0.52    0   14 15
    4.0796   -1.5749   -2.3835       CD  7      6.44    0    0  0
    3.2432   -2.0870   -3.1585       OE217     -7.34    0    0  0
    5.3227   -1.6469   -2.4925       OE117     -7.34    0    0  0
    3.3044    1.5435    0.0
PROLINE-UP
   14    0-0.9335808 0.3583671-0.0698093 0.9975604
  13   0   2
                                     N  14     -3.67    0    7  7
   -0.5707    1.3441    0.0          CD  6      1.29    0    7  7
    1.4530    0.0       0.0          CA  9      0.64    0    0  0
    1.8280   -0.6610   -0.7814       HA  1      0.51    0    7  7
    1.8464    1.4459   -0.2551       CB  6     -0.32    0    0  0
    2.0013    1.4284    0.0          C   7      5.86    0    0  0
    1.2356    2.3910    0.0          O  17     -4.95    0    8 14
    2.3558    1.8674    0.6115      1HB  1      0.19    0    0  0
    2.5361    1.5172   -1.0961      2HB  1      0.19    0    0  0
    0.5598    2.2012   -0.5458       CG  6     -0.64    0    0  0
    0.5687    3.1819   -0.0701      1HG  1      0.32    0    0  0
    0.4398    2.3673   -1.6163      2HG  1      0.32    0    0  0
   -0.8654    1.6565    1.0019      1HD  1      0.13    0    0  0
   -1.4602    1.4040   -0.6271      2HD  1      0.13    0    0  0
    3.3231    1.5208    0.0
PROLINE - FLAT
   14    0-0.9335808 0.3583671-0.0698093 0.9975604
  13   0   1
                                     N  14     -3.67    0    7  7
   -0.5703    1.3445    0.0          CD  6      1.29    0    7  7
    1.4530    0.0       0.0          CA  9      0.64    0    0  0
    1.8337   -0.5034   -0.8887       HA  1      0.51    0    7  7
    1.8412    1.4488    0.0          CB  6     -0.32    0    0  0
    2.0013    1.4284    0.0          C   7      5.86    0    0  0
    1.2356    2.3910    0.0          O  17     -4.95    0    8 14
    2.4436    1.6886    0.8762      1HB  1      0.19    0    0  0
    2.4436    1.6886   -0.8763      2HB  1      0.19    0    0  0
    0.5892    2.2191   -0.0001       CG  6     -0.64    0    0  0
    0.5581    2.8668    0.8762      1HG  1      0.32    0    0  0
    0.5581    2.8667   -0.8762      2HG  1      0.32    0    0  0
   -1.1935    1.5124    0.8761      1HD  1      0.13    0    0  0
   -1.1935    1.5124   -0.8762      2HD  1      0.13    0    0  0
    3.3231    1.5208    0.0
H-PROLINE-UP
   15    1-0.9335808 0.3583671-0.0698093 0.9975604
 -22   1   2
  0.300       3    1    4
     -0.104697-0.006375-0.994484      10 11  1        15
                                     N  14     -3.67    0    7  7
   -0.5707    1.3441    0.0          CD2 6      0.96    0    7  7
    1.4530    0.0       0.0          CA  9      0.64    0    0  0
    1.8280   -0.6610   -0.7814       HA  1      0.51    0    7  7
    1.8464    1.4459   -0.2551       CB  6     -0.64    0    0  0
    2.0013    1.4284    0.0          C   7      5.86    0   15 15
    1.2356    2.3910    0.0          O  17     -4.95   15    8 14
    2.3558    1.8674    0.6115      1HB  1      0.26    0   15 15
    2.5361    1.5172   -1.0961      2HB  1      0.26    0   15 15
    0.5598    2.2012   -0.5458       CG  9      2.21    0    0  0
    0.4038    2.1917   -2.0276       OD118     -4.16    0    0  0
    0.5598    3.1303   -0.1759       HG  1      0.08    0   15 15
   -0.8654    1.6565    1.0019      1HD2 1      0.26    0   15 15
   -1.4602    1.4040   -0.6271      2HD2 1      0.26    0   15 15
   -0.4312    2.6771   -2.2866       HD1 4      2.12    0    0  0
    3.3231    1.5208    0.0
H-PRO - FLAT
   15    1-0.9335808 0.3583671-0.0698093 0.9975604
 -22   1   1
  0.300       3    1    4
     -0.055480 0.531102-0.845490      10 11  1        15
                                     N  14     -3.67    0    7  7
   -0.5703    1.3445    0.0          CD2 6      0.96    0    7  7
    1.4530    0.0       0.0          CA  9      0.64    0    0  0
    1.8337   -0.5034   -0.8887       HA  1      0.51    0    7  7
    1.8412    1.4488    0.0          CB  6     -0.64    0    0  0
    2.0013    1.4284    0.0          C   7      5.86    0   15 15
    1.2356    2.3910    0.0          O  17     -4.95   15    8 14
    2.4436    1.6886    0.8762      1HB  1      0.26    0   15 15
    2.4436    1.6886   -0.8763      2HB  1      0.26    0   15 15
    0.5892    2.2191   -0.0001       CG  9      2.21    0    0  0
    0.5082    2.9945   -1.2345       OD118     -4.16    0    0  0
    0.5808    2.9017    0.8498       HG  1      0.08    0   15 15
   -1.1935    1.5124    0.8761      1HD2 1      0.26    0   15 15
   -1.1935    1.5124   -0.8762      2HD2 1      0.26    0   15 15
   -0.3393    3.5251   -1.2501       HD1 4      2.12    0    0  0
    3.3231    1.5208    0.0
AMINO - H2
    4    0    0    0    0    0    0    0    0    0    0    0    0    0
   1    0.0       0    0    0
    0
    7    0    0    0    0    0    0    0    0    0    0    0    0    0
    4    0    0    0    0    0    0    0    0    0    0    0    0    0
    6    0    0    0    0    0    0    0    0    0    0    0    0    0
   -0.3798   -0.9402    0.0000      1H2  2      2.27    0    0  0
    0.0       0.0       0.0          N  14     -4.59    0    0  0
   -0.3798    0.4701    0.8142      2H2  2      2.27    0    0  0
    1.4530    0.0       0.0          CA  9      0.82    0    0  0
AMINO - H3+
    5    0    0    0    0    0    0    0    0    0    0    0    0    0
   2    0.0       0    0    0
    0
    7    7    0    0    0    0    0    0    0    0    0    0    0    0
    4    4    0    0    0    0    0    0    0    0    0    0    0    0
    6    6    0    0    0    0    0    0    0    0    0    0    0    0
   -0.3380   -0.9560    0.0000      1H3  2      3.68    0    0  0
   -0.3380    0.4780   -0.8279      2H3  2      3.68    0    0  0
    0.0       0.0       0.0          N  15     -4.59    0    0  0
   -0.3380    0.4780    0.8279      3H3  2      3.68    0    0  0
    1.4530    0.0       0.0          CA  9      0.82    0    0  0
AMINO -CH3
    7    1    4    5    0    0    0    0    0    0    0    0    0    0
   3    0.0       0    0    0
    6
    4    4    4    7    0    0    0    0    0    0    0    0    0    0
    2    2    2    4    0    0    0    0    0    0    0    0    0    0
    3    3    3    6    0    0    0    0    0    0    0    0    0    0
   -1.8354   -1.0594    0.0         1H3  1      0.26    0    0  0
   -0.5141   -1.8533    0.8900      2H3  1      0.26    0    0  0
   -0.5141   -1.8533   -0.8900      3H3  1      0.26    0    0  0
   -0.7674   -1.2772    0.0          C   6     -0.78    0    0  0
    0.0       0.0       0.0          N  14     -4.59    0    0  0
   -0.4226    0.9063    0.0          HN  2      2.27    0    0  0
    1.4530    0.0       0.0          CA  9      0.82    0    0  0
AMINO-COCH3
    9    2    4    6    6    7    0    0    0    0    0    0    0    0
  -4   10.0000    2   -1    2
    5    8
    2    2    2    4    4    7    0    0    0    0    0    0    0    0
    1    1    1    2    2    4    0    0    0    0    0    0    0    0
    1    1    1    3    3    6    0    0    0    0    0    0    0    0
   -2.6331   -1.9640    0.0         1H3  1      0.26    0    5  5
   -2.4719   -0.4310   -0.8900      2H3  1      0.26    0    5  5
   -2.4719   -0.4310    0.8900      3H3  1      0.26    0    5  5
   -2.1643   -0.9800    0.0          C   6     -1.66    0    0  0
   -0.1724   -2.2550    0.0          O  17     -4.97    0    0  0
   -0.6824   -1.1358    0.0          C   7      5.85    0    0  0
    0.0       0.0       0.0          N  14     -4.59    0    0  0
   -0.4226    0.9063    0.0          HN  2      2.27    0    0  0
    1.4530    0.0       0.0          CA  9      0.82    0    0  0
FORMYL
    6    1    3    4    0    0    0    0    0    0    0    0    0    0
  -5   10.0000    2   -1    1
    5
    4    4    7    0    0    0    0    0    0    0    0    0    0    0
    2    2    4    0    0    0    0    0    0    0    0    0    0    0
    3    3    6    0    0    0    0    0    0    0    0    0    0    0
   -1.7320   -0.8281    0.0          H   3     -0.64    0    0  0
   -0.1583   -2.2687    0.0          O  17     -4.90    0    0  0
   -0.6901   -1.1486    0.0          C   7      5.54    0    0  0
    0.0       0.0       0.0          N  14     -4.59    0    0  0
   -0.4226    0.9063    0.0          HN  2      2.27    0    0  0
    1.4530    0.0       0.0          CA  9      0.82    0    0  0
CIS-H-PROLINE
   18    2   13   15   15   16
  -6   10.000     2   -1    2
   14   17
    2    2    2    2    2    2    2    2    2    2    2    2    4    4
    7
    1    1    1    1    1    1    1    1    1    1    1    1    2    2
    4
    1    1    1    1    1    1    1    1    1    1    1    1    3    3
    6
   -2.1896   -3.0541   -0.2497       HN  2      1.35    0   14 14
   -2.8629   -2.3157    0.0000       N  14     -2.96    0   14 14
   -3.4077   -2.5511    1.3835       CD  6      0.90    0   14 14
   -2.6764   -2.9693    2.0268      1HD  1      0.32    0   14 14
   -4.2340   -3.2150    1.3717      2HD  1      0.32    0   14 14
   -3.8178   -1.1435    1.8309       CG  6     -0.39    0   14 14
   -3.8780   -1.0681    2.8865      1HG  1      0.45    0   14 14
   -4.7637   -0.8666    1.4407      2HG  1      0.45    0   14 14
   -2.6992   -0.2805    1.2659       CB  6     -0.19    0   14 14
   -1.9168   -0.1729    1.9730      1HB  1      0.26    0   14 14
   -3.0554    0.6919    1.0396      2HB  1      0.26    0   14 14
   -2.4880   -0.4457   -0.9053       HA  1      0.26    0   14 14
   -2.1906   -0.9772    0.0000       CA  9      0.39    0    0  0
   -0.1723   -2.2550    0.0000       O  17     -4.95    0    0  0
   -0.6824   -1.1357    0.0000       C   7      5.80    0    0  0
    0.0000    0.0000    0.0000       N  14     -4.59    0    0  0
   -0.4226    0.9063    0.0000       HN  2      2.27    0    0  0
    1.4530    0.0000    0.0000       CA  9      0.82    0    0  0
TRANS-H-PROLINE
   18    2   13   15   15   16
  -7   10.000     2   -1    2
   14   17
    2    2    2    2    2    2    2    2    2    2    2    2    4    4
    7
    1    1    1    1    1    1    1    1    1    1    1    1    2    2
    4
    1    1    1    1    1    1    1    1    1    1    1    1    3    3
    6
   -3.6254   -2.3328   -0.6923       HN  2      1.35    0   14 14
   -2.8629   -2.3157    0.0000       N  14     -2.96    0   14 14
   -3.4077   -2.5511    1.3835       CD  6      0.90    0   14 14
   -2.6764   -2.9693    2.0268      1HD  1      0.32    0   14 14
   -4.2340   -3.2150    1.3717      2HD  1      0.32    0   14 14
   -3.8178   -1.1435    1.8309       CG  6     -0.39    0   14 14
   -3.8780   -1.0681    2.8865      1HG  1      0.45    0   14 14
   -4.7637   -0.8666    1.4407      2HG  1      0.45    0   14 14
   -2.6992   -0.2805    1.2659       CB  6     -0.19    0   14 14
   -1.9168   -0.1729    1.9730      1HB  1      0.26    0   14 14
   -3.0554    0.6919    1.0396      2HB  1      0.26    0   14 14
   -2.4880   -0.4457   -0.9053       HA  1      0.26    0   14 14
   -2.1906   -0.9772    0.0000       CA  9      0.39    0    0  0
   -0.1723   -2.2550    0.0000       O  17     -4.95    0    0  0
   -0.6824   -1.1357    0.0000       C   7      5.80    0    0  0
    0.0000    0.0000    0.0000       N  14     -4.59    0    0  0
   -0.4226    0.9063    0.0000       HN  2      2.27    0    0  0
    1.4530    0.0000    0.0000       CA  9      0.82    0    0  0
AMINO-H2+-PRO
   19    2   14   16   16   17
  -8   10.000     2   -1    2
   15   18
    2    2    2    2    2    2    2    2    2    2    2    2    2    4
    4    7
    1    1    1    1    1    1    1    1    1    1    1    1    1    2
    2    4
    1    1    1    1    1    1    1    1    1    1    1    1    1    3
    3    6
   -3.6254   -2.3328   -0.6923      1H2  2      2.90    0   15 15
   -2.1896   -3.0541   -0.2497      2H2  2      2.90    0   15 15
   -2.8629   -2.3157    0.0000       N  15     -3.22    0   15 15
   -3.4077   -2.5511    1.3835       CD  6      0.13    0   15 15
   -2.6764   -2.9693    2.0268      1HD  1      1.16    0   15 15
   -4.2340   -3.2150    1.3717      2HD  1      1.16    0   15 15
   -3.8178   -1.1435    1.8309       CG  6     -0.90    0   15 15
   -3.8780   -1.0681    2.8865      1HG  1      0.84    0   15 15
   -4.7637   -0.8666    1.4407      2HG  1      0.84    0   15 15
   -2.6992   -0.2805    1.2659       CB  6     -0.77    0   15 15
   -1.9168   -0.1729    1.9730      1HB  1      0.77    0   15 15
   -3.0554    0.6919    1.0396      2HB  1      0.77    0   15 15
   -2.4880   -0.4457   -0.9053       HA  1      0.77    0   15 15
   -2.1906   -0.9772    0.0000       CA  9     -0.13    0    0  0
   -0.1723   -2.2550    0.0000       O  17     -4.38    0    0  0
   -0.6824   -1.1357    0.0000       C   7      5.93    0    0  0
    0.0000    0.0000    0.0000       N  14     -4.59    0    0  0
   -0.4226    0.9063    0.0000       HN  2      2.27    0    0  0
    1.4530    0.0000    0.0000       CA  9      0.82    0    0  0
P-GLUTAMIC ACID
   17    2   12   14   14   15    0    0    0    0    0    0    0    0
  -9   10.0000    2   -1    2
   13   16
    2    2    2    2    2    2    2    2    2    2    2    4    4    7
    1    1    1    1    1    1    1    1    1    1    1    2    2    4
    1    1    1    1    1    1    1    1    1    1    1    3    3    6
   -2.6957   -0.3084    1.2859       CB  6     -0.39    0   13 13
   -1.9823   -0.4251    2.1016      1HB  1      0.26    0   13 13
   -2.8545    0.7617    1.1522      2HB  1      0.26    0   13 13
   -4.0144   -1.0524    1.5675       CG  6     -1.42    0   13 13
   -4.1338   -1.2458    2.6335      1HG  1      0.45    0   13 13
   -4.8727   -0.4585    1.2533      2HG  1      0.45    0   13 13
   -3.9366   -2.3247    0.8002       CD  7      5.80    0   13 13
   -4.7043   -3.2807    0.8981       OE 17     -4.90    0   13 13
   -2.8478   -2.2784    0.0          N  14     -4.64    0   13 13
   -2.5204   -3.0575   -0.5348       HN  2      2.32    0   13 13
   -2.4516   -0.4662   -0.8241       HA  1      0.26    0   13 13
   -2.2040   -0.9758    0.0          CA  9      0.65    0    0  0
   -0.1724   -2.2549    0.0          O  17     -4.90    0    0  0
   -0.6824   -1.1357    0.0          C   7      5.80    0    0  0
    0.0       0.0       0.0          N  14     -4.59    0    0  0
   -0.4226    0.9063    0.0          HN  2      2.27    0    0  0
    1.4530    0.0       0.0          CA  9      0.82    0    0  0
AMINO
    3    0    0    0    0    0    0    0    0    0    0    0    0    0
  10    0.0       0    0    0
    0
    0    0    0    0    0    0    0    0    0    0    0    0    0    0
    0    0    0    0    0    0    0    0    0    0    0    0    0    0
    0    0    0    0    0    0    0    0    0    0    0    0    0    0
    0.0       0.0       0.0          N  14     -4.59    0    0  0
   -0.4226    0.9063    0.0          HN  2      2.27    0    0  0
    1.4530    0.0       0.0          CA  9      0.82    0    0  0
CARBOXYL - COOH
    3    1    0    2    0    0    0    0    0    0    0    0    0    0
 -11    4.0000    2   -1    3
    2
    2    1    0    2    2    0    0    0    0    0    0    0    0    0
    1    0    2    1    1    0    2    0    0    0    0    0    0    0
    1    0    2    1    1    0    2    0    0    0    0    0    0    0
    0.6243    1.0598    0.0          O  17      0.0     0    0  0
    0.5452   -1.1691    0.0          OXT18     -4.90    0    0  0
    1.5414   -1.0820    0.0          HXT 4      2.63    0    0  0
CARBOXYL - O
    2    0    0    0    0    0    0    0    0    0    0    0    0    0
  12    0.0       0    0    0
    0
    0    1    0    0    0    0    0    0    0    0    0    0    0    0
    1    0    0    1    1    0    0    0    0    0    0    0    0    0
    1    0    0    1    1    0    0    0    0    0    0    0    0    0
    0.5675    1.1138    0.0          O  17     -6.86    0    0  0
    0.5675   -1.1138    0.0          OXT17     -6.86    0    0  0
CARBOXYL-CH3
    5    1    0    2    0    0    0    0    0    0    0    0    0    0
  13    0.0       0    0    0
    2
    2    1    0    2    2    0    0    0    0    0    0    0    0    0
    1    0    2    1    1    0    2    0    0    0    0    0    0    0
    1    0    4    1    1    0    4    0    0    0    0    0    0    0
    0.6243    1.0598    0.0          O  17      0.0     0    0  0
    0.5621   -1.2054    0.0          C   6     -2.31    0    0  0
    0.2499   -1.7518    0.8900      1H3  1      0.77    0    0  0
    0.2499   -1.7518   -0.8900      2H3  1      0.77    0    0  0
    1.6470   -1.1003    0.0         3H3  1      0.77    0    0  0
CARBOXYL-NH2
    4    1    0    2    0    0    0    0    0    0    0    0    0    0
 -14   10.0000    2   -1    3
    2
    2    1    0    2    2    0    0    0    0    0    0    0    0    0
    1    0    2    1    1    0    2    0    0    0    0    0    0    0
    1    0    3    1    1    0    3    0    0    0    0    0    0    0
    0.6243    1.0598    0.0          O  17      0.0     0    0  0
    0.5600   -1.2009    0.0          N  14     -5.02    0    0  0
   -0.0136   -2.0200    0.0         1H2  2      2.51    0    0  0
    1.5562   -1.2880    0.0         2H2  2      2.51    0    0  0
CARBOXYL-NHCH3
    7    2    0    2    2    4    0    0    0    0    0    0    0    0
 -15   10.0000    2   -1    3
    2    4
    2    1    4    2    2    0    4    0    0    0    0    0    0    0
    1    0    2    1    1    4    2    0    0    0    0    0    0    0
    1    0    3    1    1    6    3    0    0    0    0    0    0    0
    0.6243    1.0598    0.0          O  17      0.0     0    0  0
    0.5600   -1.2009    0.0          N  14     -4.45    0    4  6
    0.0449   -2.0580    0.0          H   2      2.10    0    0  0
    2.0050   -1.3527    0.0          C   6      0.64    0    0  0
    2.4200   -0.8796   -0.8900      1H3  1      0.57    0    0  0
    2.4200   -0.8796    0.8900      2H3  1      0.57    0    0  0
    2.2590   -2.4127    0.0         3H3  1      0.57    0    0  0
N, N - DIMETHYL
   10    3    0    2    2    3    2    4
 -16   10.0000    2   -1    3
    2    4    7
    2    1    4    2    2    0    4    0    0    0    0    0    0    0
    1    0    2    1    1    4    2    0    0    0    0    0    0    0
    1    0    3    1    1    9    3    0    0    0    0    0    0    0
    0.6243    1.0598    0.0000       O  17      0.0     0    0  0
    0.5747   -1.2326    0.0          N  14     -3.62    0    4  6
   -0.1395   -2.5209    0.0000       C1  6      0.64    0    7  9
    2.0396   -1.3866    0.0000       C2  6      0.64    7    0  0
    2.4547   -0.9136   -0.8900      1H32 1      0.39    7    0  0
    2.4547   -0.9136    0.8900      2H32 1      0.39    7    0  0
    2.2935   -2.4467    0.0000      3H32 1      0.39    0    0  0
   -0.7650   -2.5895    0.8900      1H31 1      0.39    0    0  0
   -0.7650   -2.5895   -0.8900      2H31 1      0.39    0    0  0
    0.5832   -3.3369    0.0000      3H31 1      0.39    0    0  0
METHYL ESTER
    6    2    0    2    2    3    0    0    0    0    0    0    0    0
 -17    3.0000    2   -1    3
    2    3
    2    1    3    2    2    0    3    0    0    0    0    0    0    0
    1    0    2    1    1    3    2    0    0    0    0    0    0    0
    1    0    2    1    1    5    2    0    0    0    0    0    0    0
    0.6753    1.0399    0.0          O  17      0.0     0    0  0
    0.5532   -1.2424    0.0          O  19     -3.87    0    0  0
    2.0023   -1.1918    0.0          C   6      1.74    0    0  0
    2.3475   -0.6656   -0.8900      1H3  1      0.71    0    0  0
    2.3475   -0.6656    0.8900      2H3  1      0.71    0    0  0
    2.4013   -2.2062    0.0         3H3  1      0.71    0    0  0
ETHYL ESTER
    9    3    0    2    2    3    3    6    0    0    0    0    0    0
 -18    3.0000    2   -1    3
    2    3    6
    2    1    3    2    2    6    3    0    0    0    0    0    0    0
    1    0    2    1    1    3    2    0    0    0    0    0    0    0
    1    0    2    1    1    5    2    0    0    0    0    0    0    0
    0.6753    1.0399    0.0          O  17      0.0     0    6  8
    0.5532   -1.2424    0.0          O  19     -3.87    0    0  0
    2.0023   -1.1918    0.0          C   6      2.00    0    6  8
    2.3506   -0.6450   -0.8762      1H2  1      0.52    0    6  8
    2.3506   -0.6450    0.8762      2H2  1      0.52    0    0  0
    2.6001   -2.6002    0.0          C   6     -1.30    0    0  0
    2.2691   -3.1354    0.8900      1H3  1      0.71    0    0  0
    2.2691   -3.1354   -0.8900      2H3  1      0.71    0    0  0
    3.6880   -2.5331    0.0         3H3  1      0.71    0    0  0
CARBOXYL
    1    0    0    0    0    0    0    0    0    0    0    0    0    0
  20    0.0       0    0    0
    0
    0    0    0    0    0    0    0    0    0    0    0    0    0    0
    0    0    0    0    0    0    0    0    0    0    0    0    0    0
    0    0    0    0    0    0    0    0    0    0    0    0    0    0
    0.6243    1.0598    0.0000       O  17      0.0     0    0  0
CARBOXYL
    1    0    0    0    0    0    0    0    0    0    0    0    0    0
  20    0.0       0    0    0
    0
    0    0    0    0    0    0    0    0    0    0    0    0    0    0
    0    0    0    0    0    0    0    0    0    0    0    0    0    0
    0    0    0    0    0    0    0    0    0    0    0    0    0    0
    0.6243    1.0598    0.0000       O  17      0.0     0    0  0
./ ADD NAME=UNITX
./ NUMBER NEW1=10,INCR=10
ALANINE
  4  0 0 1 1 2 3 3 2 2 2
     1 2 3 4 5 910 6 7 8
 (1)  1   1  3   2 0 0   0  (0)  1   1 1 0
 (2)  4   3  5   3 1 0   1  (1)  3   2 2 3
 (3)  2   3  6   4 0 0   1  (2)  5   0 0 0
 (4)  3   6 11   6 0 0   3  (3)  9   1 4 0
    1   10    0
      3   10.71    -10.71    1
  3  4  5  6  7  8  9 10 11 12
ASPARTIC ACID
  6  0 0 1 1 2 5 5 2 2 3 4 3 4
     1 2 3 4 51213 6 7 810 911
 (1)  1   1  3   2 0 0   0  (0)  1   1 1 0
 (2)  4   3  5   3 1 0   1  (1)  3   2 2 5
 (3)  5   5 10   3 3 0   2  (2)  5   1 3 0
 (4)  6  10 11   3 5 0   3  (3)  8   1 4 0
 (5)  2   3  6   4 0 0   1  (4) 10   0 0 0
 (6)  3   6 14   6 0 0   5  (5) 12   1 6 0
    3   15    4
      4    2.83     -2.83    1
      3    8.00     -8.00    3
      5    9.54     -9.54    9
 -4 13 -2  8  9 10 -3 12  3  4 -1  6  7 14 15
     -5    0.39    2
      5   -1.68    3
    -11   -1.68    1
     11   -2.83    2
CYSTINE
  4  0 0 1 1 2 3 3 2 2 2
     1 2 3 4 5 910 6 7 8
 (1)  1   1  3   2 0 0   0  (0)  1   1 1 0
 (2)  4   3  5   3 1 0   1  (1)  3   2 2 3
 (3)  2   3  6   4 0 0   1  (2)  5   0 0 0
 (4)  3   6 11   6 0 0   3  (3)  9   1 4 0
    1   10    0
      3   10.70    -10.70    1
  3  4  5  6  7  8  9 10 11 12
GLUTAMIC ACID
  7  0 0 1 1 2 6 6 2 2 3 3 3 4 5 4 5
     1 2 3 4 51516 6 7 8 91011131214
 (1)  1   1  3   2 0 0   0  (0)  1   1 1 0
 (2)  4   3  5   3 1 0   1  (1)  3   2 2 6
 (3)  5   5 10   3 3 0   2  (2)  5   1 3 0
 (4)  6  10 13   3 5 0   3  (3)  8   1 4 0
 (5)  7  13 14   3 7 0   4  (4) 11   1 5 0
 (6)  2   3  6   4 0 0   1  (5) 13   0 0 0
 (7)  3   6 17   6 0 0   6  (6) 15   1 7 0
    3   17    2
      5    2.71     -2.71    1
      4    7.86     -7.86    3
      6    9.93     -9.93    9
 -2 16 10 11 12 13 -1 15  3  4  5  6  7  8  9 17 18
    -14   -1.80    1
     14   -2.71    2
PHENYLALANINE
  5  0 0 1 1 2 4 4 2 2 3 3 3 3 3 3 3 3 3 3 3
     1 2 3 4 51920 6 7 8 9101112131415161718
 (1)  1   1  3   2 0 0   0  (0)  1   1 1 0
 (2)  4   3  5   3 1 0   1  (1)  3   2 2 4
 (3)  5   5 10   3 3 0   2  (2)  5   1 3 0
 (4)  2   3  6   4 0 0   1  (3)  8   0 0 0
 (5)  3   6 21   6 0 0   4  (4) 19   1 5 0
    2   21    2
      3    1.03     -1.03    1
      4    9.79     -9.79   13
 -2 10 11 12 13 14 15 16 17 18 19 20  3  4 -1  6  7  8  9 21 22
      5   -0.25    1
     -5   -0.27    2
GLYCINE
  3  0 0 1 1 1 2 2
     1 2 3 4 5 6 7
 (1)  1   1  3   2 0 0   0  (0)  1   1 1 0
 (2)  2   3  6   4 0 0   1  (1)  3   1 2 0
 (3)  3   6  8   6 0 0   2  (2)  6   1 3 0
    1    8    1
      2    9.65     -9.65    1
 -1  3  4  5  6  7  8  9
     -1    0.16    0
HISTIDINE(NEUTRAL)
  5  0 0 1 1 2 4 4 2 2 3 3 3 3 3 3 3 3
     1 2 3 4 51617 6 7 8 9101112131415
 (1)  1   1  3   2 0 0   0  (0)  1   1 1 0
 (2)  4   3  5   3 1 0   1  (1)  3   2 2 4
 (3)  5   5 10   3 3 0   2  (2)  5   1 3 0
 (4)  2   3  6   4 0 0   1  (3)  8   0 0 0
 (5)  3   6 18   6 0 0   4  (4) 16   1 5 0
    2   18    2
      3    6.83     -6.83    1
      4    9.54     -9.54   10
 -2 10 11 12 13 14 15 16 17  3  4 -1  6  7  8  9 18 19
      5    0.01    1
     -5   -0.52    2
ISOLEUCINE
  7  0 0 1 1 2 6 6 2 3 4 3 3 3 4 4 5 5 5 5
     1 2 3 4 51819 6 711 8 910121314151617
 (1)  1   1  3   2 0 0   0  (0)  1   1 1 0
 (2)  4   3  5   3 1 0   1  (1)  3   2 2 6
 (3)  6   5  9   3 2 1   2  (2)  5   2 3 4
 (4)  5   5 10   3 3 0   2  (3)  7   0 0 0
 (5)  7  10 16   3 5 0   4  (4) 11   1 5 0
 (6)  2   3  6   4 0 0   1  (5) 14   0 0 0
 (7)  3   6 20   6 0 0   6  (6) 18   1 7 0
    3   20    2
      4    1.34     -1.34    1
      3    0.96     -0.96    9
      6    9.54     -9.54   13
 -2 10 14 15 16 17 18 19  9 11 12 13  3  4 -1  6  7  8 20 21
      5    0.07    1
     -5   -0.13    3
LYSINE
  8  0 0 1 1 2 7 7 2 2 3 3 3 4 4 4 5 5 5 6 6 6
     1 2 3 4 52021 6 7 8 910111213141516171819
 (1)  1   1  3   2 0 0   0  (0)  1   1 1 0
 (2)  4   3  5   3 1 0   1  (1)  3   2 2 7
 (3)  5   5 10   3 3 0   2  (2)  5   1 3 0
 (4)  6  10 13   3 5 0   3  (3)  8   1 4 0
 (5)  7  13 16   3 7 0   4  (4) 11   1 5 0
 (6)  8  16 19   3 9 0   5  (5) 14   1 6 0
 (7)  2   3  6   4 0 0   1  (6) 17   0 0 0
 (8)  3   6 22   6 0 0   7  (7) 20   1 8 0
    3   23    4
      6    5.09     -5.09    1
      3    1.23     -1.23    5
      7    9.54     -9.54   15
 -4 19 20 21 -2 10 11 12 13 14 15 -3 17 18  3  4 -1  6  7  8  9 22 23
      5    0.01    2
     -5   -0.40    3
     16    0.19    1
    -16    1.23    2
LEUCINE
  7  0 0 1 1 2 6 6 2 2 3 3 4 5 4 4 4 5 5 5
     1 2 3 4 51819 6 7 8 91014111213151617
 (1)  1   1  3   2 0 0   0  (0)  1   1 1 0
 (2)  4   3  5   3 1 0   1  (1)  3   2 2 6
 (3)  5   5 10   3 3 0   2  (2)  5   1 3 0
 (4)  6  10 12   3 4 1   3  (3)  8   2 4 5
 (5)  7  10 13   3 5 0   3  (4) 10   0 0 0
 (6)  2   3  6   4 0 0   1  (5) 14   0 0 0
 (7)  3   6 20   6 0 0   6  (6) 18   1 7 0
    2   20    2
      3    2.24     -2.24    1
      6    9.71     -9.71   12
 -2 10 11 12 13 14 15 16 17 18 19  3  4 -1  6  7  8  9 20 21
      5   -0.17    1
     -5   -0.21    2
METHIONINE
  7  0 0 1 1 2 6 6 2 2 3 3 3 4 5 5 5 5
     1 2 3 4 51617 6 7 8 9101112131415
 (1)  1   1  3   2 0 0   0  (0)  1   1 1 0
 (2)  4   3  5   3 1 0   1  (1)  3   2 2 6
 (3)  5   5 10   3 3 0   2  (2)  5   1 3 0
 (4)  6  10 13   3 5 0   3  (3)  8   1 4 0
 (5)  7  13 14   3 7 0   4  (4) 11   1 5 0
 (6)  2   3  6   4 0 0   1  (5) 12   0 0 0
 (7)  3   6 18   6 0 0   6  (6) 16   1 7 0
    2   18    2
      4    4.00     -4.00    1
      6    9.93     -9.93   10
 -2 10 11 12 13 14 15 16 17  3  4 -1  6  7  8  9 18 19
      5   -0.39    1
     -5    0.26    2
ASPARAGINE
  6  0 0 1 1 2 5 5 2 2 3 4 3 4 4
     1 2 3 4 51314 6 7 810 91112
 (1)  1   1  3   2 0 0   0  (0)  1   1 1 0
 (2)  4   3  5   3 1 0   1  (1)  3   2 2 5
 (3)  5   5 10   3 3 0   2  (2)  5   1 3 0
 (4)  6  10 11   3 5 0   3  (3)  8   1 4 0
 (5)  2   3  6   4 0 0   1  (4) 10   0 0 0
 (6)  3   6 15   6 0 0   5  (5) 13   1 6 0
    2   15    2
      3   11.08    -11.08    1
      5   10.57    -10.57    7
 -2 10 11 12 13 14  3  4 -1  6  7  8  9 15 16
      5   -1.03    1
     -5   -0.52    2
PROLINE-DOWN
  2  0 0 0 0 0 1 1 0 0 0 0 0 0 0
     1 2 3 4 51314 6 7 8 9101112
 (1)  2   3  6   2 0 0   0  (0)  1   1 1 0
 (2)  3   6 15   4 0 0   1  (1) 13   1 2 0
    2   17    4
      0    2.71     -2.71    1
      1    9.54     -9.54   13
 -1 -2 -3  4  5  8  9 10 11 12 13 14 -4  6  7 15 16
      1    0.92    0
      2   -0.98    0
      3   -0.77    2
     -3    1.41    1
GLUTAMINE
  7  0 0 1 1 2 6 6 2 2 3 3 3 4 5 4 5 5
     1 2 3 4 51617 6 7 8 9101113121415
 (1)  1   1  3   2 0 0   0  (0)  1   1 1 0
 (2)  4   3  5   3 1 0   1  (1)  3   2 2 6
 (3)  5   5 10   3 3 0   2  (2)  5   1 3 0
 (4)  6  10 13   3 5 0   3  (3)  8   1 4 0
 (5)  7  13 14   3 7 0   4  (4) 11   1 5 0
 (6)  2   3  6   4 0 0   1  (5) 13   0 0 0
 (7)  3   6 18   6 0 0   6  (6) 16   1 7 0
    2   18    2
      4   12.10    -12.10    1
      6    9.67     -9.67   10
 -2 10 11 12 13 14 15 16 17  3  4 -1  6  7  8  9 18 19
      5   -0.13    1
     -5   -0.25    2
ARGININE
 10  0 0 1 1 2 9 9 2 2 3 3 3 4 4 4 5 5 6 8 7 7 8 8
     1 2 3 4 52223 6 7 8 9101112131415161917182021
 (1)  1   1  3   2 0 0   0  (0)  1   1 1 0
 (2)  4   3  5   3 1 0   1  (1)  3   2 2 9
 (3)  5   5 10   3 3 0   2  (2)  5   1 3 0
 (4)  6  10 13   3 5 0   3  (3)  8   1 4 0
 (5)  7  13 16   3 7 0   4  (4) 11   1 5 0
 (6)  8  16 18   3 9 0   5  (5) 14   1 6 0
 (7)  9  18 20   310 1   6  (6) 16   2 7 8
 (8) 10  18 19   311 0   6  (7) 17   0 0 0
 (9)  2   3  6   4 0 0   1  (8) 19   0 0 0
(10)  3   6 24   6 0 0   9  (9) 22   110 0
    5   27    8
      6   10.31    -10.31    1
      7    1.16     -1.16    7
      5    3.73     -3.73    9
      3    1.04     -1.04   12
      9    9.54     -9.54   19
 -6 18 19 -7 22 23 -8 21 -4 -5 17 -2 10 11 12 -3 14 15  3  4 -1  6  7  8
 25
      5    0.01    4
     -5   -0.40    5
     13   -0.25    3
    -13    1.54    4
     16   -3.73    1
    -16   -0.78    3
    -20   -4.25    2
     20   -1.16    1
SERINE
  5  0 0 1 1 2 4 4 2 2 3 3
     1 2 3 4 51011 6 7 8 9
 (1)  1   1  3   2 0 0   0  (0)  1   1 1 0
 (2)  4   3  5   3 1 0   1  (1)  3   2 2 4
 (3)  5   5 10   3 3 0   2  (2)  5   1 3 0
 (4)  2   3  6   4 0 0   1  (3)  8   0 0 0
 (5)  3   6 12   6 0 0   4  (4) 10   1 5 0
    2   12    2
      3    3.99     -3.99    1
      4    9.67     -9.67    4
 -2 10 11  3  4 -1  6  7  8  9 12 13
      5   -0.13    1
     -5    1.80    2
THREONINE
  6  0 0 1 1 2 5 5 2 4 3 3 4 4 4
     1 2 3 4 51314 6 9 7 8101112
 (1)  1   1  3   2 0 0   0  (0)  1   1 1 0
 (2)  4   3  5   3 1 0   1  (1)  3   2 2 5
 (3)  5   5 10   3 2 1   2  (2)  5   2 3 4
 (4)  6   5  9   3 3 0   2  (3)  7   0 0 0
 (5)  2   3  6   4 0 0   1  (4)  9   0 0 0
 (6)  3   6 15   6 0 0   5  (5) 13   1 6 0
    3   16    4
      2    3.03     -3.03    1
      3    2.19     -2.19    8
      5    9.54     -9.54   10
 -2  8  9 -3 12 13 14 -4 11  3  4 -1  6  7 15 16
     -5    0.39    1
      5    1.67    3
    -10   -1.81    2
     10   -2.19    1
VALINE
  6  0 0 1 1 2 5 5 2 4 3 3 3 3 4 4 4
     1 2 3 4 51516 611 7 8 910121314
 (1)  1   1  3   2 0 0   0  (0)  1   1 1 0
 (2)  4   3  5   3 1 0   1  (1)  3   2 2 5
 (3)  5   5 10   3 2 1   2  (2)  5   2 3 4
 (4)  6   5  9   3 3 0   2  (3)  7   0 0 0
 (5)  2   3  6   4 0 0   1  (4) 11   0 0 0
 (6)  3   6 17   6 0 0   5  (5) 15   1 6 0
    2   17    2
      2    2.13     -2.13    1
      5    9.54     -9.54   11
 -2  8  9 10 11 12 13 14 15 16  3  4 -1  6  7 17 18
     -5    0.39    1
      5   -0.29    2
TRYPTOPHAN
  5  0 0 1 1 2 4 4 2 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3
     1 2 3 4 52324 6 7 8 910111213141516171819202122
 (1)  1   1  3   2 0 0   0  (0)  1   1 1 0
 (2)  4   3  5   3 1 0   1  (1)  3   2 2 4
 (3)  5   5 10   3 3 0   2  (2)  5   1 3 0
 (4)  2   3  6   4 0 0   1  (3)  8   0 0 0
 (5)  3   6 25   6 0 0   4  (4) 23   1 5 0
    2   25    2
      3    6.45     -6.45    1
      4    9.54     -9.54   17
 -2 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24  3  4 -1  6  7  8  9 25
      5    0.01    1
     -5   -0.40    2
TYROSINE
  6  0 0 1 1 2 5 5 2 2 3 3 3 3 3 3 3 3 3 3 4 4
     1 2 3 4 52021 6 7 8 910111213141516171819
 (1)  1   1  3   2 0 0   0  (0)  1   1 1 0
 (2)  4   3  5   3 1 0   1  (1)  3   2 2 5
 (3)  5   5 10   3 3 0   2  (2)  5   1 3 0
 (4)  6  18 20   3 5 0   3  (3)  8   1 4 0
 (5)  2   3  6   4 0 0   1  (4) 18   0 0 0
 (6)  3   6 22   6 0 0   5  (5) 20   1 6 0
    3   23    4
      4    4.25     -4.25    1
      3    2.07     -2.07    4
      5    9.79     -9.79   15
 -4 20 21 -2 10 11 12 13 14 15 16 17 -3 19  3  4 -1  6  7  8  9 22 23
      5   -0.25    2
     -5   -0.27    3
     18    0.77    1
    -18    2.13    2
CYSTEIN
  5  0 0 1 1 2 4 4 2 2 3 3
     1 2 3 4 51011 6 7 8 9
 (1)  1   1  3   2 0 0   0  (0)  1   1 1 0
 (2)  4   3  5   3 1 0   1  (1)  3   2 2 4
 (3)  5   5 10   3 3 0   2  (2)  5   1 3 0
 (4)  2   3  6   4 0 0   1  (3)  8   0 0 0
 (5)  3   6 12   6 0 0   4  (4) 10   1 5 0
    2   12    2
      2    1.74     -1.74    1
      4    9.54     -9.54    6
 -2  8  9 10 11  3  4 -1  6  7 12 13
     -5    0.39    1
      5   -1.74    2
H-PROLINE-DOWN
  3  0 0 0 0 0 2 2 0 0 0 1 0 0 0 1
     1 2 3 4 51415 6 7 812 9101113
 (1)  4  10 11   1 1 0   0  (0)  1   2 1 2
 (2)  2   3  6   2 0 0   0  (1) 12   0 0 0
 (3)  3   6 16   4 0 0   2  (2) 14   1 3 0
    3   19    6
      0    2.72     -2.72    1
      1    4.16     -4.16   12
      2    9.54     -9.54   15
 -1 -2 -3  4  5  8  9 -5 12 13 14 -6 11 15 -4  6  7 16 17
      1    0.92    0
      2   -1.31    0
      3   -0.77    3
     -3    1.41    1
     10    0.17    2
    -10    2.04    1
NORLEUCINE
  7  0 0 1 1 2 6 6 2 2 3 3 3 4 4 4 5 5 5 5
     1 2 3 4 51819 6 7 8 91011121314151617
 (1)  1   1  3   2 0 0   0  (0)  1   1 1 0
 (2)  4   3  5   3 1 0   1  (1)  3   2 2 6
 (3)  5   5 10   3 3 0   2  (2)  5   1 3 0
 (4)  6  10 13   3 5 0   3  (3)  8   1 4 0
 (5)  7  13 16   3 7 0   4  (4) 11   1 5 0
 (6)  2   3  6   4 0 0   1  (5) 14   0 0 0
 (7)  3   6 20   6 0 0   6  (6) 18   1 7 0
    2   20    2
      4    2.00     -2.00    1
      6    9.67     -9.67   12
 -2 10 11 12 13 14 15 16 17 18 19  3  4 -1  6  7  8  9 20 21
      5   -0.13    1
     -5   -0.26    2
ORNITHINE
  7  0 0 1 1 2 6 6 2 2 3 3 3 4 4 4 5 5 5
     1 2 3 4 51718 6 7 8 910111213141516
 (1)  1   1  3   2 0 0   0  (0)  1   1 1 0
 (2)  4   3  5   3 1 0   1  (1)  3   2 2 6
 (3)  5   5 10   3 3 0   2  (2)  5   1 3 0
 (4)  6  10 13   3 5 0   3  (3)  8   1 4 0
 (5)  7  13 16   3 7 0   4  (4) 11   1 5 0
 (6)  2   3  6   4 0 0   1  (5) 14   0 0 0
 (7)  3   6 19   6 0 0   6  (6) 17   1 7 0
    2   19    2
      4    5.79     -5.79    1
      6    9.67     -9.67   11
 -2 10 11 12 13 14 15 16 17 18  3  4 -1  6  7  8  9 19  20
      5   -0.13    1
     -5   -0.26    2
ORNITHINE +
  7  0 0 1 1 2 6 6 2 2 3 3 3 4 4 4 5 5 5 5
     1 2 3 4 51819 6 7 8 91011121314151617
 (1)  1   1  3   2 0 0   0  (0)  1   1 1 0
 (2)  4   3  5   3 1 0   1  (1)  3   2 2 6
 (3)  5   5 10   3 3 0   2  (2)  5   1 3 0
 (4)  6  10 13   3 5 0   3  (3)  8   1 4 0
 (5)  7  13 16   3 7 0   4  (4) 11   1 5 0
 (6)  2   3  6   4 0 0   1  (5) 14   0 0 0
 (7)  3   6 20   6 0 0   6  (6) 18   1 7 0
    4   22    6
      5   17.00     -4.12    1
      4    4.00     -4.00    6
      3    2.58     -2.58   10
      6    9.54     -9.54   14
 -6 16 17 18 19 -4 -5 14 15 -2 -3 11 12  3  4 -1  6  7  8  9 20 21
     -5    0.01    3
      5   -0.39    4
     10   -2.19    2
    -10    0.90    3
     13   -4.00    1
    -13    4.64    2
HISTIDINE(NEUTRAL) #2
  5  0 0 1 1 2 4 4 2 2 3 3 3 3 3 3 3 3
     1 2 3 4 51617 6 7 8 9101112131415
 (1)  1   1  3   2 0 0   0  (0)  1   1 1 0
 (2)  4   3  5   3 1 0   1  (1)  3   2 2 4
 (3)  5   5 10   3 3 0   2  (2)  5   1 3 0
 (4)  2   3  6   4 0 0   1  (3)  8   0 0 0
 (5)  3   6 18   6 0 0   4  (4) 16   1 5 0
    2   18    2
      3    6.55     -6.55    1
      4   10.21    -10.21   10
 -2 10 11 12 13 14 15 16 17  3  4 -1  6  7  8  9 18 19
      5   -0.67    1
     -5   -0.30    2
HISTIDINE +
  5  0 0 1 1 2 4 4 2 2 3 3 3 3 3 3 3 3 3
     1 2 3 4 51718 6 7 8 910111213141516
 (1)  1   1  3   2 0 0   0  (0)  1   1 1 0
 (2)  4   3  5   3 1 0   1  (1)  3   2 2 4
 (3)  5   5 10   3 3 0   2  (2)  5   1 3 0
 (4)  2   3  6   4 0 0   1  (3)  8   0 0 0
 (5)  3   6 19   6 0 0   4  (4) 17   1 5 0
    3   19    2
      3    8.89     -2.58    1
      3    9.15     -2.58    5
      4   10.83    -10.83   11
 14 15 17 18 -2 10 11 12 13 16  3  4 -1  6  7  8  9 19 20
      5   -1.29    1
     -5    0.65    2
LYSINE +
  8  0 0 1 1 2 7 7 2 2 3 3 3 4 4 4 5 5 5 6 6 6 6
     1 2 3 4 52122 6 7 8 91011121314151617181920
 (1)  1   1  3   2 0 0   0  (0)  1   1 1 0
 (2)  4   3  5   3 1 0   1  (1)  3   2 2 7
 (3)  5   5 10   3 3 0   2  (2)  5   1 3 0
 (4)  6  10 13   3 5 0   3  (3)  8   1 4 0
 (5)  7  13 16   3 7 0   4  (4) 11   1 5 0
 (6)  8  16 19   3 9 0   5  (5) 14   1 6 0
 (7)  2   3  6   4 0 0   1  (6) 17   0 0 0
 (8)  3   6 23   6 0 0   7  (7) 21   1 8 0
    4   25    6
      6   17.00     -4.12    1
      5    4.00     -4.00    6
      4    3.10     -3.10   10
      7    9.54     -9.54   17
 -6 19 20 21 22 -4 -5 17 18 -2 10 11 12 -3 14 15  3  4 -1  6  7  8  9 23
      5    0.01    3
     -5   -0.40    4
     13   -2.38    2
    -13    0.90    3
     16   -4.00    1
    -16    4.64    2
ARGININE +
 10  0 0 1 1 2 9 9 2 2 3 3 3 4 4 4 5 5 6 8 7 7 7 8 8
     1 2 3 4 52324 6 7 8 910111213141516201718192122
 (1)  1   1  3   2 0 0   0  (0)  1   1 1 0
 (2)  4   3  5   3 1 0   1  (1)  3   2 2 9
 (3)  5   5 10   3 3 0   2  (2)  5   1 3 0
 (4)  6  10 13   3 5 0   3  (3)  8   1 4 0
 (5)  7  13 16   3 7 0   4  (4) 11   1 5 0
 (6)  8  16 18   3 9 0   5  (5) 14   1 6 0
 (7)  9  18 20   310 1   6  (6) 16   2 7 8
 (8) 10  18 19   311 0   6  (7) 17   0 0 0
 (9)  2   3  6   4 0 0   1  (8) 20   0 0 0
(10)  3   6 25   6 0 0   9  (9) 23   110 0
    5   27    6
      8    7.24     -5.01    1
      7   15.66     -5.01    4
      3    4.80     -4.80    8
      4    1.06     -1.06   12
      9    9.54     -9.54   19
 19 23 24 -6 20 21 22 -4 16 17 -5 -2 10 11 12 -3 14 15  3  4 -1  6  7  8
 26
      5    0.01    4
     -5   -0.40    5
     13   -0.27    3
    -13    1.83    4
     18   -0.94    2
    -18    8.42    3
BENZYL ASPARTATE
  8  0 0 1 1 2 7 7 2 2 3 3 4 5 5 5 6 6 6 6 6 6 6 6 6 6 6
     1 2 3 4 52526 6 7 8 9101112131415161718192021222324
 (1)  1   1  3   2 0 0   0  (0)  1   1 1 0
 (2)  4   3  5   3 1 0   1  (1)  3   2 2 7
 (3)  5   5 10   3 3 0   2  (2)  5   1 3 0
 (4)  6  10 12   3 5 0   3  (3)  8   1 4 0
 (5)  7  12 13   3 7 0   4  (4) 10   1 5 0
 (6)  8  13 16   3 9 0   5  (5) 11   1 6 0
 (7)  2   3  6   4 0 0   1  (6) 14   0 0 0
 (8)  3   6 27   6 0 0   7  (7) 25   1 8 0
    3   28    4
      5    4.23     -4.23    1
      3    7.60     -7.60   16
      7    9.54     -9.54   22
 -4 13 14 15 16 17 18 19 20 21 22 23 24 25 26 -2  8  9 10 11 -3  3  4 -1
 27 28
     -5    0.14    2
      5   -1.35    3
    -12   -1.61    1
     12   -2.58    2
ASPARTIC ACID -
  5  0 0 1 1 2 4 4 2 2 3 3 3
     1 2 3 4 51112 6 7 8 910
 (1)  1   1  3   2 0 0   0  (0)  1   1 1 0
 (2)  4   3  5   3 1 0   1  (1)  3   2 2 4
 (3)  5   5 10   3 3 0   2  (2)  5   1 3 0
 (4)  2   3  6   4 0 0   1  (3)  8   0 0 0
 (5)  3   6 13   6 0 0   4  (4) 11   1 5 0
    3   14    4
      3    1.80    -14.68    1
      2    4.64     -4.64    4
      4    9.54     -9.54    9
 -4 11 12 -2  5  8  9 -3 -1  4  6  7 13 14
     -3    1.16    2
      3   -1.93    3
    -10    4.64    1
     10    1.80    2
GLUTAMIC ACID -
  6  0 0 1 1 2 5 5 2 2 3 3 3 4 4 4
     1 2 3 4 51415 6 7 8 910111213
 (1)  1   1  3   2 0 0   0  (0)  1   1 1 0
 (2)  4   3  5   3 1 0   1  (1)  3   2 2 5
 (3)  5   5 10   3 3 0   2  (2)  5   1 3 0
 (4)  6  10 13   3 5 0   3  (3)  8   1 4 0
 (5)  2   3  6   4 0 0   1  (4) 11   0 0 0
 (6)  3   6 16   6 0 0   5  (6) 14   1 6 0
    3   17    4
      4    1.80    -14.68    1
      3    4.64     -4.64    4
      5    9.67     -9.67    9
 -4 14 15 -2 10 11 12 -3  3  4 -1  6  7  8  9 16 17
     -5   -0.13    2
      5   -1.41    3
    -13    4.64    1
     13    1.80    2
PROLINE-UP
  2  0 0 0 0 0 1 1 0 0 0 0 0 0 0
     1 2 3 4 51314 6 7 8 9101112
 (1)  2   3  6   2 0 0   0  (0)  1   1 1 0
 (2)  3   6 15   4 0 0   1  (1) 13   1 2 0
    2   17    4
      0    2.71     -2.71    1
      1    9.54     -9.54   13
 -1 -2 -3  4  5  8  9 10 11 12 13 14 -4  6  7 15 16
      1    0.92    0
      2   -0.98    0
      3   -0.77    2
     -3    1.41    1
PROLINE-FLAT
  2  0 0 0 0 0 1 1 0 0 0 0 0 0 0
     1 2 3 4 51314 6 7 8 9101112
 (1)  2   3  6   2 0 0   0  (0)  1   1 1 0
 (2)  3   6 15   4 0 0   1  (1) 13   1 2 0
    2   17    4
      0    2.71     -2.71    1
      1    9.54     -9.54   13
 -1 -2 -3  4  5  8  9 10 11 12 13 14 -4  6  7 15 16
      1    0.92    0
      2   -0.98    0
      3   -0.77    2
     -3    1.41    1
H-PROLINE-UP
  3  0 0 0 0 0 2 2 0 0 0 1 0 0 0 1
     1 2 3 4 51415 6 7 812 9101113
 (1)  4  10 11   1 1 0   0  (0)  1   2 1 2
 (2)  2   3  6   2 0 0   0  (1) 12   0 0 0
 (3)  3   6 16   4 0 0   2  (2) 14   1 3 0
    3   19    6
      0    2.72     -2.72    1
      1    4.16     -4.16   12
      2    9.54     -9.54   15
 -1 -2 -3  4  5  8  9 -5 12 13 14 -6 11 15 -4  6  7 16 17
      1    0.92    0
      2   -1.31    0
      3   -0.77    3
     -3    1.41    1
     10    0.17    2
    -10    2.04    1
H-PROLINE-FLAT
  3  0 0 0 0 0 2 2 0 0 0 1 0 0 0 1
     1 2 3 4 51415 6 7 812 9101113
 (1)  4  10 11   1 1 0   0  (0)  1   2 1 2
 (2)  2   3  6   2 0 0   0  (1) 12   0 0 0
 (3)  3   6 16   4 0 0   2  (2) 14   1 3 0
    3   19    6
      0    2.72     -2.72    1
      1    4.16     -4.16   12
      2    9.54     -9.54   15
 -1 -2 -3  4  5  8  9 -5 12 13 14 -6 11 15 -4  6  7 16 17
      1    0.92    0
      2   -1.31    0
      3   -0.77    3
     -3    1.41    1
     10    0.17    2
    -10    2.04    1
AMINO - H2
  0  0 0 0
     1 2 3
    1    3    0
      0    4.54     -4.59    1
  1  2  3
AMINO - H3+
  0  0 0 0 0
     1 2 3 4
    1    4    0
      0   11.04     -4.59    1
  1  2  3  4
AMINO -CH3
  1  0 0 0 0 1 1
     1 2 3 4 5 6
 (1)  1   4  5   2 0 0   0  (0)  1   1 1 0
    2    6    0
      0    0.78     -0.78    1
      1    2.27     -4.59    5
  1  2  3  4  5  6
AMINO-COCH3
  2  0 0 0 0 1 1 2 2
     1 2 3 4 6 5 7 8
 (1)  1   4  6   2 0 0   0  (0)  1   1 1 0
 (2)  2   6  7   4 0 0   1  (1)  5   1 2 0
    2    9    2
      0    0.78     -3.10    1
      1    9.56     -9.56    5
  1  2  3 -1 -2  5  6  7  8
      4   -3.10    2
     -4    1.44    1
FORMYL
  1  0 0 0 1 1
     1 2 3 4 5
 (1)  1   3  4   2 0 0   0  (0)  1   1 1 0
    2    5    0
      0    5.54     -5.54    1
      1    2.27     -4.59    4
  1  2  3  4  5
CIS-H-PROLINE
  2  0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 2 2
     1 2 3 4 5 6 7 8 91011121315141617
 (1)  1  13 15   2 0 0   0  (0)  1   1 1 0
 (2)  2  15 16   4 0 0   1  (1) 14   1 2 0
    2   18    2
      0    4.57     -4.62    1
      1    9.54     -9.54   14
  1  2  3  4  5  6  7  8  9 10 11 12 -1 -2 14 15 16 17
     13   -1.08    2
    -13    1.47    1
TRANS-H-PROLINE
  2  0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 2 2
     1 2 3 4 5 6 7 8 91011121315141617
 (1)  1  13 15   2 0 0   0  (0)  1   1 1 0
 (2)  2  15 16   4 0 0   1  (1) 14   1 2 0
    2   18    2
      0    4.57     -4.62    1
      1    9.54     -9.54   14
  1  2  3  4  5  6  7  8  9 10 11 12 -1 -2 14 15 16 17
     13   -1.08    2
    -13    1.47    1
AMINO-H2+-PRO
  2  0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 2 2
     1 2 3 4 5 6 7 8 9101112131416151718
 (1)  1  14 16   2 0 0   0  (0)  1   1 1 0
 (2)  2  16 17   4 0 0   1  (1) 15   1 2 0
    3   20    4
      0    8.25     -1.80    1
      0    3.99     -3.99    7
      1    8.97     -8.97   16
  1  2 -1  4  5  6 -2  7  8  9 10 11 12 13 -3 -4 15 16 17 18
      3   -1.80    2
     -3   -1.42    1
     14   -0.90    3
    -14    0.77    2
P-GLUTAMIC ACID
  2  0 0 0 0 0 0 0 0 0 0 0 0 1 1 2 2
     1 2 3 4 5 6 7 8 910111214131516
 (1)  1  12 14   2 0 0   0  (0)  1   1 1 0
 (2)  2  14 15   4 0 0   1  (1) 13   1 2 0
    3   18    4
      0    2.58     -4.90    1
      0    7.22     -7.22    3
      1    9.49     -9.49   14
 -1  8  1  2  3  4  5  6 -2  9 10 11 -3 -4 13 14 15 16
      7    2.58    2
     -7    3.22    1
     12   -0.77    3
    -12    1.42    2
AMINO
  0  0 0
     1 2
    1    2    0
      0    2.27     -4.59    1
  1  2
CARBOXYL - COOH
  1 -1 0 0
     0 1 2
 (1)                        (0)  1   0 0 0
    1    2    2    0
      0    0.36     -0.31    1
 -1 -2
      2   -0.31    0
      3    0.36    0
CARBOXYL - O
  0 -1-1
     0 1
    1    2    2    3
     -1    0.01     -6.46    1
 -1 -2
      2   -6.46    0
      2    0.01    0
CARBOXYL-CH3
  1 -1 0 0 0 0
     0 1 2 3 4
 (1)                        (0)  1   0 0 0
    1    4    0    2
      0    2.31     -2.31    1
  2  3  4  5
CARBOXYL-NH2
  1 -1 0 0 0
     0 1 2 3
 (1)                        (0)  1   0 0 0
    1    3    0    2
      0    5.02     -5.02    1
  2  3  4
CARBOXYL-NHCH3
  2 -1 0 0 1 1 1 1
     0 1 2 3 4 5 6
 (1)                        (0)  1   1 1 0
 (2)  1   2  4   2 0 0   0  (1)  3   0 0 0
    1    6    2    0
      1    2.49     -0.17    1
 -1 -2  4  5  6  7
      2    0.14    0
      3   -0.17    0
N, N - DIMETHYL
  3 -1 0 1 2 2 2 2 1 1 1
     0 1 2 6 7 8 9 3 4 5
 (1)                        (0)  1   2 1 2
 (2)  1   2  3   1 1 0   0  (1)  2   0 0 0
 (3)  2   2  4   2 0 0   0  (2)  6   0 0 0
    1    9    1    1
      1    3.62     -1.30    1
 -1  3  4  5  6  7  8  9 10
      2   -1.30    0
METHYL ESTER
  2 -1 0 1 1 1 1
     0 1 2 3 4 5
 (1)                        (0)  1   1 1 0
 (2)  1   2  3   2 0 0   0  (1)  2   0 0 0
    1    5    1    1
      1    3.87     -1.55    1
 -1  3  4  5  6
      2   -1.55    0
ETHYL ESTER
  3 -1 0 1 1 1 2 2 2 2
     0 1 2 3 4 5 6 7 8
 (1)                        (0)  1   1 1 0
 (2)  1   2  3   2 0 0   0  (1)  2   1 2 0
 (3)  2   3  6   4 0 0   1  (2)  5   0 0 0
    1    8    1    1
      1    5.17     -2.85    1
 -1  3  4  5  6  7  8  9
      2   -1.55    0
CARBOXYL
  0 -1
     0
    0    0    0
CARBOXYL
  0 -1
     0
    0    0    0
//SYSUT2 DD DSN=INSPIDAS.DATA,UNIT=PUB,
//  SPACE=(TRK,(100,10,40),RLSE),
//  DISP=(NEW,CATLG),
//  DCB=(RECFM=FB,LRECL=80,BLKSIZE=6320)
/* INSPIDAS.EXAMPLE.DATA
//  EXEC UPDATE,PARM=NEW
//SYSIN DD *
./ ADD NAME=ABE
./ NUMBER NEW1=10,INCR=10
 FROM RANDOMLY GENERATED FIRST STRUCTURE
   12              0
     H2N ALA ALA ALA ALA ALA ALA ALA ALA ALA
     ALA COOH
./ ADD NAME=FLEXOUT
./ NUMBER NEW1=10,INCR=10
0       FEDEROUT                        MODIFIED 881105 FEDER
 ***    DECA-ALANINE
        KEY     DIHDMNCH4 PHI,PSI,OMEGA -       3F8.3
 ***    DIHEDRAL ANGLES OF MAIN CHAIN
        KEY     EKHI1   4 KHI1  ECEPP   -       F8.3
        KEY     EKHI2   4 KHI2  ECEPP   -       F8.3
        KEY     EKHI3   4 KHI3  ECEPP   -       F8.3
        KEY     EKHI4   4 KHI4  ECEPP   -       F8.3
        KEY     EKHI5   4 KHI5  ECEPP   -       F8.3
        KEY     EKHI6   4 KHI6  ECEPP   -       F8.3
        KEY     EKHI7   4 KHI7  ECEPP   -       F8.3
 ***    DIHEDRAL ANGLES OF SIDE CHAIN   BY ECEPP    FORMAT
        KEY     COODT   5 ATOM CO-ORDTS -       3F8.3
 ***    CARTESIAN CO-ORDINATES OF ATOMS
        KEY     SSBCNN3 5 S-S BOND      -       2A8,8X
 ***    DISULPHIDE BOND INSIDE A CHAIN
1
2
3
4       0001    ALA                     DIHDMNCH -82.007 -61.765 179.103
        EKHI1     54.437
5       H2 1    H                       COODT     -0.380  -0.940   0.0
5       N       N                       COODT      0.0     0.0     0.0
5       H2 2    H                       COODT     -0.380   0.470   0.814
5       CA      C                       COODT      1.453   0.0     0.0
5       HA      H                       COODT      1.785  -0.837  -0.615
5       CB      C                       COODT      1.964   1.301  -0.622
5       C       C                       COODT      1.959  -0.201   1.430
5       O       O                       COODT      2.638  -1.184   1.720
5       HB 1    H                       COODT      3.049   1.345  -0.532
5       HB 2    H                       COODT      1.684   1.335  -1.675
5       HB 3    H                       COODT      1.522   2.151  -0.101
4       0002    ALA                     DIHDMNCH -66.962 -39.717-179.871
        EKHI1    -59.067
5       N       N                       COODT      1.608   0.747   2.286
5       HN      H                       COODT      1.066   1.551   2.040
5       CA      C                       COODT      2.001   0.677   3.683
5       HA      H                       COODT      3.077   0.507   3.717
5       CB      C                       COODT      1.691   2.009   4.369
5       C       C                       COODT      1.290  -0.502   4.350
5       O       O                       COODT      1.883  -1.210   5.163
5       HB 1    H                       COODT      0.619   2.203   4.317
5       HB 2    H                       COODT      2.001   1.961   5.413
5       HB 3    H                       COODT      2.230   2.811   3.866
4       0003    ALA                     DIHDMNCH -66.309 -39.105-178.536
        EKHI1    -59.170
5       N       N                       COODT      0.029  -0.676   3.983
5       HN      H                       COODT     -0.445  -0.096   3.320
5       CA      C                       COODT     -0.770  -1.755   4.537
5       HA      H                       COODT     -0.699  -1.697   5.623
5       CB      C                       COODT     -2.233  -1.570   4.129
5       C       C                       COODT     -0.201  -3.097   4.072
5       O       O                       COODT     -0.158  -4.057   4.840
5       HB 1    H                       COODT     -2.313  -1.597   3.042
5       HB 2    H                       COODT     -2.834  -2.371   4.557
5       HB 3    H                       COODT     -2.594  -0.609   4.496
4       0004    ALA                     DIHDMNCH -67.707 -41.104-179.367
        EKHI1    -58.175
5       N       N                       COODT      0.223  -3.121   2.817
5       HN      H                       COODT      0.204  -2.330   2.205
5       CA      C                       COODT      0.759  -4.337   2.231
5       HA      H                       COODT      0.046  -5.140   2.421
5       CB      C                       COODT      0.903  -4.155   0.719
5       C       C                       COODT      2.088  -4.681   2.906
5       O       O                       COODT      2.360  -5.846   3.193
5       HB 1    H                       COODT      1.605  -3.347   0.515
5       HB 2    H                       COODT      1.275  -5.079   0.275
5       HB 3    H                       COODT     -0.068  -3.910   0.288
4       0005    ALA                     DIHDMNCH -65.519 -40.886-178.876
        EKHI1    -59.160
5       N       N                       COODT      2.881  -3.646   3.141
5       HN      H                       COODT      2.648  -2.700   2.913
5       CA      C                       COODT      4.181  -3.825   3.765
5       HA      H                       COODT      4.722  -4.580   3.194
5       CB      C                       COODT      4.961  -2.510   3.706
5       C       C                       COODT      3.989  -4.326   5.198
5       O       O                       COODT      4.724  -5.199   5.657
5       HB 1    H                       COODT      4.415  -1.739   4.249
5       HB 2    H                       COODT      5.942  -2.649   4.161
5       HB 3    H                       COODT      5.083  -2.206   2.667
4       0006    ALA                     DIHDMNCH -66.237 -40.389-177.878
        EKHI1    -59.197
5       N       N                       COODT      2.998  -3.752   5.863
5       HN      H                       COODT      2.395  -3.055   5.477
5       CA      C                       COODT      2.716  -4.112   7.243
5       HA      H                       COODT      3.646  -4.027   7.805
5       CB      C                       COODT      1.695  -3.134   7.827
5       C       C                       COODT      2.232  -5.563   7.298
5       O       O                       COODT      2.606  -6.312   8.199
5       HB 1    H                       COODT      0.770  -3.189   7.254
5       HB 2    H                       COODT      1.494  -3.397   8.866
5       HB 3    H                       COODT      2.093  -2.121   7.778
4       0007    ALA                     DIHDMNCH -68.027 -36.786-178.788
        EKHI1    -59.255
5       N       N                       COODT      1.407  -5.915   6.322
5       HN      H                       COODT      1.132  -5.309   5.576
5       CA      C                       COODT      0.832  -7.249   6.274
5       HA      H                       COODT      0.404  -7.462   7.253
5       CB      C                       COODT     -0.285  -7.286   5.229
5       C       C                       COODT      1.938  -8.266   5.982
5       O       O                       COODT      1.921  -9.376   6.512
5       HB 1    H                       COODT      0.127  -7.044   4.249
5       HB 2    H                       COODT     -0.724  -8.283   5.202
5       HB 3    H                       COODT     -1.052  -6.557   5.491
4       0008    ALA                     DIHDMNCH -71.414 -37.093-179.060
        EKHI1    -58.870
5       N       N                       COODT      2.872  -7.851   5.140
5       HN      H                       COODT      2.888  -6.940   4.726
5       CA      C                       COODT      3.969  -8.721   4.751
5       HA      H                       COODT      3.547  -9.692   4.491
5       CB      C                       COODT      4.668  -8.142   3.519
5       C       C                       COODT      4.923  -8.892   5.935
5       O       O                       COODT      5.469  -9.974   6.145
5       HB 1    H                       COODT      5.073  -7.160   3.759
5       HB 2    H                       COODT      5.478  -8.806   3.215
5       HB 3    H                       COODT      3.949  -8.050   2.704
4       0009    ALA                     DIHDMNCH -69.930 -36.984 178.739
        EKHI1    -59.041
5       N       N                       COODT      5.093  -7.809   6.678
5       HN      H                       COODT      4.635  -6.937   6.508
5       CA      C                       COODT      5.987  -7.820   7.824
5       HA      H                       COODT      6.930  -8.263   7.504
5       CB      C                       COODT      6.248  -6.384   8.282
5       C       C                       COODT      5.380  -8.684   8.930
5       O       O                       COODT      6.098  -9.389   9.638
5       HB 1    H                       COODT      5.307  -5.921   8.578
5       HB 2    H                       COODT      6.932  -6.392   9.131
5       HB 3    H                       COODT      6.691  -5.816   7.464
4       0010    ALA                     DIHDMNCH -69.935 -32.990 178.767
        EKHI1    -58.624
5       N       N                       COODT      4.062  -8.602   9.045
5       HN      H                       COODT      3.487  -8.014   8.478
5       CA      C                       COODT      3.347  -9.389  10.036
5       HA      H                       COODT      3.860  -9.267  10.990
5       CB      C                       COODT      1.918  -8.859  10.175
5       C       C                       COODT      3.385 -10.865   9.634
5       O       O                       COODT      3.419 -11.745  10.492
5       HB 1    H                       COODT      1.401  -8.957   9.220
5       HB 2    H                       COODT      1.390  -9.433  10.935
5       HB 3    H                       COODT      1.947  -7.809  10.467
5       OXT     O                       COODT      3.379 -11.083   8.363
5       HXT     H                       COODT      3.426 -12.066   8.185
END
./ ADD NAME=INP
./ NUMBER NEW1=10,INCR=10
  WRITE D52295.INSPIDA2.TEST.OUT TITLE TEST OF PREIN *
  PREIN
     BUILD READ  D52295.INSPIDA2.EXAMPLE.DATA(ABE)
     BUILD PRIM
     BUILD CROS
     BUILD END   NEND 1 CEND 11
     READ  ANGL  D52295.INSPIDA2.EXAMPLE.DATA(MININ)
     WRITE PREIN D52295.INSPIDA2.EXAMPLE.PREIN.DATA
  QUIT
  END
./ ADD NAME=MININ
./ NUMBER NEW1=10,INCR=10

 -57.000 -47.000 180.000
 -57.000 -47.000 180.000
 -57.000 -47.000 180.000
 -57.000 -47.000 180.000
 -57.000 -47.000 180.000
 -57.000 -47.000 180.000
 -57.000 -47.000 180.000
 -57.000 -47.000 180.000
 -57.000 -47.000 180.000
 -57.000 -47.000 180.000

./ ADD NAME=MINOUT
./ NUMBER NEW1=10,INCR=10
   0.0     0.0     0.0     0.0     0.0     0.0     0.0     0.0     0.0  
 -82.007 -61.765 179.103  54.437   0.0     0.0     0.0     0.0     0.0  
 -66.962 -39.717-179.871 -59.067   0.0     0.0     0.0     0.0     0.0  
 -66.309 -39.105-178.536 -59.170   0.0     0.0     0.0     0.0     0.0  
 -67.707 -41.104-179.367 -58.175   0.0     0.0     0.0     0.0     0.0  
 -65.519 -40.886-178.876 -59.160   0.0     0.0     0.0     0.0     0.0  
 -66.237 -40.389-177.878 -59.197   0.0     0.0     0.0     0.0     0.0  
 -68.027 -36.786-178.788 -59.255   0.0     0.0     0.0     0.0     0.0  
 -71.414 -37.093-179.060 -58.870   0.0     0.0     0.0     0.0     0.0  
 -69.930 -36.984 178.739 -59.041   0.0     0.0     0.0     0.0     0.0  
 -69.935 -32.990 178.767 -58.624   0.0     0.0     0.0     0.0     0.0  
   0.0     0.0     0.0     0.0     0.0     0.0     0.0     0.0     0.0  
./ ADD NAME=PREIN
./ NUMBER NEW1=10,INCR=10
DECA-ALANINE
   12    1    1    1    1
  1  1  1  1  1  1  1  1  1  1
  1 11

 -57.000 -47.000 180.000
 -57.000 -47.000 180.000
 -57.000 -47.000 180.000
 -57.000 -47.000 180.000
 -57.000 -47.000 180.000
 -57.000 -47.000 180.000
 -57.000 -47.000 180.000
 -57.000 -47.000 180.000
 -57.000 -47.000 180.000
 -57.000 -47.000 180.000

ALL
./ ADD NAME=PREOUT
./ NUMBER NEW1=10,INCR=10
//SYSUT2 DD DSN=INSPIDAS.EXAMPLE.DATA,UNIT=PUB,
//  SPACE=(TRK,(100,10,40),RLSE),
//  DISP=(NEW,CATLG),
//  DCB=(RECFM=FB,LRECL=80,BLKSIZE=6320)
/* INSPIDAS.EXAMPLE.INPUT
//  EXEC UPDATE,PARM=NEW
//SYSIN DD *
./ ADD NAME=DECAALA
./ NUMBER NEW1=10,INCR=10
  WRITE DECAALA.OUT TITLE TEST OF INSPIDAS *
  PREIN
!    BUILD READ  /labo/qclib/inspidas/example/data/abe 
     BUILD PRIM  ALA ALA ALA ALA ALA ALA ALA ALA ALA ALA END
     BUILD END   NEND 1 CEND 11
     READ  ANGL  /labo/qclib/inspidas/example/data/minin
     WRITE PREIN /labo/qclib/inspidas/example/data/decaala/PREIN
  QUIT
  PRECEP
     READ  PARM  STANDARD -
            /labo/qclib/inspidas/data/sdatx 
     READ  PARM UNIT -
            /labo/qclib/inspidas/data/unitx 
     READ  PREIN -
            /labo/qclib/inspidas/example/data/decaala/PREIN
     RUN
     WRITE PREOUT -
            /labo/qclib/inspidas/example/data/decaala/PREOUT
     QUIT
  MINIM
    INPUT CNTL -
      TLIMIT 600 LOUT 50 NUMRNG 1 -
      LRANGE 400 WVLTN0 0.0 LFUNC0 -1 NITRTN 200 -
      CONV0 1.D-12 LOMEGA 0
    READ PRECEP -
      /labo/qclib/inspidas/example/data/decaala/PREOUT
    READ PARM -
      /labo/qclib/inspidas/data/bd8 
    READ ANGLE -
      /labo/qclib/inspidas/example/data/minin 
    RUN
    WRITE ANGLE -
      /labo/qclib/inspidas/example/data/decaala/TEST.MINANG.DATA
    WRITE COORD FLEX -
      /labo/qclib/inspidas/example/data/decaala/TEST.MINCOO.DATA
    PUT FMATRIX -
      /labo/qclib/inspidas/example/data/decaala/TEST.DRVTV.DATA
    QUIT
  NMA
   HMAT
   DIAG
   WRIT -
     /labo/qclib/inspidas/example/data/decaala/TEST.EIGEN.DATA
   PUT  -
     /labo/qclib/inspidas/example/data/decaala/TEST.EIGEN.BIN
   KMAT -
     /labo/qclib/inspidas/example/data/decaala/TEST.KMAT.BIN
   GRPH
  QUIT
  END
./ ADD NAME=INP
./ NUMBER NEW1=10,INCR=10
./ ADD NAME=MINIM
./ NUMBER NEW1=10,INCR=10
  WRITE D52362.INSPIDA2.TEST.OUT TITLE TEST OF MINIMIZATION *
  MINIM
    INPUT CNTL -
      TLIMIT 600 LOUT 50 NUMRNG 1 -
      LRANGE 400 WVLTN0 0.0 LFUNC0 -1 NITRTN 200 -
      CONV0 1.D-12 LOMEGA 0
    READ PRECEP -
      D52362.INSPIDA2.EXAMPLE.DATA(PREOUT)
    READ PARM -
      D52362.INSPIDA2.DATA.DATA(BD8)
    READ ANGLE -
      D52362.INSPIDA2.EXAMPLE.DATA(MININ)
    RUN
    WRITE ANGLE -
      D52362.INSPIDA2.TEST.MINANG.DATA
    WRITE COORD FLEX -
      D52362.INSPIDA2.TEST.MINCOO.DATA
    PUT FMATRIX -
      D52362.INSPIDA2.TEST.DRVTV.DATA
  QUIT
  END
./ ADD NAME=NMANAL
./ NUMBER NEW1=10,INCR=10
  WRITE DECAALA.NMANAL.OUT TITLE TEST OF NMANAL *
  NMA
    ANAL
      READ PREC    /labo/qclib/inspidas/example/data/decaala/PREOUT
      READ EIGEN   /labo/qclib/inspidas/example/data/decaala/TEST.EIGEN.BIN
      READ KMAT    /labo/qclib/inspidas/example/data/decaala/TEST.KMAT.BIN
      INPU CNTL -
        TEMP 300. THRESH 200 NMOD 3 IFRMX 3
      COM1 /labo/qclib/inspidas/example/data/decaala/COM1.DATA
      COM2 /labo/qclib/inspidas/example/data/decaala/COM2.DATA
      COM3 /labo/qclib/inspidas/example/data/decaala/COM3.DATA
      COM5 /labo/qclib/inspidas/example/data/decaala/COM5.DATA
      COM6 /labo/qclib/inspidas/example/data/decaala/COM6.DATA
      COM8 /labo/qclib/inspidas/example/data/decaala/COM8.DATA
      COM9 /labo/qclib/inspidas/example/data/decaala/COM9.DATA
    END
  QUIT
  END
./ ADD NAME=PRECEP
./ NUMBER NEW1=10,INCR=10
  WRITE D52362.INSPIDA2.TEST.OUT TITLE TEST OF PRECEP *
  PRECEP
     READ  PARM  STANDARD -
            D52362.INSPIDA2.DATA.DATA(SDATX)
     READ  PARM UNIT -
            D52362.INSPIDA2.DATA.DATA(UNITX)
     READ  PREIN -
            D52362.INSPIDA2.EXAMPLE.DATA(PREIN)
     RUN
     WRITE PREOUT -
            D52362.INSPIDA2.EXAMPLE.DATA(PREOTEMP)
     QUIT
  END
./ ADD NAME=PREIN
./ NUMBER NEW1=10,INCR=10
  WRITE D52295.INSPIDA2.TEST.OUT TITLE TEST OF PREIN *
  PREIN
     BUILD READ  D52362.INSPIDA2.EXAMPLE.DATA(ABE)
]    BUILD PRIM
]    BUILD CROS
     BUILD END   NEND 1 CEND 11
     READ  ANGL  D52362.INSPIDA2.EXAMPLE.DATA(MININ)
     WRITE PREIN D52295.INSPIDA2.EXAMPLE.PREIN.DATA
  QUIT
  END
//SYSUT2 DD DSN=INSPIDAS.EXAMPLE.INPUT,UNIT=PUB,
//  SPACE=(TRK,(100,10,40),RLSE),
//  DISP=(NEW,CATLG),
//  DCB=(RECFM=FB,LRECL=80,BLKSIZE=6320)
/* INSPIDAS.SOURCE
//  EXEC UPDATE,PARM=NEW
//SYSIN DD *
./ ADD NAME=DADAS
./ NUMBER NEW1=10,INCR=10
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C                                                                       
C     PROGRAM NAME : DADAS (DISTANCE ANALYSIS IN DIHEDRAL ANGLE SPACE)  
C                                                                       
C     VERSION : 2.41                                                    
C                                                                       
C     PRODUCED BY W.BRAUN & N.GO (198X.X.X)                             
C                                                                       
C     MODIFIED BY T.IKURA (1990.4.4)                                    
C                                                                       
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C                                                                       
      PROGRAM MAIN                                                      
C                                                                       
C--------                                                               
C                                                                       
      IMPLICIT REAL*8 (A-H,O-Z)                                         
C                                                                       
      PARAMETER (NAR=21,ML=100,MAN=1000,MC=100,MVAR=900,NUMR=21)        
      PARAMETER (MA=2000)                                               
C                                                                       
      REAL*8 RATOM(NAR),CUT(5),WEVW(ML),WEJ(ML),WEW(ML),ANGI(MAN,MC),   
     *       GRDVAR(MVAR)                                               
C                                                                       
COM      REAL TSTR1(2),TSTR2(2),TEND(2),TDIFF(2)                        
C                                                                       
      INTEGER NUMLBR(NUMR),NCP(30,NUMR),ICP(4,30,NUMR),LIMIT(ML),       
     *        NAC(ML),MV(ML),WC,NCON(MA),ICON(4,MA)                     
C                                                                       
      CHARACTER NAMLBR(NUMR)*4,NAMATP(30,NUMR)*4,WV*1,CRDID*4           
C                                                                       
      EXTERNAL GRDEB                                                    
C                                                                       
C--------                                                               
C                                                                       
COM      CALL  ETIME(TSTR1)                                             
C                                                                       
C--------                                                               
C                                                                       
      CALL  UNIXIO                                                      
C                                                                       
C--------                                                               
C                                                                       
      CALL  INSTRD                                                      
C                                                                       
      CALL  INCONN(NAMLBR,NUMLBR,NAMATP,NCP,ICP)                        
C                                                                       
      CALL  INRAD(RATOM)                                                
C                                                                       
      CALL  INCHRM                                                      
C                                                                       
      CALL  INSEQ                                                       
C                                                                       
      CALL  INCNTL(WV,IRAN,NCONF,ISTCON,IAC,JC,WC,FC,EPS,LTIME,         
     *             CRDID,CUT,NLOOP,LIMIT,NAC,MV,WEVW,WEJ,WEW,ICRD)      
C                                                                       
      IF (IRAN.EQ.-1) THEN                                              
        CALL  INIAN(NCONF,ANGI)                                         
      END IF                                                            
C                                                                       
      CALL  INCNST(IAC,JC,WC,NCONF)                                     
C                                                                       
C--------                                                               
C                                                                       
      CALL  SEQUE                                                       
C                                                                       
      CALL  PARAM                                                       
C                                                                       
      CALL  CONN(NAMLBR,NUMLBR,NAMATP,NCP,ICP,NCON,ICON)                
C                                                                       
      CALL  RADIUS(RATOM)                                               
C                                                                       
      CALL  VARAN(WV)                                                   
C                                                                       
      CALL  DCNSTR                                                      
C                                                                       
C--------                                                               
C                                                                       
      DO 10 I=1,NCONF                                                   
C                                                                       
        WRITE(6,*) 'CALCULATION FOR #',I                                
C                                                                       
C--------                                                               
C                                                                       
        CALL  SPV(I,WV,IRAN,ISTCON,IAC,JC,WC,ANGI)                      
C                                                                       
C--------                                                               
C                                                                       
COM        CALL  ETIME(TSTR2)                                           
C                                                                       
C--------                                                               
C                                                                       
        DO 20 J=1,NLOOP                                                 
C                                                                       
          CALL  DEFNKL(J,NAC,MV,WEVW,WEJ,WEW)                           
C                                                                       
          CALL  ACTIV                                                   
C                                                                       
          CALL  GRDEB(EB,GRDVAR,JC,WC,WV)                               
C                                                                       
          CALL  MINCG(GRDEB,EPS,LIMIT(J),FC,GRDVAR,EB,JC,WC,J,WV)       
C                                                                       
C--------                                                               
C                                                                       
COM          CALL  ETIME(TEND)                                          
COM          TTIME=TEND(1)-TSTR1(1)                                     
COM          IF (TTIME.GE.(LTIME*60.)) THEN                             
COM            NLOOP=J                                                  
COM            GOTO 30                                                  
COM          END IF                                                     
C                                                                       
C--------                                                               
C                                                                       
  20    CONTINUE                                                        
C                                                                       
C--------                                                               
C                                                                       
COM  30    CALL  ETIME(TEND)                                            
COM        TDIFF(1)=TEND(1)-TSTR2(1)                                    
COM        TDIFF(2)=TEND(2)-TSTR2(2)                                    
C                                                                       
        CALL  GRDEB(EB,GRDVAR,JC,WC,WV)                                 
C                                                                       
        CALL  OUTPAR(I,GRDVAR,TDIFF)                                    
C                                                                       
        CALL  OUTTGT(I,NLOOP,LIMIT,NAC)                                 
C                                                                       
        CALL  OUTVD(CUT(1),CUT(2),I)                                    
C                                                                       
        CALL  OUTVV(CUT(3),NCON,ICON)                                   
C                                                                       
        IF (JC.GE.1) THEN                                               
          CALL  OUTVJ(CUT(4))                                           
        END IF                                                          
C                                                                       
        IF (WC.GE.1) THEN                                               
          CALL  OUTVW(CUT(5))                                           
        END IF                                                          
C                                                                       
        CALL  OUTANG                                                    
C                                                                       
        IF (ICRD.EQ.1) THEN                                             
          CALL  OUTCRD(CRDID,I)                                         
        END IF                                                          
C                                                                       
        IF (ICRD.EQ.2) THEN                                             
          CALL  OUTPDB(CRDID,I)                                         
        END IF                                                          
C                                                                       
C--------                                                               
C                                                                       
  10  CONTINUE                                                          
C                                                                       
C--------                                                               
C                                                                       
      WRITE(6,*) 'DADAS ENDED'                                          
C                                                                       
      END                                                               
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C                                                                       
      BLOCK DATA                                                        
C                                                                       
C--------                                                               
C                                                                       
      IMPLICIT REAL*8 (A-H,O-Z)                                         
C                                                                       
      COMMON/IUNIT/INSS,INSC,INSR,INS,INC,INI,INCL,INCU,INCH,INCJ,      
     *             INCA,INCW                                            
      COMMON/OUNIT/JPAR,JTGT,JVIO,JANG,JCO                              
      COMMON/GEN005/IDENT(9)                                            
      COMMON/GEN006/PROANG(3)                                           
      COMMON/GEN007/LBG(3),LEN(3)                                       
      COMMON/PRAM/NREG,NEND,LR(6,20),LRT1(7,26)                         
      COMMON/PRINT/IPRNT                                                
      COMMON/FIXANG/OMEGA,PHIPRO                                        
      COMMON/CHARM0/ICHRM,NFULR,NENDG                                   
      COMMON/CYSVAL/VALSS,VALSC                                         
C                                                                       
      REAL*8 IDENT                                                      
C                                                                       
C--------                                                               
C                                                                       
      DATA INSS/10/                                                     
      DATA INSC/11/                                                     
      DATA INSR/12/                                                     
      DATA INS/13/                                                      
      DATA INC/14/                                                      
      DATA INI/15/                                                      
      DATA INCL/16/                                                     
      DATA INCU/17/                                                     
      DATA INCH/18/                                                     
      DATA INCJ/19/                                                     
      DATA INCA/20/                                                     
      DATA INCW/21/                                                     
C                                                                       
C--------                                                               
C                                                                       
      DATA JPAR/50/                                                     
      DATA JTGT/51/                                                     
      DATA JVIO/52/                                                     
      DATA JANG/53/                                                     
      DATA JCO/54/                                                      
C                                                                       
C--------                                                               
C                                                                       
      DATA IPRNT/0/                                                     
C                                                                       
      DATA PROANG/2.136666977D0,1.962081692D0,1.832595715D0/            
C     PROANG(1)=122.422D0*PI/180.D0                                     
C     PROANG(2)=112.419D0*PI/180.D0                                     
C     PROANG(3)=105.000D0*PI/180.D0                                     
C                                                                       
      DATA LBG/3,8,5/                                                   
      DATA LEN/10,10,7/                                                 
C                                                                       
      DATA NREG/26/                                                     
      DATA NEND/20/                                                     
C                                                                       
      DATA IDENT/1.D0,3*0.D0,1.D0,3*0.D0,1.D0/                          
C                                                                       
      DATA OMEGA,PHIPRO/180.D0,-75.D0/                                  
C                                                                       
      DATA VALSS,VALSC/2.04D0,3.05D0/                                   
C                                                                       
C--------                                                               
C                                                                       
      DATA ICHRM,NFULR,NENDG/22,21,14/                                  
C                                                                       
C--------                                                               
C                                                                       
      END                                                               
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC  
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC  
C                                                                       
      SUBROUTINE SRWEND(SENTCE,IFLEND)                                  
C                                                                       
C     THIS SUB. MEASURES LENGTH OF FILE NAME.                           
C                                                                       
C--------                                                               
C                                                                       
      CHARACTER SRC*1,SENTCE*72                                         
C                                                                       
C--------                                                               
C                                                                       
      IFLEND=0                                                          
C                                                                       
      DO 10  I=1,72                                                     
        SRC=SENTCE(I:I)                                                 
        IF (SRC .NE. ' ') THEN                                          
          IFLEND=IFLEND+1                                               
        END IF                                                          
  10  CONTINUE                                                          
C                                                                       
C--------                                                               
C                                                                       
      RETURN                                                            
      END                                                               
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C                                                                       
      SUBROUTINE INSTRD                                                 
C                                                                       
C--------                                                               
      IMPLICIT REAL*8 (A-H,O-Z)                                         
C                                                                       
      COMMON/IUNIT/INSS,INSC,INSR,INS,INC,INI,INCL,INCU,INCH,INCJ,      
     *             INCA,INCW                                            
      COMMON/CHECK/KNDRES(26),KNDEND(20)                                
      COMMON/GEN000/CHG(26,26),ALPHA(26,26),TITLE(4,46),LTYPE(26,26)    
      COMMON/GEN001/XOORD(3,26,26),SNTH2(26),CSTH2(26),SDEL(26),        
     *              CDEL(26)                                            
      COMMON/GEN002/CHIANG(3,7,26),NATOMS(26),NCHI(26),NDPT1(7,26),     
     *              NDPT2(7,26),NUM(7,26)                               
      COMMON/GEN004/ENOORD(3,22,20),ECHG(22,20),EALPHA(22,20),          
     *              NDATOM(20),NBOND(20),NNDPT1(6,20),NNDPT2(6,20),     
     *             NDTYPE(22,20)                                        
      COMMON/GEN008/NGEOM(26)                                           
      COMMON/TREE/NBR1(7,26),NPOI1(2,7,26)                              
      COMMON/PRAM/NREG,NEND,LR(6,20),LRT1(7,26)                         
C                                                                       
      INTEGER NSN14(26,26),NFN14(26,26),MSX14(22,20),MFX14(22,20),      
     *        MSN14(22,20),MFN14(22,20),NSN15(26,26),MSN15(22,20),      
     *        MSX15(22,20),NBB(8,26),NSS(8,26),NANG(8,26),NTOR(26),     
     *        NBBN(20),NSSN(20),NANGN(20)                               
      REAL*8 AR(8,26),AAN(20)                                           
      CHARACTER ALPHA*3,TITLE*4,EALPHA*3                                
C                                                                       
C--------                                                               
C                                                                       
      DO 10 I=1,NREG                                                    
        READ (INSS,500) (TITLE(L,I),L=1,4)                              
        READ (INSS,510) NATOMS(I),NCHI(I),SNTH2(I),CSTH2(I),SDEL(I),    
     *                  CDEL(I)                                         
        READ (INSS,520) KNDRES(I),NTOR(I),NGEOM(I)                      
C                                                                       
        IF (NTOR(I) .NE. 0) THEN                                        
          NT=NTOR(I)                                                    
          DO 20 J=1,NT                                                  
            READ (INSS,530) AR(J,I),NBB(J,I),NSS(J,I),NANG(J,I)         
  20      CONTINUE                                                      
        END IF                                                          
C                                                                       
        NUMCHI=NCHI(I)                                                  
C                                                                       
        IF (NUMCHI .NE. 0) THEN                                         
          DO 30 J=1,NUMCHI                                              
            READ (INSS,540) (CHIANG(L,J,I),L=1,3),NDPT1(J,I),           
     *                      NDPT2(J,I),NUM(J,I),LRT1(J,I),NBR1(J,I),    
     *                      (NPOI1(L,J,I),L=1,2)                        
  30      CONTINUE                                                      
        END IF                                                          
C                                                                       
        NATOM=NATOMS(I)                                                 
        READ (INSS,550) ALPHA(1,I),LTYPE(1,I),CHG(1,I),NSN15(1,I),      
     *                  NSN14(1,I),NFN14(1,I)                           
        DO 40 J=2,NATOM                                                 
          READ (INSS,560) (XOORD(L,J-1,I),L=1,3),ALPHA(J,I),LTYPE(J,I), 
     *                    CHG(J,I),NSN15(J,I),NSN14(J,I),NFN14(J,I)     
  40    CONTINUE                                                        
        READ (INSS,560) (XOORD(L,NATOM,I),L=1,3)                        
  10  CONTINUE                                                          
C                                                                       
      DO 50 I=1,NEND                                                    
        READ (INSS,500) (TITLE(L,I+NREG),L=1,4)                         
        READ (INSS,570) NDATOM(I),NBOND(I),(NNDPT1(L,I),NNDPT2(L,I),    
     *                  L=1,6)                                          
        READ (INSS,580) KNDEND(I),AAN(I),NBBN(I),NSSN(I),NANGN(I)       
        NB=NBOND(I)                                                     
C                                                                       
        IF (NB .EQ. 0) THEN                                             
          NB=1                                                          
        END IF                                                          
C                                                                       
        READ (INSS,570) (LR(L,I),L=1,NB)                                
        ND=NDATOM(I)-3                                                  
C                                                                       
        IF (ND .LT. 7) THEN                                             
          ND=7                                                          
        END IF                                                          
C                                                                       
        READ (INSS,570) (MSX15(L,I),L=1,ND)                             
        READ (INSS,570) (MSX14(L,I),L=1,ND)                             
        READ (INSS,570) (MFX14(L,I),L=1,ND)                             
        NATOM=NDATOM(I)                                                 
        DO 60 J=1,NATOM                                                 
          READ (INSS,560) (ENOORD(L,J,I),L=1,3),EALPHA(J,I),            
     *                    NDTYPE(J,I),ECHG(J,I),MSN15(J,I),             
     *                    MSN14(J,I),MFN14(J,I)                         
  60    CONTINUE                                                        
  50  CONTINUE                                                          
C                                                                       
C--------                                                               
C                                                                       
 500  FORMAT(4A4)                                                       
 510  FORMAT(2I5,4F10.7)                                                
 520  FORMAT(3I4)                                                       
 530  FORMAT(F10.4,3I5)                                                 
 540  FORMAT(5X,3F9.6,5X,7I3)                                           
 550  FORMAT(37X,A3,I2,F10.6,I5,2X,4I3)                                 
 560  FORMAT(3F10.4,7X,A3,I2,F10.2,I5,2X,4I3)                           
 570  FORMAT(14I5)                                                      
 580  FORMAT(I4,F10.4,3I5)                                              
C                                                                       
      RETURN                                                            
      END                                                               
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C                                                                       
      SUBROUTINE INCONN(NAMLBR,NUMLBR,NAMATP,NCP,ICP)                   
C                                                                       
C--------                                                               
C                                                                       
      IMPLICIT REAL*8 (A-H,O-Z)                                         
C                                                                       
      PARAMETER (NUMR=21)                                               
C                                                                       
      COMMON/IUNIT/INSS,INSC,INSR,INS,INC,INI,INCL,INCU,INCH,INCJ,      
     *             INCA,INCW                                            
C                                                                       
      INTEGER NUMLBR(NUMR),NCP(30,NUMR),ICP(4,30,NUMR)                  
      CHARACTER*4 NAMLBR(NUMR),NAMATP(30,NUMR)                          
C                                                                       
C--------                                                               
C                                                                       
      DO 10 I=1,NUMR                                                    
        READ (INSC,500) NAMLBR(I)                                       
        READ (INSC,510) NUMLBR(I)                                       
        DO 20 J=1,NUMLBR(I)                                             
          READ (INSC,520) NAMATP(J,I),NCP(J,I),(ICP(K,J,I),K=1,4)       
  20    CONTINUE                                                        
  10  CONTINUE                                                          
C                                                                       
C--------                                                               
C                                                                       
 500  FORMAT(A4)                                                        
 510  FORMAT(I5)                                                        
 520  FORMAT(5X,A4,I5,1X,4I4)                                           
C                                                                       
      RETURN                                                            
      END                                                               
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C                                                                       
      SUBROUTINE INRAD(RATOM)                                           
C                                                                       
C--------                                                               
C                                                                       
      IMPLICIT REAL*8 (A-H,O-Z)                                         
C                                                                       
      PARAMETER (NAR=21)                                                
C                                                                       
      COMMON/IUNIT/INSS,INSC,INSR,INS,INC,INI,INCL,INCU,INCH,INCJ,      
     *             INCA,INCW                                            
C                                                                       
      REAL*8 RATOM(NAR)                                                 
C                                                                       
C--------                                                               
C                                                                       
      DO 10 I=1,NAR                                                     
        READ (INSR,500) RATOM(I)                                        
  10  CONTINUE                                                          
C                                                                       
 500  FORMAT(F5.2)                                                      
C                                                                       
      RETURN                                                            
      END                                                               
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C                                                                       
      SUBROUTINE INCHRM                                                 
C                                                                       
C--------                                                               
C                                                                       
      IMPLICIT REAL*8 (A-H,O-Z)                                         
C                                                                       
      COMMON/CHARM0/ICHRM,NFULR,NENDG                                   
      COMMON/CHARM1/IND(26,26),INDC(22,20),NOATM(26),NTATOM(2,20)       
      COMMON/CHARM2/ATMNAM(26,26),ATMNME(20,20),ID                      
      COMMON/CHARM3/VAL                                                 
C                                                                       
      CHARACTER*4 ATMNAM,ATMNME,ID                                      
C                                                                       
C--------                                                               
C                                                                       
      READ(ICHRM,500) ID,VAL                                            
C                                                                       
      DO 10 I=1,NFULR                                                   
C                                                                       
        READ(ICHRM,510) NOATM(I)                                        
        NAF=NOATM(I)                                                    
C                                                                       
        DO 20 J=1,NAF                                                   
          READ(ICHRM,520) IND(J,I),ATMNAM(J,I)                          
  20    CONTINUE                                                        
C                                                                       
  10  CONTINUE                                                          
C                                                                       
      DO 30 I=1,NENDG                                                   
C                                                                       
        READ(ICHRM,530) NTATOM(1,I),NTATOM(2,I)                         
        NAE=NTATOM(1,I)                                                 
C                                                                       
        DO 40 J=1,NAE                                                   
          READ(ICHRM,520) INDC(J,I),ATMNME(J,I)                         
  40    CONTINUE                                                        
C                                                                       
  30  CONTINUE                                                          
C                                                                       
C--------                                                               
C                                                                       
 500  FORMAT(A4,F10.3)                                                  
 510  FORMAT(10X,I5)                                                    
 520  FORMAT(2X,I2,1X,A4)                                               
 530  FORMAT(10X,2I5)                                                   
C                                                                       
C--------                                                               
C                                                                       
      RETURN                                                            
      END                                                               
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C                                                                       
      SUBROUTINE INSEQ                                                  
C                                                                       
C--------                                                               
C                                                                       
      IMPLICIT REAL*8 (A-H,O-Z)                                         
C                                                                       
      PARAMETER (MRES=90,MSP=10)                                        
      PARAMETER (MRES1=MRES+1)                                          
C                                                                       
      COMMON/IUNIT/INSS,INSC,INSR,INS,INC,INI,INCL,INCU,INCH,INCJ,      
     *             INCA,INCW                                            
      COMMON/GEN100/INUMRS,LIST(MRES),NPRE(MRES1)                       
      COMMON/CYS/KCYS,NCYS,NPAIR(2,MSP)                                 
      COMMON/NAMPR/TIDA,NAMRE(MRES)                                     
C                                                                       
      CHARACTER NAMRE*4,TIDA*80                                         
C                                                                       
C--------                                                               
C                                                                       
      READ (INS,500) TIDA                                               
      READ (INS,510) INUMRS,NCYS                                        
      NL=INT(INUMRS*.1)+1                                               
      DO 10 I=1,NL                                                      
        J=10*(I-1)                                                      
        READ (INS,520) (NAMRE(J+K),K=1,10)                              
  10  CONTINUE                                                          
C                                                                       
      IF (NCYS .NE. 0) THEN                                             
        READ (INS,530) ((NPAIR(J,I),J=1,2),I=1,NCYS)                    
      END IF                                                            
C                                                                       
C--------                                                               
C                                                                       
 500  FORMAT(A80)                                                       
 510  FORMAT(I5,10X,I5)                                                 
 520  FORMAT(5X,10A4)                                                   
 530  FORMAT(20I4)                                                      
C                                                                       
      RETURN                                                            
      END                                                               
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C                                                                       
      SUBROUTINE INCNTL(WV,IRAN,NCONF,ISTCON,IAC,JC,WC,FC,EPS,LTIME,    
     *                  CRDID,CUT,NLOOP,LIMIT,NAC,MV,WEVW,WEJ,WEW,ICRD) 
C                                                                       
C--------                                                               
C                                                                       
      IMPLICIT REAL*8 (A-H,O-Z)                                         
C                                                                       
      PARAMETER (ML=100)                                                
C                                                                       
      COMMON/IUNIT/INSS,INSC,INSR,INS,INC,INI,INCL,INCU,INCH,INCJ,      
     *             INCA,INCW                                            
C                                                                       
      REAL*8 CUT(5),WEVW(ML),WEJ(ML),WEW(ML)                            
      INTEGER LIMIT(ML),NAC(ML),MV(ML),WC                               
      CHARACTER*1 WV                                                    
      CHARACTER*4 CRDID                                                 
C                                                                       
C--------                                                               
C                                                                       
      READ (INC,500) WV                                                 
      READ (INC,510) IRAN,NCONF,ISTCON,IAC,JC,WC                        
      READ (INC,*) FC,EPS,LTIME                                         
      READ (INC,520) (CUT(I),I=1,5)                                     
      READ (INC,530) NLOOP                                              
      DO 10 I=1,NLOOP                                                   
        READ (INC,540) LIMIT(I),NAC(I),MV(I),WEVW(I),WEJ(I),WEW(I)      
  10  CONTINUE                                                          
      READ (INC,550) CRDID,ICRD                                         
C                                                                       
C--------                                                               
C                                                                       
 500  FORMAT(A1)                                                        
 510  FORMAT(6I5)                                                       
 520  FORMAT(5F10.2)                                                    
 530  FORMAT(I5)                                                        
 540  FORMAT(3I5,3F10.2)                                                
 550  FORMAT(A4,I5)                                                     
C                                                                       
C--------                                                               
C                                                                       
      RETURN                                                            
      END                                                               
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C                                                                       
      SUBROUTINE INIAN(NCONF,ANGI)                                      
C                                                                       
C--------                                                               
C                                                                       
      IMPLICIT REAL*8 (A-H,O-Z)                                         
C                                                                       
      PARAMETER (MRES=90,MAN=1000,MC=100)                               
      PARAMETER (MRES1=MRES+1)                                          
C                                                                       
      COMMON/IUNIT/INSS,INSC,INSR,INS,INC,INI,INCL,INCU,INCH,INCJ,      
     *             INCA,INCW                                            
      COMMON/GEN100/INUMRS,LIST(MRES),NPRE(MRES1)                       
C                                                                       
      REAL*8 ANGI(MAN,MC)                                               
C                                                                       
C--------                                                               
C                                                                       
      RD=3.141592653589793D0/180.D0                                     
C                                                                       
      DO 10 I=1,NCONF                                                   
        DO 20 J=1,INUMRS-2                                              
          K=10*(J-1)                                                    
          READ (INI,500) (ANGI(K+L,I),L=1,10)                           
          DO 30 L=1,10                                                  
            ANGI(K+L,I)=RD*ANGI(K+L,I)                                  
  30      CONTINUE                                                      
  20    CONTINUE                                                        
  10  CONTINUE                                                          
C                                                                       
C--------                                                               
C                                                                       
 500  FORMAT(10F8.3)                                                    
C                                                                       
      RETURN                                                            
      END                                                               
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C                                                                       
      SUBROUTINE INCNST(IAC,JC,WC,NCONF)                                
C                                                                       
C--------                                                               
C                                                                       
      IMPLICIT REAL*8 (A-H,O-Z)                                         
C                                                                       
      INTEGER WC                                                        
C                                                                       
C--------                                                               
C                                                                       
      CALL  CNSTL                                                       
C                                                                       
      CALL  CNSTU                                                       
C                                                                       
      CALL  CNSTH                                                       
C                                                                       
      CALL  CNSTS                                                       
C                                                                       
      IF (IAC .EQ. 1) THEN                                              
        CALL  CNSTA(NCONF)                                              
      END IF                                                            
C                                                                       
      IF (JC .GE. 1) THEN                                               
        CALL  CNSTJ                                                     
      END IF                                                            
C                                                                       
      IF (WC .GE. 1) THEN                                               
        CALL  CNSTW                                                     
      END IF                                                            
C                                                                       
C--------                                                               
C                                                                       
      RETURN                                                            
      END                                                               
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C                                                                       
      SUBROUTINE CNSTL                                                  
C                                                                       
C--------                                                               
C                                                                       
      IMPLICIT REAL*8 (A-H,O-Z)                                         
C                                                                       
      PARAMETER (MCL=10000)                                             
C                                                                       
      COMMON/IUNIT/INSS,INSC,INSR,INS,INC,INI,INCL,INCU,INCH,INCJ,      
     *             INCA,INCW                                            
      COMMON/CNSL1/VALL(MCL),WL(MCL)                                    
      COMMON/CNSL2/NL,NUML1(MCL),NUML2(MCL)                             
      COMMON/CNSL3/AML1(MCL),AML2(MCL)                                  
C                                                                       
      CHARACTER*3 AML1,AML2                                             
C                                                                       
C--------                                                               
C                                                                       
      READ (INCL,500) NL                                                
C                                                                       
      IF (NL .EQ. 0) THEN                                               
        RETURN                                                          
      END IF                                                            
C                                                                       
      DO 10 I=1,NL                                                      
        READ (INCL,510) AML1(I),NUML1(I),AML2(I),NUML2(I),VALL(I),WL(I) 
  10  CONTINUE                                                          
C                                                                       
C--------                                                               
C                                                                       
 500  FORMAT(I5)                                                        
 510  FORMAT(A3,I3,1X,A3,I3,2F10.4)                                     
C                                                                       
      RETURN                                                            
      END                                                               
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C                                                                       
      SUBROUTINE CNSTU                                                  
C                                                                       
C--------                                                               
C                                                                       
      IMPLICIT REAL*8 (A-H,O-Z)                                         
C                                                                       
      PARAMETER (MCU=10000)                                             
C                                                                       
      COMMON/IUNIT/INSS,INSC,INSR,INS,INC,INI,INCL,INCU,INCH,INCJ,      
     *             INCA,INCW                                            
      COMMON/CNSU1/VALU(MCU),WU(MCU)                                    
      COMMON/CNSU2/NU,NUMU1(MCU),NUMU2(MCU)                             
      COMMON/CNSU3/AMU1(MCU),AMU2(MCU)                                  
C                                                                       
      CHARACTER*3 AMU1,AMU2                                             
C                                                                       
C--------                                                               
C                                                                       
      READ (INCU,500) NU                                                
C                                                                       
      IF (NU .EQ. 0) THEN                                               
        RETURN                                                          
      END IF                                                            
C                                                                       
      DO 10 I=1,NU                                                      
        READ (INCU,510) AMU1(I),NUMU1(I),AMU2(I),NUMU2(I),VALU(I),WU(I) 
  10  CONTINUE                                                          
C                                                                       
C--------                                                               
C                                                                       
 500  FORMAT(I5)                                                        
 510  FORMAT(A3,I3,1X,A3,I3,2F10.4)                                     
C                                                                       
      RETURN                                                            
      END                                                               
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C                                                                       
      SUBROUTINE CNSTH                                                  
C                                                                       
C--------                                                               
C                                                                       
      IMPLICIT REAL*8 (A-H,O-Z)                                         
C                                                                       
      PARAMETER (MCL=10000,MCU=10000,MCH=100)                           
C                                                                       
      COMMON/IUNIT/INSS,INSC,INSR,INS,INC,INI,INCL,INCU,INCH,INCJ,      
     *             INCA,INCW                                            
      COMMON/CNSL1/VALL(MCL),WL(MCL)                                    
      COMMON/CNSL2/NL,NUML1(MCL),NUML2(MCL)                             
      COMMON/CNSL3/AML1(MCL),AML2(MCL)                                  
      COMMON/CNSU1/VALU(MCU),WU(MCU)                                    
      COMMON/CNSU2/NU,NUMU1(MCU),NUMU2(MCU)                             
      COMMON/CNSU3/AMU1(MCU),AMU2(MCU)                                  
      COMMON/HBND1/NH,NUMH1(MCH),NUMH2(MCH)                             
      COMMON/HBND2/AMH1(MCH),AMH2(MCH)                                  
C                                                                       
      REAL*8 VALHL(MCH),VALHU(MCH)                                      
C                                                                       
      CHARACTER*3 AML1,AML2,AMU1,AMU2,AMH1,AMH2                         
C                                                                       
C--------                                                               
C                                                                       
      READ (INCH,500) NH                                                
C                                                                       
      IF (NH .EQ. 0) THEN                                               
        RETURN                                                          
      END IF                                                            
C                                                                       
      DO 10 I=1,NH                                                      
        READ (INCH,510) AMH1(I),NUMH1(I),AMH2(I),NUMH2(I),VALHL(I),     
     *                  VALHU(I)                                        
  10  CONTINUE                                                          
C                                                                       
      DO 20 I=1,NH                                                      
        AML1(I+NL)=AMH1(I)                                              
        NUML1(I+NL)=NUMH1(I)                                            
        AML2(I+NL)=AMH2(I)                                              
        NUML2(I+NL)=NUMH2(I)                                            
        VALL(I+NL)=VALHL(I)                                             
        WL(I+NL)=1.0D0                                                  
        AMU1(I+NU)=AMH1(I)                                              
        NUMU1(I+NU)=NUMH1(I)                                            
        AMU2(I+NU)=AMH2(I)                                              
        NUMU2(I+NU)=NUMH2(I)                                            
        VALU(I+NU)=VALHU(I)                                             
        WU(I+NU)=1.0D0                                                  
  20  CONTINUE                                                          
      NL=NL+NH                                                          
      NU=NU+NH                                                          
C                                                                       
C--------                                                               
C                                                                       
 500  FORMAT(I5)                                                        
 510  FORMAT(A3,I3,1X,A3,I3,2F10.4)                                     
C                                                                       
      RETURN                                                            
      END                                                               
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C                                                                       
      SUBROUTINE CNSTS                                                  
C                                                                       
C--------                                                               
C                                                                       
      IMPLICIT REAL*8 (A-H,O-Z)                                         
C                                                                       
      PARAMETER (MCL=10000,MCU=10000,MSP=10)                            
C                                                                       
      COMMON/IUNIT/INSS,INSC,INSR,INS,INC,INI,INCL,INCU,INCH,INCJ,      
     *             INCA,INCW                                            
      COMMON/CNSL1/VALL(MCL),WL(MCL)                                    
      COMMON/CNSL2/NL,NUML1(MCL),NUML2(MCL)                             
      COMMON/CNSL3/AML1(MCL),AML2(MCL)                                  
      COMMON/CNSU1/VALU(MCU),WU(MCU)                                    
      COMMON/CNSU2/NU,NUMU1(MCU),NUMU2(MCU)                             
      COMMON/CNSU3/AMU1(MCU),AMU2(MCU)                                  
      COMMON/CYS/KCYS,NCYS,NPAIR(2,MSP)                                 
      COMMON/CYSVAL/VALSS,VALSC                                         
C                                                                       
      CHARACTER*3 AMSS,AMSC,AML1,AML2,AMU1,AMU2                         
C                                                                       
C--------                                                               
C                                                                       
      AMSS='SG '                                                        
      AMSC='CB '                                                        
C                                                                       
      IF (NCYS .EQ. 0) THEN                                             
        RETURN                                                          
      END IF                                                            
C                                                                       
      DO 10 I=1,NCYS                                                    
        J=3*(I-1)+NL+1                                                  
        AML1(J)=AMSS                                                    
        NUML1(J)=NPAIR(1,I)-1                                           
        AML2(J)=AMSS                                                    
        NUML2(J)=NPAIR(2,I)-1                                           
        VALL(J)=VALSS                                                   
        AML1(J+1)=AMSS                                                  
        NUML1(J+1)=NPAIR(1,I)-1                                         
        AML2(J+1)=AMSC                                                  
        NUML2(J+1)=NPAIR(2,I)-1                                         
        VALL(J+1)=VALSC                                                 
        AML1(J+2)=AMSC                                                  
        NUML1(J+2)=NPAIR(1,I)-1                                         
        AML2(J+2)=AMSS                                                  
        NUML2(J+2)=NPAIR(2,I)-1                                         
        VALL(J+2)=VALSC                                                 
  10  CONTINUE                                                          
C                                                                       
      DO 20 I=1,NCYS*3                                                  
        AMU1(I+NU)=AML1(I+NL)                                           
        NUMU1(I+NU)=NUML1(I+NL)                                         
        AMU2(I+NU)=AML2(I+NL)                                           
        NUMU2(I+NU)=NUML2(I+NL)                                         
        VALU(I+NU)=VALL(I+NL)                                           
        WL(I+NL)=1.0D0                                                  
        WU(I+NU)=1.0D0                                                  
  20  CONTINUE                                                          
C                                                                       
      NL=NL+NCYS*3                                                      
      NU=NU+NCYS*3                                                      
C                                                                       
C--------                                                               
C                                                                       
      RETURN                                                            
      END                                                               
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C                                                                       
      SUBROUTINE CNSTA(NCONF)                                           
C                                                                       
C--------                                                               
C                                                                       
      IMPLICIT REAL*8 (A-H,O-Z)                                         
C                                                                       
      PARAMETER (MC=100,MAC=20)                                         
C                                                                       
      COMMON/IUNIT/INSS,INSC,INSR,INS,INC,INI,INCL,INCU,INCH,INCJ,      
     *             INCA,INCW                                            
      COMMON/ACON1/IARAN(MC),NOC(MC),NORESC(MAC,MC)                     
      COMMON/ACON2/ANGC(MAC,MC)                                         
C                                                                       
      CHARACTER*4 ANGC                                                  
C                                                                       
C--------                                                               
C                                                                       
      DO 10 J=1,NCONF                                                   
        READ (INCA,500) IARAN(J),NOC(J)                                 
        DO 20 I=1,NOC(J)                                                
          READ (INCA,510) NORESC(I,J),ANGC(I,J)                         
  20   CONTINUE                                                         
  10  CONTINUE                                                          
C                                                                       
C--------                                                               
C                                                                       
 500  FORMAT(2I5)                                                       
 510  FORMAT(I5,1X,A4)                                                  
C                                                                       
      RETURN                                                            
      END                                                               
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C                                                                       
      SUBROUTINE CNSTJ                                                  
C                                                                       
C--------                                                               
C                                                                       
      IMPLICIT REAL*8 (A-H,O-Z)                                         
C                                                                       
      PARAMETER (MJC=100,MUNI=900)                                      
C                                                                       
      COMMON/IUNIT/INSS,INSC,INSR,INS,INC,INI,INCL,INCU,INCH,INCJ,      
     *             INCA,INCW                                            
      COMMON/JCON1/JRAN,NOJ,NORESJ(MJC),NJ(MJC)                         
      COMMON/JCON2/ANGJLO(MJC),ANGJUP(MJC),CENTJ(MUNI),HLJ(MUNI),       
     *             VJ(MUNI),WJ                                          
      COMMON/JCON3/ANGJ(MJC)                                            
C                                                                       
      CHARACTER*4 ANGJ                                                  
C                                                                       
C--------                                                               
C                                                                       
      READ (INCJ,500) JRAN,NOJ                                          
      DO 10 I=1,NOJ                                                     
        READ (INCJ,510) NORESJ(I),ANGJ(I),ANGJLO(I),ANGJUP(I)           
  10  CONTINUE                                                          
C                                                                       
C--------                                                               
C                                                                       
 500  FORMAT(2I5)                                                       
 510  FORMAT(I5,1X,A4,2F10.3)                                           
C                                                                       
      RETURN                                                            
      END                                                               
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C                                                                       
      SUBROUTINE CNSTW                                                  
C                                                                       
C--------                                                               
C                                                                       
      IMPLICIT REAL*8 (A-H,O-Z)                                         
C                                                                       
      PARAMETER (MWC=100,MUNI=900)                                      
C                                                                       
      COMMON/IUNIT/INSS,INSC,INSR,INS,INC,INI,INCL,INCU,INCH,INCJ,      
     *             INCA,INCW                                            
      COMMON/WCON1/IWRAN,NOW,NORESW(MWC),NW(MWC)                        
      COMMON/WCON2/ANGWLO(MWC),ANGWUP(MWC),CENTW(MUNI),HLW(MUNI),       
     *             VW(MUNI),WW                                          
C                                                                       
C--------                                                               
C                                                                       
      READ (INCW,500) IWRAN,NOW                                         
      DO 10 I=1,NOW                                                     
        READ (INCW,510) NORESW(I),ANGWLO(I),ANGWUP(I)                   
  10  CONTINUE                                                          
C                                                                       
C--------                                                               
C                                                                       
 500  FORMAT(2I5)                                                       
 510  FORMAT(I5,1X,2F10.3)                                              
C                                                                       
      RETURN                                                            
      END                                                               
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C                                                                       
      SUBROUTINE SEQUE                                                  
C                                                                       
C--------                                                               
C                                                                       
      IMPLICIT REAL*8 (A-H,O-Z)                                         
C                                                                       
      PARAMETER (MRES=90)                                               
      PARAMETER (MRES1=MRES+1)                                          
C                                                                       
      COMMON/GEN100/INUMRS,LIST(MRES),NPRE(MRES1)                       
      COMMON/NAMPR/TIDA,NAMRE(MRES)                                     
C                                                                       
      CHARACTER*4 NAMEND(20),NAMFUL(26),NAMRE                           
      CHARACTER*80 TIDA                                                 
C                                                                       
      DATA NAMEND/'H2N ','H3N ','CH3N','MCON','HCON','CISH',            
     *            'TRAH','H2NP','P-GL','HN  ','COOH','COO ',            
     *            'COM ','CONH','CONM','COM2','COOM','COOE',            
     *            'CO  ','CO  '/                                        
      DATA NAMFUL/'ALA ','ASP ','CYS ','GLU ','PHE ','GLY ',            
     *            'HIS ','ILE ','LYS ','LEU ','MET ','ASN ',            
     *            'PRO ','GLN ','ARG ','SER ','THR ','VAL ',            
     *            'TRP ','TYR ','CYE ','H-PR','NORL','ORN ',            
     *            'HISE','BEAS'/                                        
C                                                                       
C--------                                                               
C                                                                       
      DO 10 I=1,10                                                      
C                                                                       
        IF (NAMRE(1) .EQ. NAMEND(I)) THEN                               
          LIST(1)=I                                                     
        END IF                                                          
C                                                                       
  10  CONTINUE                                                          
C                                                                       
      IF (LIST(1) .EQ. 0) THEN                                          
        STOP 'NO VALID AMINO ENDGROUP'                                  
      END IF                                                            
C                                                                       
      DO 20 J=2,INUMRS-1                                                
        DO 30 I=1,26                                                    
C                                                                       
          IF (NAMRE(J) .EQ. NAMFUL(I)) THEN                             
            LIST(J)=I                                                   
          END IF                                                        
C                                                                       
  30    CONTINUE                                                        
C                                                                       
        IF (LIST(J) .EQ. 0) THEN                                        
          STOP 'NO VALID AMINO RESIDUE'                                 
        END IF                                                          
C                                                                       
  20  CONTINUE                                                          
      DO 40 I=11,20                                                     
C                                                                       
        IF (NAMRE(INUMRS) .EQ. NAMEND(I)) THEN                          
          LIST(INUMRS)=I                                                
        END IF                                                          
C                                                                       
  40  CONTINUE                                                          
C                                                                       
      IF (LIST(INUMRS) .EQ. 0) THEN                                     
        STOP 'NO VALID CARBOXYL ENDGROUP'                               
      END IF                                                            
C                                                                       
C--------                                                               
C                                                                       
      RETURN                                                            
      END                                                               
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C                                                                       
      SUBROUTINE PARAM                                                  
C                                                                       
C--------                                                               
C                                                                       
      IMPLICIT REAL*8 (A-H,O-Z)                                         
C                                                                       
      PARAMETER (MRES=90,MA=2000)                                       
      PARAMETER (MRES1=MRES+1)                                          
C                                                                       
      COMMON/ATOMS/ALPH(MA),CHARGE(MA),COORD(3,MA),NBTYPE(MA)           
      COMMON/CHECK/KNDRES(26),KNDEND(20)                                
      COMMON/GEN100/INUMRS,LIST(MRES),NPRE(MRES1)                       
      COMMON/GEN000/CHG(26,26),ALPHA(26,26),TITLE(4,46),LTYPE(26,26)    
      COMMON/GEN002/CHIANG(3,7,26),NATOMS(26),NCHI(26),NDPT1(7,26),     
     *              NDPT2(7,26),NUM(7,26)                               
      COMMON/GEN004/ENOORD(3,22,20),ECHG(22,20),EALPHA(22,20),          
     *              NDATOM(20),NBOND(20),NNDPT1(6,20),NNDPT2(6,20),     
     *              NDTYPE(22,20)                                       
C                                                                       
      CHARACTER ALPHA*3,TITLE*4,EALPHA*3,ALPH*3                         
C                                                                       
C--------                                                               
C                                                                       
      NPRE(1)=0                                                         
      LAMIN=LIST(1)                                                     
      KAMIN=KNDEND(LAMIN)                                               
      KAMIN=IABS(KAMIN)                                                 
      NA=NDATOM(LAMIN)                                                  
C                                                                       
      DO 10 I=1,NA                                                      
        ALPH(I)=EALPHA(I,LAMIN)                                         
        NBTYPE(I)=NDTYPE(I,LAMIN)                                       
        CHARGE(I)=ECHG(I,LAMIN)                                         
  10  CONTINUE                                                          
C                                                                       
      NA=NA-3                                                           
      LASTFL=INUMRS-1                                                   
      DO 20 I=2,LASTFL                                                  
        LISTI=LIST(I)                                                   
        LISTI=IABS(LISTI)                                               
        KINDI=KNDRES(LISTI)                                             
        KINDI=IABS(KINDI)                                               
        NATOM=NATOMS(LISTI)                                             
        NPRE(I)=NA                                                      
        K=1                                                             
C                                                                       
        IF (I .EQ. 2) THEN                                              
C                                                                       
          IF (KINDI.NE.6) THEN                                          
            IF (KINDI.NE.13) THEN                                       
              IF (KINDI.NE.22) THEN                                     
                IF (KIND.NE.31) THEN                                    
                  K=4                                                   
                END IF                                                  
              END IF                                                    
            END IF                                                      
          END IF                                                        
C                                                                       
          IF (KINDI.EQ.13) THEN                                         
            IF (KAMIN.EQ. 1) THEN                                       
              STOP 'KAMIN 1'                                            
            ELSE IF (KAMIN .EQ. 2) THEN                                 
              STOP 'KAMIN 2'                                            
            ELSE IF (KAMIN.EQ. 3) THEN                                  
              STOP 'KAMIN 3'                                            
            END IF                                                      
          END IF                                                        
C                                                                       
          IF (KINDI.EQ.22) THEN                                         
            IF (KAMIN.EQ. 1) THEN                                       
              STOP 'KAMIN 1'                                            
            ELSE IF (KAMIN .EQ. 2) THEN                                 
              STOP 'KAMIN 2'                                            
            ELSE IF (KAMIN.EQ. 3) THEN                                  
              STOP 'KAMIN 3'                                            
            END IF                                                      
          END IF                                                        
C                                                                       
        END IF                                                          
C                                                                       
        DO 30 L=K,NATOM                                                 
          N=NA+L                                                        
          ALPH(N)=ALPHA(L,LISTI)                                        
          NBTYPE(N)=LTYPE(L,LISTI)                                      
          CHARGE(N)=CHG(L,LISTI)                                        
  30    CONTINUE                                                        
C                                                                       
        IF (I .EQ. 2) THEN                                              
C                                                                       
          IF (KAMIN .EQ. 1) THEN                                        
            NBTYPE(NA+1)=14                                             
          ELSE IF (KAMIN.EQ.3) THEN                                     
            NBTYPE(NA+1)=14                                             
          END IF                                                        
C                                                                       
          IF (KINDI .EQ. 6) THEN                                        
            IF (KAMIN .EQ. 1) THEN                                      
              ALPH(3)=ALPH(1)                                           
            ELSE IF (KAMIN.EQ.2) THEN                                   
              ALPH(4)=ALPH(2)                                           
              CHARGE(4)=CHARGE(2)                                       
            END IF                                                      
          ELSE IF (KINDI.EQ.31) THEN                                    
            IF (KAMIN .EQ. 1) THEN                                      
              ALPH(3)=ALPH(1)                                           
            ELSE IF (KAMIN.EQ.2) THEN                                   
              ALPH(4)=ALPH(2)                                           
              CHARGE(4)=CHARGE(2)                                       
            END IF                                                      
          END IF                                                        
C                                                                       
        END IF                                                          
C                                                                       
        NA=NA+NATOM                                                     
  20  CONTINUE                                                          
C                                                                       
      NPRE(INUMRS)=NA                                                   
      LCARB=LIST(INUMRS)                                                
      KCARB=KNDEND(LCARB)                                               
      KCARB=IABS(KCARB)                                                 
      NATOM=NDATOM(LCARB)                                               
      NPRE(INUMRS+1)=NPRE(INUMRS)+NATOM-1                               
C                                                                       
      IF (NATOM.NE.1) THEN                                              
        NA=NA-1                                                         
        DO 40 I=2,NATOM                                                 
          N=NA+I                                                        
          ALPH(N)=EALPHA(I,LCARB)                                       
          NBTYPE(N)=NDTYPE(I,LCARB)                                     
          CHARGE(N)=ECHG(I,LCARB)                                       
  40    CONTINUE                                                        
C                                                                       
        IF (KCARB.EQ.12) THEN                                           
          NN=NPRE(INUMRS-1)+7                                           
          CHARGE(NN)=ECHG(1,LCARB)                                      
        END IF                                                          
C                                                                       
      END IF                                                            
C                                                                       
C--------                                                               
C                                                                       
      RETURN                                                            
      END                                                               
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C                                                                       
      SUBROUTINE CONN(NAMLBR,NUMLBR,NAMATP,NCP,ICP,NCON,ICON)           
C                                                                       
C--------                                                               
C                                                                       
      IMPLICIT REAL*8 (A-H,O-Z)                                         
C                                                                       
      PARAMETER (NUMR=21,MRES=90,MA=2000)                               
      PARAMETER (MRES1=MRES+1)                                          
C                                                                       
      COMMON/GEN100/INUMRS,LIST(MRES),NPRE(MRES1)                       
      COMMON/NAMPR/TIDA,NAMRE(MRES)                                     
C                                                                       
      INTEGER NUMRES(MRES),NREC(MRES),NCON(MA),ICON(4,MA),IC(4),        
     *        NUMLBR(NUMR),NCP(30,NUMR),ICP(4,30,NUMR)                  
      CHARACTER*4 NITRO,ICARB,NAMAT,NAMACD,NAMRE,NAMLBR(NUMR),          
     *            NAMATP(30,NUMR)                                       
      CHARACTER*80 TIDA                                                 
C                                                                       
      DATA NITRO/'N   '/,ICARB/'C   '/                                  
C                                                                       
C--------                                                               
C                                                                       
      LASTFL=INUMRS-1                                                   
      NUMRES(1)=0                                                       
      NATOM=0                                                           
C                                                                       
      DO 10 IRES=2,LASTFL                                               
        NAMACD=NAMRE(IRES)                                              
        DO 20 I=1,NUMR                                                  
          IF (NAMACD .EQ. NAMLBR(I)) THEN                               
            NUMRES(IRES)=NUMLBR(I)                                      
            NREC(IRES)=I                                                
          END IF                                                        
  20    CONTINUE                                                        
  10  CONTINUE                                                          
C                                                                       
      DO 30 IRES=2,LASTFL                                               
        IABS0=NPRE(IRES)-NPRE(2)                                        
        I=NREC(IRES)                                                    
        DO 40 J=1,NUMRES(IRES)                                          
          NAMAT=NAMATP(J,I)                                             
          NC=NCP(J,I)                                                   
          IC(1)=ICP(1,J,I)                                              
          IC(2)=ICP(2,J,I)                                              
          IC(3)=ICP(3,J,I)                                              
          IC(4)=ICP(4,J,I)                                              
C                                                                       
          IF (NAMAT.EQ.NITRO) THEN                                      
            CALL PEPCON(NREC,NAMATP,LASTFL,NUMRES,NC,IC,IABS0,IRES-1,   
     *                  ICARB)                                          
          END IF                                                        
C                                                                       
          IF (NAMAT.EQ.ICARB) THEN                                      
            CALL PEPCON(NREC,NAMATP,LASTFL,NUMRES,NC,IC,IABS0,IRES+1,   
     *                  NITRO)                                          
          END IF                                                        
C                                                                       
          NATOM=NATOM+1                                                 
          NCON(NATOM)=NC                                                
          DO 50 L=1,NC                                                  
            ICON(L,NATOM)=IC(L)+IABS0                                   
  50      CONTINUE                                                      
  40    CONTINUE                                                        
  30  CONTINUE                                                          
C                                                                       
C--------                                                               
C                                                                       
      RETURN                                                            
      END                                                               
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C                                                                       
      SUBROUTINE PEPCON(NREC,NAMATP,LFL,NRES,NUMCON,ICONN,ICORR,        
     *                  NURE,NAM)                                       
C                                                                       
C--------                                                               
C                                                                       
      IMPLICIT REAL*8 (A-H,O-Z)                                         
C                                                                       
      PARAMETER (NUMR=21,MRES=90)                                       
      PARAMETER (MRES1=MRES+1)                                          
C                                                                       
      COMMON/GEN100/INUMRS,LIST(MRES),NPRE(MRES1)                       
C                                                                       
      INTEGER ICONN(4),NRES(NUMR),NREC(MRES)                            
      CHARACTER*4 NAM,NATO,NAMATP(30,NUMR)                              
C                                                                       
C--------                                                               
C                                                                       
      IF (NUMCON .GE. 4) THEN                                           
        RETURN                                                          
      END IF                                                            
      IF (NURE .LE. 1) THEN                                             
        RETURN                                                          
      END IF                                                            
      IF (NURE .GT. LFL) THEN                                           
        RETURN                                                          
      END IF                                                            
      IATO=NPRE(NURE)-NPRE(2)                                           
      I=NREC(NURE)                                                      
C                                                                       
      DO 10 J=1,NRES(NURE)                                              
        NATO=NAMATP(J,I)                                                
        IF (NAM .EQ. NATO) THEN                                         
          NUMCON=NUMCON+1                                               
          ICONN(NUMCON)=IATO+J-ICORR                                    
          RETURN                                                        
        END IF                                                          
  10  CONTINUE                                                          
C                                                                       
C--------                                                               
C                                                                       
      RETURN                                                            
      END                                                               
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C                                                                       
      SUBROUTINE RADIUS(RATOM)                                          
C                                                                       
C--------                                                               
C                                                                       
      IMPLICIT REAL*8 (A-H,O-Z)                                         
C                                                                       
      PARAMETER (NAR=21,MRES=90,MA=2000)                                
      PARAMETER (MRES1=MRES+1)                                          
C                                                                       
      COMMON/GEN100/INUMRS,LIST(MRES),NPRE(MRES1)                       
      COMMON/VWAAL/RAD(MA),NUMRE(MA),NUNIT(MA)                          
      COMMON/ATOMS/ALPH(MA),CHARGE(MA),COORD(3,MA),NBTYPE(MA)           
C                                                                       
      REAL*8 RATOM(NAR)                                                 
C                                                                       
      CHARACTER*3 ALPH                                                  
C                                                                       
C--------                                                               
C                                                                       
      NAT=NPRE(INUMRS+1)                                                
      DO 10 I=1,NAT                                                     
        RAD(I)=RATOM(NBTYPE(I))                                         
  10  CONTINUE                                                          
C                                                                       
C--------                                                               
C                                                                       
      RETURN                                                            
      END                                                               
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C                                                                       
      SUBROUTINE VARAN(WV)                                              
C                                                                       
C--------                                                               
C                                                                       
      IMPLICIT REAL*8 (A-H,O-Z)                                         
C                                                                       
      PARAMETER (MRES=90,MA=2000,MVAR=900,MPRO=10)                      
      PARAMETER (MRES1=MRES+1,MTR=MVAR+2*MPRO+1)                        
C                                                                       
      COMMON/BONDS/ANGLES(10,MRES),UTOR(10,MRES),NDXARR(10,MRES),       
     *             NV(MRES)                                             
      COMMON/VWAAL/RAD(MA),NUMRE(MA),NUNIT(MA)                          
      COMMON/PRDHD/NABEG(MVAR),NAEND(MVAR),IRBEG(MTR),IREND(MTR),       
     *             NBR(MTR),NPOINT(2,MTR),NVPRE(MRES1),INODE(MVAR),     
     *             NTPRE(MRES1),INDPSI(MTR)                             
      COMMON/GEN100/INUMRS,LIST(MRES),NPRE(MRES1)                       
      COMMON/PRAM/NREG,NEND,LR(6,20),LRT1(7,26)                         
      COMMON/GEN002/CHIANG(3,7,26),NATOMS(26),NCHI(26),NDPT1(7,26),     
     *              NDPT2(7,26),NUM(7,26)                               
      COMMON/TREE/NBR1(7,26),NPOI1(2,7,26)                              
C                                                                       
      CHARACTER*1 WV                                                    
C                                                                       
C---- INITIATION -----                                                  
C                                                                       
      NVPRE(1)=0                                                        
      NVPRE(2)=0                                                        
      NV(1)=0                                                           
      NTPRE(1)=0                                                        
      NTPRE(2)=0                                                        
      ITREE=0                                                           
      NVAR=0                                                            
C                                                                       
      DO 10 I=1,MTR                                                     
        INDPSI(I)=0                                                     
  10  CONTINUE                                                          
C                                                                       
C----------------------------------------                               
C---- FULL RESIDUE WITHOUT LAST ONE -----                               
C----------------------------------------                               
C                                                                       
      DO 20  IRES=2,INUMRS-2                                            
        IABS0=NPRE(IRES)                                                
        IABS1=NPRE(IRES+1)                                              
        IABSV=NVPRE(IRES)                                               
        ITR0=NTPRE(IRES)                                                
        ILIST=LIST(IRES)                                                
C                                                                       
C========= FOR IRES = GLY ==========                                    
C                                                                       
        IF (ILIST .EQ. 6) THEN                                          
C                                                                       
C---- FOR PHI -----                                                     
C                                                                       
          NVAR=NVAR+1                                                   
          ITREE=ITREE+1                                                 
          NABEG(NVAR)=IABS0+1                                           
          NAEND(NVAR)=IABS0+3                                           
          IRBEG(ITREE)=IABS0+4                                          
          IREND(ITREE)=IABS0+7                                          
          NBR(ITREE)=1                                                  
          NPOINT(1,ITREE)=ITR0+2                                        
          NPOINT(2,ITREE)=0                                             
          INODE(NVAR)=ITREE                                             
          NDXARR(1,IRES)=1                                              
C                                                                       
C---- FOR PSI -----                                                     
C                                                                       
          NVAR=NVAR+1                                                   
          ITREE=ITREE+1                                                 
          NABEG(NVAR)=IABS0+3                                           
          NAEND(NVAR)=IABS0+7                                           
          IRBEG(ITREE)=IABS0+8                                          
          IREND(ITREE)=IABS1+1                                          
          NBR(ITREE)=1                                                  
          NPOINT(1,ITREE)=ITR0+3                                        
          NPOINT(2,ITREE)=0                                             
          INODE(NVAR)=ITREE                                             
          NDXARR(2,IRES)=2                                              
          INDPSI(ITREE)=1                                               
C                                                                       
C---- FOR OMEGA -----                                                   
C                                                                       
          ITREE=ITREE+1                                                 
          IRBEG(ITREE)=IABS1+2                                          
          IREND(ITREE)=IABS1+3                                          
          NBR(ITREE)=1                                                  
          NPOINT(1,ITREE)=ITR0+4                                        
          NPOINT(2,ITREE)=0                                             
C                                                                       
C---- FOR OMEGA OF OMEGA VARIABLE VERSION -----                         
C                                                                       
          IF (WV.EQ.'Y') THEN                                           
            NVAR=NVAR+1                                                 
            NABEG(NVAR)=IABS0+7                                         
            NAEND(NVAR)=IABS1+1                                         
            INODE(NVAR)=ITREE                                           
            NDXARR(3,IRES)=3                                            
          END IF                                                        
C                                                                       
        ELSE                                                            
C                                                                       
C========= IF IRES = PRO ==========                                     
C                                                                       
          IF (ILIST .EQ. 13) THEN                                       
C                                                                       
C---- FOR PHI (DUMMY) -----                                             
C                                                                       
            ITREE=ITREE+1                                               
            IRBEG(ITREE)=IABS0+4                                        
            IREND(ITREE)=IABS0+6                                        
            NBR(ITREE)=1                                                
            NPOINT(1,ITREE)=ITR0+2                                      
            NPOINT(2,ITREE)=0                                           
C                                                                       
C---- FOR CHI1 (DUMMY) -----                                            
C                                                                       
            ITREE=ITREE+1                                               
            IRBEG(ITREE)=IABS0+8                                        
            IREND(ITREE)=IABS0+17                                       
            NBR(ITREE)=1                                                
            NPOINT(1,ITREE)=ITR0+3                                      
            NPOINT(2,ITREE)=0                                           
C                                                                       
C---- FOR PSI -----                                                     
C                                                                       
            NVAR=NVAR+1                                                 
            ITREE=ITREE+1                                               
            NABEG(NVAR)=IABS0+3                                         
            NAEND(NVAR)=IABS0+6                                         
            IRBEG(ITREE)=IABS0+7                                        
            IREND(ITREE)=IABS1+1                                        
            NBR(ITREE)=1                                                
            NPOINT(1,ITREE)=ITR0+4                                      
            NPOINT(2,ITREE)=0                                           
            INODE(NVAR)=ITREE                                           
            NDXARR(1,IRES)=2                                            
            INDPSI(ITREE)=1                                             
C                                                                       
C---- FOR OMEGA -----                                                   
C                                                                       
            ITREE=ITREE+1                                               
            IRBEG(ITREE)=IABS1+2                                        
            IREND(ITREE)=IABS1+3                                        
            NBR(ITREE)=1                                                
            NPOINT(1,ITREE)=ITR0+5                                      
            NPOINT(2,ITREE)=0                                           
C                                                                       
C---- FOR OMEGA OF OMEGA VARIABLE VERSION -----                         
C                                                                       
           IF (WV.EQ.'Y') THEN                                          
              NVAR=NVAR+1                                               
              NABEG(NVAR)=IABS0+6                                       
              NAEND(NVAR)=IABS1+1                                       
              INODE(NVAR)=ITREE                                         
              NDXARR(2,IRES)=3                                          
            END IF                                                      
C                                                                       
          ELSE                                                          
C                                                                       
C========= NORMAL CASE ==========                                       
C                                                                       
C---- FOR PHI -----                                                     
C                                                                       
            NVAR=NVAR+1                                                 
            ITREE=ITREE+1                                               
            NABEG(NVAR)=IABS0+1                                         
            NAEND(NVAR)=IABS0+3                                         
            IRBEG(ITREE)=IABS0+4                                        
            IREND(ITREE)=IABS0+6                                        
            NBR(ITREE)=2                                                
            NPOINT(1,ITREE)=ITR0+2                                      
            NPOINT(2,ITREE)=ITR0+NCHI(ILIST)+2                          
            INODE(NVAR)=ITREE                                           
            NDXARR(1,IRES)=1                                            
C                                                                       
C---- FOR CHI -----                                                     
C                                                                       
            IF (NCHI(ILIST) .GT. 0) THEN                                
              INTV=3                                                    
              DO 30 IS=1,NCHI(ILIST)                                    
                INTV=INTV+1                                             
                NVAR=NVAR+1                                             
                ITREE=ITREE+1                                           
                NABEG(NVAR)=IABS0+NDPT1(IS,ILIST)                       
                NAEND(NVAR)=IABS0+NDPT2(IS,ILIST)                       
                IRBEG(ITREE)=IABS0+LRT1(IS,ILIST)                       
                IREND(ITREE)=IRBEG(ITREE)+NUM(IS,ILIST)-1               
                NBR(ITREE)=NBR1(IS,ILIST)                               
                NBRIT=NBR(ITREE)                                        
C                                                                       
                IF (NBRIT.EQ.0) THEN                                    
                  NPOINT(1,ITREE)=0                                     
                  NPOINT(2,ITREE)=0                                     
                ELSE                                                    
C                                                                       
                  IF (NBRIT.NE.2) THEN                                  
                    NPOINT(1,ITREE)=ITR0+NPOI1(1,IS,ILIST)-2            
                    NPOINT(2,ITREE)=0                                   
                  ELSE                                                  
                    NPOINT(1,ITREE)=ITR0+NPOI1(1,IS,ILIST)-2            
                    NPOINT(2,ITREE)=ITR0+NPOI1(2,IS,ILIST)-2            
                  END IF                                                
C                                                                       
                END IF                                                  
C                                                                       
                INODE(NVAR)=ITREE                                       
                NDXARR(INTV,IRES)=INTV                                  
  30          CONTINUE                                                  
            END IF                                                      
C                                                                       
C---- FOR PSI -----                                                     
C                                                                       
            NVAR=NVAR+1                                                 
            ITREE=ITREE+1                                               
            NABEG(NVAR)=IABS0+3                                         
            NAEND(NVAR)=IABS0+6                                         
            IRBEG(ITREE)=IABS0+7                                        
            IREND(ITREE)=IABS1+1                                        
            NBR(ITREE)=1                                                
            NPOINT(1,ITREE)=ITR0+NCHI(ILIST)+3                          
            NPOINT(2,ITREE)=0                                           
            INODE(NVAR)=ITREE                                           
            NDXARR(2,IRES)=2                                            
            INDPSI(ITREE)=1                                             
C                                                                       
C---- FOR OMEGA -----                                                   
C                                                                       
            ITREE=ITREE+1                                               
            IRBEG(ITREE)=IABS1+2                                        
            IREND(ITREE)=IABS1+3                                        
            NBR(ITREE)=1                                                
            NPOINT(1,ITREE)=ITR0+NCHI(ILIST)+4                          
            NPOINT(2,ITREE)=0                                           
C                                                                       
C---- FOR OMEGA OF OMEGA VARIABLE VERSION -----                         
C                                                                       
            IF (WV.EQ.'Y') THEN                                         
              NVAR=NVAR+1                                               
              NABEG(NVAR)=IABS0+6                                       
              NAEND(NVAR)=IABS1+1                                       
              INODE(NVAR)=ITREE                                         
              NDXARR(3,IRES)=3                                          
            END IF                                                      
C                                                                       
          END IF                                                        
C                                                                       
        END IF                                                          
C                                                                       
        NVPRE(IRES+1)=NVAR                                              
        NTPRE(IRES+1)=ITREE                                             
        NV(IRES)=NVAR-IABSV                                             
  20  CONTINUE                                                          
C                                                                       
C----------------------------                                           
C---- LAST FULL RESIDUE -----                                           
C----------------------------                                           
C                                                                       
      IRES=INUMRS-1                                                     
      IABS0=NPRE(IRES)                                                  
      IABS1=NPRE(INUMRS)                                                
      IABS2=NPRE(INUMRS+1)                                              
      IABSV=NVPRE(IRES)                                                 
      ITR0=NTPRE(IRES)                                                  
      ILIST=LIST(IRES)                                                  
C                                                                       
C---- FOR PHI -----                                                     
C                                                                       
      ITREE=ITREE+1                                                     
      IRBEG(ITREE)=IABS0+4                                              
      IREND(ITREE)=IABS0+6                                              
C                                                                       
      IF (ILIST.NE.6) THEN                                              
        IREND(ITREE)=IABS0+7                                            
      END IF                                                            
C                                                                       
      NBR(ITREE)=1                                                      
      NPOINT(1,ITREE)=ITR0+2                                            
      NPOINT(2,ITREE)=0                                                 
C                                                                       
      IF (ILIST.NE.13) THEN                                             
        NVAR=NVAR+1                                                     
        NABEG(NVAR)=IABS0+1                                             
        NAEND(NVAR)=IABS0+3                                             
      END IF                                                            
C                                                                       
      IF (ILIST.NE.6) THEN                                              
        IF (ILIST.NE.13) THEN                                           
          NBR(ITREE)=2                                                  
          NPOINT(2,ITREE)=ITR0+NCHI(ILIST)+2                            
        END IF                                                          
      END IF                                                            
C                                                                       
      INODE(NVAR)=ITREE                                                 
      NDXARR(1,IRES)=1                                                  
C                                                                       
C---- FOR CHI -----                                                     
C                                                                       
      IF (ILIST.NE.6) THEN                                              
        IF (ILIST.NE.13) THEN                                           
C                                                                       
C==== NORMAL CASE =====                                                 
C                                                                       
          INTV=2                                                        
C                                                                       
          DO 40 IS=1,NCHI(ILIST)                                        
            INTV=INTV+1                                                 
            NVAR=NVAR+1                                                 
            ITREE=ITREE+1                                               
            NABEG(NVAR)=IABS0+NDPT1(IS,ILIST)                           
            NAEND(NVAR)=IABS0+NDPT2(IS,ILIST)                           
            IRBEG(ITREE)=IABS0+LRT1(IS,ILIST)                           
            IREND(ITREE)=IRBEG(ITREE)+NUM(IS,ILIST)-1                   
            NBR(ITREE)=NBR1(IS,ILIST)                                   
            NBRIT=NBR(ITREE)                                            
C                                                                       
            IF (NBRIT.EQ.0) THEN                                        
              NPOINT(1,ITREE)=0                                         
              NPOINT(2,ITREE)=0                                         
            ELSE                                                        
              IF (NBRIT.NE.2) THEN                                      
                NPOINT(1,ITREE)=ITR0+NPOI1(1,IS,ILIST)-2                
                NPOINT(2,ITREE)=0                                       
              ELSE                                                      
                NPOINT(1,ITREE)=ITR0+NPOI1(1,IS,ILIST)-2                
                NPOINT(2,ITREE)=ITR0+NPOI1(2,IS,ILIST)-2                
              END IF                                                    
            END IF                                                      
C                                                                       
            INODE(NVAR)=ITREE                                           
            NDXARR(INTV,IRES)=INTV                                      
  40      CONTINUE                                                      
C                                                                       
        ELSE                                                            
C                                                                       
C==== FOR PRO =====                                                     
C                                                                       
          ITREE=ITREE+1                                                 
          IRBEG(ITREE)=IABS0+8                                          
          IREND(ITREE)=IABS0+17                                         
          NBR(ITREE)=1                                                  
          NPOINT(1,ITREE)=ITR0+3                                        
          NPOINT(2,ITREE)=0                                             
        END IF                                                          
      END IF                                                            
C                                                                       
C---- FOR PSI -----                                                     
C                                                                       
      NVAR=NVAR+1                                                       
      ITREE=ITREE+1                                                     
      NABEG(NVAR)=IABS0+3                                               
      NAEND(NVAR)=IABS0+6                                               
      IRBEG(ITREE)=IABS0+7                                              
      IREND(ITREE)=IABS0+7                                              
      NBR(ITREE)=1                                                      
C                                                                       
      IF (ILIST .EQ. 6) THEN                                            
        NCHI(ILIST)=0                                                   
        NAEND(NVAR)=IABS0+7                                             
        IRBEG(ITREE)=IABS0+8                                            
        IREND(ITREE)=IABS0+8                                            
      END IF                                                            
C                                                                       
      IF (ILIST .EQ. 13) THEN                                           
        NCHI(ILIST)=1                                                   
      END IF                                                            
C                                                                       
      NPOINT(1,ITREE)=ITR0+NCHI(ILIST)+3                                
      NPOINT(2,ITREE)=0                                                 
      INODE(NVAR)=ITREE                                                 
      NDXARR(2,IRES)=2                                                  
      INDPSI(ITREE)=1                                                   
C                                                                       
C---- FOR OMEGA -----                                                   
C                                                                       
      ITREE=ITREE+1                                                     
      IRBEG(ITREE)=IABS1+1                                              
      IREND(ITREE)=IABS2                                                
      NBR(ITREE)=0                                                      
      NPOINT(1,ITREE)=0                                                 
      NPOINT(2,ITREE)=0                                                 
C                                                                       
      NVPRE(INUMRS)=NVAR                                                
      NTPRE(INUMRS)=ITREE                                               
      NV(IRES)=NVAR-IABSV                                               
      NV(INUMRS)=0                                                      
      IND1=1                                                            
C                                                                       
C------------------------------------------                             
C---- FOR NUMBERS OF UNIT AND RESIDUE -----                             
C------------------------------------------                             
C                                                                       
      DO 50 IR=1,INUMRS                                                 
        IND2=NPRE(IR+1)                                                 
        DO 60 I=IND1,IND2                                               
          NUMRE(I)=IR                                                   
  60    CONTINUE                                                        
        IND1=IND2+1                                                     
  50  CONTINUE                                                          
C                                                                       
      DO 70 I=1,IRBEG(1)-1                                              
        NUNIT(I)=0                                                      
  70  CONTINUE                                                          
C                                                                       
      DO 80 IU=1,NTPRE(INUMRS)                                          
        IBEG=IRBEG(IU)                                                  
        IEND=IREND(IU)                                                  
        DO 90 I=IBEG,IEND                                               
          J=INDPSI(IU)*(I-IBEG)*(I-IEND)                                
          IF (J.EQ.0) THEN                                              
            NUNIT(I)=IU                                                 
          END IF                                                        
  90    CONTINUE                                                        
  80  CONTINUE                                                          
C                                                                       
C--------                                                               
C                                                                       
      RETURN                                                            
      END                                                               
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C                                                                       
      SUBROUTINE DCNSTR                                                 
C                                                                       
C--------                                                               
C                                                                       
      IMPLICIT REAL*8 (A-H,O-Z)                                         
C                                                                       
      PARAMETER (MRES=90,MA=2000,MVAR=900,MPRO=10,MCL=10000,MCU=10000)  
      PARAMETER (MRES1=MRES+1,MTR=MVAR+2*MPRO+1,MTR1=MTR+1)             
      PARAMETER (MCU2=2*MCU,MCL2=2*MCL)                                 
C                                                                       
      COMMON/CNSL1/VALL(MCL),WL(MCL)                                    
      COMMON/CNSL2/NL,NUML1(MCL),NUML2(MCL)                             
      COMMON/CNSL3/AML1(MCL),AML2(MCL)                                  
      COMMON/CNSU1/VALU(MCU),WU(MCU)                                    
      COMMON/CNSU2/NU,NUMU1(MCU),NUMU2(MCU)                             
      COMMON/CNSU3/AMU1(MCU),AMU2(MCU)                                  
      COMMON/DSTR/IAL1(MCL2),IAL2(MCL2),BL(MCL2),IAU1(MCU2),            
     *            IAU2(MCU2),BU(MCU2),NDIFFL(MCL2),NDIFFU(MCU2),        
     *            DLW(MCL2),DUW(MCU2)                                   
      COMMON/PRCON/NDLOW(MTR1),NDUP(MTR1),NACLOW(MTR),NACUP(MTR)        
      COMMON/PRDHD/NABEG(MVAR),NAEND(MVAR),IRBEG(MTR),IREND(MTR),       
     *             NBR(MTR),NPOINT(2,MTR),NVPRE(MRES1),INODE(MVAR),     
     *             NTPRE(MRES1),INDPSI(MTR)                             
      COMMON/GEN100/INUMRS,LIST(MRES),NPRE(MRES1)                       
      COMMON/ATOMS/ALPH(MA),CHARGE(MA),COORD(3,MA),NBTYPE(MA)           
C                                                                       
      CHARACTER*3 ALPH,AML1,AML2,AMU1,AMU2                              
C                                                                       
C--------                                                               
C                                                                       
      NVAR=NTPRE(INUMRS)                                                
      LMAX=0                                                            
      KMAX=0                                                            
C                                                                       
      DO 10 I=1,NVAR+1                                                  
        NDLOW(I)=0                                                      
        NDUP(I)=0                                                       
 10   CONTINUE                                                          
C                                                                       
C--------                                                               
C                                                                       
      IF (NL .GT. 0) THEN                                               
C                                                                       
        DO 20 I=1, NL                                                   
          NUM1=NUML1(I)                                                 
          NUM2=NUML2(I)                                                 
          IR1=NUM1+1                                                    
          IR2=NUM2+1                                                    
          NALOW=NPRE(IR1)+1                                             
          NAUP=NPRE(IR1+1)                                              
          VAL=VALL(I)                                                   
          ICHK=0                                                        
          JCHK=0                                                        
C                                                                       
          DO 30 NA=NALOW,NAUP                                           
            IF (AML1(I).EQ.ALPH(NA)) THEN                               
              NEW1=NA                                                   
              ICHK=1                                                    
            END IF                                                      
  30      CONTINUE                                                      
C                                                                       
          IF (ICHK.EQ.0) THEN                                           
            WRITE (6,*) I,AML1(I)                                       
            STOP ' ERROR IN LOWER CONSTRAINT1'                          
          END IF                                                        
C                                                                       
          NALOW=NPRE(IR2)+1                                             
          NAUP=NPRE(IR2+1)                                              
C                                                                       
          DO 40 NA=NALOW,NAUP                                           
            IF (AML2(I).EQ.ALPH(NA)) THEN                               
              NEW2=NA                                                   
              JCHK=1                                                    
            END IF                                                      
  40      CONTINUE                                                      
C                                                                       
          IF (JCHK.EQ.0) THEN                                           
            WRITE (6,*) I,AML2(I)                                       
            STOP ' ERROR IN LOWER CONSTRAINT2'                          
          END IF                                                        
C                                                                       
          DO 50 NDOIT =1,2                                              
            IVLOW=NTPRE(IR1-1)                                          
            IVUP=NTPRE(IR1+1)                                           
C                                                                       
            IF (IVLOW.EQ.0) THEN                                        
              IVLOW=1                                                   
            END IF                                                      
C                                                                       
            DO 60 IVAR=IVLOW,IVUP                                       
              IPSI=INDPSI(IVAR)*(NEW1-IRBEG(IVAR))*(NEW1-IREND(IVAR))   
C                                                                       
              IF (NEW1.GE.IRBEG (IVAR)) THEN                            
                IF (NEW1.LE.IREND (IVAR)) THEN                          
                  IF (IPSI .EQ.0) THEN                                  
C                                                                       
                    IVARN=IVAR                                          
                    LLOW=IVARN+1                                        
                    LUP=NVAR+1                                          
C                                                                       
                    DO 70 L=LLOW,LUP                                    
                      NDLOW(L)=NDLOW(L)+1                               
  70                CONTINUE                                            
C                                                                       
                    IEL=IABS(IR1-IR2)                                   
C                                                                       
                    IF (NDLOW(IVARN+1)   .EQ.NDLOW(IVARN)+1) THEN       
                      LNEW=NDLOW(IVARN)+1                               
                    ELSE                                                
                      LINIT=NDLOW(IVARN+1)-1                            
                      LEND=NDLOW(IVARN)+1                               
                      LNEW=NDLOW(IVARN)+1                               
C                                                                       
                      DO 80 L=LINIT, LEND,-1                            
                        IF (NDIFFL(L)  .LE.IEL) THEN                    
                          LNEW=L+1                                      
                          GOTO 85                                       
                        END IF                                          
  80                  CONTINUE                                          
  85                  CONTINUE                                          
C                                                                       
                    END IF                                              
C                                                                       
                    LMAX=LMAX+1                                         
C                                                                       
                    IF (LMAX.NE.   LNEW) THEN                           
C                                                                       
                      DO 90 L=LMAX,    LNEW+1,-1                        
                        IAL1(L)=IAL1(L-1)                               
                        IAL2(L)=IAL2(L-1)                               
                        BL(L)=BL(L-1)                                   
                        NDIFFL(L)=NDIFFL(L-1)                           
                        DLW(L)=DLW(L-1)                                 
  90                  CONTINUE                                          
C                                                                       
                    END IF                                              
C                                                                       
                    IAL1(LNEW)=NEW1                                     
                    IAL2(LNEW)=NEW2                                     
                    BL(LNEW)=VAL*VAL                                    
                    NDIFFL(LNEW)=IEL                                    
                    DLW(LNEW)=WL(I)                                     
C                                                                       
                  END IF                                                
                END IF                                                  
              END IF                                                    
C                                                                       
  60        CONTINUE                                                    
C                                                                       
            NEW2T=NEW2                                                  
            NEW2=NEW1                                                   
            NEW1=NEW2T                                                  
            IR2T=IR2                                                    
            IR2=IR1                                                     
            IR1=IR2T                                                    
C                                                                       
  50      CONTINUE                                                      
  20    CONTINUE                                                        
      END IF                                                            
C                                                                       
C--------                                                               
C                                                                       
      IF (NU .GT. 0) THEN                                               
C                                                                       
        DO 100 I=1, NU                                                  
C                                                                       
          NUM1=NUMU1(I)                                                 
          NUM2=NUMU2(I)                                                 
          IR1=NUM1+1                                                    
          IR2=NUM2+1                                                    
          NALOW=NPRE(IR1)+1                                             
          NAUP=NPRE(IR1+1)                                              
          VAL=VALU(I)                                                   
          ICHK=0                                                        
          JCHK=0                                                        
C                                                                       
          DO 110  NA=NALOW,NAUP                                         
            IF (AMU1(I).EQ.ALPH(NA)) THEN                               
              NEW1=NA                                                   
              ICHK=1                                                    
            END IF                                                      
 110      CONTINUE                                                      
C                                                                       
          IF (ICHK.EQ.0) THEN                                           
            WRITE (6,*) I,AMU1(I)                                       
            STOP ' ERROR IN UPPER CONSTRAINT1'                          
          END IF                                                        
C                                                                       
          NALOW=NPRE(IR2)+1                                             
          NAUP=NPRE(IR2+1)                                              
C                                                                       
          DO 120  NA=NALOW,NAUP                                         
            IF (AMU2(I).EQ.ALPH(NA)) THEN                               
              NEW2=NA                                                   
              JCHK=1                                                    
            END IF                                                      
 120      CONTINUE                                                      
C                                                                       
          IF (JCHK.EQ.0) THEN                                           
            WRITE (6,*) I,AMU2(I)                                       
            STOP ' ERROR IN UPPER CONSTRAINT2'                          
          END IF                                                        
C                                                                       
          DO 130 NDOIT =1,2                                             
            IVLOW=NTPRE(IR1-1)                                          
            IVUP=NTPRE(IR1+1)                                           
C                                                                       
            IF (IVLOW.EQ.0) THEN                                        
              IVLOW=1                                                   
            END IF                                                      
C                                                                       
            DO 140 IVAR=IVLOW,IVUP                                      
              IPSI=INDPSI(IVAR)*(NEW1-IRBEG(IVAR))*(NEW1-IREND(IVAR))   
C                                                                       
              IF (NEW1.GE.IRBEG (IVAR)) THEN                            
                IF (NEW1.LE.IREND (IVAR)) THEN                          
                  IF (IPSI .EQ.0) THEN                                  
C                                                                       
                    IVARN=IVAR                                          
                    LLOW=IVARN+1                                        
                    LUP=NVAR+1                                          
C                                                                       
                    DO 150 L=LLOW,LUP                                   
                      NDUP(L)=NDUP(L)+1                                 
 150                CONTINUE                                            
C                                                                       
                    IEL=IABS(IR1-IR2)                                   
C                                                                       
                    IF (NDUP(IVARN+1)    .EQ.NDUP(IVARN)+1) THEN        
                      LNEW=NDUP(IVARN)+1                                
                    ELSE                                                
                      LINIT=NDUP(IVARN+1)-1                             
                      LEND=NDUP(IVARN)+1                                
                      LNEW=NDUP(IVARN)+1                                
C                                                                       
                      DO 160 L=LINIT, LEND,-1                           
                        IF (NDIFFU(L)  .LE.IEL) THEN                    
                          LNEW=L+1                                      
                          GOTO 165                                      
                        END IF                                          
 160                  CONTINUE                                          
 165                  CONTINUE                                          
C                                                                       
                    END IF                                              
C                                                                       
                    KMAX=KMAX+1                                         
C                                                                       
                    IF (KMAX.NE.   LNEW) THEN                           
                      DO 170 L=KMAX,    LNEW+1,-1                       
                        IAU1(L)=IAU1(L-1)                               
                        IAU2(L)=IAU2(L-1)                               
                        BU(L)=BU(L-1)                                   
                        NDIFFU(L)=NDIFFU(L-1)                           
                        DUW(L)=DUW(L-1)                                 
 170                  CONTINUE                                          
                    END IF                                              
C                                                                       
                    IAU1(LNEW)=NEW1                                     
                    IAU2(LNEW)=NEW2                                     
                    BU(LNEW)=VAL*VAL                                    
                    NDIFFU(LNEW)=IEL                                    
                    DUW(LNEW)=WU(I)                                     
C                                                                       
                  END IF                                                
                END IF                                                  
              END IF                                                    
 140        CONTINUE                                                    
C                                                                       
            NEW2T=NEW2                                                  
            NEW2=NEW1                                                   
            NEW1=NEW2T                                                  
            IR2T=IR2                                                    
            IR2=IR1                                                     
            IR1=IR2T                                                    
C                                                                       
 130      CONTINUE                                                      
 100    CONTINUE                                                        
      END IF                                                            
C                                                                       
C--------                                                               
C                                                                       
      RETURN                                                            
      END                                                               
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C                                                                       
      SUBROUTINE SPV(I,WV,IRAN,ISTCON,IAC,JC,WC,ANGI)                   
C                                                                       
C--------                                                               
C                                                                       
      IMPLICIT REAL*8 (A-H,O-Z)                                         
C                                                                       
      PARAMETER (MRES=90,MA=2000,MVAR=900,MPRO=10)                      
      PARAMETER (MAC=20,MC=100,MJC=100,MWC=100,MAN=1000)                
      PARAMETER (MRES1=MRES+1,MTR=MVAR+2*MPRO+1)                        
C                                                                       
      COMMON/DHANGL/VAR(MVAR),VART(MTR)                                 
      COMMON/FIXANG/OMEGA,PHIPRO                                        
      COMMON/ACON1/IARAN(MC),NOC(MC),NORESC(MAC,MC)                     
      COMMON/ACON2/ANGC(MAC,MC)                                         
      COMMON/JCON1/JRAN,NOJ,NORESJ(MJC),NJ(MJC)                         
      COMMON/JCON2/ANGJLO(MJC),ANGJUP(MJC),CENTJ(MVAR),HLJ(MVAR),       
     *             VJ(MVAR),WJ                                          
      COMMON/JCON3/ANGJ(MJC)                                            
      COMMON/WCON1/JWRAN,NOW,NORESW(MWC),NW(MWC)                        
      COMMON/WCON2/ANGWLO(MWC),ANGWUP(MWC),CENTW(MVAR),HLW(MVAR),       
     *             VW(MVAR),WW                                          
      COMMON/PRDHD/NABEG(MVAR),NAEND(MVAR),IRBEG(MTR),IREND(MTR),       
     *             NBR(MTR),NPOINT(2,MTR),NVPRE(MRES1),INODE(MVAR),     
     *             NTPRE(MRES1),INDPSI(MTR)                             
      COMMON/GEN100/INUMRS,LIST(MRES),NPRE(MRES1)                       
C                                                                       
      CHARACTER ANGC*4,ANGJ*4,WV*1                                      
      REAL*8 LO,ANGI(MAN,MC),RNUM(MVAR*2)                               
      INTEGER NC(MAC),WC                                                
      INTEGER*4 IX                                                      
C                                                                       
      RD=3.141592653589793D0/180.D0                                     
      PI2=3.141592653589793D0*2                                         
C                                                                       
      IX=0                                                              
C                                                                       
C-------------------------                                              
C---- INITIAL ANGLES -----                                              
C-------------------------                                              
C                                                                       
      IF (IRAN.EQ.-1) THEN                                              
        DO 10 NRE=2,INUMRS-1                                            
C                                                                       
          K0=10*(NRE-2)                                                 
          K1=NVPRE(NRE)+1                                               
          K2=NVPRE(NRE+1)                                               
          KK1=NTPRE(NRE)+1                                              
          KK2=NTPRE(NRE+1)                                              
C                                                                       
          IF (WV.EQ.'Y') THEN                                           
            IF (NRE.EQ.INUMRS-1) THEN                                   
              VAR(K2)=ANGI(K0+2,I)                                      
              VART(KK2)=ANGI(K0+3,I)                                    
            ELSE                                                        
              VAR(K2-1)=ANGI(K0+2,I)                                    
              VAR(K2)=ANGI(K0+3,I)                                      
            END IF                                                      
          ELSE                                                          
            VAR(K2)=ANGI(K0+2,I)                                        
            VART(KK2)=ANGI(K0+3,I)                                      
          END IF                                                        
C                                                                       
          IF (LIST(NRE)   .EQ.6) THEN                                   
            VAR(K1)=ANGI(K0+1,I)                                        
          ELSE                                                          
            IF (LIST(NRE)   .EQ.13) THEN                                
              VART(KK1)=ANGI(K0+1,I)                                    
            ELSE                                                        
              VAR(K1)=ANGI(K0+1,I)                                      
              J=3                                                       
C                                                                       
              IF (WV.EQ.'Y') THEN                                       
                IF (NRE.EQ.INUMRS-1) THEN                               
                  KK=1                                                  
                ELSE                                                    
                  KK=2                                                  
                END IF                                                  
              ELSE                                                      
                KK=1                                                    
              END IF                                                    
C                                                                       
              DO 20 K=K1+1,K2-KK                                        
                J=J+1                                                   
                JJ=K0+J                                                 
                VAR(K)=ANGI(JJ,I)                                       
  20          CONTINUE                                                  
C                                                                       
            END IF                                                      
          END IF                                                        
  10    CONTINUE                                                        
C                                                                       
C---- IAC = 1 -----                                                     
C                                                                       
        IF (IAC.EQ.1) THEN                                              
          DO 30 L=1,NOC(I)                                              
C                                                                       
            IF (ANGC(L,I) .EQ.'PHI ') THEN                              
              NC(L)=NVPRE(NORESC(L,I)+1)+1                              
            END IF                                                      
C                                                                       
            IF (ANGC(L,I) .EQ.'PSI ') THEN                              
              IF (WV.EQ.'Y') THEN                                       
                NC(L)=NVPRE(NORESC(L,I)+2)-1                            
              ELSE                                                      
                NC(L)=NVPRE(NORESC(L,I)+2)                              
              END IF                                                    
            END IF                                                      
C                                                                       
            IF (ANGC(L,I) .EQ.'CHI1') THEN                              
              NC(L)=NVPRE(NORESC(L,I)+1)+2                              
            END IF                                                      
C                                                                       
            IF (ANGC(L,I) .EQ.'CHI2') THEN                              
              NC(L)=NVPRE(NORESC(L,I)+1)+3                              
            END IF                                                      
C                                                                       
  30      CONTINUE                                                      
C                                                                       
          NOC2=2*NOC(I)                                                 
C                                                                       
          DO 40  L=1,IARAN(I)                                           
            CALL  RANU2(IX,RNUM,NOC2,ITST)                              
  40      CONTINUE                                                      
C                                                                       
          DO 50  L=1,NOC(I)                                             
            VAR(NC(L))=RD*(360.D0*(RNUM(L)-0.5))                        
  50      CONTINUE                                                      
        END IF                                                          
C                                                                       
      ELSE                                                              
C                                                                       
C---- RANDOMLY GENERATE -----                                           
C                                                                       
        NUMVAR=NVPRE(INUMRS)                                            
        NR2=2*NUMVAR                                                    
C                                                                       
        DO 60 J=1,ISTCON                                                
          CALL  RANU2(IX,RNUM,NR2,ITST)                                 
  60    CONTINUE                                                        
C                                                                       
        ISTCON=ISTCON+1                                                 
C                                                                       
        DO 70 J=1,NUMVAR                                                
          VAR(J)=RD*(360.D0*(RNUM(J)-0.5))                              
  70    CONTINUE                                                        
C                                                                       
        DO 80 J=2,INUMRS-1                                              
C                                                                       
          IF (WV.EQ.'Y') THEN                                           
            IF (J.EQ.INUMRS-1) THEN                                     
              KK2=NTPRE(J+1)                                            
              VART(KK2)=OMEGA*RD                                        
            ELSE                                                        
             K2=NVPRE(J+1)                                              
             VAR(K2)=OMEGA*RD                                           
            END IF                                                      
          ELSE                                                          
            KK2=NTPRE(J+1)                                              
            VART(KK2)=OMEGA*RD                                          
          END IF                                                        
C                                                                       
          IF (LIST(J)   .EQ.13) THEN                                    
            KK1=NTPRE(J)+1                                              
            VART(KK1)=PHIPRO*RD                                         
          END IF                                                        
C                                                                       
  80    CONTINUE                                                        
C                                                                       
      END IF                                                            
C                                                                       
C---------------------------                                            
C---- INFORMATION OF J -----                                            
C---------------------------                                            
C                                                                       
      IF (JC.GE.1) THEN                                                 
        DO 90 J=1,NOJ                                                   
C                                                                       
          IF (ANGJ(J)  .EQ.'PHI ') THEN                                 
            NJ(J)=NVPRE(NORESJ(J)+1)+1                                  
          END IF                                                        
C                                                                       
          IF (ANGJ(J)  .EQ.'PSI ') THEN                                 
            IF (WV.EQ.'Y') THEN                                         
              NJ(J)=NVPRE(NORESJ(J)+2)-1                                
            ELSE                                                        
              NJ(J)=NVPRE(NORESJ(J)+2)                                  
            END IF                                                      
          END IF                                                        
C                                                                       
          IF (ANGJ(J)  .EQ.'CHI1') THEN                                 
            NJ(J)=NVPRE(NORESJ(J)+1)+2                                  
          END IF                                                        
C                                                                       
          CENTJ(NJ(J))=0.5*RD*(ANGJUP(J)+ANGJLO(J))                     
          HLJ(NJ(J))=0.5*RD*(ANGJUP(J)-ANGJLO(J))                       
C                                                                       
  90    CONTINUE                                                        
C                                                                       
C---- SPECIFY ANGLES WITH J -----                                       
C                                                                       
        IF (JC.EQ.2) THEN                                               
C                                                                       
          NOJ2=2*NOJ                                                    
C                                                                       
          DO 100  J=1,JRAN                                              
            CALL  RANU2(IX,RNUM,NOJ2,ITST)                              
 100      CONTINUE                                                      
C                                                                       
          DO 110  J=1,NOJ                                               
            K=NJ(J)                                                     
            LO=ANGJLO(J)                                                
            UP=ANGJUP(J)                                                
C                                                                       
            IF (VAR(K).LT.LO) THEN                                      
              VAR(K)=CENTJ(K)+2*HLJ(K)*(RNUM(J)-0.5)                    
            END IF                                                      
C                                                                       
            IF (VAR(K).GT.UP) THEN                                      
              VAR(K)=CENTJ(K)+2*HLJ(K)*(RNUM(J)-0.5)                    
            END IF                                                      
C                                                                       
 110      CONTINUE                                                      
        END IF                                                          
      END IF                                                            
C                                                                       
C----------------------------------                                     
C---- INFORMATION OF W-ANGLES -----                                     
C----------------------------------                                     
C                                                                       
      IF (WV.EQ.'Y') THEN                                               
        IF (WC.GE.1) THEN                                               
C                                                                       
          DO 120  J=1,NOW                                               
            NW(J)=NVPRE(NORESW(J)+2)                                    
            CENTW(NW(J))=0.5*RD*(ANGWUP(J)+ANGWLO(J))                   
            HLW(NW(J))=0.5*RD*(ANGWUP(J)-ANGWLO(J))                     
 120      CONTINUE                                                      
C                                                                       
C---- SPECIFY W-ANGLES -----                                            
C                                                                       
          IF (WC.EQ.2) THEN                                             
C                                                                       
            NOW2=2*NOW                                                  
C                                                                       
            DO 130  J=1,JWRAN                                           
              CALL  RANU2(IX,RNUM,NOW2,ITST)                            
 130        CONTINUE                                                    
C                                                                       
            DO 140  J=1,NOW                                             
              K=NW(J)                                                   
              LO=ANGWLO(J)                                              
              UP=ANGWUP(J)                                              
C                                                                       
              IF (UP.GT.180.D0) THEN                                    
                IF (VAR(K).LT.0) THEN                                   
                  VAR(K)=VAR(K)+PI2                                     
                END IF                                                  
              END IF                                                    
C                                                                       
              IF (VAR(K).LT.LO) THEN                                    
                VAR(K)=CENTW(K)+2*HLW(K)*(RNUM(J)-0.5)                  
              END IF                                                    
C                                                                       
              IF (VAR(K).GT.UP) THEN                                    
                VAR(K)=CENTW(K)+2*HLW(K)*(RNUM(J)-0.5)                  
              END IF                                                    
C                                                                       
 140        CONTINUE                                                    
          END IF                                                        
        END IF                                                          
      END IF                                                            
C                                                                       
      NVAR=NVPRE(INUMRS)                                                
C                                                                       
      DO 150 IVAR=1,NVAR                                                
        ITREE=INODE(IVAR)                                               
        VART(ITREE)=VAR(IVAR)                                           
 150  CONTINUE                                                          
C                                                                       
C--------                                                               
C                                                                       
      RETURN                                                            
      END                                                               
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C                                                                       
      SUBROUTINE RANU2(IX,A,N,ICON)                                     
C                                                                       
C--------                                                               
C                                                                       
      IMPLICIT REAL*8 (A-H,O-Z)                                         
C                                                                       
      INTEGER*4 IX                                                      
      REAL*8 A(N)                                                       
C                                                                       
C--------                                                               
C                                                                       
      DO 10 I=1,N                                                       
        IX=IX*322771+1234567891                                         
        IF (IX.LT.0) THEN                                               
          IX=(IX+2147483647)+1                                          
        END IF                                                          
        A(I)=FLOAT(IX)*0.4656613E-9                                     
  10  CONTINUE                                                          
C                                                                       
      ICON=0                                                            
C                                                                       
C--------                                                               
C                                                                       
      RETURN                                                            
      END                                                               
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C                                                                       
      SUBROUTINE DEFNKL(J,NAC,MV,WEVW,WEJ,WEW)                          
C                                                                       
C--------                                                               
C                                                                       
      IMPLICIT REAL*8 (A-H,O-Z)                                         
C                                                                       
      PARAMETER (MVAR=900,MJC=100,MWC=100,ML=100)                       
C                                                                       
      COMMON/JCON2/ANGJLO(MJC),ANGJUP(MJC),CENTJ(MVAR),HLJ(MVAR),       
     *             VJ(MVAR),WJ                                          
      COMMON/WCON2/ANGWLO(MWC),ANGWUP(MWC),CENTW(MVAR),HLW(MVAR),       
     *             VW(MVAR),WW                                          
      COMMON/NDIFF/NDIFF,NVAN,WVW                                       
C                                                                       
      REAL*8 WEVW(ML),WEJ(ML),WEW(ML)                                   
C                                                                       
      INTEGER NAC(ML),MV(ML)                                            
C--------                                                               
C                                                                       
      NDIFF=NAC(J)                                                      
      NVAN=MV(J)                                                        
      WVW=WEVW(J)                                                       
      WJ=WEJ(J)                                                         
      WW=WEW(J)                                                         
C                                                                       
C--------                                                               
C                                                                       
      RETURN                                                            
      END                                                               
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C                                                                       
      SUBROUTINE ACTIV                                                  
C                                                                       
C--------                                                               
C                                                                       
      IMPLICIT REAL*8 (A-H,O-Z)                                         
C                                                                       
      PARAMETER (MRES=90,MA=2000,MVAR=900,MPRO=10,MCL=10000,MCU=10000)  
      PARAMETER (MRES1=MRES+1,MTR=MVAR+2*MPRO+1,MTR1=MTR+1)             
      PARAMETER (MCU2=2*MCU,MCL2=2*MCL)                                 
C                                                                       
      COMMON/DSTR/IAL1(MCL2),IAL2(MCL2),BL(MCL2),IAU1(MCU2),IAU2(MCU2), 
     *            BU(MCU2),NDIFFL(MCL2),NDIFFU(MCU2),DLW(MCL2),DUW(MCU2)
      COMMON/PRCON/NDLOW(MTR1),NDUP(MTR1),NACLOW(MTR),NACUP(MTR)        
      COMMON/PRDHD/NABEG(MVAR),NAEND(MVAR),IRBEG(MTR),IREND(MTR),       
     *             NBR(MTR),NPOINT(2,MTR),NVPRE(MRES1),INODE(MVAR),     
     *             NTPRE(MRES1),INDPSI(MTR)                             
      COMMON/GEN100/INUMRS,LIST(MRES),NPRE(MRES1)                       
      COMMON/NDIFF/NDIFF,NVAN,WVW                                       
C                                                                       
C--------                                                               
C                                                                       
      NVAR=NTPRE(INUMRS)                                                
C                                                                       
      DO 10 IVAR=1,  NVAR                                               
        N1=NDLOW(IVAR)+1                                                
        N2=NDLOW(IVAR+1)                                                
        N=0                                                             
C                                                                       
        IF (N1.LE.N2) THEN                                              
          DO 20 I=N1,N2                                                 
            IF (NDIFFL(I)  .LE.NDIFF) THEN                              
              N=N+1                                                     
            END IF                                                      
  20      CONTINUE                                                      
        END IF                                                          
C                                                                       
        NACLOW(IVAR)=N                                                  
        N1=NDUP(IVAR)+1                                                 
        N2=NDUP(IVAR+1)                                                 
        N=0                                                             
C                                                                       
        IF (N1.LE.N2) THEN                                              
          DO 30 I=N1,N2                                                 
            IF (NDIFFU(I)  .LE.NDIFF) THEN                              
              N=N+1                                                     
            END IF                                                      
  30      CONTINUE                                                      
        END IF                                                          
C                                                                       
        NACUP(IVAR)=N                                                   
  10  CONTINUE                                                          
C                                                                       
C--------                                                               
C                                                                       
      RETURN                                                            
      END                                                               
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C                                                                       
      SUBROUTINE GRDEB(EB,GRDVAR,JC,WC,WV)                              
C                                                                       
C--------                                                               
C                                                                       
      IMPLICIT REAL*8 (A-H,O-Z)                                         
C                                                                       
      PARAMETER (MVAR=900)                                              
C                                                                       
      INTEGER WC                                                        
      REAL*8 GRDVAR(MVAR)                                               
      CHARACTER*1 WV                                                    
C                                                                       
C--------                                                               
C                                                                       
      CALL  VIOBND(EB,GRDVAR,WV)                                        
C                                                                       
      IF (JC.GE.1) THEN                                                 
        CALL  GRDJ(EB,GRDVAR)                                           
      END IF                                                            
C                                                                       
      IF (WC.GE.1) THEN                                                 
        CALL  GRDW(EB,GRDVAR)                                           
      END IF                                                            
C                                                                       
C--------                                                               
C                                                                       
      RETURN                                                            
      END                                                               
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C                                                                       
      SUBROUTINE VIOBND(EB,GRDVAR,WV)                                   
C                                                                       
C--------                                                               
C                                                                       
      IMPLICIT REAL*8 (A-H,O-Z)                                         
C                                                                       
      PARAMETER (MRES=90,MA=2000,MVAR=900,MPRO=10,MCL=10000,MCU=10000)  
      PARAMETER (MRES1=MRES+1,MTR=MVAR+2*MPRO+1,MTR1=MTR+1)             
      PARAMETER (MCU2=2*MCU,MCL2=2*MCL,MVAR6=6*MVAR)                    
C                                                                       
      COMMON/DSTR/IAL1(MCL2),IAL2(MCL2),BL(MCL2),IAU1(MCU2),            
     *            IAU2(MCU2),BU(MCU2),NDIFFL(MCL2),NDIFFU(MCU2),        
     *            DLW(MCL2),DUW(MCU2)                                   
      COMMON/PRCON/NDLOW(MTR1),NDUP(MTR1),NACLOW(MTR),NACUP(MTR)        
      COMMON/NDIFF/NDIFF,NVAN,WVW                                       
      COMMON/PRDHD/NABEG(MVAR),NAEND(MVAR),IRBEG(MTR),IREND(MTR),       
     *             NBR(MTR),NPOINT(2,MTR),NVPRE(MRES1),INODE(MVAR),     
     *             NTPRE(MRES1),INDPSI(MTR)                             
      COMMON/GEN100/INUMRS,LIST(MRES),NPRE(MRES1)                       
      COMMON/ATOMS/ALPH(MA),CHARGE(MA),COORD(3,MA),NBTYPE(MA)           
C                                                                       
      REAL*8 GRDVAR(MVAR),FIN(MVAR6),FOUT(MVAR6),X1(3),X2(3),DIFF(3)    
      CHARACTER ALPH*3,WV*1                                             
C                                                                       
C--------                                                               
C                                                                       
      EPSI=0.D0                                                         
C                                                                       
      CALL  RENV                                                        
C                                                                       
      CALL  GENER                                                       
C                                                                       
      NVAR=NVPRE(INUMRS)                                                
      NVAR6=6*NTPRE(INUMRS)                                             
      EB=0                                                              
C                                                                       
      DO 10 I=1,NVAR6                                                   
        FIN(I)=0.0D0                                                    
  10  CONTINUE                                                          
C                                                                       
      IF (NVAN .GE. 0) THEN                                             
        CALL  HCORE(EB,FIN,WV)                                          
      END IF                                                            
C                                                                       
      IND0=0                                                            
C                                                                       
C--------                                                               
C                                                                       
      DO 20 IVAR=1,NTPRE(INUMRS)                                        
        IF (NACLOW    (IVAR).GT.0) THEN                                 
          LLOW=NDLOW(IVAR)+1                                            
          LUP=LLOW+NACLOW(IVAR)-1                                       
          DO 30 L=LLOW,  LUP                                            
            BLSQ=BL(L)                                                  
            DO 40 K=1,3                                                 
              X1(K)=COORD(K,IAL1(L))                                    
              X2(K)=COORD(K,IAL2(L))                                    
  40        CONTINUE                                                    
C                                                                       
            DSQ=0                                                       
C                                                                       
            DO 50 K=1,3                                                 
              DIFF(K)=X1(K)-X2(K)                                       
              DSQ=DSQ+DIFF(K)*DIFF(K)                                   
  50        CONTINUE                                                    
C                                                                       
            DELSQ=BLSQ-DSQ                                              
C                                                                       
            IF (DELSQ.GT.EPSI) THEN                                     
              DELSW=DLW(L)*DELSQ/BLSQ                                   
              IF (IAL1(L).GT.IAL2(L)) THEN                              
                EB=EB+DELSQ*DELSW                                       
              END IF                                                    
              XC1=X1(2)*X2(3)-X1(3)*X2(2)                               
              XC2=X1(3)*X2(1)-X1(1)*X2(3)                               
              XC3=X1(1)*X2(2)-X1(2)*X2(1)                               
              IND=IND0+1                                                
              FIN(IND)=FIN(IND)-DELSW*XC1                               
              IND=IND+1                                                 
              FIN(IND)=FIN(IND)-DELSW*XC2                               
              IND=IND+1                                                 
              FIN(IND)=FIN(IND)-DELSW*XC3                               
              IND=IND+1                                                 
              FIN(IND)=FIN(IND)-DELSW*DIFF(1)                           
              IND=IND+1                                                 
              FIN(IND)=FIN(IND)-DELSW*DIFF(2)                           
              IND=IND+1                                                 
              FIN(IND)=FIN(IND)-DELSW*DIFF(3)                           
            END IF                                                      
C                                                                       
  30      CONTINUE                                                      
C                                                                       
        END IF                                                          
C                                                                       
C--------                                                               
C                                                                       
        IF (NACUP     (IVAR).GT.0) THEN                                 
          LLOW=NDUP(IVAR)+1                                             
          LUP=LLOW+NACUP(IVAR)-1                                        
          DO 60 L=LLOW,  LUP                                            
            BUSQ=BU(L)                                                  
C                                                                       
            DO 70 K=1,3                                                 
              X1(K)=COORD(K,IAU1(L))                                    
              X2(K)=COORD(K,IAU2(L))                                    
  70        CONTINUE                                                    
C                                                                       
            DSQ=0                                                       
C                                                                       
            DO 80 K=1,3                                                 
              DIFF(K)=X1(K)-X2(K)                                       
              DSQ=DSQ+DIFF(K)*DIFF(K)                                   
  80        CONTINUE                                                    
C                                                                       
            DELSQ=DSQ-BUSQ                                              
C                                                                       
            IF (DELSQ.GT.EPSI) THEN                                     
              DELSW=DUW(L)*DELSQ/BUSQ                                   
              IF (IAU1(L).GT.IAU2(L)) THEN                              
                EB=EB+DELSQ*DELSW                                       
              END IF                                                    
              XC1=X1(2)*X2(3)-X1(3)*X2(2)                               
              XC2=X1(3)*X2(1)-X1(1)*X2(3)                               
              XC3=X1(1)*X2(2)-X1(2)*X2(1)                               
              IND=IND0+1                                                
              FIN(IND)=FIN(IND)+DELSW*XC1                               
              IND=IND+1                                                 
              FIN(IND)=FIN(IND)+DELSW*XC2                               
              IND=IND+1                                                 
              FIN(IND)=FIN(IND)+DELSW*XC3                               
              IND=IND+1                                                 
              FIN(IND)=FIN(IND)+DELSW*DIFF(1)                           
              IND=IND+1                                                 
              FIN(IND)=FIN(IND)+DELSW*DIFF(2)                           
              IND=IND+1                                                 
              FIN(IND)=FIN(IND)+DELSW*DIFF(3)                           
            END IF                                                      
C                                                                       
  60      CONTINUE                                                      
C                                                                       
        END IF                                                          
C                                                                       
        IND0=IND0+6                                                     
  20  CONTINUE                                                          
C                                                                       
      CALL  TREESM(FIN,FOUT)                                            
C                                                                       
      DO 90 IVAR=1,NVAR                                                 
        NAB=NABEG(IVAR)                                                 
        NAE=NAEND(IVAR)                                                 
        DSQ=0                                                           
C                                                                       
        DO 100 K=1,3                                                    
          DIFF(K)=COORD(K,NAE)-COORD(K,NAB)                             
          DSQ=DSQ+DIFF(K)*DIFF(K)                                       
 100    CONTINUE                                                        
C                                                                       
        DSQ=SQRT(DSQ)                                                   
        IND=6*INODE(IVAR)-5                                             
        F1=FOUT(IND)                                                    
        IND=IND+1                                                       
        F2=FOUT(IND)                                                    
        IND=IND+1                                                       
        F3=FOUT(IND)                                                    
        IND=IND+1                                                       
        G1=FOUT(IND)                                                    
        IND=IND+1                                                       
        G2=FOUT(IND)                                                    
        IND=IND+1                                                       
        G3=FOUT(IND)                                                    
        R1=COORD(2,NAE)*G3-COORD(3,NAE)*G2                              
        R2=COORD(3,NAE)*G1-COORD(1,NAE)*G3                              
        R3=COORD(1,NAE)*G2-COORD(2,NAE)*G1                              
        TEMP=DIFF(1)*(F1+R1)                                            
        TEMP=TEMP+DIFF(2)*(F2+R2)                                       
        TEMP=TEMP+DIFF(3)*(F3+R3)                                       
        GRDVAR(IVAR)=-TEMP/DSQ                                          
  90  CONTINUE                                                          
C                                                                       
      EB=EB/4                                                           
C                                                                       
C--------                                                               
C                                                                       
      RETURN                                                            
      END                                                               
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C                                                                       
      SUBROUTINE RENV                                                   
C                                                                       
C--------                                                               
C                                                                       
                                                                        
      IMPLICIT REAL*8 (A-H,O-Z)                                         
C                                                                       
      PARAMETER (MRES=90,MA=2000,MVAR=900,MPRO=10)                      
      PARAMETER (MRES1=MRES+1,MTR=MVAR+2*MPRO+1)                        
C                                                                       
      COMMON/DHANGL/VAR(MVAR),VART(MTR)                                 
      COMMON/PRDHD/NABEG(MVAR),NAEND(MVAR),IRBEG(MTR),IREND(MTR),       
     *             NBR(MTR),NPOINT(2,MTR),NVPRE(MRES1),INODE(MVAR),     
     *             NTPRE(MRES1),INDPSI(MTR)                             
      COMMON/GEN100/INUMRS,LIST(MRES),NPRE(MRES1)                       
      COMMON/BONDS/ANGLES(10,MRES),UTOR(10,MRES),NDXARR(10,MRES),       
     *             NV(MRES)                                             
C                                                                       
      PI=3.141592653589793D0                                            
C                                                                       
C--------                                                               
C                                                                       
      NVAR=NVPRE(INUMRS)                                                
      DO 10 IVAR=1,NVAR                                                 
        ITREE=INODE(IVAR)                                               
        VART(ITREE)=VAR(IVAR)                                           
  10  CONTINUE                                                          
C                                                                       
      DO 20 IND=1,10                                                    
        ANGLES(IND,1)=PI                                                
        ANGLES(IND,INUMRS)=PI                                           
  20  CONTINUE                                                          
C                                                                       
      DO 30 IR=2,     INUMRS-1                                          
        IVLOW=NTPRE(IR)+1                                               
        IVUP=NTPRE(IR+1)                                                
        ANGLES(1,IR)=VART(IVLOW)                                        
        ANGLES(2,IR)=VART(IVUP-1)                                       
        ANGLES(3,IR)=VART(IVUP)                                         
C                                                                       
        IF (LIST(IR).NE.6) THEN                                         
          IF (LIST(IR).NE.13) THEN                                      
            IL=IVLOW+1                                                  
            IU=IVUP-2                                                   
            J=3                                                         
C                                                                       
            DO 40 I=IL,IU                                               
              J=J+1                                                     
              ANGLES(J,IR)=VART(I)                                      
  40        CONTINUE                                                    
C                                                                       
          END IF                                                        
        END IF                                                          
C                                                                       
  30  CONTINUE                                                          
C                                                                       
C--------                                                               
C                                                                       
      RETURN                                                            
      END                                                               
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C                                                                       
      SUBROUTINE TREESM(FIN,FOUT)                                       
C                                                                       
C--------                                                               
C                                                                       
      IMPLICIT REAL*8 (A-H,O-Z)                                         
C                                                                       
      PARAMETER (MRES=90,MVAR=900,MPRO=10)                              
      PARAMETER (MRES1=MRES+1,MTR=MVAR+2*MPRO+1,MTR6=6*MTR)             
C                                                                       
      COMMON/PRDHD/NABEG(MVAR),NAEND(MVAR),IRBEG(MTR),IREND(MTR),       
     *             NBR(MTR),NPOINT(2,MTR),NVPRE(MRES1),INODE(MVAR),     
     *             NTPRE(MRES1),INDPSI(MTR)                             
C                                                                       
      REAL*8 FIN(MTR6),FOUT(MTR6)                                       
      INTEGER J(MTR),Q(MTR)                                             
C                                                                       
C--------                                                               
C                                                                       
      L=1                                                               
      Q(1)=1                                                            
C                                                                       
      DO 10 K=1,6                                                       
        FOUT(K)=FIN(K)                                                  
  10  CONTINUE                                                          
C                                                                       
      J(1)=1                                                            
C                                                                       
C--------  GOING DOWN -------                                           
C                                                                       
  20  L=L+1                                                             
      Q(L)=NPOINT(J(L-1),Q(L-1))                                        
      IND=(Q(L)-1)*6                                                    
C                                                                       
      DO 30 K=1,6                                                       
        IND=IND+1                                                       
        FOUT(IND)=FIN(IND)                                              
  30  CONTINUE                                                          
C                                                                       
      IF (NBR(Q(L)).NE.0) THEN                                          
        J(L)=1                                                          
        GOTO 20                                                         
      END IF                                                            
C                                                                       
C-------- GOING UP ----------                                           
C                                                                       
  40  L=L-1                                                             
      IF (L.NE.0) THEN                                                  
        IND0=(Q(L)-1)*6                                                 
        IND1=(Q(L+1)-1)*6                                               
C                                                                       
        DO 50 K=1,6                                                     
          IND0=IND0+1                                                   
          IND1=IND1+1                                                   
          FOUT(IND0)=FOUT(IND0)+FOUT(IND1)                              
  50    CONTINUE                                                        
C                                                                       
        IF (J(L).EQ.NBR(Q(L))) THEN                                     
          GOTO 40                                                       
        END IF                                                          
C                                                                       
        J(L)=J(L)+1                                                     
        GOTO 20                                                         
      END IF                                                            
C                                                                       
C--------                                                               
C                                                                       
      RETURN                                                            
      END                                                               
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C                                                                       
      SUBROUTINE HCORE(EB,FIN,WV)                                       
C                                                                       
C--------                                                               
C                                                                       
      IMPLICIT REAL*8 (A-H,O-Z)                                         
C                                                                       
      PARAMETER (MRES=90,MA=2000,MVAR=900,MPRO=10,MSP=10)               
      PARAMETER (MRES1=MRES+1,MTR=MVAR+2*MPRO+1)                        
      PARAMETER (MTR6=6*MTR)                                            
C                                                                       
      COMMON/CYS/KCYS,NCYS,NPAIR(2,MSP)                                 
      COMMON/VWAAL/RAD(MA),NUMRE(MA),NUNIT(MA)                          
      COMMON/NDIFF/NDIFF,NVAN,WVW                                       
      COMMON/PRDHD/NABEG(MVAR),NAEND(MVAR),IRBEG(MTR),IREND(MTR),       
     *             NBR(MTR),NPOINT(2,MTR),NVPRE(MRES1),INODE(MVAR),     
     *             NTPRE(MRES1),INDPSI(MTR)                             
      COMMON/GEN100/INUMRS,LIST(MRES),NPRE(MRES1)                       
      COMMON/ATOMS/ALPH(MA),CHARGE(MA),COORD(3,MA),NBTYPE(MA)           
C                                                                       
      REAL*8 FIN(MTR6)                                                  
      CHARACTER ALPH*3,WV*1                                             
      INTEGER ICELL(MA),NBPERM(MA),IPCE(MA),IHB(28)                     
      LOGICAL*4 NOLFT(MA),RIGHT(MA),FRONT(MA),BACK(MA),TCYS             
C                                                                       
      DATA DCUT/5.0D0/                                                  
      DATA IHB/0,1,0,1,8*0,2*2,2*0,3*2,9*0/                             
C                                                                       
C--------                                                               
C                                                                       
      NAT=NPRE(INUMRS+1)                                                
C                                                                       
      DO 10 IR=2,INUMRS-1                                               
        IL=NVPRE(IR)+1                                                  
        IU=NVPRE(IR+1)                                                  
        IRC=LIST(IR)                                                    
        NPREI=NPRE(IR)                                                  
        JBEG=NPRE(IR-1)+1                                               
C                                                                       
        IF (IRC  .EQ.13) THEN                                           
          IBEG=NPREI+1                                                  
          IEND=NPREI+17                                                 
          JEND=IBEG-1                                                   
          JTST1=NABEG(IL-1)                                             
          JTST2=JBEG+5                                                  
          JTST3=JBEG+6                                                  
          ITST=NPREI+7                                                  
C                                                                       
          IF (IR.NE.2) THEN                                             
            IF (LIST(IR-1).EQ.6) THEN                                   
              JTST2=JBEG+6                                              
              JTST3=JBEG+7                                              
            END IF                                                      
          END IF                                                        
C                                                                       
          DO 20 I=IBEG,IEND                                             
            IF (I.NE. ITST) THEN                                        
              ITRI=NUNIT(I)                                             
              INDI=6*ITRI-5                                             
              X1=COORD(1,I)                                             
              Y1=COORD(2,I)                                             
              Z1=COORD(3,I)                                             
              RADI=RAD(I)                                               
C                                                                       
              DO 30 J=JBEG,  JEND                                       
                IF (J.NE.  JTST1) THEN                                  
                  IF (J.NE.  JTST2) THEN                                
                    IF (J.NE.  JTST3) THEN                              
                      ITRJ=NUNIT(J)                                     
                      INDJ=6*ITRJ-5                                     
                      X2=COORD(1,J)                                     
                      Y2=COORD(2,J)                                     
                      Z2=COORD(3,J)                                     
                      RVW=RAD(J)+RADI                                   
                      RVW=RVW*RVW                                       
C                                                                       
                      CALL CALVW(I,J,X1,Y1,Z1,X2,Y2,Z2,RVW,             
     *                           INDI,INDJ,FIN,EB)                      
C                                                                       
                    END IF                                              
                  END IF                                                
                END IF                                                  
  30          CONTINUE                                                  
C                                                                       
            END IF                                                      
  20      CONTINUE                                                      
C                                                                       
          I=NPREI+7                                                     
          ITRI=NUNIT(I)                                                 
          INDI=6*ITRI-5                                                 
          X1=COORD(1,I)                                                 
          Y1=COORD(2,I)                                                 
          Z1=COORD(3,I)                                                 
          RADI=RAD(I)                                                   
          JEND=NPREI+5                                                  
          JTST=NPREI+3                                                  
C                                                                       
          DO 40 J=JBEG,  JEND                                           
            IF (J.NE. JTST) THEN                                        
              JJ=NBTYPE(J)                                              
              IF (IHB(JJ).NE.1) THEN                                    
                ITRJ=NUNIT(J)                                           
                INDJ=6*ITRJ-5                                           
                X2=COORD(1,J)                                           
                Y2=COORD(2,J)                                           
                Z2=COORD(3,J)                                           
                RVW=RAD(J)+RADI                                         
                RVW=RVW*RVW                                             
C                                                                       
                CALL CALVW(I,J,X1,Y1,Z1,X2,Y2,Z2,RVW,INDI,INDJ,FIN,EB)  
C                                                                       
              END IF                                                    
            END IF                                                      
  40      CONTINUE                                                      
C                                                                       
          JBEG1=NPREI+8                                                 
          JEND=NPREI+17                                                 
          ITRJ=NUNIT(JBEG1)                                             
          INDJ=6*ITRJ-5                                                 
C                                                                       
          DO 50  J=JBEG1,JEND                                           
            X2=COORD(1,J)                                               
            Y2=COORD(2,J)                                               
            Z2=COORD(3,J)                                               
            RVW=RAD(J)+RADI                                             
            RVW=RVW*RVW                                                 
C                                                                       
            CALL CALVW(I,J,X1,Y1,Z1,X2,Y2,Z2,RVW,INDI,INDJ,FIN,EB)      
C                                                                       
  50      CONTINUE                                                      
C                                                                       
        ELSE                                                            
C                                                                       
          DO 60 IVAR=  IL,IU                                            
            ITRI=INODE(IVAR)                                            
            INDI=6*ITRI-5                                               
            IBEG=IRBEG(ITRI)                                            
            IEND=IREND(ITRI)                                            
            JEND=IBEG-1                                                 
            NABIV=NABEG(IVAR)                                           
            NABEN=NAEND(IVAR)                                           
C                                                                       
            DO 70 J=JBEG,  JEND                                         
              IF (J.NE.  NABIV) THEN                                    
                IF (J.NE.  NABEN) THEN                                  
                  JJ=NBTYPE(J)                                          
                  ITRJ=NUNIT(J)                                         
                  INDJ=6*ITRJ-5                                         
                  RADJ=RAD(J)                                           
                  X2=COORD(1,J)                                         
                  Y2=COORD(2,J)                                         
                  Z2=COORD(3,J)                                         
C                                                                       
                  DO 80 I=IBEG,  IEND                                   
                    IPSI=INDPSI(ITRI)*(I-IBEG)*(I-IEND)                 
                    IF (NUMRE(I).LT. NUMRE(J)+2) THEN                   
                      IF (IPSI .EQ.0) THEN                              
                        II=NBTYPE(I)                                    
                        IF (IHB(II)+  IHB(JJ).NE.3) THEN                
                          RVW=RAD(I)+RADJ                               
                          RVW=RVW*RVW                                   
                          X1=COORD(1,I)                                 
                          Y1=COORD(2,I)                                 
                          Z1=COORD(3,I)                                 
C                                                                       
                          CALL CALVW(I,J,X1,Y1,Z1,X2,Y2,Z2,RVW,         
     *                               INDI,INDJ,FIN,EB)                  
C                                                                       
                        END IF                                          
                      END IF                                            
                    END IF                                              
  80              CONTINUE                                              
C                                                                       
                END IF                                                  
              END IF                                                    
  70        CONTINUE                                                    
C                                                                       
  60      CONTINUE                                                      
C                                                                       
          IF (WV.NE.'Y') THEN                                           
            IF (IR   .NE.2) THEN                                        
              IBEG=NPREI+2                                              
              IEND=NPREI+3                                              
              ITRI=NUNIT(IBEG)                                          
              INDI=6*ITRI-5                                             
              JEND=NPRE(IR)                                             
C                                                                       
              IF (LIST(IR-1).EQ.6) THEN                                 
                JTST1=JBEG+6                                            
                JTST2=JBEG+7                                            
              ELSE                                                      
                JTST1=JBEG+5                                            
                JTST2=JBEG+6                                            
              END IF                                                    
C                                                                       
              DO 90 J=JBEG,  JEND                                       
                IF (J.NE.  JTST1) THEN                                  
                  IF (J.NE.  JTST2) THEN                                
                    JJ=NBTYPE(J)                                        
                    ITRJ=NUNIT(J)                                       
                    INDJ=6*ITRJ-5                                       
                    RADJ=RAD(J)                                         
                    X2=COORD(1,J)                                       
                    Y2=COORD(2,J)                                       
                    Z2=COORD(3,J)                                       
C                                                                       
                    DO 100 I=IBEG,  IEND                                
                      IF (NUMRE(I).LT. NUMRE(J)+2) THEN                 
                        II=NBTYPE(I)                                    
                        IF (IHB(II)+  IHB(JJ).NE.3) THEN                
                          RVW=RAD(I)+RADJ                               
                          RVW=RVW*RVW                                   
                          X1=COORD(1,I)                                 
                          Y1=COORD(2,I)                                 
                          Z1=COORD(3,I)                                 
C                                                                       
                          CALL CALVW(I,J,X1,Y1,Z1,X2,Y2,Z2,RVW,         
     *                               INDI,INDJ,FIN,EB)                  
C                                                                       
                        END IF                                          
                      END IF                                            
 100                CONTINUE                                            
C                                                                       
                  END IF                                                
                END IF                                                  
  90         CONTINUE                                                   
C                                                                       
            END IF                                                      
          END IF                                                        
        END IF                                                          
  10  CONTINUE                                                          
C                                                                       
C--------                                                               
C                                                                       
      CALL  CELL(NAT,DCUT,NXMAX,NYMAX,NZMAX,NXY,NCE,ICELL)              
C                                                                       
      DO 110 L=1,NAT                                                    
        NBPERM(L)=L                                                     
 110  CONTINUE                                                          
C                                                                       
      CALL  QSORT(NAT,NCE,ICELL,NBPERM,IPCE)                            
C                                                                       
      CALL  BOUND(NCE,NXMAX,NYMAX,NZMAX,NXY,NOLFT,RIGHT,BACK,FRONT)     
C                                                                       
      IND1=IPCE(1)                                                      
C                                                                       
      DO 120 ICA1=2,NCE+1                                               
        IND2=IPCE(ICA1)                                                 
        IF (IND2.NE.IND1) THEN                                          
          IND2=IND2-1                                                   
          IF (IND2.GT.IND1) THEN                                        
            DO 130 ICI=IND1, IND2-1                                     
              I=NBPERM(ICI)                                             
              ITRI=NUNIT(I)                                             
              INDI=6*ITRI-5                                             
              IRI=NUMRE(I)                                              
              X1=COORD(1,I)                                             
              Y1=COORD(2,I)                                             
              Z1=COORD(3,I)                                             
              RADI=RAD(I)                                               
C                                                                       
              CALL  SST(IRI,TCYS,NP)                                    
C                                                                       
              JSTRT=ICI+1                                               
C                                                                       
              IF (TCYS) THEN                                            
                CALL  JLPSS(JSTRT,IND2,I,INDI,X1,Y1,Z1,IRI,RADI,        
     *                      NP,NBPERM,FIN,EB)                           
              ELSE                                                      
                CALL  JLP(JSTRT,IND2,I,INDI,X1,Y1,Z1,IRI,RADI,NBPERM,   
     *                    FIN,EB)                                       
              END IF                                                    
C                                                                       
 130       CONTINUE                                                     
C                                                                       
          END IF                                                        
C                                                                       
          ICA=ICA1-1                                                    
C                                                                       
          IF (FRONT(ICA)) THEN                                          
            ICZ=ICA                                                     
          ELSE                                                          
            ICZ=ICA-NXMAX                                               
          END IF                                                        
C                                                                       
          IF (NOLFT(ICA)) THEN                                          
            ICZ=ICZ-1                                                   
          END IF                                                        
C                                                                       
          DO 140 I1=1,2                                                 
            ICY=ICZ                                                     
            DO 150 I2=1,3                                               
              ICB=ICY                                                   
              DO 160 I3=1,3                                             
                IF (ICA .LT.ICB) THEN                                   
                  IND1B=IPCE(ICB)                                       
                  IND2B=IPCE(ICB+1)-1                                   
                  NUMIC=IND2B-IND1B                                     
                  IF (NUMIC .GE.0) THEN                                 
C                                                                       
                    DO 170 ICI= IND1,IND2                               
                      I=NBPERM(ICI)                                     
                      ITRI=NUNIT(I)                                     
                      INDI=6*ITRI-5                                     
                      IRI=NUMRE(I)                                      
                      X1=COORD(1,I)                                     
                      Y1=COORD(2,I)                                     
                      Z1=COORD(3,I)                                     
                      RADI=RAD(I)                                       
C                                                                       
                      CALL  SST(IRI,TCYS,NP)                            
C                                                                       
                      IF (TCYS) THEN                                    
                        CALL JLPSS(IND1B,IND2B,I,INDI,X1,Y1,Z1,IRI,     
     *                             RADI,NP,NBPERM,FIN,EB)               
                      ELSE                                              
                        CALL JLP(IND1B,IND2B,I,INDI,X1,Y1,Z1,IRI,RADI,  
     *                           NBPERM,FIN,EB)                         
                      END IF                                            
 170                CONTINUE                                            
C                                                                       
                  END IF                                                
C                                                                       
                END IF                                                  
C                                                                       
                IF (RIGHT(ICB)) THEN                                    
                  GOTO 165                                              
                ELSE                                                    
                  ICB=ICB+1                                             
                END IF                                                  
C                                                                       
 160          CONTINUE                                                  
 165          CONTINUE                                                  
C                                                                       
              IF (BACK(ICY)) THEN                                       
                GOTO 155                                                
              ELSE                                                      
                ICY=ICY+NXMAX                                           
              END IF                                                    
C                                                                       
 150        CONTINUE                                                    
 155        CONTINUE                                                    
C                                                                       
            ICZ=ICZ+NXY                                                 
C                                                                       
            IF (ICZ.GT.NCE) THEN                                        
              GOTO 145                                                  
            END IF                                                      
C                                                                       
 140      CONTINUE                                                      
 145      CONTINUE                                                      
C                                                                       
          IND1=IND2+1                                                   
        END IF                                                          
 120  CONTINUE                                                          
C                                                                       
C--------                                                               
C                                                                       
      RETURN                                                            
      END                                                               
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C                                                                       
      SUBROUTINE CALVW(I,J,X1,Y1,Z1,X2,Y2,Z2,RVW,INDI,INDJ,F,EB)        
C                                                                       
C--------                                                               
C                                                                       
      IMPLICIT REAL*8 (A-H,O-Z)                                         
C                                                                       
      PARAMETER (MA=2000,MVAR=900,MPRO=10,MCH=100)                      
      PARAMETER (MTR=MVAR+2*MPRO+1,MTR6=6*MTR)                          
C                                                                       
      COMMON/NDIFF/NDIFF,NVAN,WVW                                       
      COMMON/HBND1/NH,NUMH1(MCH),NUMH2(MCH)                             
      COMMON/HBND2/AMH1(MCH),AMH2(MCH)                                  
      COMMON/ATOMS/ALPH(MA),CHARGE(MA),COORD(3,MA),NBTYPE(MA)           
      COMMON/VWAAL/RAD(MA),NUMRE(MA),NUNIT(MA)                          
C                                                                       
      REAL*8 F(MTR6)                                                    
      CHARACTER*3 ALPH,AMH1,AMH2                                        
C                                                                       
      DATA EPSI/0.0D0/                                                  
C                                                                       
C--------                                                               
C                                                                       
      IF (NBTYPE(I)   .EQ.12) THEN                                      
        RETURN                                                          
      END IF                                                            
C                                                                       
      IF (NBTYPE(J)   .EQ.12) THEN                                      
        RETURN                                                          
      END IF                                                            
C                                                                       
      DX=X1-X2                                                          
      DY=Y1-Y2                                                          
      DZ=Z1-Z2                                                          
      DSQ=DX*DX+DY*DY+DZ*DZ                                             
      CIJ=RVW-DSQ                                                       
      CIJW=CIJ*WVW                                                      
C                                                                       
      IF (CIJ.LE.EPSI) THEN                                             
        RETURN                                                          
      END IF                                                            
C                                                                       
      NREI=NUMRE(I)-1                                                   
      NREJ=NUMRE(J)-1                                                   
C                                                                       
      NDF=IABS(NREI-NREJ)                                               
      IF (NDF.GT.NVAN) THEN                                             
        RETURN                                                          
      END IF                                                            
C                                                                       
      IF (NH  .GT.0) THEN                                               
        DO 10 K=1,NH                                                    
          IF (NREI.EQ.   NUMH1(K)) THEN                                 
            IF (ALPH(I).EQ. AMH1(K)) THEN                               
              IF (NREJ.EQ.   NUMH2(K)) THEN                             
                IF (ALPH(J).EQ. AMH2(K)) THEN                           
                  RETURN                                                
                END IF                                                  
              END IF                                                    
            END IF                                                      
          END IF                                                        
C                                                                       
          IF (NREJ.EQ.   NUMH1(K)) THEN                                 
            IF (ALPH(J).EQ. AMH1(K)) THEN                               
              IF (NREI.EQ.   NUMH2(K)) THEN                             
                IF (ALPH(I).EQ. AMH2(K)) THEN                           
                  RETURN                                                
                END IF                                                  
              END IF                                                    
            END IF                                                      
          END IF                                                        
C                                                                       
  10    CONTINUE                                                        
      END IF                                                            
C                                                                       
      XC=Y1*Z2-Z1*Y2                                                    
      YC=Z1*X2-X1*Z2                                                    
      ZC=X1*Y2-Y1*X2                                                    
C                                                                       
      EB=EB+CIJ*CIJW                                                    
C                                                                       
      F1=CIJW*XC                                                        
      F3=CIJW*ZC                                                        
      F5=CIJW*DY                                                        
      F2=CIJW*YC                                                        
      F4=CIJW*DX                                                        
      F6=CIJW*DZ                                                        
C                                                                       
      IF (INDI   .GT.0) THEN                                            
        INDEX=INDI                                                      
        F(INDEX)=F(INDEX)-F1                                            
        INDEX=INDEX+1                                                   
        F(INDEX)=F(INDEX)-F2                                            
        INDEX=INDEX+1                                                   
        F(INDEX)=F(INDEX)-F3                                            
        INDEX=INDEX+1                                                   
        F(INDEX)=F(INDEX)-F4                                            
        INDEX=INDEX+1                                                   
        F(INDEX)=F(INDEX)-F5                                            
        INDEX=INDEX+1                                                   
        F(INDEX)=F(INDEX)-F6                                            
      END IF                                                            
C                                                                       
      IF (INDJ   .GT.0) THEN                                            
        INDEX=INDJ                                                      
        F(INDEX)=F(INDEX)+F1                                            
        INDEX=INDEX+1                                                   
        F(INDEX)=F(INDEX)+F2                                            
        INDEX=INDEX+1                                                   
        F(INDEX)=F(INDEX)+F3                                            
        INDEX=INDEX+1                                                   
        F(INDEX)=F(INDEX)+F4                                            
        INDEX=INDEX+1                                                   
        F(INDEX)=F(INDEX)+F5                                            
        INDEX=INDEX+1                                                   
        F(INDEX)=F(INDEX)+F6                                            
      END IF                                                            
C                                                                       
C--------                                                               
C                                                                       
      RETURN                                                            
      END                                                               
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C                                                                       
      SUBROUTINE CELL(NAT,DCUT,NXMAX,NYMAX,NZMAX,NXY,NCE,ICELL)         
C                                                                       
C--------                                                               
C                                                                       
      IMPLICIT REAL*8 (A-H,O-Z)                                         
C                                                                       
      PARAMETER (MA=2000)                                               
C                                                                       
      COMMON/ATOMS/ALPH(MA),CHARGE(MA),COORD(3,MA),NBTYPE(MA)           
C                                                                       
      INTEGER ICELL(MA)                                                 
      CHARACTER*3 ALPH                                                  
C                                                                       
C--------                                                               
C                                                                       
      CUTIN=1.D0/DCUT                                                   
C                                                                       
      XMIN=COORD(1,1)                                                   
      YMIN=COORD(2,1)                                                   
      ZMIN=COORD(3,1)                                                   
C                                                                       
      XMAX=COORD(1,1)                                                   
      YMAX=COORD(2,1)                                                   
      ZMAX=COORD(3,1)                                                   
C                                                                       
      DO 10 I=2,NAT                                                     
        X=COORD(1,I)                                                    
        Y=COORD(2,I)                                                    
        Z=COORD(3,I)                                                    
C                                                                       
        IF (X.LT.XMIN) THEN                                             
          XMIN=X                                                        
        ELSE                                                            
          IF (X.GT.XMAX) THEN                                           
            XMAX=X                                                      
          END IF                                                        
        END IF                                                          
C                                                                       
        IF (Y.LT.YMIN) THEN                                             
          YMIN=Y                                                        
        ELSE                                                            
          IF (Y.GT.YMAX) THEN                                           
            YMAX=Y                                                      
          END IF                                                        
        END IF                                                          
C                                                                       
        IF (Z.LT.ZMIN) THEN                                             
          ZMIN=Z                                                        
        ELSE                                                            
          IF (Z.GT.ZMAX) THEN                                           
            ZMAX=Z                                                      
          END IF                                                        
        END IF                                                          
C                                                                       
  10  CONTINUE                                                          
C                                                                       
      NXMAX=INT((XMAX-XMIN)*CUTIN)+1                                    
      NYMAX=INT((YMAX-YMIN)*CUTIN)+1                                    
      NZMAX=INT((ZMAX-ZMIN)*CUTIN)+1                                    
      NXY=NXMAX*NYMAX                                                   
      NCE=NXY*NZMAX                                                     
C                                                                       
      DO 20 I=1,NAT                                                     
        NX=INT((COORD(1,I)-XMIN)*CUTIN)+1                               
        NY=INT((COORD(2,I)-YMIN)*CUTIN)                                 
        NZ=INT((COORD(3,I)-ZMIN)*CUTIN)                                 
        ICELL(I)=NZ*NXY+NY*NXMAX+NX                                     
  20  CONTINUE                                                          
C                                                                       
C--------                                                               
C                                                                       
      RETURN                                                            
      END                                                               
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C                                                                       
      SUBROUTINE QSORT(NAT,NCE,ICELL,NBPERM,IPCE)                       
C                                                                       
      IMPLICIT REAL*8 (A-H,O-Z)                                         
C                                                                       
      PARAMETER (MA=2000)                                               
C                                                                       
      INTEGER ICELL(MA),NBPERM(MA),IPCE(MA)                             
      INTEGER ILST(100),IRST(100)                                       
C                                                                       
C NAT: NUMBER OF ATOMS, NCE: NUMBER OF CELLS                            
C ICELL(I): CELL NUMBER OF ATOM I                                       
C NBPERM(INDEX): IF INDEX=IPCE(IC),IPCE(IC+1)-1                         
C                THEN NBPERM(INDEX) IN CELL WITH NUMBER IC              
C                                                                       
C ILST AND IRST ARE LEFT AND RIGHT INDICES OF A PARTITION WHICH         
C STILL HAS TO BE TREATED.                                              
C                                                                       
C  INITILIAZE STACK                                                     
      IST=1                                                             
      ILST(1)=1                                                         
      IRST(1)=NAT                                                       
C                                                                       
C LOOP OVER ALL PARTITIONS CREATED  UNTIL IST=0                         
C TAKE HIHGEST PARTITION FROM STACK                                     
 10   ILEFT=ILST(IST)                                                   
      IRIGHT=IRST(IST)                                                  
      IST=IST-1                                                         
C                                                                       
C  PARTITION THE RANGE FROM ILEFT TO IRIGHT IN A LEFT PART WITH         
C  ALL ELEMENTS LESS THAN A NX AND A RIGHT PART WITH ALL ELEMENTS       
C GREATER THAN NX. NX IS CHOSEN AS A MEDIUM ELEMENT                     
C                                                                       
 20   I=ILEFT                                                           
      J=IRIGHT                                                          
      INM=(ILEFT+IRIGHT)/2                                              
      NX=ICELL(NBPERM(INM))                                             
C                                                                       
C LOOK FOR THE FIRST ELEMENT FROM THE LEFT WHICH IS GREATER OR EQUAL NX 
C                                                                       
  25  DO 30 NL=1,NAT                                                    
      IF(ICELL(NBPERM(I)).GE.NX)GOTO 40                                 
      I=I+1                                                             
  30  CONTINUE                                                          
C                                                                       
C LOOK FOR THE FIRST ELEMENT FROM THE RIGHT WHICH IS SMALLER OR EQUAL NX
C                                                                       
  40  DO 45 NL=1,NAT                                                    
      IF(NX.GE.ICELL(NBPERM(J)))GOTO 50                                 
      J=J-1                                                             
  45  CONTINUE                                                          
C                                                                       
C                                                                       
C EXCHANGE ELEMENTS AT POSITION I AND J                                 
C                                                                       
  50  IF(I.LE.J) THEN                                                   
        IMP=NBPERM(I)                                                   
        NBPERM(I)=NBPERM(J)                                             
        NBPERM(J)=IMP                                                   
        I=I+1                                                           
        J=J-1                                                           
      ENDIF                                                             
C                                                                       
C                                                                       
      IF(I.LE.J) GOTO 25                                                
C                                                                       
C                                                                       
      LEL=J-ILEFT                                                       
      LER=IRIGHT-I                                                      
      IF(LEL.LT.LER)THEN                                                
           IF(I.LT.IRIGHT)THEN                                          
             IST=IST+1                                                  
             ILST(IST)=I                                                
             IRST(IST)=IRIGHT                                           
           ENDIF                                                        
        IRIGHT=J                                                        
        ELSE                                                            
            IF(ILEFT.LT.J)THEN                                          
               IST=IST+1                                                
               ILST(IST)=ILEFT                                          
               IRST(IST)=J                                              
             ENDIF                                                      
        ILEFT=I                                                         
       ENDIF                                                            
C                                                                       
C                                                                       
      IF(ILEFT.LT.IRIGHT)GOTO 20                                        
      IF(IST.GT.0) GOTO 10                                              
C                                                                       
C                                                                       
C DEFINE IPCE                                                           
C                                                                       
       ICOLD=ICELL(NBPERM(1))                                           
       DO 100 IC=1,ICOLD                                                
 100     IPCE(IC)=1                                                     
C                                                                       
C                                                                       
         DO 110 L=2,NAT                                                 
         ICURR=ICELL(NBPERM(L))                                         
         IF(ICURR.EQ.ICOLD)GOTO 110                                     
           DO 120 IC=ICOLD+1,ICURR                                      
 120         IPCE(IC)=L                                                 
           ICOLD=ICURR                                                  
 110     CONTINUE                                                       
        DO 130 IC=ICOLD+1,NCE+1                                         
 130     IPCE(IC)=NAT+1                                                 
      RETURN                                                            
      END                                                               
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C                                                                       
      SUBROUTINE BOUND(NCE,NXMAX,NYMAX,NZMAX,NXY,NOLFT,RIGHT,BACK,FRONT)
C                                                                       
C--------                                                               
C                                                                       
      IMPLICIT REAL*8 (A-H,O-Z)                                         
C                                                                       
      PARAMETER (MA=2000)                                               
C                                                                       
      LOGICAL*4 NOLFT(MA),RIGHT(MA),BACK(MA),FRONT(MA)                  
C                                                                       
C--------                                                               
C                                                                       
      NYZ=NYMAX*NZMAX                                                   
      NXM1=NXMAX-1                                                      
      NXY1=NXY-NXMAX                                                    
C                                                                       
      DO 10 IND=1,NCE                                                   
        NOLFT(IND)=.TRUE.                                               
        RIGHT(IND)=.FALSE.                                              
        BACK(IND)=.FALSE.                                               
        FRONT(IND)=.FALSE.                                              
  10  CONTINUE                                                          
C                                                                       
      L=1                                                               
C                                                                       
      DO 20 IND=1,NYZ                                                   
        NOLFT(L)=.FALSE.                                                
        LR=L+NXM1                                                       
        RIGHT(LR)=.TRUE.                                                
        L=L+NXMAX                                                       
  20  CONTINUE                                                          
C                                                                       
      L0=0                                                              
C                                                                       
      DO 30 IND1=1,NZMAX                                                
        L=L0                                                            
        DO 40 IND2=1,NXMAX                                              
          L=L+1                                                         
          FRONT(L)=.TRUE.                                               
          LB=L+NXY1                                                     
          BACK(LB)=.TRUE.                                               
  40    CONTINUE                                                        
        L0=L0+NXY                                                       
  30  CONTINUE                                                          
C                                                                       
C--------                                                               
C                                                                       
      RETURN                                                            
      END                                                               
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
      SUBROUTINE SST(IRI,TCYS,NP)                                       
C                                                                       
C--------                                                               
C                                                                       
      IMPLICIT REAL*8 (A-H,O-Z)                                         
C                                                                       
      PARAMETER (MRES=90,MSP=10)                                        
      PARAMETER (MRES1=MRES+1)                                          
C                                                                       
      COMMON/CYS/KCYS,NCYS,NPAIR(2,MSP)                                 
      COMMON/GEN100/INUMRS,LIST(MRES),NPRE(MRES1)                       
C                                                                       
      LOGICAL*4 TCYS                                                    
C                                                                       
C--------                                                               
C                                                                       
      IF (NCYS   .GT.0) THEN                                            
        IF (LIST(IRI)     .EQ.3) THEN                                   
          DO 10  LS=1,NCYS                                              
            IF (IRI.EQ.NPAIR(1,LS)) THEN                                
              TCYS=.TRUE.                                               
              NP=NPAIR(2,LS)                                            
              RETURN                                                    
            END IF                                                      
  10      CONTINUE                                                      
C                                                                       
          DO 20 LS=1,NCYS                                               
            IF (IRI.EQ.NPAIR(2,LS)) THEN                                
              TCYS=.TRUE.                                               
              NP=NPAIR(1,LS)                                            
              RETURN                                                    
            END IF                                                      
  20      CONTINUE                                                      
C                                                                       
        END IF                                                          
      END IF                                                            
C                                                                       
C--------                                                               
C                                                                       
      RETURN                                                            
      END                                                               
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C                                                                       
      SUBROUTINE JLPSS(JSTRT,JEND,I,INDI,X1,Y1,Z1,IRI,RADI,             
     *                 NP,NBPERM,FIN,EB)                                
C                                                                       
C--------                                                               
C                                                                       
      IMPLICIT REAL*8 (A-H,O-Z)                                         
C                                                                       
      PARAMETER (MRES=90,MA=2000,MVAR=900,MPRO=10)                      
      PARAMETER (MRES1=MRES+1,MTR=MVAR+2*MPRO+1,MTR6=6*MTR)             
C                                                                       
      COMMON/VWAAL/RAD(MA),NUMRE(MA),NUNIT(MA)                          
      COMMON/NDIFF/NDIFF,NVAN,WVW                                       
      COMMON/ATOMS/ALPH(MA),CHARGE(MA),COORD(3,MA),NBTYPE(MA)           
      COMMON/GEN100/INUMRS,LIST(MRES),NPRE(MRES1)                       
C                                                                       
      REAL*8 FIN(MTR6)                                                  
      INTEGER NBPERM(MA),IHB(28)                                        
      CHARACTER*3 ALPH                                                  
C                                                                       
      DATA NTCB,NTSG/5,11/                                              
      DATA IHB/0,1,0,1,8*0,2*2,2*0,3*2,9*0/                             
C                                                                       
C--------                                                               
C                                                                       
      II=NBTYPE(I)                                                      
C                                                                       
      DO 10 ICJ=JSTRT,    JEND                                          
        J=NBPERM(ICJ)                                                   
        JJ=NBTYPE(J)                                                    
        IF (IHB(II)+IHB(JJ)  .NE.3) THEN                                
          IRJ=NUMRE(J)                                                  
          ND=IABS(IRI-IRJ)                                              
          IF (ND.GT.1) THEN                                             
            IF (ND.LE.NVAN) THEN                                        
              IF (IRJ.EQ.NP) THEN                                       
                NPREI=NPRE(IRI)                                         
                NI1=NPREI+NTCB                                          
                NI2=NPREI+NTSG                                          
                NPREJ=NPRE(IRJ)                                         
                NJ1=NPREI+NTCB                                          
                NJ2=NPREI+NTSG                                          
                IS=(I-NI1)*(I-NI2)                                      
                JS=(J-NJ1)*(J-NJ2)                                      
                IF (IS .NE.0) THEN                                      
                  ITRJ=NUNIT(J)                                         
                  INDJ=6*ITRJ-5                                         
                  X2=COORD(1,J)                                         
                  Y2=COORD(2,J)                                         
                  Z2=COORD(3,J)                                         
                  RVW=RAD(J)+RADI                                       
                  RVW=RVW*RVW                                           
C                                                                       
                  CALL  CALVW(I,J,X1,Y1,Z1,X2,Y2,Z2,RVW,INDI,           
     *                        INDJ,FIN,EB)                              
C                                                                       
                ELSE                                                    
                  IF (JS .NE.0) THEN                                    
                    ITRJ=NUNIT(J)                                       
                    INDJ=6*ITRJ-5                                       
                    X2=COORD(1,J)                                       
                    Y2=COORD(2,J)                                       
                    Z2=COORD(3,J)                                       
                    RVW=RAD(J)+RADI                                     
                    RVW=RVW*RVW                                         
C                                                                       
                    CALL  CALVW(I,J,X1,Y1,Z1,X2,Y2,Z2,RVW,INDI,         
     *                          INDJ,FIN,EB)                            
C                                                                       
                  END IF                                                
                END IF                                                  
              END IF                                                    
            END IF                                                      
          END IF                                                        
        END IF                                                          
  10  CONTINUE                                                          
C                                                                       
C--------                                                               
C                                                                       
      RETURN                                                            
      END                                                               
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C                                                                       
      SUBROUTINE JLP(JSTRT,JEND,I,INDI,X1,Y1,Z1,IRI,RADI,NBPERM,FIN,EB) 
C                                                                       
C--------                                                               
C                                                                       
      IMPLICIT REAL*8 (A-H,O-Z)                                         
C                                                                       
      PARAMETER (MA=2000,MVAR=900,MPRO=10)                              
      PARAMETER (MTR=MVAR+2*MPRO+1,MTR6=6*MTR)                          
C                                                                       
      COMMON/VWAAL/RAD(MA),NUMRE(MA),NUNIT(MA)                          
      COMMON/NDIFF/NDIFF,NVAN,WVW                                       
      COMMON/ATOMS/ALPH(MA),CHARGE(MA),COORD(3,MA),NBTYPE(MA)           
C                                                                       
      REAL*8 FIN(MTR6)                                                  
      INTEGER NBPERM(MA),IHB(28)                                        
      CHARACTER*3 ALPH                                                  
C                                                                       
      DATA IHB/0,1,0,1,8*0,2*2,2*0,3*2,9*0/                             
C                                                                       
C--------                                                               
C                                                                       
      II=NBTYPE(I)                                                      
C                                                                       
      DO 10 ICJ=JSTRT,    JEND                                          
        J=NBPERM(ICJ)                                                   
        JJ=NBTYPE(J)                                                    
        IF (IHB(II)+IHB(JJ)   .NE.3) THEN                               
          ND=IABS(IRI-NUMRE(J))                                         
          IF (ND.GT.1) THEN                                             
            IF (ND.LE.NVAN) THEN                                        
              ITRJ=NUNIT(J)                                             
              INDJ=6*ITRJ-5                                             
              X2=COORD(1,J)                                             
              Y2=COORD(2,J)                                             
              Z2=COORD(3,J)                                             
              RVW=RAD(J)+RADI                                           
              RVW=RVW*RVW                                               
C                                                                       
              CALL  CALVW(I,J,X1,Y1,Z1,X2,Y2,Z2,RVW,INDI,INDJ,FIN,EB)   
C                                                                       
            END IF                                                      
          END IF                                                        
        END IF                                                          
  10  CONTINUE                                                          
C                                                                       
C--------                                                               
C                                                                       
      RETURN                                                            
      END                                                               
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C                                                                       
      SUBROUTINE GRDJ(EB,GRDVAR)                                        
C                                                                       
C--------                                                               
C                                                                       
      IMPLICIT REAL*8 (A-H,O-Z)                                         
C                                                                       
      PARAMETER (MVAR=900,MPRO=10,MJC=100)                              
      PARAMETER (MTR=MVAR+2*MPRO+1)                                     
C                                                                       
      COMMON/JCON1/JRAN,NOJ,NORESJ(MJC),NJ(MJC)                         
      COMMON/JCON2/ANGJLO(MJC),ANGJUP(MJC),CENTJ(MVAR),HLJ(MVAR),       
     *             VJ(MVAR),WJ                                          
      COMMON/DHANGL/VAR(MVAR),VART(MTR)                                 
C                                                                       
      REAL*8 GRDVAR(MVAR)                                               
C                                                                       
      PI=3.141592653589793D0                                            
      PI2=2*PI                                                          
C                                                                       
C--------                                                               
C                                                                       
      DO 10 I=1,NOJ                                                     
        DVC=VAR(NJ(I))-CENTJ(NJ(I))                                     
        DVC=DMOD(DVC,PI2)                                               
C                                                                       
        IF (DVC.LT.0.0) THEN                                            
          DVC=DVC+PI2                                                   
        END IF                                                          
C                                                                       
        VJ(NJ(I))=DVC                                                   
  10  CONTINUE                                                          
C                                                                       
      DO 20 I=1,NOJ                                                     
        NJI=NJ(I)                                                       
        DV=VJ(NJI)                                                      
        DVN=(DV-PI)/(PI-HLJ(NJI))                                       
C                                                                       
        IF (DABS(DVN).LT.1.0) THEN                                      
          DVN2=DVN*DVN                                                  
          EB=EB+WJ*(DVN2*DVN2-2*DVN2+1)/4                               
          GRDVAR(NJI)=GRDVAR(NJI)+WJ*(DVN2*DVN-DVN)                     
        END IF                                                          
C                                                                       
  20  CONTINUE                                                          
C                                                                       
C--------                                                               
C                                                                       
      RETURN                                                            
      END                                                               
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C                                                                       
      SUBROUTINE GRDW(EB,GRDVAR)                                        
C                                                                       
C--------                                                               
C                                                                       
      IMPLICIT REAL*8 (A-H,O-Z)                                         
C                                                                       
      PARAMETER (MVAR=900,MPRO=10,MWC=100)                              
      PARAMETER (MTR=MVAR+2*MPRO+1)                                     
C                                                                       
      COMMON/WCON1/IWRAN,NOW,NORESW(MWC),NW(MWC)                        
      COMMON/WCON2/ANGWLO(MWC),ANGWUP(MWC),CENTW(MVAR),HLW(MVAR),       
     *             VW(MVAR),WW                                          
      COMMON/DHANGL/VAR(MVAR),VART(MTR)                                 
C                                                                       
      REAL*8 GRDVAR(MVAR)                                               
C                                                                       
      PI=3.141592653589793D0                                            
      PI2=2*PI                                                          
C                                                                       
C--------                                                               
C                                                                       
      DO 10 I=1,NOW                                                     
        DVC=VAR(NW(I))-CENTW(NW(I))                                     
        DVC=DMOD(DVC,PI2)                                               
C                                                                       
        IF (DVC.LT.0.0) THEN                                            
          DVC=DVC+PI2                                                   
        END IF                                                          
C                                                                       
        VW(NW(I))=DVC                                                   
  10  CONTINUE                                                          
C                                                                       
      DO 20 I=1,NOW                                                     
        NWI=NW(I)                                                       
        DV=VW(NWI)                                                      
        DVN=(DV-PI)/(PI-HLW(NWI))                                       
C                                                                       
        IF (DABS(DVN).LT.1.0) THEN                                      
          DVN2=DVN*DVN                                                  
          EB=EB+WW*(DVN2*DVN2-2*DVN2+1)/4                               
          GRDVAR(NWI)=GRDVAR(NWI)+WW*(DVN2*DVN-DVN)                     
        END IF                                                          
C                                                                       
  20  CONTINUE                                                          
C                                                                       
C--------                                                               
C                                                                       
      RETURN                                                            
      END                                                               
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
      SUBROUTINE GENER                                                  
C                                                                       
      IMPLICIT REAL*8 (A-H,O-Z)                                         
C                                                                       
C                                                                       
C THIS SUBROUTINE GENERATES THE COORDINATES OF THE BACKBONE ATOMS OF    
C THE POLYPEPTIDE, EXCEPT FOR PROLINE AND HYDROXYPROLINE RESIDUES.  IT  
C CALLS GNAMIN AND GNCARB TO GENERATE END GROUP COORDINATES, GNSIDE FOR 
C SIDECHAIN COORDINATES, AND GNPRO FOR PROLINE-TYPE RESIDUES.           
C                                                                       
      PARAMETER (MRES=90,MA=2000)                                       
      PARAMETER (MRES1=MRES+1)                                          
C                                                                       
      REAL*8 A1(9),B1(9),MATA(3,3),MATB(3,3),MATC(9)                    
      REAL*8 ROT(9)                                                     
      REAL*8 IDENT(9)                                                   
      COMMON/ATOMS/ALPH(MA),CHARGE(MA),COORD(3,MA),NBTYPE(MA)           
      COMMON/BONDS/ANGLES(10,MRES),UTOR(10,MRES),NDXARR(10,MRES),       
     1             NV(MRES)                                             
      COMMON/CHECK/KNDRES(26),KNDEND(20)                                
      COMMON/GEN100/INUMRS,LIST(MRES),NPRE(MRES1)                       
      COMMON/GEN001/XOORD(3,26,26),SNTH2(26),CSTH2(26),SDEL(26),        
     1   CDEL(26)                                                       
      COMMON/GEN002/CHIANG(3,7,26),NATOMS(26),NCHI(26),NDPT1(7,26),     
     1  NDPT2(7,26),NUM(7,26)                                           
      COMMON/GEN003/SIGN,N,NT,IFEVEN                                    
      COMMON/GEN004/ENOORD(3,22,20),ECHG(22,20),EALPHA(22,20),          
     1   NDATOM(20),NBOND(20),NNDPT1(6,20),NNDPT2(6,20),NDTYPE(22,20)   
      COMMON/GEN005/IDENT                                               
      COMMON/GNROU/MATA,MATB,ROT,K                                      
      COMMON/OUNIT/JPAR,JTGT,JVIO,JANG,JCO                              
      COMMON/PRINT/IPRNT                                                
      DIMENSION TEMP(3)                                                 
      CHARACTER*3 ALPH,EALPHA                                           
      EQUIVALENCE (A1(1),MATA(1,1)),(B1(1),MATB(1,1))                   
      DATA PI/ 3.141592653589793D0 /                                    
      DATA ERROR / .0000001D0 /                                         
C                                                                       
C IFEVEN MUST BE RESET EVERY TIME A MOLECULE IS GENERATED.              
C                                                                       
      IFEVEN = 1                                                        
      CALL GNAMIN                                                       
      LASTFL = INUMRS - 1                                               
      DO 110 I=1,9                                                      
      A1(I) = IDENT(I)                                                  
  110 CONTINUE                                                          
      DO 380 N=2,LASTFL                                                 
      IF (N.EQ.LASTFL) GO TO 120                                        
      SNTH1 = FLOAT(IFEVEN)*0.857167                                    
      CSTH1 = 0.515038                                                  
      LNEXT=LIST(N+1)                                                   
      LNEXT=IABS(LNEXT)                                                 
      KNEXT=KNDRES(LNEXT)                                               
      KNEXT = IABS(KNEXT)                                               
      IF (KNEXT.NE.13.AND.KNEXT.NE.22) GO TO 120                        
      IF (COS(ANGLES(3,N)).LE.0.0) GO TO 120                            
      SNTH1 = FLOAT(IFEVEN)*0.809017                                    
      CSTH1 = 0.587785                                                  
      IF (IPRNT.EQ.1) WRITE(JPAR,400) N                                 
  120 LISTN = LIST(N)                                                   
      NT = IABS(LISTN)                                                  
      KINDN = KNDRES(NT)                                                
      KINDN = IABS(KINDN)                                               
C                                                                       
C SIGN INDICATES WHETHER THE D OR L CONFIGURATION IS REQUESTED.         
C L IS POSITIVE; D IS NEGATIVE                                          
C                                                                       
      SIGN = 1.0                                                        
      IF (NT .NE. LISTN) SIGN = -1.0                                    
C                                                                       
C PHI, PSI, AND OMEGA ARE THE FIRST THREE ANGLES IN THE LIST FOR        
C EACH RESIDUE.  THE REMAINING 7 ANGLES ARE POSSIBLE CHI'S.             
C                                                                       
      PHI = ANGLES(1,N) - PI                                            
      PSI = ANGLES(2,N) - PI                                            
      OMEGA = ANGLES(3,N) - PI                                          
C                                                                       
C PROLINE RESIDUES WILL BE HANDLED IN A SPECIAL SUBROUTINE              
C                                                                       
      IF (KINDN.NE.13.AND.KINDN.NE.22) GO TO 140                        
      CALL GNPRO                                                        
      IF (KINDN.EQ.13) GO TO 250                                        
      DO 130 L=1,9                                                      
      ROT(L)=A1(L)                                                      
  130 CONTINUE                                                          
      GO TO 240                                                         
C                                                                       
C IF RESIDUE IS ISOLEUCINE, CHI2 AND CHI3 NOT  EXCHANGED                
C MOD W.B.                                                              
  140 CONTINUE                                                          
C 140  IF (KINDN.NE.8) GO TO 150                                        
C      T = ANGLES(5,N)                                                  
C      ANGLES(5,N) = ANGLES(6,N)                                        
C      ANGLES(6,N) = T                                                  
C 150  CONTINUE                                                         
C IF THIS IS THE SECOND RESIDUE IN THE LIST (THE FIRST RESIDUE BEING AN 
C END GROUP), DO NOT ATTACH THE H AND C-ALPHA TO THE INITIAL N. THESE   
C ATOMS WERE ATTACHED WITH THE END GROUP.                               
C                                                                       
      IF (N.EQ.2) GO TO 170                                             
C                                                                       
C ATTACH THE H AND C-ALPHA TO N.                                        
C                                                                       
      DO 160 J=2,3                                                      
      CALL TRANSF(MATA,J,1)                                             
  160 CONTINUE                                                          
C                                                                       
  170 IF (DABS(PHI) .GT. ERROR) GO TO 190                               
      DO 180 L=1,9                                                      
      B1(L) = A1(L)                                                     
  180 CONTINUE                                                          
      GO TO 210                                                         
C                                                                       
C IF PHI DOES NOT EQUAL ZERO, MODIFY THE ROTATION MATRIX.               
C                                                                       
  190 CSANG=DCOS(PHI)                                                   
      SNANG = DSIN(PHI)                                                 
      DO 200 J=1,3                                                      
      MATB(J,1) = MATA(J,1)                                             
      MATB(J,2) = MATA(J,2)*CSANG + MATA(J,3)*SNANG                     
  200 MATB(J,3) = - MATA(J,2)*SNANG + MATA(J,3)*CSANG                   
C                                                                       
C ATTACH THE H, C-BETA, AND C' TO C-ALPHA.                              
C                                                                       
  210 DO 220 J=4,6                                                      
      CALL TRANSF(MATB,J,3)                                             
  220 CONTINUE                                                          
C                                                                       
      IF (KINDN.EQ.6) THEN                                              
        CALL TRANSF(MATB,7,3)                                           
      END IF                                                            
C                                                                       
C THE FOLLOWING SECTION WILL ATTACH THE SIDECHAIN COORDINATES TO C-BETA.
C                                                                       
      IF (KINDN.EQ.6) THEN                                              
        K=9                                                             
      ELSE                                                              
        K=8                                                             
      END IF                                                            
C                                                                       
      NX = NCHI(NT)                                                     
C                                                                       
C IF THERE ARE NO SIDECHAIN ROTATIONS (IF THE RESIDUE IS PROLINE OR     
C GLYCINE), THE NEXT SECTION IS BYPASSED.                               
C                                                                       
      IF (NX.EQ.0) GO TO 250                                            
      DO 230 L=1,9                                                      
      ROT(L) = B1(L)                                                    
  230 CONTINUE                                                          
  240 CALL GNSIDE                                                       
C                                                                       
C IF IFEVEN EQUALS 1, THEN THE SIGNS OF SNTH2 AND SDEL (AS STORED FOR   
C THE RESIDUE) MUST BE REVERSED.                                        
C                                                                       
  250 SNT = -FLOAT(IFEVEN)*SNTH2(NT)                                    
      SDELTA = -FLOAT(IFEVEN)*SDEL(NT)                                  
      CST = CSTH2(NT)                                                   
      CDELTA = CDEL(NT)                                                 
      IF(DABS(PSI).GT.ERROR) GO TO 270                                  
      DO 260 L=1,9                                                      
      A1(L) = B1(L)                                                     
  260 CONTINUE                                                          
      GO TO 280                                                         
C                                                                       
C IF PSI .NE.0.0, CALCULATE THE ROTATION MATRIX.                        
C                                                                       
  270 CALL MATRIX(CST,SNT,PSI,MATC)                                     
C                                                                       
C MULTIPLY THIS BY THE PREVIOUS BACKBONE ROTATIONS.                     
C                                                                       
      CALL DMM(MATB,MATC,MATA)                                          
C                                                                       
C IF THIS IS THE LAST RESIDUE, THEN SKIP THE OMEGA ROTATIONS. PUT THE   
C CARBOXYL END GROUP ON.                                                
C                                                                       
  280 IF (N.NE.LASTFL) GO TO 300                                        
C                                                                       
      DO 290 L=1,9                                                      
      B1(L) = A1(L)                                                     
  290 CONTINUE                                                          
      CSANG = CST                                                       
      SNANG = SNT                                                       
      GO TO 360                                                         
C                                                                       
C ATTACH THE O TO THE C'.                                               
C                                                                       
  300 CONTINUE                                                          
C                                                                       
      IF (KINDN.EQ.6) THEN                                              
        CALL TRANSF(MATA,8,7)                                           
      ELSE                                                              
        CALL TRANSF(MATA,7,6)                                           
      END IF                                                            
C                                                                       
C POSITION THE N FOR THE NEXT RESIDUE.                                  
C                                                                       
      IF (KINDN.EQ.6) THEN                                              
        CALL TRANSF(MATA,K,7)                                           
      ELSE                                                              
        CALL TRANSF(MATA,K,6)                                           
      END IF                                                            
C                                                                       
      IF (KNEXT.NE.13.AND.KNEXT.NE.22) GO TO 320                        
      NA = NPRE(N+1) + 1                                                
C                                                                       
      IF (KINDN.EQ.6) THEN                                              
        NB = NPRE(N) + 7                                                
      ELSE                                                              
        NB = NPRE(N) + 6                                                
      END IF                                                            
C                                                                       
C THIS SECTION LENGTHENS THE AMIDE BOND TO 1.36 ANGSTROMS WHEN THE      
C NEXT RESIDUE IS A PROLINE-TYPE.                                       
C                                                                       
      RAB = DST(COORD(1,NA),COORD(1,NB))                                
C                                                                       
      RAN = .035                                                        
      DO 305 I=1,3                                                      
      TEMP(I) = COORD(I,NA) + RAN*(COORD(I,NA)-COORD(I,NB))/RAB         
  305 CONTINUE                                                          
      DO 310 J = 1,3                                                    
      COORD(J,NA) = TEMP(J)                                             
  310 CONTINUE                                                          
  320 IF(DABS(OMEGA).GT.ERROR) GO TO 340                                
      DO 330 L=1,9                                                      
      B1(L) = A1(L)                                                     
  330 CONTINUE                                                          
      GO TO 350                                                         
C                                                                       
C IF OMEGA IS NOT EQUAL TO ZERO, CALCULATE THE ROTATION MATRIX.         
C                                                                       
  340 CALL MATRIX(CDELTA,SDELTA,OMEGA,MATC)                             
C                                                                       
C MULTIPLY BY THE PREVIOUS TRANSFORMATION MATRIX.                       
C                                                                       
      CALL DMM(MATA,MATC,MATB)                                          
C                                                                       
C CSANG IS THE COSINE OF DELTA (DIFFERENCE BETWEEN THETA 2 AND THETA 3) 
C PLUS THETA 1.                                                         
C                                                                       
  350 CSANG=CDELTA*CSTH1-SDELTA*SNTH1                                   
      SNANG = SDELTA*CSTH1 + CDELTA*SNTH1                               
C                                                                       
C MULTIPLY IFEVEN AND SNTH1 BY -1 SO THAT THE COORDINATES OF THE NEXT   
C RESIDUE WILL BE FLIPPED ABOUT THE X-AXIS AND THE EXTENDED             
C CONFORMATION WILL RESULT.                                             
C                                                                       
      IFEVEN = - IFEVEN                                                 
      SNTH1 = - SNTH1                                                   
C                                                                       
C ADJUST THE MATRIX TO LINE UP THE COORDINATES OF THE NEXT RESIDUE IN   
C THE ORIGINAL COORDINATE SYSTEM.                                       
C                                                                       
  360 DO 370 J=1,3                                                      
      MATA(J,1) = MATB(J,1)*CSANG + MATB(J,2)*SNANG                     
      MATA(J,2) = - MATB(J,1)*SNANG + MATB(J,2)*CSANG                   
      MATA(J,3) = MATB(J,3)                                             
  370 CONTINUE                                                          
C      IF(KINDN.NE.8) GO TO 380                                         
C      T = ANGLES(5,N)                                                  
C      ANGLES(5,N) = ANGLES(6,N)                                        
C      ANGLES(6,N) = T                                                  
  380 CONTINUE                                                          
C                                                                       
C ATTACH THE CARBOXYL END GROUP.                                        
C                                                                       
      CALL GNCARB                                                       
C                                                                       
C GENERATION IS COMPLETE.                                               
C                                                                       
      RETURN                                                            
  400 FORMAT (//9H RESIDUE ,I3,46H  HAS CIS OMEGA AND NEXT RESIDUE IS A 
     1PROLINE./66H PROLINE IS ATTACHED SO C-N-CA=126 DEGREES AND C-N-CD=
     2121 DEGREES.)                                                     
      END                                                               
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
      SUBROUTINE GNAMIN                                                 
C                                                                       
      IMPLICIT REAL*8 (A-H,O-Z)                                         
C                                                                       
C                                                                       
C THIS SUBROUTINE GENERATES THE COORDINATES OF THE AMINO END GROUP.     
C                                                                       
      PARAMETER (MRES=90,MA=2000)                                       
      PARAMETER (MRES1=MRES+1)                                          
C                                                                       
      REAL*8 A1(9),B1(9),MATA(3,3),MATB(3,3)                            
      REAL*8 CIS(3)                                                     
      REAL*8 A5(3,3),ROT(9)                                             
      COMMON/ATOMS/ALPH(MA),CHARGE(MA),COORD(3,MA),NBTYPE(MA)           
      COMMON/BONDS/ANGLES(10,MRES),UTOR(10,MRES),NDXARR(10,MRES),       
     1             NV(MRES)                                             
      COMMON/CHECK/KNDRES(26),KNDEND(20)                                
      COMMON/GEN100/INUMRS,LIST(MRES),NPRE(MRES1)                       
      COMMON/GEN004/ENOORD(3,22,20),ECHG(22,20),EALPHA(22,20),          
     1   NDATOM(20),NBOND(20),NNDPT1(6,20),NNDPT2(6,20),NDTYPE(22,20)   
      COMMON/GNROU/MATA,MATB,ROT,K                                      
      COMMON/OUNIT/JPAR,JTGT,JVIO,JANG,JCO                              
      COMMON/PRINT/IPRNT                                                
      DIMENSION TEMP(3),TEMP2(3)                                        
      CHARACTER*3 ALPH,EALPHA                                           
      EQUIVALENCE (A1(1),MATA(1,1)),(B1(1),MATB(1,1))                   
      DATA PI/ 3.141592653589793D0 /                                    
      DATA ERROR / .0000001D0 /                                         
      DATA A5/ .99619D0,-.08716D0,.0D0,.08716D0,.99619D0,.0D0,.0D0,.0D0,
     1 1.0D0/                                                           
C                                                                       
      LAMIN = LIST(1)                                                   
      KAMIN = KNDEND(LAMIN)                                             
      KAMIN = IABS(KAMIN)                                               
      LNEXT = LIST(2)                                                   
      LNEXT = IABS(LNEXT)                                               
      KNEXT = KNDRES(LNEXT)                                             
      KNEXT = IABS(KNEXT)                                               
      NATOM=NDATOM(LAMIN)                                               
      NX = NBOND(LAMIN)                                                 
C                                                                       
C STORE THE COORDINATES FOR THE AMINO END GROUP.                        
C                                                                       
      DO 110 M = 1,NATOM                                                
      DO 110 MM = 1,3                                                   
      COORD(MM,M)=ENOORD(MM,M,LAMIN)                                    
  110 CONTINUE                                                          
C                                                                       
C THIS SECTION IS FOR A PROLINE-TYPE FIRST FULL RESIDUE.  FOR ALL END   
C GROUPS EXCEPT THE NULL END GROUP 1) LENGTHEN THE C'-N BOND TO 1.36    
C ANGSTROMS AND 2) IN THE CASE OF CIS-PROLINE ROTATE THE END GROUP      
C 5 DEGREES IN THE X,Y PLANE.                                           
C                                                                       
      IF (KNEXT.NE.13.AND.KNEXT.NE.22.OR.KAMIN.EQ.10) GO TO 140         
      NA = NPRE(2)                                                      
      NB = NPRE(2) + 1                                                  
C                                                                       
      RAN = .035                                                        
      RAB = DST(COORD(1,NA),COORD(1,NB))                                
C                                                                       
      DO 115 I=1,3                                                      
      TEMP(I) = COORD(I,NA) + RAN*(COORD(I,NA)-COORD(I,NB))/RAB         
  115 CONTINUE                                                          
C                                                                       
      DO 120 I=1,3                                                      
      TEMP2(I)=TEMP(I)-COORD(I,NA)                                      
  120 CONTINUE                                                          
      DO 125 I=1,3                                                      
      COORD(I,NA) = TEMP(I)                                             
  125 CONTINUE                                                          
      NN = NATOM-4                                                      
      DO 130 J=1,NN                                                     
      DO 130 I=1,3                                                      
      COORD(I,J) = TEMP2(I) + COORD(I,J)                                
  130 CONTINUE                                                          
C                                                                       
      IF (COS(ANGLES(NX,1)).LE.0.0) GO TO 140                           
      N3 = NATOM - 3                                                    
      DO 134 M=1,N3                                                     
      DO 132 JJ=1,3                                                     
      TEMP(JJ)=0.0                                                      
      DO 132 L=1,3                                                      
      TEMP(JJ)=TEMP(JJ)+A5(JJ,L)*COORD(L,M)                             
  132 CONTINUE                                                          
      DO 134 JJ=1,3                                                     
      COORD(JJ,M)=TEMP(JJ)                                              
  134 CONTINUE                                                          
      IF (IPRNT.EQ.1) WRITE (JPAR,240)                                  
  140 CONTINUE                                                          
C                                                                       
C IF THERE ARE NO ROTATABLE BONDS IN THE END GROUP, RETURN.             
C                                                                       
      IF (NX.EQ.0) RETURN                                               
C                                                                       
C THE REMAINDER OF THE SUBROUTINE PERFORMS ANY SPECIFIED ROTATIONS.     
C                                                                       
      ME=0                                                              
      DO 210 IBOND=1,NX                                                 
      ANG = -ANGLES(IBOND,1) - PI                                       
      IF(DABS(ANG).LE.ERROR) GO TO 210                                  
      ML=1                                                              
      MM=NNDPT2(IBOND,LAMIN)                                            
      IF (MM .EQ. ME) ML = MB + 1                                       
      ME = MM                                                           
      MB=NNDPT1(IBOND,LAMIN)                                            
C                                                                       
C THIS SECTION CALCULATES THE DIRECTION COSINES OF THE BOND.            
C                                                                       
      D = 0.0                                                           
      DO 150 L = 1,3                                                    
      CIS(L) = COORD(L,ME) - COORD(L,MB)                                
      D = D + CIS(L)*CIS(L)                                             
  150 CONTINUE                                                          
      D = 1.0/SQRT(D)                                                   
      DO 160 L = 1,3                                                    
      CIS(L) = CIS(L)*D                                                 
  160 CONTINUE                                                          
C                                                                       
      CALL ROTSET(CIS,ANG,A1)                                           
      MN = MB - 1                                                       
      DO 200 J=ML,MN                                                    
      DO 170 JJ=1,3                                                     
      COORD(JJ,J)=COORD(JJ,J)-COORD(JJ,MB)                              
  170 CONTINUE                                                          
      DO 180 JJ=1,3                                                     
      TEMP(JJ)=MATA(JJ,1)*COORD(1,J)+MATA(JJ,2)*COORD(2,J)+             
     1 MATA(JJ,3)*COORD(3,J)                                            
  180 CONTINUE                                                          
      DO 190 JJ=1,3                                                     
      COORD(JJ,J)=TEMP(JJ)+COORD(JJ,MB)                                 
  190 CONTINUE                                                          
  200 CONTINUE                                                          
  210 CONTINUE                                                          
      RETURN                                                            
  240 FORMAT (//65H FIRST FULL RESIDUE IS CIS-PROLINE.  END GROUP MOVED 
     15 DEGREES SO/71H THAT C-N-CA=126 DEGREES AND C-N-CD=121 DEGREES IN
     2STEAD OF THE REVERSE.//)                                          
      END                                                               
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
      SUBROUTINE GNCARB                                                 
C                                                                       
      IMPLICIT REAL*8 (A-H,O-Z)                                         
C                                                                       
C                                                                       
C THIS SUBROUTINE GENERATES THE COORDINATES OF THE CARBOXYL END GROUP.  
C                                                                       
      PARAMETER (MRES=90,MA=2000)                                       
      PARAMETER (MRES1=MRES+1)                                          
C                                                                       
      REAL*8 A1(9),B1(9),MATA(3,3),MATB(3,3)                            
      REAL*8 CIS(3)                                                     
      REAL*8 ROT(9)                                                     
      COMMON/ATOMS/ALPH(MA),CHARGE(MA),COORD(3,MA),NBTYPE(MA)           
      COMMON/BONDS/ANGLES(10,MRES),UTOR(10,MRES),NDXARR(10,MRES),       
     1             NV(MRES)                                             
      COMMON/CHECK/KNDRES(26),KNDEND(20)                                
      COMMON/GEN100/INUMRS,LIST(MRES),NPRE(MRES1)                       
      COMMON/GEN003/SIGN,N,NT,IFEVEN                                    
      COMMON/GEN004/ENOORD(3,22,20),ECHG(22,20),EALPHA(22,20),          
     1   NDATOM(20),NBOND(20),NNDPT1(6,20),NNDPT2(6,20),NDTYPE(22,20)   
      COMMON/GEN007/LBG(3),LEN(3)                                       
      COMMON/GNROU/MATA,MATB,ROT,K                                      
      COMMON/OUNIT/JPAR,JTGT,JVIO,JANG,JCO                              
      DIMENSION TEMP(3)                                                 
      CHARACTER*3 ALPH,EALPHA                                           
      EQUIVALENCE (A1(1),MATA(1,1)),(B1(1),MATB(1,1))                   
      DATA ERROR/ .0001 /                                               
      DATA PI/ 3.141592653589793D0 /                                    
C                                                                       
      N=INUMRS                                                          
      NT = LIST(N)                                                      
      KCARB = KNDEND(NT)                                                
      KCARB = IABS(KCARB)                                               
      SIGN = 1.0                                                        
C                                                                       
C ATTACH THE O AND THE FIRST ATOM OF THE END GROUP TO THE C'.           
C                                                                       
      NL = 3                                                            
      IF (KCARB.EQ.20) NL = 2                                           
      DO 110 J=2,NL                                                     
      CALL TRANSF(MATA,J,1)                                             
  110 CONTINUE                                                          
      NL =  NDATOM(NT) + 1                                              
      IF (NL .LT. 4) RETURN                                             
C                                                                       
C ADD ON THE REMAINING ATOMS WITHOUT ANY BOND ROTATIONS.                
C                                                                       
      DO 120 J=4,NL                                                     
      CALL TRANSF(MATA,J,3)                                             
  120 CONTINUE                                                          
      NX=NBOND(NT)                                                      
      NATOM=NPRE(INUMRS)                                                
C                                                                       
C IF THERE ARE NO ROTATABLE BONDS IN THE END GROUP, RETURN.             
C                                                                       
      IF(NX.EQ.0)RETURN                                                 
C                                                                       
C THE REMAINDER OF THE SUBROUTINE PERFORMS ANY SPECIFIED ROTATIONS.     
C                                                                       
      DO 190 IBOND=1,NX                                                 
      IF (IBOND.NE.1) GO TO 124                                         
      ANG=ANGLES(3,INUMRS-1) - PI                                       
      IF (KCARB.NE.16) GO TO 125                                        
      ANGL=ANGLES(3,INUMRS-1)                                           
      IF (COS(ANGL).LT.(-0.0001)) GO TO 125                             
      ANGL=57.29578*ANGL                                                
      WRITE (JPAR,200) ANGL                                             
      STOP                                                              
  124 ANG=ANGLES(IBOND-1,INUMRS)-PI                                     
  125 IF (DABS(ANG).LT.ERROR) GO TO 190                                 
C                                                                       
C THE FIRST BOND IS DEFINED BY THE 6TH ATOM IN THE LAST FULL RESIDUE    
C (C') AND THE FIRST ATOM IN THE END GROUP.  ALL OTHER  BONDS ARE       
C DEFINED BY THE STORED NNDPT1 AND NNDPT2.                              
C                                                                       
      MB = NNDPT1(IBOND,NT) + NATOM - 1                                 
      IF (IBOND.EQ.1) THEN                                              
        IF (LIST(INUMRS-1).EQ.6) THEN                                   
          MB=NPRE(INUMRS-1)+7                                           
        ELSE                                                            
          MB=NPRE(INUMRS-1)+6                                           
        END IF                                                          
      END IF                                                            
      ME = NNDPT2(IBOND,NT) + NATOM - 1                                 
      IF (IBOND.EQ.1) ME=NATOM+1                                        
C                                                                       
C THIS SECTION CALCULATES THE DIRECTION COSINES OF THE BOND.            
C                                                                       
      D = 0.0                                                           
      DO 130 L = 1,3                                                    
      CIS(L) = COORD(L,ME) - COORD(L,MB)                                
      D = D + CIS(L)*CIS(L)                                             
  130 CONTINUE                                                          
      D = 1.0/SQRT(D)                                                   
      DO 140 L = 1,3                                                    
      CIS(L) = CIS(L)*D                                                 
  140 CONTINUE                                                          
C                                                                       
      CALL ROTSET(CIS,ANG,A1)                                           
C                                                                       
C SPECIAL INDICES LBG AND LEN ARE NEEDED TO DEFINE THE ATOMS AFFECTED BY
C THE BOND ROTATION IN THE CASE OF N,N-DIMETHYLAMIDE.                   
C                                                                       
      LL = ME+1                                                         
      IF (KCARB.EQ.16) LL = LBG(IBOND)+NATOM-1                          
      MN = NPRE(INUMRS+1)                                               
      IF (KCARB.EQ.16) MN = NATOM+LEN(IBOND)-1                          
      DO 180 J = LL,MN                                                  
      DO 150 JJ=1,3                                                     
      COORD(JJ,J)=COORD(JJ,J)-COORD(JJ,ME)                              
  150 CONTINUE                                                          
      DO 160 JJ=1,3                                                     
      TEMP(JJ)=MATA(JJ,1)*COORD(1,J)+MATA(JJ,2)*COORD(2,J)+             
     1 MATA(JJ,3)*COORD(3,J)                                            
  160 CONTINUE                                                          
      DO 170 JJ=1,3                                                     
      COORD(JJ,J)=TEMP(JJ)+COORD(JJ,ME)                                 
  170 CONTINUE                                                          
  180 CONTINUE                                                          
  190 CONTINUE                                                          
      RETURN                                                            
  200 FORMAT (/1X,54HFOR DIMETHYL AMIDE, THE OMEGA ANGLE MUST BE TRANS, 
     1NOT,F8.3,9H DEGREES,/1X,55HBECAUSE THE TWO METHYLS HAVE NON-EQUIVA
     2LENT GEOMETRIES.)                                                 
      END                                                               
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
      SUBROUTINE GNPRO                                                  
C                                                                       
      IMPLICIT REAL*8 (A-H,O-Z)                                         
C                                                                       
C                                                                       
C THIS SUBROUTINE GENERATES THE COORDINATES OF THE PROLINE AND          
C HYDROXYPROLINE RESIDUES, EXCEPT FOR THE CARBONYL O, AND THE HD1 OF    
C HYDROXYPROLINE.                                                       
C                                                                       
      PARAMETER (MRES=90,MA=2000)                                       
      PARAMETER (MRES1=MRES+1)                                          
C                                                                       
      REAL*8 A1(9),B1(9),MATA(3,3),MATB(3,3)                            
      REAL*8 ROT(9)                                                     
      REAL*8 PROANG(3)                                                  
      COMMON/ATOMS/ALPH(MA),CHARGE(MA),COORD(3,MA),NBTYPE(MA)           
      COMMON/BONDS/ANGLES(10,MRES),UTOR(10,MRES),NDXARR(10,MRES),       
     1             NV(MRES)                                             
      COMMON/GEN100/INUMRS,LIST(MRES),NPRE(MRES1)                       
      COMMON/GEN002/CHIANG(3,7,26),NATOMS(26),NCHI(26),NDPT1(7,26),     
     1   NDPT2(7,26),NUM(7,26)                                          
      COMMON/GEN003/SIGN,N,NT,IFEVEN                                    
      COMMON/GEN006/PROANG                                              
      COMMON/GEN008/NGEOM(26)                                           
      COMMON/GNROU/MATA,MATB,ROT,K                                      
      CHARACTER*3 ALPH                                                  
      EQUIVALENCE (A1(1),MATA(1,1)),(B1(1),MATB(1,1))                   
      DATA PI/ 3.141592653589793D0 /                                    
C                                                                       
C     PROANG(1) = 122.422*.0174532925                                   
C     PROANG(2) = 112.419*.0174532925                                   
C     PROANG(3) = 105.000*.0174532925                                   
C                                                                       
      NBT=NGEOM(NT)                                                     
      PHI=PROANG(NBT)                                                   
      ANGLES(1,N)=PHI-PI                                                
C                                                                       
C ATTACH THE C-DELTA AND C-ALPHA TO N.                                  
C                                                                       
      DO 110 J=2,3                                                      
      CALL TRANSF(MATA,J,1)                                             
  110 CONTINUE                                                          
C                                                                       
C PHI DOES NOT EQUAL ZERO, SO MODIFY THE ROTATION MATRIX.               
C                                                                       
      CSANG=DCOS(PHI)                                                   
      SNANG = DSIN(PHI)                                                 
      DO 120 J=1,3                                                      
      MATB(J,1) = MATA(J,1)                                             
      MATB(J,2) = MATA(J,2)*CSANG + MATA(J,3)*SNANG                     
      MATB(J,3) = - MATA(J,2)*SNANG + MATA(J,3)*CSANG                   
  120 CONTINUE                                                          
C                                                                       
C ATTACH THE C' TO C-ALPHA.                                             
C                                                                       
      CALL TRANSF(MATB,6,3)                                             
C                                                                       
C ATTACH THE REMAINING ATOMS TO THE NITROGEN ATOM, EXCEPT FOR THE       
C CARBONYL O, AND THE HD1 OF HYDROXYPROLINE.                            
C                                                                       
      DO 130 J=4,17                                                     
      IF (J.EQ.6.OR.J.EQ.7) GO TO 130                                   
      CALL TRANSF(MATA,J,1)                                             
  130 CONTINUE                                                          
      K=18                                                              
      RETURN                                                            
      END                                                               
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
      SUBROUTINE GNSIDE                                                 
C                                                                       
      IMPLICIT REAL*8 (A-H,O-Z)                                         
C                                                                       
C                                                                       
C THIS SUBROUTINE GENERATES THE COORDINATES OF THE SIDECHAIN ATOMS.     
C                                                                       
      PARAMETER (MRES=90,MA=2000)                                       
      PARAMETER (MRES1=MRES+1)                                          
C                                                                       
      REAL*8 A1(9),B1(9),MATA(3,3),MATB(3,3)                            
      REAL*8 ROT(9),A(9),DABS                                           
      REAL*8 CIS(3)                                                     
      COMMON/ATOMS/ALPH(MA),CHARGE(MA),COORD(3,MA),NBTYPE(MA)           
      COMMON/BONDS/ANGLES(10,MRES),UTOR(10,MRES),NDXARR(10,MRES),       
     1             NV(MRES)                                             
      COMMON/GEN100/INUMRS,LIST(MRES),NPRE(MRES1)                       
      COMMON/GEN002/CHIANG(3,7,26),NATOMS(26),NCHI(26),NDPT1(7,26),     
     1   NDPT2(7,26),NUM(7,26)                                          
      COMMON/GEN003/SIGN,N,NT,IFEVEN                                    
      COMMON/GNROU/MATA,MATB,ROT,K                                      
      CHARACTER*3 ALPH                                                  
      EQUIVALENCE (A1(1),MATA(1,1)),(B1(1),MATB(1,1))                   
      DATA PI/ 3.141592653589793D0 /                                    
      DATA ERROR / .0000001D0 /                                         
C                                                                       
      NX = NCHI(NT)                                                     
      DO 160 IBOND=1,NX                                                 
C                                                                       
C MB IS THE BEGINNING OF THE BOND, LE IS THE END, AND MN INDICATES THE  
C LAST ATOM TO BE AFFECTED BY THE BOND ROTATION.                        
C                                                                       
      MB = NDPT1(IBOND,NT)                                              
      LE = NDPT2(IBOND,NT)                                              
      MN = NUM(IBOND,NT) + K - 1                                        
      CHI = ANGLES(IBOND + 3,N) - PI                                    
C                                                                       
C IF NO CHI ROTATION IS CALLED FOR, ATTACH THE SIDECHAIN ATOMS.         
C                                                                       
      IF (DABS(CHI) .GT. ERROR) GO TO 120                               
      DO 110 L=K,MN                                                     
      CALL TRANSF(ROT,L,LE)                                             
  110 CONTINUE                                                          
      GO TO 160                                                         
C                                                                       
C STORE THE DIRECTION COSINES FOR THIS BOND IN CIS.                     
C                                                                       
  120 DO 130 I=1,3                                                      
      CIS(I)=CHIANG(I,IBOND,NT)                                         
  130 CONTINUE                                                          
C                                                                       
C IF IFEVEN IS -1, THEN THE COORDINATES AS STORED WILL BE FLIPPED 180   
C DEGREES ABOUT THE C'-N BOND WHEN THEY ARE ATTACHED.  THEREFORE THE    
C DIRECTION COSINES OF THE BOND MUST ALSO BE ADJUSTED.                  
C                                                                       
      CIS(2)=FLOAT(IFEVEN)*CIS(2)                                       
      CIS(3)=FLOAT(IFEVEN)*CIS(3)                                       
C                                                                       
C ADJUST CIS(3) TO ACCOUNT FOR THE DIRECTION COSINE CHANGES IN THE      
C SIDECHAIN WHEN GOING FROM L TO D CONFIGURATION.                       
C                                                                       
      CIS(3) = CIS(3)*SIGN                                              
C                                                                       
C CALCULATE THE MATRIX FOR ROTATING ABOUT THE BOND.                     
C                                                                       
      CALL ROTSET(CIS,CHI,A)                                            
C                                                                       
C UPDATE THE PREVIOUS ROTATION MATRIX TO INCLUDE THE LATEST ROTATION.   
C                                                                       
      CALL DMM(ROT,A,A1)                                                
C                                                                       
C CONNECT AND ROTATE THE ATOMS ATTACHED TO THIS BOND.                   
C                                                                       
      DO 140 L=K,MN                                                     
      CALL TRANSF(A1,L,LE)                                              
  140 CONTINUE                                                          
C                                                                       
C MM IS THE BEGINNING OF THE NEXT BOND. IF MM EQUALS MB, THEN A BRANCH  
C EXISTS AT THIS POINT IN THE SIDECHAIN. DO NOT UPDATE THE PREVIOUS     
C ROTATION MATRIX TO INCLUDE THE LATEST ROTATION.                       
C                                                                       
      IF(IBOND.EQ.NX) GO TO 160                                         
      MM=NDPT1(IBOND+1,NT)                                              
      IF(MM.EQ.MB) GO TO 160                                            
      DO 150 L=1,9                                                      
      ROT(L) = A1(L)                                                    
  150 CONTINUE                                                          
C                                                                       
C   UPDATE K TO INDICATE THE NEXT ATOM TO BE ATTACHED.                  
C                                                                       
  160 K = MN + 1                                                        
C                                                                       
C   THE SIDECHAIN GENERATION IS COMPLETE.                               
C                                                                       
      RETURN                                                            
      END                                                               
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
      SUBROUTINE MATRIX(CSANG,SNANG,ROTATE,MATC)                        
C                                                                       
      IMPLICIT REAL*8 (A-H,O-Z)                                         
C                                                                       
C                                                                       
C THIS SUBROUTINE IS USED IN THE GENERATION OF COORDINATES WHICH        
C DEPEND ON A PSI OR OMEGA DIHEDRAL ANGLE.  IT COMPUTES A ROTATION      
C MATRIX MATC FROM 'ROTATE' (THE VALUE OF THE DIHEDRAL ANGLE MINUS PI), 
C AND CSANG AND SNANG, THE COSINE AND SINE OF THE ANGLE BETWEEN THE     
C ROTATABLE BOND AND THE X-AXIS.                                        
C                                                                       
      REAL*8 MATC                                                       
      DIMENSION MATC(9)                                                 
      CROT=DCOS(ROTATE)                                                 
      SROT=DSIN(ROTATE)                                                 
      CS1=1.0D0-CROT                                                    
      MATC(1)=CROT+CS1*CSANG**2                                         
      MATC(2)=CS1*CSANG*SNANG                                           
      MATC(3)=-SROT*SNANG                                               
      MATC(4)=MATC(2)                                                   
      MATC(5)=CROT+CS1*SNANG**2                                         
      MATC(6)=SROT*CSANG                                                
      MATC(7)=-MATC(3)                                                  
      MATC(8)=-MATC(6)                                                  
      MATC(9)=CROT                                                      
      RETURN                                                            
      END                                                               
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
      SUBROUTINE ROTSET(CIS,CHI,A)                                      
C                                                                       
      IMPLICIT REAL*8 (A-H,O-Z)                                         
C                                                                       
C                                                                       
C THIS SUBROUTINE IS USED IN THE GENERATION OF COORDINATES WHICH DEPEND 
C ON A DIHEDRAL ANGLE IN A SIDE CHAIN OR END GROUP.  IT COMPUTES A      
C ROTATION MATRIX 'A' FROM THE DIRECTION COSINES (CIS) OF THE           
C ROTATABLE BOND, AND CHI, THE VALUE OF THE DIHEDRAL ANGLE MINUS PI.    
C                                                                       
      DIMENSION A(3,3),CIS(3)                                           
      CS = DCOS(CHI)                                                    
      SN = DSIN(CHI)                                                    
      CS1 = 1.0 - CS                                                    
      A(1,1) = CS + CS1*CIS(1)*CIS(1)                                   
      A(2,2) = CS + CS1*CIS(2)*CIS(2)                                   
      A(3,3) = CS + CS1*CIS(3)*CIS(3)                                   
      A1 = CS1*CIS(1)*CIS(2)                                            
      A2 = SN*CIS(3)                                                    
      A(1,2) = A1 - A2                                                  
      A(2,1) = A1 + A2                                                  
      A1 = CS1*CIS(1)*CIS(3)                                            
      A2 = SN*CIS(2)                                                    
      A(1,3) = A1 + A2                                                  
      A(3,1) = A1 - A2                                                  
      A1 = CS1*CIS(2)*CIS(3)                                            
      A2 = SN*CIS(1)                                                    
      A(2,3) = A1 - A2                                                  
      A(3,2) = A1 + A2                                                  
      RETURN                                                            
      END                                                               
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
      SUBROUTINE TRANSF (T,J,K)                                         
C                                                                       
      IMPLICIT REAL*8 (A-H,O-Z)                                         
C                                                                       
C                                                                       
C THIS SUBROUTINE GENERATES THE COORDINATES OF ATOM J WITH RESPECT TO TH
C AXES OF THE POLYPEPTIDE CHAIN.                                        
C                                                                       
      PARAMETER (MRES=90,MA=2000)                                       
      PARAMETER (MRES1=MRES+1)                                          
C                                                                       
      REAL*8 T(9)                                                       
      COMMON/ATOMS/ALPH(MA),CHARGE(MA),COORD(3,MA),NBTYPE(MA)           
      COMMON/GEN100/INUMRS,LIST(MRES),NPRE(MRES1)                       
      COMMON/GEN001/XOORD(2028),SNTH2(26),CSTH2(26),SDEL(26),CDEL(26)   
      COMMON/GEN002/CHIANG(3,7,26),NATOMS(26),NUMCHI(26),NDPT1(7,26),   
     1   NDPT2(7,26),NUM(7,26)                                          
      COMMON/GEN003/SIGN,N,NT,IFEVEN                                    
      COMMON/GEN004/ENOORD(3,22,20),ECHG(22,20),EALPHA(22,20),          
     1   NDATOM(20),NBOND(20),NNDPT1(6,20),NNDPT2(6,20),NDTYPE(22,20)   
      CHARACTER*3 ALPH,EALPHA                                           
C                                                                       
C L REFERS TO THE ATOM TO BE ADDED TO THE COORDINATE ARRAY.             
C M IS THE ATOM TO WHICH THE NEW ATOM IS BEING ATTACHED.                
C SINCE THE COORDINATES FOR N ARE NOT STORED, THE COUNT OF THE STORED   
C COORDINATES IS OFF BY ONE.                                            
C                                                                       
      L = NPRE(N) + J                                                   
      M = NPRE(N) + K                                                   
      KK = K - 1                                                        
C                                                                       
      IF(N.EQ.INUMRS) GO TO 130                                         
C                                                                       
C IF KK = 0, THEN THE POINT OF ATTACHMENT IS THE NITROGEN.              
C DEFINE IT AS (0,0,0).                                                 
C                                                                       
      IF (KK.GT.0) GO TO 110                                            
      XT = 0.0                                                          
      YT = 0.0                                                          
      ZT = 0.0                                                          
      GO TO 120                                                         
C                                                                       
C ELIMINATE 3 - DIMENSIONAL SUBSCRIPTS:                                 
C                                                                       
  110 KKNT = (KK - 1)*3 + (NT - 1)*78                                   
      XT = XOORD(KKNT + 1)                                              
      YT = XOORD(KKNT + 2)                                              
      ZT = XOORD(KKNT + 3)                                              
C                                                                       
C X,Y,Z GIVE THE COORDINATES OF THE ATOM TO BE ADDED IN TERMS OF THE    
C POINT OF ATTACHMENT.                                                  
C                                                                       
  120 I = J - 1                                                         
      INT = (I - 1)*3 + (NT - 1)*78                                     
      X = XOORD(INT + 1) - XT                                           
      Y = XOORD(INT + 2) - YT                                           
      Z = XOORD(INT + 3) - ZT                                           
      GO TO 160                                                         
C                                                                       
C L AND M ARE  OFF BY 2 BECAUSE OF THE WAY THE END GROUP IS STORED.     
C IF KK=0, ATTACH THE O AND FIRST ATOM OF END GROUP TO C'.              
C                                                                       
  130 L = L-2                                                           
      IF (KK.GT.0) GO TO 140                                            
      XT=0.0                                                            
      YT=0.0                                                            
      ZT=0.0                                                            
C                                                                       
      IF (LIST(N-1).EQ.6) THEN                                          
        M = NPRE(N - 1) + 7                                             
      ELSE                                                              
        M = NPRE(N - 1) + 6                                             
      END IF                                                            
C                                                                       
      GO TO 150                                                         
C                                                                       
  140 XT=ENOORD(1,KK,NT)                                                
      YT=ENOORD(2,KK,NT)                                                
      ZT=ENOORD(3,KK,NT)                                                
      M=M-2                                                             
C                                                                       
  150 I=J-1                                                             
      X=ENOORD(1,I,NT)-XT                                               
      Y=ENOORD(2,I,NT)-YT                                               
      Z=ENOORD(3,I,NT)-ZT                                               
      IF(J.NE.2) GO TO 160                                              
C                                                                       
C POSITION OF O STORED IN END GROUP TO REPLACE O IN LAST RESIDUE.       
C                                                                       
      IF (LIST(N-1).EQ.6) THEN                                          
        L = NPRE(N - 1) + 8                                             
      ELSE                                                              
        L = NPRE(N - 1) + 7                                             
      END IF                                                            
C                                                                       
C IFEVEN INDICATES WHETHER TO INVERT THE STORED COORDINATES ABOUT X.    
C SIGN INDICATES D OR L CONFIGURATION.                                  
C                                                                       
  160 Y = FLOAT(IFEVEN)*Y                                               
      Z = FLOAT(IFEVEN)*SIGN*Z                                          
C                                                                       
C ATTACH THE L TH COORD TO THE M TH COORD.                              
      COORD(1,L) = T(1)*X + T(4)*Y + T(7)*Z + COORD(1,M)                
      COORD(2,L) = T(2)*X + T(5)*Y + T(8)*Z + COORD(2,M)                
      COORD(3,L) = T(3)*X + T(6)*Y + T(9)*Z + COORD(3,M)                
C                                                                       
      RETURN                                                            
      END                                                               
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
      SUBROUTINE DMM(A,B,C)                                             
C                                                                       
      IMPLICIT REAL*8 (A-H,O-Z)                                         
C                                                                       
C                                                                       
C THIS SUBROUTINE MULTIPLIES MATRIX A BY MATRIX B, AND RETURNS THE      
C PRODUCT AS MATRIX C (ALL ARE 3X3 MATRICES).                           
C                                                                       
      REAL*8 A,B,C                                                      
      DIMENSION A(3,3),B(3,3),C(3,3)                                    
      DO 10 I = 1,3                                                     
      DO 10 J = 1,3                                                     
 10   C(I,J) = A(I,1)*B(1,J) + A(I,2)*B(2,J) + A(I,3)*B(3,J)            
      RETURN                                                            
      END                                                               
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
      FUNCTION DST(A,B)                                                 
C                                                                       
C THIS FUNCTION SUBPROGRAM COMPUTES THE DISTANCE BETWEEN TWO ATOMS,     
C REPRESENTED BY COORDINATE ARRAYS A AND B.                             
C                                                                       
      IMPLICIT REAL*8 (A-H,O-Z)                                         
C                                                                       
      DIMENSION A(3),B(3)                                               
      T = A(1) - B(1)                                                   
      X = A(2) - B(2)                                                   
      Y = A(3) - B(3)                                                   
      DST = SQRT(T*T+X*X+Y*Y)                                           
      RETURN                                                            
      END                                                               
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C                                                                       
       SUBROUTINE MINCG(FUNCT,ACC,MAXFN,FC,G,F,JC,WC,JJ,WV)             
C                                                                       
C--------                                                               
C                                                                       
      IMPLICIT REAL*8 (A-H,O-Z)                                         
C                                                                       
      PARAMETER (MRES=90,MA=2000,MVAR=900,MPRO=10,ML=100)               
      PARAMETER (MRES1=MRES+1,MTR=MVAR+2*MPRO+1,MTR6=6*MTR)             
C                                                                       
      COMMON/PRDHD/NABEG(MVAR),NAEND(MVAR),IRBEG(MTR),IREND(MTR),       
     1             NBR(MTR),NPOINT(2,MTR),NVPRE(MRES1),INODE(MVAR),     
     2             NTPRE(MRES1),INDPSI(MTR)                             
      COMMON/GEN100/INUMRS,LIST(MRES),NPRE(MRES1)                       
      COMMON/DHANGL/VAR(MVAR),VART(MTR)                                 
      COMMON/TRGET1/NO(ML),NCALL(10,ML),IIER(ML)                        
      COMMON/TRGET2/FF(10,ML)                                           
C                                                                       
      REAL*8  G(MVAR),W(MTR6)                                           
C                                                                       
      INTEGER WC                                                        
C                                                                       
      CHARACTER*1 WV                                                    
C                                                                       
      DATA  MAXLIN/5/,MXFCON/2/                                         
C                                                                       
C--------                                                               
C                                                                       
      IER = 0                                                           
C                                                                       
      NN=0                                                              
C                                                                       
      N=NVPRE(INUMRS)                                                   
C                                                                       
      DFPRED=FC*F                                                       
C                                                                       
      IRSDX = N                                                         
      IRSDG = IRSDX+N                                                   
      IGINIT = IRSDG+N                                                  
      IXOPT = IGINIT+N                                                  
      IGOPT = IXOPT+N                                                   
C                                                                       
      ITERC = 0                                                         
      NCALLS = 0                                                        
      ITERFM = ITERC                                                    
C                                                                       
    5 NCALLS = NCALLS+1                                                 
      CALL FUNCT (F,G,JC,WC,WV)                                         
      IF (NCALLS.GE.2) GO TO 20                                         
   10 DO 15 I=1,N                                                       
   15 W(I) = -G(I)                                                      
      ITERRS = 0                                                        
      IF (ITERC.GT.0) GO TO 80                                          
C                                                                       
   20 GNEW = 0.0                                                        
      SUM = 0.0                                                         
      DO 25 I=1,N                                                       
         GNEW = GNEW+W(I)*G(I)                                          
   25 SUM = SUM+G(I)**2                                                 
      IF (NCALLS.EQ.1) GO TO 35                                         
      FCH = F-FMIN                                                      
C                                                                       
      IF (FCH) 35,30,50                                                 
   30 IF (GNEW/GMIN.LT.-1.0) GO TO 45                                   
   35 FMIN = F                                                          
      GSQRD = SUM                                                       
      NFOPT = NCALLS                                                    
C                                                                       
      DO 40 I=1,N                                                       
         W(IXOPT+I) = VAR(I)                                            
   40 W(IGOPT+I) = G(I)                                                 
   45 IF (SUM.LE.ACC) GO TO 9005                                        
C                                                                       
   50 IF (NCALLS.NE.MAXFN) GO TO 55                                     
      IER = 131                                                         
      GO TO 9000                                                        
   55 IF (NCALLS.GT.1) GO TO 100                                        
C                                                                       
      DFPR = DFPRED                                                     
      STMIN = DFPRED/GSQRD                                              
C                                                                       
   80 ITERC = ITERC+1                                                   
C                                                                       
      FINIT = F                                                         
      GINIT = 0.0                                                       
      DO 85 I=1,N                                                       
         W(IGINIT+I) = G(I)                                             
   85 GINIT = GINIT+W(I)*G(I)                                           
      IF (GINIT.GE.0.0) GO TO 165                                       
      GMIN = GINIT                                                      
      SBOUND = -1.0                                                     
      NFBEG = NCALLS                                                    
      IRETRY = -1                                                       
C                                                                       
      STEPCH = DMIN1(STMIN,DABS(DFPR/GINIT))                            
      STMIN = 0.0                                                       
C                                                                       
   90 STEP = STMIN+STEPCH                                               
      WORK = 0.0                                                        
      DO 95 I=1,N                                                       
         VAR(I) = W(IXOPT+I)+STEPCH*W(I)                                
   95 WORK = DMAX1(WORK,DABS(VAR(I)-W(IXOPT+I)))                        
C                                                                       
C--------------------------------------------------------------------   
C                                                                       
      N00=10                                                            
      LOW=MAXFN-40                                                      
      IF (NCALLS.LE.5) GOTO 9019                                        
      IF (NCALLS.LT.LOW) GOTO 9018                                      
      N01=MOD(NCALLS,N00)                                               
      IF (N01.NE.0) GOTO 9018                                           
 9019 NN=NN+1                                                           
      NCALL(NN,JJ)=NCALLS                                               
      FF(NN,JJ)=F                                                       
      NO(JJ)=NN                                                         
 9018 CONTINUE                                                          
C                                                                       
C--------------------------------------------------------------------   
C                                                                       
      IF (WORK.GT.0.0) GO TO 5                                          
C                                                                       
      IF (NCALLS.GT.NFBEG+1) GO TO 115                                  
      IF (DABS(GMIN/GINIT)-0.2) 170,170,115                             
C                                                                       
  100 WORK = (FCH+FCH)/STEPCH-GNEW-GMIN                                 
      DDSPLN = (GNEW-GMIN)/STEPCH                                       
      IF (NCALLS.GT.NFOPT) SBOUND = STEP                                
      IF (NCALLS.GT.NFOPT) GO TO 105                                    
      IF (GMIN*GNEW.LE.0.0) SBOUND = STMIN                              
      STMIN = STEP                                                      
      GMIN = GNEW                                                       
      STEPCH = -STEPCH                                                  
  105 IF (FCH.NE.0.0) DDSPLN = DDSPLN+(WORK+WORK)/STEPCH                
C                                                                       
      IF (GMIN.EQ.0.0) GO TO 170                                        
      IF (NCALLS.LE.NFBEG+1) GO TO 120                                  
      IF (DABS(GMIN/GINIT).LE.0.2) GO TO 170                            
  110 IF (NCALLS.LT.NFOPT+MAXLIN) GO TO 120                             
  115 IER = 129                                                         
C                                                                       
      GO TO 170                                                         
C                                                                       
  120 STEPCH = 0.5*(SBOUND-STMIN)                                       
      IF (SBOUND.LT.-0.5) STEPCH = 9.0*STMIN                            
      GSPLN = GMIN+STEPCH*DDSPLN                                        
      IF (GMIN*GSPLN.LT.0.0) STEPCH = STEPCH*GMIN/(GMIN-GSPLN)          
      GO TO 90                                                          
C                                                                       
  125 SUM = 0.0                                                         
      DO 130 I=1,N                                                      
  130 SUM = SUM+G(I)*W(IGINIT+I)                                        
      BETA = (GSQRD-SUM)/(GMIN-GINIT)                                   
C                                                                       
      IF (DABS(BETA*GMIN).LE.0.2*GSQRD) GO TO 135                       
C                                                                       
      IRETRY = IRETRY+1                                                 
      IF (IRETRY.LE.0) GO TO 110                                        
C                                                                       
  135 IF (F.LT.FINIT) ITERFM = ITERC                                    
      IF (ITERC.LT.ITERFM+MXFCON) GO TO 140                             
      IER = 132                                                         
      GO TO 9000                                                        
  140 DFPR = STMIN*GINIT                                                
C                                                                       
      IF (IRETRY.GT.0) GO TO 10                                         
      IF (ITERRS.EQ.0) GO TO 155                                        
      IF (ITERC-ITERRS.GE.N) GO TO 155                                  
      IF (DABS(SUM).GE.0.2*GSQRD) GO TO 155                             
C                                                                       
      GAMA = 0.0                                                        
      SUM = 0.0                                                         
      DO 145 I=1,N                                                      
         GAMA = GAMA+G(I)*W(IRSDG+I)                                    
  145 SUM = SUM+G(I)*W(IRSDX+I)                                         
      GAMA = GAMA/GAMDEN                                                
C                                                                       
      IF (DABS(BETA*GMIN+GAMA*SUM).GE.0.2*GSQRD) GO TO 155              
C                                                                       
      DO 150 I=1,N                                                      
  150 W(I) = -G(I)+BETA*W(I)+GAMA*W(IRSDX+I)                            
      GO TO 80                                                          
C                                                                       
  155 GAMDEN = GMIN-GINIT                                               
      DO 160 I=1,N                                                      
         W(IRSDX+I) = W(I)                                              
         W(IRSDG+I) = G(I)-W(IGINIT+I)                                  
  160 W(I) = -G(I)+BETA*W(I)                                            
      ITERRS = ITERC                                                    
      GO TO 80                                                          
C                                                                       
  165 IER = 130                                                         
C                                                                       
  170 IF (NCALLS.EQ.NFOPT) GO TO 180                                    
      F = FMIN                                                          
      DO 175 I=1,N                                                      
         VAR(I) = W(IXOPT+I)                                            
  175 G(I) = W(IGOPT+I)                                                 
  180 IF (IER.EQ.0) GO TO 125                                           
 9000 CONTINUE                                                          
C                                                                       
 9005 NN=NN+1                                                           
      NCALL(NN,JJ)=NCALLS                                               
      FF(NN,JJ)=F                                                       
      NO(JJ)=NN                                                         
      IIER(JJ)=IER                                                      
C                                                                       
C--------                                                               
C                                                                       
      RETURN                                                            
      END                                                               
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C                                                                       
      SUBROUTINE OUTPAR(NUMCON,GRDVAR,TDIFF)                            
C                                                                       
C--------                                                               
C                                                                       
      IMPLICIT REAL*8 (A-H,O-Z)                                         
C                                                                       
      PARAMETER (MRES=90,MA=2000,MVAR=900,MPRO=10)                      
      PARAMETER (MRES1=MRES+1,MTR=MVAR+2*MPRO+1)                        
C                                                                       
      COMMON/OUNIT/JPAR,JTGT,JVIO,JANG,JCO                              
      COMMON/DHANGL/VAR(MVAR),VART(MTR)                                 
      COMMON/GEN100/INUMRS,LIST(MRES),NPRE(MRES1)                       
      COMMON/PRDHD/NABEG(MVAR),NAEND(MVAR),IRBEG(MTR),IREND(MTR),       
     *             NBR(MTR),NPOINT(2,MTR),NVPRE(MRES1),INODE(MVAR),     
     *             NTPRE(MRES1),INDPSI(MTR)                             
      COMMON/NAMPR/TIDA,NAMRE(MRES)                                     
C                                                                       
      CHARACTER NAMRE*4,TIDA*80                                         
      REAL*8 GRDVAR(MVAR),ANGL(MVAR)                                    
COM      REAL TDIFF(2)                                                  
C                                                                       
      DR=180.D0/3.141592653589793D0                                     
C                                                                       
C--------                                                               
C                                                                       
      WRITE (JPAR,500) NUMCON                                           
C                                                                       
      DO 10 IR=2,   INUMRS-1                                            
        NRE=IR-1                                                        
        K1=NVPRE(IR)+1                                                  
        K2=NVPRE(IR+1)                                                  
        NIN=K2-K1+1                                                     
C                                                                       
        IF (NIN.GT.0) THEN                                              
          DO 20 J=K1,K2                                                 
            ANGL(J)=DR*VAR(J)                                           
            ANGL(J)=DMOD(ANGL(J),360.D0)                                
C                                                                       
            IF (ANGL(J).GT.180.D0) THEN                                 
              ANGL(J)=ANGL(J)-360.D0                                    
            END IF                                                      
C                                                                       
            IF (ANGL(J).LT.-180.D0) THEN                                
              ANGL(J)=ANGL(J)+360.D0                                    
            END IF                                                      
C                                                                       
  20      CONTINUE                                                      
C                                                                       
          WRITE (JPAR,510) NAMRE(IR),NRE,(ANGL(J),J=K1,K2)              
C                                                                       
          WRITE (JPAR,520) (GRDVAR(J),J=K1,K2)                          
        END IF                                                          
C                                                                       
  10  CONTINUE                                                          
C                                                                       
COM      WRITE(JPAR,530) TDIFF(1),TDIFF(2)                              
C                                                                       
C--------                                                               
C                                                                       
 500  FORMAT (/'NO. OF CONF =',I3)                                      
 510  FORMAT (2X,A4,I5,3X,10F9.3)                                       
 520  FORMAT (14X,10F9.3)                                               
COM 530  FORMAT (/'USER TIME :',D12.3,'SEC SYSTEM TIME :',D12.3,'SEC')  
C                                                                       
C--------                                                               
C                                                                       
      RETURN                                                            
      END                                                               
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C                                                                       
      SUBROUTINE OUTTGT(I,NLOOP,LIMIT,NAC)                              
C                                                                       
C--------                                                               
C                                                                       
      IMPLICIT REAL*8 (A-H,O-Z)                                         
C                                                                       
      PARAMETER (ML=100)                                                
C                                                                       
      COMMON/OUNIT/JPAR,JTGT,JVIO,JANG,JCO                              
      COMMON/TRGET1/NO(ML),NCALL(10,ML),IIER(ML)                        
      COMMON/TRGET2/FF(10,ML)                                           
      COMMON/NDIFF/NDIFF,NVAN,WVW                                       
C                                                                       
      INTEGER LIMIT(ML),NAC(ML)                                         
C                                                                       
C--------                                                               
C                                                                       
      WRITE (JTGT,500) I                                                
C                                                                       
      DO 10 K=1,NLOOP                                                   
        WRITE (JTGT,510) FF(1,K),NAC(K)                                 
        DO 20 L=1,NO(K)                                                 
          WRITE (JTGT,520) NCALL(L,K),FF(L,K)                           
  20    CONTINUE                                                        
        WRITE (JTGT,530) FF(NO(K),K),NCALL(NO(K),K),LIMIT(K),IIER(K)    
  10  CONTINUE                                                          
C                                                                       
C--------                                                               
C                                                                       
 500  FORMAT('NO. OF CONF =',I3)                                        
 510  FORMAT(/' ERROR AT BEGIN :',D12.3,'  RANGE OF CONSTR: ',I5)       
 520  FORMAT('  NC:',I5,'   F=',E12.3)                                  
 530  FORMAT(' ERROR :',D12.3,' AFTER ',I5,' CYCLES ( LIMIT =',I5,      
     *       ' ); SMODE :',I5)                                          
C                                                                       
C--------                                                               
C                                                                       
      RETURN                                                            
      END                                                               
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C                                                                       
      SUBROUTINE OUTVD(CUT1,CUT2,NUMCON)                                
C                                                                       
C--------                                                               
C                                                                       
      IMPLICIT REAL*8 (A-H,O-Z)                                         
C                                                                       
      PARAMETER (MRES=90,MA=2000,MVAR=900,MPRO=10,MCL=10000,MCU=10000)  
      PARAMETER (MRES1=MRES+1,MTR=MVAR+2*MPRO+1,MTR1=MTR+1)             
      PARAMETER (MCU2=2*MCU,MCL2=2*MCL)                                 
C                                                                       
      COMMON/OUNIT/JPAR,JTGT,JVIO,JANG,JCO                              
      COMMON/ATOMS/ALPH(MA),CHARGE(MA),COORD(3,MA),NBTYPE(MA)           
      COMMON/GEN100/INUMRS,LIST(MRES),NPRE(MRES1)                       
      COMMON/DSTR/IAL1(MCL2),IAL2(MCL2),BL(MCL2),IAU1(MCU2),IAU2(MCU2), 
     *            BU(MCU2),NDIFFL(MCL2),NDIFFU(MCU2),DLW(MCL2),DUW(MCU2)
      COMMON/PRCON/NDLOW(MTR1),NDUP(MTR1),NACLOW(MTR),NACUP(MTR)        
      COMMON/PRDHD/NABEG(MVAR),NAEND(MVAR),IRBEG(MTR),IREND(MTR),       
     *             NBR(MTR),NPOINT(2,MTR),NVPRE(MRES1),INODE(MVAR),     
     *             NTPRE(MRES1),INDPSI(MTR)                             
      COMMON/NAMPR/TIDA,NAMRE(MRES)                                     
C                                                                       
      CHARACTER NAMRE*4,TIDA*80,NRE1*4,NRE2*4,ALPH*3                    
      INTEGER NVIODL(6),NVIODU(6)                                       
      REAL*8 X1(3),X2(3)                                                
C                                                                       
C--------                                                               
C                                                                       
      SUMDL=0                                                           
      SUMDU=0                                                           
C                                                                       
      DO 5 N=1,6                                                        
        NVIODL(N)=0                                                     
        NVIODU(N)=0                                                     
   5  CONTINUE                                                          
C                                                                       
C--------                                                               
C                                                                       
      WRITE (JVIO,500) NUMCON                                           
C                                                                       
      WRITE (JVIO,510) CUT1                                             
C                                                                       
      DO 10 IVAR=1,NTPRE(INUMRS)                                        
C                                                                       
        IF (NACLOW(IVAR) .GT.0) THEN                                    
          LLOW=NDLOW(IVAR)+1                                            
          LUP=LLOW+NACLOW(IVAR)-1                                       
C                                                                       
          DO 20 L=LLOW ,LUP                                             
            IF (IAL1(L) .LT.IAL2(L)) THEN                               
              BLD=DSQRT(BL(L))                                          
C                                                                       
              DO 30 K=1,3                                               
                X1(K)=COORD(K,IAL1(L))                                  
                X2(K)=COORD(K,IAL2(L))                                  
  30          CONTINUE                                                  
C                                                                       
              D=0                                                       
C                                                                       
              DO 40 K=1,3                                               
                DIFF=X1(K)-X2(K)                                        
                D=D+DIFF*DIFF                                           
  40          CONTINUE                                                  
C                                                                       
              D=DSQRT(D)                                                
              DVIOL=BLD-D                                               
C                                                                       
              IF (DVIOL .GT.0.0D0) THEN                                 
                NVIODL(1)=NVIODL(1)+1                                   
                SUMDL=SUMDL+DVIOL                                       
                IF (DVIOL .LT.0.1D0) THEN                               
                  NVIODL(2)=NVIODL(2)+1                                 
                ELSE                                                    
                  IF (DVIOL .LT.0.3D0) THEN                             
                    NVIODL(3)=NVIODL(3)+1                               
                  ELSE                                                  
                    IF (DVIOL .LT.0.5D0) THEN                           
                      NVIODL(4)=NVIODL(4)+1                             
                    ELSE                                                
                      IF (DVIOL .LT.1.0D0) THEN                         
                        NVIODL(5)=NVIODL(5)+1                           
                      ELSE                                              
                        NVIODL(6)=NVIODL(6)+1                           
                      END IF                                            
                    END IF                                              
                  END IF                                                
                END IF                                                  
              END IF                                                    
C                                                                       
              IF (DVIOL.GT.CUT1) THEN                                   
                N1=IAL1(L)                                              
                N2=IAL2(L)                                              
C                                                                       
                DO 50 IR=2,INUMRS+1                                     
                  IF (N1.LE.NPRE(IR)) THEN                              
                    NURE1=IR-2                                          
                    NRE1=NAMRE(NURE1+1)                                 
C                                                                       
                    DO 60 JR=2,INUMRS+1                                 
                      IF (N2.LE.NPRE(JR)) THEN                          
                        NURE2=JR-2                                      
                        NRE2=NAMRE(NURE2+1)                             
C                                                                       
                        WRITE(JVIO,520) NRE1,NURE1,ALPH(IAL1(L)),NRE2,  
     *                                  NURE2,ALPH(IAL2(L)),BLD,D,DVIOL 
                        GOTO 55                                         
C                                                                       
                      END IF                                            
  60                CONTINUE                                            
C                                                                       
                  END IF                                                
  50            CONTINUE                                                
  55            CONTINUE                                                
C                                                                       
              END IF                                                    
C                                                                       
            END IF                                                      
  20      CONTINUE                                                      
C                                                                       
        END IF                                                          
C                                                                       
  10  CONTINUE                                                          
C                                                                       
      WRITE (JVIO,530) (NVIODL(N),N=1,6),SUMDL                          
C                                                                       
C--------                                                               
C                                                                       
      WRITE (JVIO,540) CUT2                                             
C                                                                       
      DO 70 IVAR=1,NTPRE(INUMRS)                                        
        IF (NACUP (IVAR) .GT.0) THEN                                    
          LLOW=NDUP(IVAR)+1                                             
          LUP=LLOW+NACUP(IVAR)-1                                        
C                                                                       
          DO 80 L=LLOW ,LUP                                             
            IF (IAU1(L) .LT.IAU2(L)) THEN                               
              BUD=DSQRT(BU(L))                                          
C                                                                       
              DO 90 K=1,3                                               
                X1(K)=COORD(K,IAU1(L))                                  
                X2(K)=COORD(K,IAU2(L))                                  
  90          CONTINUE                                                  
C                                                                       
              D=0                                                       
C                                                                       
              DO 100 K=1,3                                              
                DIFF=X1(K)-X2(K)                                        
                D=D+DIFF*DIFF                                           
 100          CONTINUE                                                  
C                                                                       
              D=DSQRT(D)                                                
              DVIOU=D-BUD                                               
C                                                                       
              IF (DVIOU .GT.0.0D0) THEN                                 
                NVIODU(1)=NVIODU(1)+1                                   
                SUMDU=SUMDU+DVIOU                                       
                IF (DVIOU .LT.0.1D0) THEN                               
                  NVIODU(2)=NVIODU(2)+1                                 
                ELSE                                                    
                  IF (DVIOU .LT.0.3D0) THEN                             
                    NVIODU(3)=NVIODU(3)+1                               
                  ELSE                                                  
                    IF (DVIOU .LT.0.5D0) THEN                           
                      NVIODU(4)=NVIODU(4)+1                             
                    ELSE                                                
                      IF (DVIOU .LT.1.0D0) THEN                         
                        NVIODU(5)=NVIODU(5)+1                           
                      ELSE                                              
                        NVIODU(6)=NVIODU(6)+1                           
                      END IF                                            
                    END IF                                              
                  END IF                                                
                END IF                                                  
              END IF                                                    
C                                                                       
              IF (DVIOU.GT.CUT2) THEN                                   
                N1=IAU1(L)                                              
                N2=IAU2(L)                                              
                DO 110 IR=2,INUMRS+1                                    
                  IF (N1.LE.NPRE(IR)) THEN                              
                    NURE1=IR-2                                          
                    NRE1=NAMRE(NURE1+1)                                 
C                                                                       
                    DO 120 JR=2,INUMRS+1                                
                      IF (N2.LE.NPRE(JR)) THEN                          
                        NURE2=JR-2                                      
                        NRE2=NAMRE(NURE2+1)                             
C                                                                       
                        WRITE(JVIO,520) NRE1,NURE1,ALPH(IAU1(L)),NRE2,  
     *                                  NURE2,ALPH(IAU2(L)),BUD,D,DVIOU 
                        GOTO 115                                        
C                                                                       
                      END IF                                            
 120                CONTINUE                                            
                  END IF                                                
 110            CONTINUE                                                
 115            CONTINUE                                                
C                                                                       
              END IF                                                    
C                                                                       
            END IF                                                      
  80      CONTINUE                                                      
C                                                                       
        END IF                                                          
  70  CONTINUE                                                          
C                                                                       
      WRITE (JVIO,530) (NVIODU(N),N=1,6),SUMDU                          
C                                                                       
C--------                                                               
C                                                                       
 500   FORMAT (/'NO. OF CONF =',I3)                                     
 510   FORMAT (//,' VIOLATION OF LOWER LIMITS GE THAN',F8.3,' A',//,8X, 
     *         'ATOM1',12X,'ATOM2',12X,' LIMIT    DISTANCE VIOLATION')  
 520   FORMAT (5X,A4,I3,1X,A3,6X,A4,I3,1X,A3,4X,3F10.2)                 
 530   FORMAT (//,5X,'TOTAL <0.1 <0.3 <0.5 <1.0 1.0<    SUM OF VIO',    
     *         //,5X,6(1X,I4),F10.2)                                    
 540   FORMAT (//,' VIOLATION OF UPPER LIMITS GE THAN',F8.3,' A',//,8X, 
     *         'ATOM1',12X,'ATOM2',12X,' LIMIT    DISTANCE VIOLATION')  
C                                                                       
C--------                                                               
C                                                                       
      RETURN                                                            
      END                                                               
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C                                                                       
      SUBROUTINE OUTVV(CUT3,NCON,ICON)                                  
C                                                                       
C--------                                                               
C                                                                       
      IMPLICIT REAL*8 (A-H,O-Z)                                         
C                                                                       
      PARAMETER (MRES=90,MA=2000,MVAR=900,MPRO=10,MCH=100,MSP=10)       
      PARAMETER (MRES1=MRES+1)                                          
C                                                                       
      COMMON/OUNIT/JPAR,JTGT,JVIO,JANG,JCO                              
      COMMON/ATOMS/ALPH(MA),CHARGE(MA),COORD(3,MA),NBTYPE(MA)           
      COMMON/GEN100/INUMRS,LIST(MRES),NPRE(MRES1)                       
      COMMON/VWAAL/RAD(MA),NUMRE(MA),NUNIT(MA)                          
      COMMON/NAMPR/TIDA,NAMRE(MRES)                                     
      COMMON/NDIFF/NDIFF,NVAN,WVW                                       
      COMMON/HBND1/NH,NUMH1(MCH),NUMH2(MCH)                             
      COMMON/HBND2/AMH1(MCH),AMH2(MCH)                                  
      COMMON/CYS/KCYS,NCYS,NPAIR(2,MSP)                                 
C                                                                       
      CHARACTER NAMRE*4,TIDA*80,NRE1*4,NRE2*4,ALPH*3,AMH1*3,AMH2*3      
      CHARACTER*3 AI,AJ,AM                                              
      INTEGER NCON(MA),ICON(4,MA),NVIODV(6)                             
      REAL*8 X1(3),X2(3)                                                
C                                                                       
C--------                                                               
C                                                                       
      SUMDV=0                                                           
C                                                                       
      DO 5 N=1,6                                                        
        NVIODV(N)=0                                                     
   5  CONTINUE                                                          
C                                                                       
C--------                                                               
C                                                                       
      WRITE (JVIO,500) CUT3,NVAN                                        
C                                                                       
      IF (NVAN.LT.0) THEN                                               
        RETURN                                                          
      END IF                                                            
C                                                                       
      NAT=NPRE(INUMRS)                                                  
      IL=NPRE(2)+1                                                      
      IU=NAT-1                                                          
C                                                                       
      DO 10 I= IL,IU                                                    
        IR=I-NPRE(2)                                                    
        NCI=NCON(IR)                                                    
        NI=NBTYPE(I)                                                    
C                                                                       
        IF (NI.NE.12) THEN                                              
C                                                                       
          DO 20 K=1,3                                                   
            X1(K)=COORD(K,I)                                            
  20      CONTINUE                                                      
C                                                                       
          RADI=RAD(I)                                                   
C                                                                       
          DO 30 J=I+1,  NAT                                             
            NJ=NBTYPE(J)                                                
            IF (NJ.NE.12) THEN                                          
              IND=0                                                     
              JR=J-NPRE(2)                                              
              IF (NCI.NE.0) THEN                                        
                DO 40 L=1, NCI                                          
                  ICI1=ICON(L,IR)                                       
                  IF (JR.EQ. ICI1) THEN                                 
                    IND=1                                               
                    GOTO 45                                             
                  ELSE                                                  
                    NCI1=NCON(ICI1)                                     
                    IF (NCI1.NE.0) THEN                                 
                      DO 50 K=1,NCI1                                    
                        ICI2=ICON(K,ICI1)                               
                        IF (JR.EQ. ICI2) THEN                           
                          IND=1                                         
                          GOTO 45                                       
                        END IF                                          
  50                  CONTINUE                                          
                    END IF                                              
                  END IF                                                
  40            CONTINUE                                                
  45            CONTINUE                                                
              END IF                                                    
C                                                                       
              IF (NCYS .GT.0) THEN                                      
                IF (ALPH(I).EQ.'SG ') THEN                              
                  IF (ALPH(J).EQ.'SG ') THEN                            
                    NUR1=NUMRE(I)                                       
                    NUR2=NUMRE(J)                                       
                    IF (NUR1.GT.NUR2) THEN                              
                      NURM=NUR1                                         
                      NUR1=NUR2                                         
                      NUR2=NURM                                         
                    END IF                                              
C                                                                       
                    DO 60 II=1,NCYS                                     
                      IF (NUR1.EQ.NPAIR(1,II)) THEN                     
                        IF (NUR2.EQ.NPAIR(2,II)) THEN                   
                          IND=1                                         
                        END IF                                          
                      END IF                                            
  60                CONTINUE                                            
C                                                                       
                  END IF                                                
                END IF                                                  
              END IF                                                    
C                                                                       
              IF (NH.GT.0) THEN                                         
                AI=ALPH(I)                                              
                AJ=ALPH(J)                                              
                NUR1=NUMRE(I)                                           
                NUR2=NUMRE(J)                                           
C                                                                       
                IF (NUR1.GT.NUR2) THEN                                  
                  NURM=NUR1                                             
                  NUR1=NUR2                                             
                  NUR2=NURM                                             
                  AM=AI                                                 
                  AI=AJ                                                 
                  AJ=AM                                                 
                END IF                                                  
C                                                                       
                DO 70 II=1,NH                                           
                  IF (NUR1.EQ.NUMH1(II)) THEN                           
                    IF (NUR2.EQ.NUMH2(II)) THEN                         
                      IF (AI.EQ.AMH1(II)) THEN                          
                        IF (AJ.EQ.AMH2(II)) THEN                        
                          IND=1                                         
                        END IF                                          
                      END IF                                            
                    END IF                                              
                  END IF                                                
  70            CONTINUE                                                
C                                                                       
              END IF                                                    
C                                                                       
              IF (IND .EQ.0) THEN                                       
                DO 80 K=1,3                                             
                  X2(K)=COORD(K,J)                                      
  80            CONTINUE                                                
C                                                                       
                D=0                                                     
C                                                                       
                DO 90 K=1,3                                             
                  DIFF=X1(K)-X2(K)                                      
                  D=D+DIFF*DIFF                                         
  90            CONTINUE                                                
C                                                                       
                D=DSQRT(D)                                              
                RVW=RADI+RAD(J)                                         
                DVIOV=RVW-D                                             
C                                                                       
                IF (DVIOV .GT.0.0D0) THEN                               
                  NVIODV(1)=NVIODV(1)+1                                 
                  SUMDV=SUMDV+DVIOV                                     
                  IF (DVIOV .LT.0.1D0) THEN                             
                    NVIODV(2)=NVIODV(2)+1                               
                  ELSE                                                  
                    IF (DVIOV .LT.0.3D0) THEN                           
                      NVIODV(3)=NVIODV(3)+1                             
                    ELSE                                                
                      IF (DVIOV .LT.0.5D0) THEN                         
                        NVIODV(4)=NVIODV(4)+1                           
                      ELSE                                              
                        IF (DVIOV .LT.1.0D0) THEN                       
                          NVIODV(5)=NVIODV(5)+1                         
                        ELSE                                            
                          NVIODV(6)=NVIODV(6)+1                         
                        END IF                                          
                      END IF                                            
                    END IF                                              
                  END IF                                                
                END IF                                                  
C                                                                       
                IF (DVIOV.GT.CUT3) THEN                                 
                  DO 100 IRES=2,INUMRS+1                                
                    IF (I.LE. NPRE(IRES)) THEN                          
                      NURE1=IRES-2                                      
                      NRE1=NAMRE(NURE1+1)                               
C                                                                       
                      DO 110 JRES=2,INUMRS+1                            
                        IF (J.LE. NPRE(JRES)) THEN                      
                          NURE2=JRES-2                                  
                          NRE2=NAMRE(NURE2+1)                           
C                                                                       
                          NDF=IABS(NURE2-NURE1)                         
                          IF (NDF.LE.NVAN) THEN                         
C                                                                       
                            WRITE(JVIO,510) NRE1,NURE1,ALPH(I),NRE2,    
     *                                      NURE2,ALPH(J),RVW,D,DVIOV   
C                                                                       
                          END IF                                        
                          GOTO 105                                      
C                                                                       
                        END IF                                          
 110                  CONTINUE                                          
                    END IF                                              
 100              CONTINUE                                              
 105              CONTINUE                                              
                END IF                                                  
C                                                                       
              END IF                                                    
            END IF                                                      
  30      CONTINUE                                                      
C                                                                       
        END IF                                                          
C                                                                       
  10  CONTINUE                                                          
C                                                                       
      WRITE (JVIO,520) (NVIODV(N),N=1,6),SUMDV                          
C                                                                       
C--------                                                               
C                                                                       
 500  FORMAT (//,' VIOLATION OF VAN DER WAALS GE THAN',F8.3,            
     *        ' A  IN THE RANGE: ',I5,//,8X,'ATOM1',12X,'ATOM2',12X,    
     *        ' LIMIT    DISTANCE VIOLATION')                           
 510  FORMAT (5X,A4,I3,1X,A3,6X,A4,I3,1X,A3,4X,3F10.2)                  
 520  FORMAT (//,5X,'TOTAL <0.1 <0.3 <0.5 <1.0 1.0<    SUM OF VIO',     
     *         //,5X,6(1X,I4),F10.2)                                    
C                                                                       
C--------                                                               
C                                                                       
      RETURN                                                            
      END                                                               
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C                                                                       
      SUBROUTINE OUTVJ(CUT4)                                            
C                                                                       
C--------                                                               
C                                                                       
      IMPLICIT REAL*8 (A-H,O-Z)                                         
C                                                                       
      PARAMETER (MRES=90,MVAR=900,MPRO=10,MJC=100)                      
      PARAMETER (MTR=MVAR+2*MPRO+1)                                     
C                                                                       
      COMMON/OUNIT/JPAR,JTGT,JVIO,JANG,JCO                              
      COMMON/NAMPR/TIDA,NAMRE(MRES)                                     
      COMMON/DHANGL/VAR(MVAR),VART(MTR)                                 
      COMMON/JCON1/JRAN,NOJ,NORESJ(MJC),NJ(MJC)                         
      COMMON/JCON2/ANGJLO(MJC),ANGJUP(MJC),CENTJ(MVAR),HLJ(MVAR),       
     *             VJ(MVAR),WJ                                          
      COMMON/JCON3/ANGJ(MJC)                                            
C                                                                       
      CHARACTER ANGJ*4,NAMRE*4,TIDA*80,NRE*4                            
      REAL*8 LIM                                                        
C                                                                       
      DR=180.D0/3.141592653589793D0                                     
      RD=3.141592653589793D0/180.D0                                     
      PI=3.141592653589793D0                                            
      PI2=2*PI                                                          
C                                                                       
C--------                                                               
C                                                                       
      RDCUT4=CUT4*RD                                                    
C                                                                       
      WRITE (JVIO,500) CUT4                                             
C                                                                       
      DO 10 I=1,NOJ                                                     
        LIM=HLJ(NJ(I))+RDCUT4                                           
        AVJ=VJ(NJ(I))                                                   
C                                                                       
        IF (AVJ.GT.PI) THEN                                             
          AVJ=DABS(AVJ-PI2)                                             
        END IF                                                          
C                                                                       
        IF (AVJ.GT.LIM) THEN                                            
          VJT=DR*(AVJ-HLJ(NJ(I)))                                       
          ANGF=DR*VAR(NJ(I))                                            
          NRE=NAMRE(NORESJ(I)+1)                                        
          WRITE (JVIO,510) NORESJ(I),NRE,ANGJ(I),ANGJLO(I),             
     *                     ANGJUP(I),ANGF,VJT                           
        END IF                                                          
C                                                                       
  10  CONTINUE                                                          
C                                                                       
C--------                                                               
C                                                                       
 500  FORMAT(//' VIOLATION OF THE COUPLING CONSTANT GE THAN',F8.3,' A', 
     *       //,10X,'RESIDUE',5X,'ANGLE',11X,'RANGE',10X,               
     *       'VALUE',9X,'VIOLATION')                                    
 510  FORMAT(10X,I2,1X,A4,6X,A4,4X,2(1X,F7.2),4X,F7.2,10X,F7.2)         
C                                                                       
C--------                                                               
C                                                                       
      RETURN                                                            
      END                                                               
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
                                                                        
C                                                                       
      SUBROUTINE OUTVW(CUT5)                                            
C                                                                       
C--------                                                               
C                                                                       
      IMPLICIT REAL*8 (A-H,O-Z)                                         
C                                                                       
      PARAMETER (MRES=90,MVAR=900,MPRO=10,MWC=100)                      
      PARAMETER (MTR=MVAR+2*MPRO+1)                                     
C                                                                       
      COMMON/OUNIT/JPAR,JTGT,JVIO,JANG,JCO                              
      COMMON/NAMPR/TIDA,NAMRE(MRES)                                     
      COMMON/DHANGL/VAR(MVAR),VART(MTR)                                 
      COMMON/WCON1/IWRAN,NOW,NORESW(MWC),NW(MWC)                        
      COMMON/WCON2/ANGWLO(MWC),ANGWUP(MWC),CENTW(MVAR),HLW(MVAR),       
     *             VW(MVAR),WW                                          
C                                                                       
      CHARACTER NAMRE*4,TIDA*80,NRE*4                                   
      REAL*8 LIM                                                        
C                                                                       
      DR=180.D0/3.141592653589793D0                                     
      RD=3.141592653589793D0/180.D0                                     
      PI=3.141592653589793D0                                            
      PI2=2*PI                                                          
C                                                                       
C--------                                                               
C                                                                       
      RDCUT5=CUT5*RD                                                    
C                                                                       
      WRITE (JVIO,500) CUT5                                             
C                                                                       
      DO 10 I=1,NOJ                                                     
        LIM=HLW(NW(I))+RDCUT5                                           
        AVW=VW(NW(I))                                                   
C                                                                       
        IF (AVW.GT.PI) THEN                                             
          AVW=DABS(AVW-PI2)                                             
        END IF                                                          
C                                                                       
        IF (AVW.GT.LIM) THEN                                            
          VWT=DR*(AVW-HLW(NW(I)))                                       
          ANGF=DR*VAR(NW(I))                                            
          NRE=NAMRE(NORESW(I)+1)                                        
          WRITE (JVIO,510) NORESW(I),NRE,ANGWLO(I),ANGWUP(I),ANGF,VWT   
        END IF                                                          
C                                                                       
  10  CONTINUE                                                          
C                                                                       
C--------                                                               
C                                                                       
 500  FORMAT(//' VIOLATION OF CONSTRAINT OF W-ANGLE GE THAN',F8.3,' A', 
     *       //,10X,'RESIDUE',21X,'RANGE',10X,'VALUE',9X,'VIOLATION')   
 510  FORMAT(10X,I2,1X,A4,14X,2(1X,F7.2),4X,F7.2,10X,F7.2)              
C                                                                       
C--------                                                               
C                                                                       
      RETURN                                                            
      END                                                               
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C                                                                       
      SUBROUTINE OUTANG                                                 
C                                                                       
C--------                                                               
C                                                                       
      IMPLICIT REAL*8 (A-H,O-Z)                                         
C                                                                       
      PARAMETER (MRES=90)                                               
      PARAMETER (MRES1=MRES+1)                                          
C                                                                       
      COMMON/OUNIT/JPAR,JTGT,JVIO,JANG,JCO                              
      COMMON/BONDS/ANGLES(10,MRES),UTOR(10,MRES),NDXARR(10,MRES),       
     *             NV(MRES)                                             
      COMMON/GEN100/INUMRS,LIST(MRES),NPRE(MRES1)                       
C                                                                       
      REAL*8 ANGF(10)                                                   
C                                                                       
      DR=180.D0/3.141592653589793D0                                     
C--------                                                               
C                                                                       
      DO 10 I=2,INUMRS-1                                                
        DO 20 J=1,10                                                    
          ANGL=DR*ANGLES(J,I)                                           
          ANGL=DMOD(ANGL,360.D0)                                        
          IF (ANGL.GT.180.D0) THEN                                      
            ANGL=ANGL-360.D0                                            
          END IF                                                        
          IF (ANGL.LT.-180.D0) THEN                                     
            ANGL=ANGL+360.D0                                            
          END IF                                                        
          ANGF(J)=ANGL                                                  
  20    CONTINUE                                                        
C                                                                       
        WRITE (JANG,500) (ANGF(J),J=1,10)                               
  10  CONTINUE                                                          
C                                                                       
C--------                                                               
C                                                                       
 500  FORMAT(10F8.3)                                                    
C                                                                       
C--------                                                               
C                                                                       
      RETURN                                                            
      END                                                               
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C                                                                       
      SUBROUTINE OUTCRD(CRDID,NUMCON)                                   
C                                                                       
C--------                                                               
C                                                                       
      IMPLICIT REAL*8 (A-H,O-Z)                                         
C                                                                       
      PARAMETER (MRES=90,MA=2000)                                       
      PARAMETER (MRES1=MRES+1)                                          
C                                                                       
      COMMON/CHARM1/IND(26,26),INDC(22,20),NOATM(26),NTATOM(2,20)       
      COMMON/CHARM2/ATMNAM(26,26),ATMNME(20,20),ID                      
      COMMON/CHARM3/VAL                                                 
      COMMON/OUNIT/JPAR,JTGT,JVIO,JANG,JCO                              
      COMMON/ATOMS/ALPH(MA),CHARGE(MA),COORD(3,MA),NBTYPE(MA)           
      COMMON/GEN100/INUMRS,LIST(MRES),NPRE(MRES1)                       
      COMMON/GEN002/CHANG(3,7,26),NATOMS(26),NCHI(26),NDPT1(7,26),      
     *              NDPT2(7,26),NUM(7,26)                               
      COMMON/GEN004/ENOORD(3,22,20),ECHG(22,20),EALPHA(22,20),          
     *              NDATOM(20),NBOND(20),NNDPT1(6,20),NNDPT2(6,20),     
     *              NDTYPE(22,20)                                       
      COMMON/NAMPR/TIDA,NAMRE(MRES)                                     
      COMMON/VWAAL/RAD(MA),NUMRE(MA),NUNIT(MA)                          
C                                                                       
      CHARACTER NAMRE*4,TIDA*80,ALPH*3,EALPHA*3,DATE*24,NUMBER*11       
      CHARACTER*4 NARE(MA),ATM(MA),NRE(MA),ATMNAM,ATMNME,ID,CRDID       
      CHARACTER*1 A,B,C,D                                               
      INTEGER NURE(MA),INDE(26,MRES)                                    
      REAL*8 CRDX(MA),CRDY(MA),CRDZ(MA)                                 
C                                                                       
C--------                                                               
C                                                                       
      DATA NUMBER/' 0123456789'/                                        
C                                                                       
      IF (CRDID.NE.'    ') THEN                                         
        ID=CRDID                                                        
      END IF                                                            
C                                                                       
      NCO=0                                                             
      NIND=0                                                            
      L1=LIST(1)                                                        
      LL=LIST(INUMRS)                                                   
      NUMEA=NDATOM(L1)                                                  
      NUMEC=NDATOM(LL)                                                  
      NINDL=NPRE(INUMRS)                                                
C                                                                       
      DO 10 I=1,NUMEA                                                   
        NIND=NIND+1                                                     
        INDE(I,1)=NIND                                                  
  10  CONTINUE                                                          
C                                                                       
      NIND=NINDL                                                        
C                                                                       
      DO 20 I=2,NUMEC                                                   
        NIND=NIND+1                                                     
        INDE(I,INUMRS)=NIND                                             
  20  CONTINUE                                                          
C                                                                       
      DO 30 IR=2,     INUMRS-1                                          
        L=LIST(IR)                                                      
        NIND=NPRE(IR)                                                   
        NUMF=NATOMS(L)                                                  
        DO 40 I=1,NUMF                                                  
          NIND=NIND+1                                                   
          INDE(I,IR)=NIND                                               
  40    CONTINUE                                                        
  30  CONTINUE                                                          
C                                                                       
      NUMA=NTATOM(1,L1)                                                 
      NUMS=NTATOM(2,L1)                                                 
      L2=LIST(2)                                                        
      NUMC=NOATM(L2)                                                    
C                                                                       
      DO 50 I=1,NUMA                                                    
        NCO=NCO+1                                                       
        N=INDE(INDC(I,L1),1)                                            
        ATM(NCO)=ATMNME(I,L1)                                           
        NURE(NCO)=1                                                     
        CRDX(NCO)=COORD(1,N)                                            
        CRDY(NCO)=COORD(2,N)                                            
        CRDZ(NCO)=COORD(3,N)                                            
        NARE(NCO)=NAMRE(2)                                              
  50  CONTINUE                                                          
C                                                                       
      DO 60 I=NUMS,NUMC                                                 
        NCO=NCO+1                                                       
        N=INDE(IND(I,L2),2)                                             
        ATM(NCO)=ATMNAM(I,L2)                                           
        NURE(NCO)=1                                                     
        CRDX(NCO)=COORD(1,N)                                            
        CRDY(NCO)=COORD(2,N)                                            
        CRDZ(NCO)=COORD(3,N)                                            
        NARE(NCO)=NAMRE(2)                                              
  60  CONTINUE                                                          
C                                                                       
      DO 70 IR=3,INUMRS-1                                               
        L=LIST(IR)                                                      
        NUMC=NOATM(L)                                                   
        DO 80 I=1,NUMC                                                  
          NCO=NCO+1                                                     
          N=INDE(IND(I,L),IR)                                           
          ATM(NCO)=ATMNAM(I,L)                                          
          NURE(NCO)=NUMRE(N)-1                                          
          CRDX(NCO)=COORD(1,N)                                          
          CRDY(NCO)=COORD(2,N)                                          
          CRDZ(NCO)=COORD(3,N)                                          
          NARE(NCO)=NAMRE(NUMRE(N))                                     
  80    CONTINUE                                                        
  70  CONTINUE                                                          
C                                                                       
      ATM(NCO)=ATMNME(1,LL)                                             
      NUMCC=NTATOM(1,LL)                                                
      NUMCS=NTATOM(2,LL)                                                
      NCO=NCO+NUMCS                                                     
C                                                                       
      DO 90 I=2,NUMCC                                                   
        NCO=NCO+1                                                       
        N=INDE(INDC(I,LL),INUMRS)                                       
        ATM(NCO)=ATMNME(I,LL)                                           
        NURE(NCO)=INUMRS-2                                              
        CRDX(NCO)=COORD(1,N)                                            
        CRDY(NCO)=COORD(2,N)                                            
        CRDZ(NCO)=COORD(3,N)                                            
        NARE(NCO)=NAMRE(INUMRS-1)                                       
  90  CONTINUE                                                          
C                                                                       
C--------                                                               
C                                                                       
COM      CALL  FDATE(DATE)                                              
C                                                                       
      DO 100 I=1,NCO                                                    
        N1=1                                                            
        N2=1                                                            
        N3=1                                                            
        N4=1                                                            
        NN=NURE(I)                                                      
C                                                                       
        IF (NN.LT.10) THEN                                              
          N4=NN+2                                                       
        END IF                                                          
C                                                                       
        IF (NN.GT.9) THEN                                               
          N4=INT(NN/10)+2                                               
          N3=MOD(NN,10)+2                                               
        END IF                                                          
C                                                                       
        IF (NN.GT.99) THEN                                              
          N4=INT(NN/100)+2                                              
          N3=INT(NN/10)-N3*10+22                                        
          N2=NN-N2*10-N3*100+222                                        
        END IF                                                          
C                                                                       
        IF (NN.GT.999) THEN                                             
          N4=INT(NN/1000)+2                                             
          N3=INT(NN/100)-N4*10+22                                       
          N2=INT(NN/10)-N3*10-N4*100+222                                
          N1=NN-N2*10-N3*100-N4*1000+2222                               
        END IF                                                          
C                                                                       
        A=NUMBER(N4:N4)                                                 
        B=NUMBER(N3:N3)                                                 
        C=NUMBER(N2:N2)                                                 
        D=NUMBER(N1:N1)                                                 
C                                                                       
        NRE(I)=A//B//C//D                                               
 100  CONTINUE                                                          
C                                                                       
      WRITE (JCO,500) TIDA                                              
      WRITE (JCO,510) NUMCON                                            
      WRITE (JCO,520) DATE                                              
      WRITE (JCO,530)                                                   
      WRITE (JCO,540) NCO                                               
C                                                                       
      DO 110 I=1,NCO                                                    
        WRITE (JCO,550) I,NURE(I),NARE(I),ATM(I),CRDX(I),CRDY(I),       
     *                  CRDZ(I),ID,NRE(I),VAL                           
 110  CONTINUE                                                          
C                                                                       
C--------                                                               
C                                                                       
 500  FORMAT ('* ',A80)                                                 
 510  FORMAT ('* NUMBER OF CONFORMATION :',I5)                          
 520  FORMAT ('* DATE : ',A24)                                          
 530  FORMAT ('*')                                                      
 540  FORMAT (I5)                                                       
 550  FORMAT (2I5,1X,A4,1X,A4,3F10.5,1X,A4,1X,A4,F10.5)                 
C                                                                       
C--------                                                               
C                                                                       
      RETURN                                                            
      END                                                               
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C                                                                       
      SUBROUTINE OUTPDB(CRDID,NUMCON)                                   
C                                                                       
C--------                                                               
C                                                                       
      IMPLICIT REAL*8 (A-H,O-Z)                                         
C                                                                       
      PARAMETER (MRES=90,MA=2000)                                       
      PARAMETER (MRES1=MRES+1)                                          
C                                                                       
      COMMON/CHARM1/IND(26,26),INDC(22,20),NOATM(26),NTATOM(2,20)       
      COMMON/CHARM2/ATMNAM(26,26),ATMNME(20,20),ID                      
      COMMON/CHARM3/VAL                                                 
      COMMON/OUNIT/JPAR,JTGT,JVIO,JANG,JCO                              
      COMMON/ATOMS/ALPH(MA),CHARGE(MA),COORD(3,MA),NBTYPE(MA)           
      COMMON/GEN100/INUMRS,LIST(MRES),NPRE(MRES1)                       
      COMMON/GEN002/CHANG(3,7,26),NATOMS(26),NCHI(26),NDPT1(7,26),      
     *              NDPT2(7,26),NUM(7,26)                               
      COMMON/GEN004/ENOORD(3,22,20),ECHG(22,20),EALPHA(22,20),          
     *              NDATOM(20),NBOND(20),NNDPT1(6,20),NNDPT2(6,20),     
     *              NDTYPE(22,20)                                       
      COMMON/NAMPR/TIDA,NAMRE(MRES)                                     
      COMMON/VWAAL/RAD(MA),NUMRE(MA),NUNIT(MA)                          
C                                                                       
      CHARACTER NAMRE*4,TIDA*80,ALPH*3,EALPHA*3,DATE*24,NUMBER*11       
      CHARACTER*4 NARE(MA),ATM(MA),NRE(MA),ATMNAM,ATMNME,ID,CRDID       
      INTEGER NURE(MA),INDE(26,MRES)                                    
      REAL*8 CRDX(MA),CRDY(MA),CRDZ(MA)                                 
C                                                                       
C--------                                                               
C                                                                       
      DATA NUMBER/' 0123456789'/                                        
C                                                                       
      IF (CRDID.NE.'    ') THEN                                         
        ID=CRDID                                                        
      END IF                                                            
C                                                                       
      NCO=0                                                             
      NIND=0                                                            
      L1=LIST(1)                                                        
      LL=LIST(INUMRS)                                                   
      NUMEA=NDATOM(L1)                                                  
      NUMEC=NDATOM(LL)                                                  
      NINDL=NPRE(INUMRS)                                                
C                                                                       
      DO 10 I=1,NUMEA                                                   
        NIND=NIND+1                                                     
        INDE(I,1)=NIND                                                  
  10  CONTINUE                                                          
C                                                                       
      NIND=NINDL                                                        
C                                                                       
      DO 20 I=2,NUMEC                                                   
        NIND=NIND+1                                                     
        INDE(I,INUMRS)=NIND                                             
  20  CONTINUE                                                          
C                                                                       
      DO 30 IR=2,     INUMRS-1                                          
        L=LIST(IR)                                                      
        NIND=NPRE(IR)                                                   
        NUMF=NATOMS(L)                                                  
        DO 40 I=1,NUMF                                                  
          NIND=NIND+1                                                   
          INDE(I,IR)=NIND                                               
  40    CONTINUE                                                        
  30  CONTINUE                                                          
C                                                                       
      NUMA=NTATOM(1,L1)                                                 
      NUMS=NTATOM(2,L1)                                                 
      L2=LIST(2)                                                        
      NUMC=NOATM(L2)                                                    
C                                                                       
      DO 50 I=1,NUMA                                                    
        NCO=NCO+1                                                       
        N=INDE(INDC(I,L1),1)                                            
        ATM(NCO)=ATMNME(I,L1)                                           
        NURE(NCO)=1                                                     
        CRDX(NCO)=COORD(1,N)                                            
        CRDY(NCO)=COORD(2,N)                                            
        CRDZ(NCO)=COORD(3,N)                                            
        NARE(NCO)=NAMRE(2)                                              
  50  CONTINUE                                                          
C                                                                       
      DO 60 I=NUMS,NUMC                                                 
        NCO=NCO+1                                                       
        N=INDE(IND(I,L2),2)                                             
        ATM(NCO)=ATMNAM(I,L2)                                           
        NURE(NCO)=1                                                     
        CRDX(NCO)=COORD(1,N)                                            
        CRDY(NCO)=COORD(2,N)                                            
        CRDZ(NCO)=COORD(3,N)                                            
        NARE(NCO)=NAMRE(2)                                              
  60  CONTINUE                                                          
C                                                                       
      DO 70 IR=3,INUMRS-1                                               
        L=LIST(IR)                                                      
        NUMC=NOATM(L)                                                   
        DO 80 I=1,NUMC                                                  
          NCO=NCO+1                                                     
          N=INDE(IND(I,L),IR)                                           
          ATM(NCO)=ATMNAM(I,L)                                          
          NURE(NCO)=NUMRE(N)-1                                          
          CRDX(NCO)=COORD(1,N)                                          
          CRDY(NCO)=COORD(2,N)                                          
          CRDZ(NCO)=COORD(3,N)                                          
          NARE(NCO)=NAMRE(NUMRE(N))                                     
  80    CONTINUE                                                        
  70  CONTINUE                                                          
C                                                                       
      ATM(NCO)=ATMNME(1,LL)                                             
      NUMCC=NTATOM(1,LL)                                                
      NUMCS=NTATOM(2,LL)                                                
      NCO=NCO+NUMCS                                                     
C                                                                       
      DO 90 I=2,NUMCC                                                   
        NCO=NCO+1                                                       
        N=INDE(INDC(I,LL),INUMRS)                                       
        ATM(NCO)=ATMNME(I,LL)                                           
        NURE(NCO)=INUMRS-2                                              
        CRDX(NCO)=COORD(1,N)                                            
        CRDY(NCO)=COORD(2,N)                                            
        CRDZ(NCO)=COORD(3,N)                                            
        NARE(NCO)=NAMRE(INUMRS-1)                                       
  90  CONTINUE                                                          
C                                                                       
C--------                                                               
C                                                                       
COM      CALL  FDATE(DATE)                                              
C                                                                       
      WRITE (JCO,500) TIDA                                              
      WRITE (JCO,510) NUMCON                                            
      WRITE (JCO,520) DATE                                              
C                                                                       
      NRES=INUMRS-1                                                     
      NUML=INT(NRES/13)                                                 
      I=2                                                               
      DO 100 J=1,NUML                                                   
        WRITE (JCO,530)  J,NRES,(NAMRE(K),K=I,I+12)                     
        I=I+13                                                          
 100  CONTINUE                                                          
      WRITE (JCO,530)  J,NRES,(NAMRE(K),K=I,NRES)                       
C                                                                       
      DO 110 I=1,NCO                                                    
        WRITE (JCO,540) I,ATM(I),NARE(I),NURE(I),CRDX(I),CRDY(I),       
     *                  CRDZ(I)                                         
 110  CONTINUE                                                          
C                                                                       
      WRITE (JCO,550)                                                   
C                                                                       
C--------                                                               
C                                                                       
 500  FORMAT ('COMPND',4X,A80)                                          
 510  FORMAT ('REMARK   1 NUMBER OF CONFORMATION :',I5)                 
 520  FORMAT ('REMARK   2 DATE : ',A24)                                 
 530  FORMAT ('SEQRES',I4,3X,I4,2X,13A4)                                
 540  FORMAT ('ATOM',2X,I5,2X,A4,A4,1X,I4,4X,3F8.3)                     
 550  FORMAT ('TER   '/'END   ')                                        
C                                                                       
C--------                                                               
C                                                                       
      RETURN                                                            
      END                                                               
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC  
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC  
C                                                                       
      SUBROUTINE UNIXIO                                                 
C                                                                       
C     THIS SUB. OPENS I/O FILES FOR CALCULATION ON UNIX MACHINE.        
C                                                                       
C--------                                                               
C                                                                       
      CHARACTER FORMF*1,FILNAM*72                                       
C                                                                       
C--------                                                               
C                                                                       
      OPEN(UNIT=1,                                                      
     *     FILE='C53827.INSPIDA2.DADAS.UNIXIO.UNIT',                    
     *     ACCESS='SEQUENTIAL',                                         
     *     FORM='FORMATTED')                                            
C                                                                       
      READ (1,500) NUMF                                                 
      DO 10  I=1,NUMF                                                   
        READ (1,510) II,FORMF,FILNAM                                    
        CALL  SRWEND(FILNAM,IFLEND)                                     
        IF (FORMF .EQ. 'F') THEN                                        
          OPEN(UNIT=II,FILE=FILNAM(1:IFLEND),                           
     *         ACCESS='SEQUENTIAL',FORM='FORMATTED')                    
        ELSE                                                            
          OPEN(UNIT=II,FILE=FILNAM(1:IFLEND),                           
     *           ACCESS='SEQUENTIAL',FORM='UNFORMATTED')                
        END IF                                                          
  10  CONTINUE                                                          
C                                                                       
C--------                                                               
C                                                                       
 500  FORMAT(I2)                                                        
 510  FORMAT(I2,1X,1A,1X,A72)                                           
C                                                                       
C--------                                                               
C                                                                       
      RETURN                                                            
      END                                                               
./ ADD NAME=FEDRTEMP
./ NUMBER NEW1=10,INCR=10
C***********************************************************************
C     MINIMA.FORT77(FEDERN)                                             
C                                                                       
C     BASED ON 'PERI.FEDER.FORT(FEDERLB)'                               
C                                                                       
C     1989.9.13                                                         
C                                                                       
C     ENERGY MINIMIZATION WITH FAST COMPUTATION OF THE SECOND DERIVATIVE
C     WITHOUT CUTOFF OPERATION                                          
C     PROGRAM PACKAGE VERSION                                           
C                                                                       
C ARRAY SIZE                                                            
C     MAXATM=436                                                        
C     MAXVAR=160                                                        
C     MAXRES=28                                                         
C     MAXSS =10                                                         
C     MAXPER=2399                                                       
C     MAXINT=2740                                                       
C***********************************************************************
      SUBROUTINE  INPUT                                                 
      IMPLICIT REAL*8(A-H,O-Z)                                          
      PARAMETER  (MAXATM=436,MAXVAR=160,MAXRES=28,MAXSS=10)             
      PARAMETER  (MXATM1=MAXATM+1,MVAR1=MAXVAR+1,MAXSS2=2*MAXSS)        
      PARAMETER  (PI=3.141 592 653 589 793D0,RAD=PI/180.D0)             
      CHARACTER  TITLE*80                                               
      CHARACTER*4  SEQATM,SEQAA                                         
      COMMON/TITLE/   TITLE                                             
      COMMON/AASEQ/   SEQATM(MAXATM),SEQAA(MAXATM)                      
      COMMON/IASEQ/   ISEQRS(MAXATM)                                    
      COMMON/NUMBER/  NUMATM,NUMVAR,NN2,NUMINT,NSS                      
      COMMON/TABLE1/  IFRONT(MAXVAR),NBACK(0:MAXVAR),IBACK(0:MAXVAR,2)  
      COMMON/EPARAM/  PNB(28,56),CHARGE(MAXATM),NBTYPE(MAXATM)          
      COMMON/ATOM00/  KUNIT(MAXATM),KATOM(MXATM1),JATOM(MAXATM)         
      COMMON/ATOM01/  LATOM0(0:MAXVAR),LATOM1(MAXATM)                   
      COMMON/BOND00/  DIRCOS(MAXVAR,3),IBND1(MAXVAR),IBND2(0:MVAR1)     
      COMMON/BOND01/  IBCHAR(3,MAXVAR)                                  
      COMMON/COORD/   CO(MAXATM,3)                                      
      COMMON/REFRNC/  REFCRD(MAXATM,3),REFANG(MAXVAR)                   
      COMMON/INTER0/  INTER(MAXATM),INTATM(3,3000)                      
      COMMON/TORSN0/  A(MAXVAR),NB(MAXVAR),NS(MAXVAR),IFTOR(MAXVAR)     
      COMMON/DISULF/  RSS(4),ASS(4),BSS(9)                              
      COMMON/SSPAIR/  KSSPER(6,2,MAXSS),JSS(3,MAXSS),KSS(MAXSS2),       
     &                LSS(MAXSS2)                                       
      COMMON/VARANG/  ANGLES(10,MAXRES),INDXV(MAXVAR),NUMRES            
      DATA  IREAD,JREAD/20,21/                                          
C*******************************                                        
C          IREAD                                                        
C*******************************                                        
      READ(IREAD,100)  TITLE                                            
      READ(IREAD,110)  NUMATM,NUMVAR,NUMRES,NUMINT,NSS                  
      NN2 = NUMVAR*(NUMVAR+1)/2                                         
      DO  10  I = 1, NUMRES                                             
  10  READ(IREAD,120)  (ANGLES(J,I),J=1,10)                             
      READ(IREAD,131)  NBACK(0),IBACK(0,1),IBACK(0,2)                   
      DO  20  I = 1, NUMVAR                                             
  20  READ(IREAD,130)  INDXV(I),IBND1(I),IBND2(I),IFRONT(I),            
     &     (IBCHAR(J,I),J=1,3),A(I),NB(I),NS(I),IFTOR(I),               
     &     NBACK(I),IBACK(I,1),IBACK(I,2)                               
      IBND2(0) = 1                                                      
      IBND2(NUMVAR+1) = NUMATM+1                                        
      DO  30  I = 1, NUMATM                                             
  30  READ(IREAD,140)  (REFCRD(I,L),L=1,3),CHARGE(I),NBTYPE(I),         
     &      KUNIT(I),KATOM(I),JATOM(KATOM(I))                           
     &      ,SEQATM(I),SEQAA(I),ISEQRS(I)                               
      READ(IREAD,110)  (INTER(I),I=1,NUMATM)                            
      READ(IREAD,150)  ((INTATM(J,I),J=1,3),I=1,NUMINT)                 
      KATOM(NUMATM+1) = NUMATM+1                                        
      IF (NSS.EQ.0)  GOTO  50                                           
      DO  40  I = 1, NSS                                                
  40  READ(IREAD,110)  (KSSPER(J,1,I),J=1,6)                            
  100 FORMAT(A80)                                                       
  110 FORMAT(16I5)                                                      
  120 FORMAT(10F8.3)                                                    
  130 FORMAT(I6,2X,2I5,2X,2I5,2I2,F10.4,3I3,5X,I5,2I5)                  
  131 FORMAT(53X,5X,I5,1X,2I3)                                          
  140 FORMAT(3F10.4,4X,F10.3,4I5,2X,A4,1X,A4,I5)                        
  150 FORMAT(5(1X,3I5))                                                 
C********************************************************************   
C  SET THE REFERENCE ANGLES IN REFANG AND THE REFERENCE COORDINATES     
C  IN CO FOR UNIT 0 AND IN REFCRD FOR UNITS 1 TO NUMVAR.                
C********************************************************************   
C                                                                       
C  REFERENCE ANGLES                                                     
C                                                                       
  50  DO  70  I = 1, NUMVAR                                             
        J = INDXV(I)/100                                                
        K = INDXV(I) - 100*J                                            
        REFANG(I) = ANGLES(K,J)*RAD                                     
  70  CONTINUE                                                          
C                                                                       
C  REFERENCE COORDINATES                                                
C                                                                       
C          UNIT 0                                                       
C                                                                       
      J2 = KATOM(IBND2(1))-1                                            
      DO  80  J = 1, J2                                                 
        K = JATOM(J)                                                    
        CO(K,1) = REFCRD(K,1)                                           
        CO(K,2) = REFCRD(K,2)                                           
        CO(K,3) = REFCRD(K,3)                                           
  80  CONTINUE                                                          
      IF (NBACK(0).GT.0)  THEN                                          
        DO  82  I = 1, NBACK(0)                                         
          K = IBND2(IBACK(0,I))                                         
          CO(K,1) = REFCRD(K,1)                                         
          CO(K,2) = REFCRD(K,2)                                         
          CO(K,3) = REFCRD(K,3)                                         
  82    CONTINUE                                                        
      ENDIF                                                             
C                                                                       
C          UNITS 1 TO NUMVAR                                            
C                                                                       
      NAT = 0                                                           
      LATOM0(NUMVAR) = 1                                                
      DO  94  I = NUMVAR, 1, -1                                         
        IU = IBND2(I)                                                   
        REFX0 = REFCRD(IU,1)                                            
        REFY0 = REFCRD(IU,2)                                            
        REFZ0 = REFCRD(IU,3)                                            
        J1 = KATOM(IU) + 1                                              
        J2 = KATOM(IBND2(I+1)) - 1                                      
        IF (J1.LE.J2)  THEN                                             
          DO  90  J = J1, J2                                            
            K = JATOM(J)                                                
            NAT = NAT + 1                                               
            LATOM1(NAT) = K                                             
            REFCRD(K,1) = REFCRD(K,1) - REFX0                           
            REFCRD(K,2) = REFCRD(K,2) - REFY0                           
            REFCRD(K,3) = REFCRD(K,3) - REFZ0                           
  90      CONTINUE                                                      
        ENDIF                                                           
        IF (NBACK(I).GT.0)  THEN                                        
          DO  92  J = 1, NBACK(I)                                       
            K = IBND2(IBACK(I,J))                                       
            NAT = NAT + 1                                               
            LATOM1(NAT) = K                                             
            REFCRD(K,1) = REFCRD(K,1) - REFX0                           
            REFCRD(K,2) = REFCRD(K,2) - REFY0                           
            REFCRD(K,3) = REFCRD(K,3) - REFZ0                           
  92      CONTINUE                                                      
        ENDIF                                                           
        LATOM0(I-1) = NAT + 1                                           
  94  CONTINUE                                                          
C*******************************                                        
C          JREAD                                                        
C*******************************                                        
      DO  200  J = 1, 56, 2                                             
      READ(JREAD,210)  (PNB(I,J),I=1,28)                                
      READ(JREAD,210)  (PNB(I,J+1),I=1,28)                              
  200 CONTINUE                                                          
      READ(JREAD,220)  (RSS(I),I=1,4)                                   
      READ(JREAD,220)  (ASS(I),I=1,4)                                   
      READ(JREAD,230)  (BSS(I),I=1,9)                                   
  210 FORMAT(8F10.6)                                                    
  220 FORMAT(10F8.3)                                                    
  230 FORMAT(3D25.0)                                                    
C                                                                       
      RETURN                                                            
      END                                                               
      SUBROUTINE  PRESET                                                
      PARAMETER  (MAXATM=436,MAXVAR=160,MAXSS=10)                       
      PARAMETER  (MXPAIR=MAXVAR*(MAXVAR+1)/2,MXATM1=MAXATM+1)           
      PARAMETER  (MAXSS2=2*MAXSS)                                       
      COMMON/TABLE4/  KMAX,LISTK(-1:MAXVAR),JANGLE(MXPAIR),             
     &                KANGLE(MXPAIR)                                    
      COMMON/ATOM00/  KUNIT(MAXATM),KATOM(MXATM1),JATOM(MAXATM)         
      COMMON/BOND01/  IBCHAR(3,MAXVAR)                                  
      COMMON/SSPAIR/  KSSPER(6,2,MAXSS),JSS(3,MAXSS),KSS(MAXSS2),       
     &                LSS(MAXSS2)                                       
      COMMON/NUMBER/  NUMATM,NUMVAR,NN2,NUMINT,NSS                      
      DIMENSION  LSSPER(6,2)                                            
C************************************************                       
C  THIS SECTION MAKES THE LISTS OF BOND PAIRS.                          
C************************************************                       
C                                                                       
C  LIST:     JANGLE                                                     
C                                                                       
      KMAX = 0                                                          
      KMIN = NUMVAR                                                     
      LISTK(KMIN-1) = 1                                                 
      DO  30  KK = NUMVAR-1, 0, -1                                      
      DO  30  IB = 1, NUMVAR-KK                                         
        IA = IB + KK                                                    
        NAB = IA*(IA-1)/2 + IB                                          
        KAB = KDIST(IA,IB,NUMVAR,IBCHAR)                                
        KMAX = MAX (KMAX,KAB)                                           
        IF (KAB.LT.KMIN)  THEN                                          
          LISTK0 = LISTK(KMIN-1)                                        
          DO  10  I = KAB-1, KMIN-2                                     
  10      LISTK(I) = LISTK0                                             
          KMIN = KAB                                                    
        ENDIF                                                           
        DO  20  I = KMIN-1, KAB-1                                       
  20    LISTK(I) = LISTK(I) + 1                                         
        JANGLE(NAB) = LISTK(KAB-1) - LISTK(KAB)                         
  30  CONTINUE                                                          
C                                                                       
C  LIST:     KANGLE                                                     
C                                                                       
      DO  70  KK = NUMVAR-1, 0, -1                                      
      DO  70  IB = 1, NUMVAR-KK                                         
        IA = IB + KK                                                    
        NAB = IA*(IA-1)/2 + IB                                          
        KAB = KDIST(IA,IB,NUMVAR,IBCHAR)                                
        KNC = IA*10000 + IB                                             
        IF (IBCHAR(2,IB).EQ.0)   GOTO  50                               
        IF (IBCHAR(1,IA).NE.IBCHAR(1,IB))  GOTO  60                     
        IF (IBCHAR(3,IA).LT.IBCHAR(3,IB))  GOTO  60                     
  50    KNC = - KNC                                                     
  60    L = LISTK(KAB) - 1 + JANGLE(NAB)                                
        KANGLE(L) = KNC                                                 
  70  CONTINUE                                                          
C*******************************************************                
C  THIS SECTION MAKES THE LIST OF DISULFIDE BONDS.                      
C*******************************************************                
      IF (NSS.EQ.0)  RETURN                                             
      DO  140  I = 1, NSS                                               
        IA = KUNIT(KSSPER(6,1,I))                                       
        IB = KUNIT(KSSPER(3,1,I))                                       
        I2 = 2*I                                                        
        I1 = I2 - 1                                                     
        LSS(I1) = I1                                                    
        LSS(I2) = I2                                                    
        KSS(I1) = KDIST(IA,IB,NUMVAR,IBCHAR)                            
        NAB = IA*(IA-1)/2 + IB                                          
        JSS(1,I) = JANGLE(NAB)                                          
        LSSPER(1,1) = KSSPER(6,1,I)                                     
        LSSPER(1,2) = KSSPER(3,1,I)                                     
        LSSPER(2,1) = KSSPER(6,1,I)                                     
        LSSPER(2,2) = KSSPER(2,1,I)                                     
        LSSPER(3,1) = KSSPER(5,1,I)                                     
        LSSPER(3,2) = KSSPER(3,1,I)                                     
        LSSPER(4,1) = KSSPER(5,1,I)                                     
        LSSPER(4,2) = KSSPER(2,1,I)                                     
        KSS(I2) = KSS(I1) - 1                                           
        NAB = NAB+1                                                     
        JSS(2,I) = JANGLE(NAB)                                          
        LSSPER(5,1) = KSSPER(6,1,I)                                     
        LSSPER(5,2) = KSSPER(1,1,I)                                     
        NAB = NAB - IA                                                  
        JSS(3,I) = JANGLE(NAB)                                          
        LSSPER(6,1) = KSSPER(4,1,I)                                     
        LSSPER(6,2) = KSSPER(3,1,I)                                     
        DO  100  J = 1, 6                                               
        KSSPER(J,1,I) = LSSPER(J,1)                                     
  100   KSSPER(J,2,I) = LSSPER(J,2)                                     
        IF (I.EQ.1)  GOTO  140                                          
        MSS = I1                                                        
  110   MSS = MSS-1                                                     
        IF (KSS(LSS(MSS)).GE.KSS(LSS(MSS+1)))  GOTO  120                
          LS = LSS(MSS)                                                 
          LSS(MSS) = LSS(MSS+1)                                         
          LSS(MSS+1) = LS                                               
        IF (MSS.GT.1)  GOTO  110                                        
  120   MSS = I2                                                        
  130   MSS = MSS-1                                                     
        IF (KSS(LSS(MSS)).GE.KSS(LSS(MSS+1)))  GOTO  140                
          LS = LSS(MSS)                                                 
          LSS(MSS) = LSS(MSS+1)                                         
          LSS(MSS+1) = LS                                               
        IF (MSS.GT.1)  GOTO  130                                        
  140 CONTINUE                                                          
      RETURN                                                            
      END                                                               
      FUNCTION  KDIST (IA,IB,NUMVAR,IBCHAR)                             
C                                                                       
C  THIS FUNCTION SUBPROGRAM COMPUTES THE DISTANCE BETWEEN TWO BONDS     
C  IA AND IB ALONG THE CHAIN.                                           
C                                                                       
      DIMENSION  IBCHAR(3,NUMVAR)                                       
      IF (IBCHAR(1,IA).NE.IBCHAR(1,IB))  THEN                           
        KDIST=IABS(IBCHAR(1,IA)-IBCHAR(1,IB))+IBCHAR(2,IA)+IBCHAR(2,IB) 
     &                                       +IBCHAR(3,IA)+IBCHAR(3,IB) 
        KDIST = KDIST/2                                                 
      ELSE IF (IBCHAR(2,IA).NE.IBCHAR(2,IB))  THEN                      
        KDIST=IABS(IBCHAR(2,IA)-IBCHAR(2,IB))+IBCHAR(3,IA)+IBCHAR(3,IB) 
        KDIST = KDIST/2                                                 
      ELSE                                                              
        KDIST=IABS(IBCHAR(3,IA)-IBCHAR(3,IB))/2                         
      ENDIF                                                             
      RETURN                                                            
      END                                                               
      SUBROUTINE  REGENR (ANGLES)                                       
C                                                                       
C  THIS SUBROUTINE GENERATES THE ATOMIC COORDINATES.                    
C                                                                       
      IMPLICIT REAL*8 (A-H,O-Z)                                         
      PARAMETER  (MAXATM=436,MAXVAR=160,MAXSTC=3)                       
      PARAMETER  (MXATM1=MAXATM+1,MVAR1=MAXVAR+1)                       
      COMMON/NUMBER/  NUMATM,NUMVAR,NN2,NUMINT,NSS                      
      COMMON/REFRNC/  REFCRD(MAXATM,3),REFANG(MAXVAR)                   
      COMMON/COORD/   CO(MAXATM,3)                                      
      COMMON/ATOM00/  KUNIT(MAXATM),KATOM(MXATM1),JATOM(MAXATM)         
      COMMON/ATOM01/  LATOM0(0:MAXVAR),LATOM1(MAXATM)                   
      COMMON/BOND00/  DIRCOS(MAXVAR,3),IBND1(MAXVAR),IBND2(0:MVAR1)     
      COMMON/EPARAM/  PNB(28,56),CHARGE(MAXATM),NBTYPE(MAXATM)          
      COMMON/TABLE1/  IFRONT(MAXVAR),NBACK(0:MAXVAR),IBACK(0:MAXVAR,2)  
      DIMENSION  ANGLES(MAXVAR),LCYCL(3,3)                              
      DIMENSION  R(3,3),WR(3,3),WRR(9),RRST(9,MAXSTC),EMATRX(9)         
      DIMENSION  CS(MAXVAR),SN(MAXVAR),CS1(MAXVAR)                      
      EQUIVALENCE  (WR,WRR)                                             
      DATA  ZERO, ONE /0.D0, 1.D0/                                      
      DATA  LCYCL /1,3,2,2,1,3,3,2,1/                                   
      DATA  EMATRX /1.D0, 3*0.D0, 1.D0, 3*0.D0, 1.D0/                   
C***************************                                            
C     UNIT 0                                                            
C***************************                                            
      IMAXST = NBACK(0)                                                 
      DO  12  K = 1, IMAXST                                             
        DO  10  I = 1, 9                                                
  10      RRST(I,K) = EMATRX(I)                                         
  12  CONTINUE                                                          
C***************************                                            
C     UNITS 1 TO NUMVAR                                                 
C***************************                                            
      DO  20  I = 1, NUMVAR                                             
        ANG = ANGLES(I) - REFANG(I)                                     
        CS(I) = DCOS(ANG)                                               
        SN(I) = DSIN(ANG)                                               
        CS1(I) = ONE - CS(I)                                            
  20  CONTINUE                                                          
      DO  100  I = 1, NUMVAR                                            
        L1 = IBND1(I)                                                   
        L2 = IBND2(I)                                                   
        AB = ZERO                                                       
        DO  30  L = 1, 3                                                
        DIRCOS(I,L) = CO(L2,L) - CO(L1,L)                               
  30    AB = AB + DIRCOS(I,L)*DIRCOS(I,L)                               
          AB = ONE / DSQRT(AB)                                          
        DO  35  L = 1, 3                                                
  35    DIRCOS(I,L) = DIRCOS(I,L)*AB                                    
*VOPTION VEC                                                            
        DO  40  L = 1, 3                                                
          LC1 = LCYCL(L,1)                                              
          LC2 = LCYCL(L,2)                                              
          U1 = CS1(I) * DIRCOS(I,LC1) * DIRCOS(I,LC2)                   
          U2 = SN(I)  * DIRCOS(I,LCYCL(L,3))                            
          R(LC1,LC2) = U1 - U2                                          
          R(LC2,LC1) = U1 + U2                                          
          R(L,L) = CS(I) + CS1(I)*DIRCOS(I,L)*DIRCOS(I,L)               
  40    CONTINUE                                                        
        DO  50  L = 1, 3                                                
          WR(L,1) = R(L,1)*RRST(1,IMAXST) + R(L,2)*RRST(2,IMAXST)       
     &                 + R(L,3)*RRST(3,IMAXST)                          
          WR(L,2) = R(L,1)*RRST(4,IMAXST) + R(L,2)*RRST(5,IMAXST)       
     &                 + R(L,3)*RRST(6,IMAXST)                          
          WR(L,3) = R(L,1)*RRST(7,IMAXST) + R(L,2)*RRST(8,IMAXST)       
     &                 + R(L,3)*RRST(9,IMAXST)                          
  50    CONTINUE                                                        
        Q1 = CO(L2,1)                                                   
        Q2 = CO(L2,2)                                                   
        Q3 = CO(L2,3)                                                   
        JI = LATOM0(I)                                                  
        JE = LATOM0(I-1)-1                                              
*VOPTION VEC                                                            
          DO  55  J = JI, JE                                            
            K = LATOM1(J)                                               
            CO(K,1)=WRR(1)*REFCRD(K,1)+WRR(4)*REFCRD(K,2)               
     &                + WRR(7)*REFCRD(K,3) + Q1                         
            CO(K,2)=WRR(2)*REFCRD(K,1)+WRR(5)*REFCRD(K,2)               
     &                + WRR(8)*REFCRD(K,3) + Q2                         
            CO(K,3)=WRR(3)*REFCRD(K,1)+WRR(6)*REFCRD(K,2)               
     &                + WRR(9)*REFCRD(K,3) + Q3                         
  55      CONTINUE                                                      
        IF (NBACK(I)-1)  80, 60, 70                                     
  60      DO  65  L = 1, 9                                              
  65      RRST(L,IMAXST) = WRR(L)                                       
            GOTO  80                                                    
  70      DO  75  L = 1, 9                                              
          RRST(L,IMAXST) = WRR(L)                                       
  75      RRST(L,IMAXST+1) = WRR(L)                                     
  80        IMAXST = IMAXST + NBACK(I) - 1                              
 100  CONTINUE                                                          
      RETURN                                                            
      END                                                               
      SUBROUTINE ENERGY(VAR,ETOTAL)                                     
C                                                                       
C  THIS SUBROUTINE COMPUTES THE CONFORMATIONAL ENERGY.                  
C                                                                       
      IMPLICIT REAL*8(A-H,O-Z)                                          
      PARAMETER  (MAXVAR=160,MAXINT=2740,MAXSS=10)                      
      PARAMETER  (MXPAIR=MAXVAR*(MAXVAR+1)/2,MAXJ=2*MAXVAR)             
      PARAMETER  (MAXSS2=MAXSS*2)                                       
      COMMON/NUMBER/  NUMATM,NUMVAR,NN2,NUMINT,NSS                      
      COMMON/TABLE1/  IFRONT(MAXVAR),NBACK(0:MAXVAR),IBACK(0:MAXVAR,2)  
      COMMON/TABLE3/  NINT,IPAIR1(MAXINT),IPAIR2(MAXINT),LINT(-1:MAXVAR)
      COMMON/TABLE4/  KMAX,LISTK(-1:MAXVAR),NOPAIR(MXPAIR),             
     &                 KANGLE(MXPAIR)                                   
      COMMON/TORSN0/  A(MAXVAR),NB(MAXVAR),NS(MAXVAR),IFTOR(MAXVAR)     
      COMMON/SSPAIR/  KSSPER(6,2,MAXSS),JSS(3,MAXSS),KSS(MAXSS2),       
     &                LSS(MAXSS2)                                       
      COMMON/ENE000/  ETOR,EES,ENB,ELOOP,ECYSTR                         
      DIMENSION  VAR(MAXVAR)                                            
      DATA  ZERO,ONE /0.D0,1.D0/                                        
      CALL  CLOCK(TIME0,0,2)                                            
C                                                                       
C  GENERATE THE ATOMIC COORDINATES.                                     
C                                                                       
      CALL  REGENR (VAR)                                                
C                                                                       
C  INITIALIZE THE FOLLOWING PARAMETERS.                                 
C                                                                       
      ETOR   = ZERO                                                     
      ENB    = ZERO                                                     
      EES    = ZERO                                                     
      ELOOP  = ZERO                                                     
      ECYSTR = ZERO                                                     
C                                                                       
C  COMPUTE THE ENERGIES.                                                
C                                                                       
C  ENB & EES                                                            
C                                                                       
      CALL  ECAL                                                        
C                                                                       
C  ETOR                                                                 
C                                                                       
      DO  140  I = 1, NUMVAR                                            
        IF (IFTOR(I).NE.1)  GOTO  140                                   
          ETOR = ETOR + A(I)*(ONE+NS(I)*DCOS(NB(I)*VAR(I)))             
  140 CONTINUE                                                          
C                                                                       
C  ELOOP & ECYSTR                                                       
C                                                                       
      IF (NSS.NE.0)  THEN                                               
        DO  160  I = 1, NSS                                             
          CALL  ECALSS (KSSPER(1,1,I),KSSPER(1,2,I))                    
  160   CONTINUE                                                        
      ENDIF                                                             
C                                                                       
C  ETOTAL                                                               
C                                                                       
      ETOTAL = ETOR + EES + ENB + ELOOP + ECYSTR                        
C                                                                       
      RETURN                                                            
      END                                                               
      SUBROUTINE  ECAL                                                  
C                                                                       
C  THIS SUBROUTINE COMPUTES THE NONBONDED AND ELECTROSTATIC ENERGIES.   
C                                                                       
      IMPLICIT REAL*8(A-H,O-Z)                                          
      PARAMETER  (MAXATM=436)                                           
      COMMON/NUMBER/  NUMATM,JUMVAR,NN2,NUMINT,NSS                      
      COMMON/COORD/   CO(MAXATM,3)                                      
      COMMON/EPARAM/  PNB(28,56),CHARGE(MAXATM),NBTYPE(MAXATM)          
      COMMON/ENE000/  ETOR,EES,ENB,ELOOP,ECYSTR                         
      COMMON/INTER0/  INTER(MAXATM),INTATM(3,3000)                      
      DATA  HALF,ONE,TWO /0.5D0,1.D0,2.D0/                              
      MA = 1                                                            
      DO  100  L = 1, NUMINT                                            
        QA = CHARGE(MA)                                                 
        NBA = NBTYPE(MA)                                                
        IATMI = MA + INTATM(1,L)                                        
        NUM4 = INTATM(2,L)                                              
        IATMF = IATMI + NUM4 - 1                                        
        IF (NUM4.EQ.0)  GOTO  20                                        
C                                                                       
C  1-4 INTERACTION                                                      
C                                                                       
        DO  10  MB = IATMI, IATMF                                       
          RI2 = ONE / ((CO(MA,1)-CO(MB,1))**2 + (CO(MA,2)-CO(MB,2))**2  
     &                  + (CO(MA,3)-CO(MB,3))**2)                       
          EES = EES + QA*CHARGE(MB)*DSQRT(RI2)                          
          NBB = NBTYPE(MB)                                              
          K = NBB + NBB                                                 
          RO2 = PNB(NBA,K)*RI2                                          
          RO4 = RO2*RO2                                                 
          RO6 = RO2*RO4                                                 
          U1 = PNB(NBA,K-1)*RO6                                         
          IF (U1.GE.0)  THEN                                            
            ENB = ENB + U1*(HALF*RO6 - TWO)                             
          ELSE                                                          
            ENB = ENB - U1*(RO6 - TWO*RO4)                              
          ENDIF                                                         
  10    CONTINUE                                                        
C                                                                       
  20    KEY = INTATM(3,L)                                               
        IF (KEY.EQ.0)  GOTO  40                                         
        IATMI = IATMF + 1                                               
        IATMF = NUMATM                                                  
        IF (KEY.GT.0)  IATMF = IATMI + KEY - 1                          
C                                                                       
C  1-5 INTERACTION                                                      
C                                                                       
                                                                        
COMMENT BY NOGUTI                                                       
* TUNING FOR VP100                                                      
        ENB1=0.                                                         
        ENB2=0.                                                         
* ENB IN THE FOLLOWING LOOP ARE CHANGED TO ENB1 AND ENB2                
        DO  30  MB = IATMI, IATMF                                       
          RI2 = ONE / ((CO(MA,1)-CO(MB,1))**2 + (CO(MA,2)-CO(MB,2))**2  
     &                     + (CO(MA,3)-CO(MB,3))**2)                    
          EES = EES + QA*CHARGE(MB)*DSQRT(RI2)                          
          NBB = NBTYPE(MB)                                              
          K = NBB + NBB                                                 
          RO2 = PNB(NBA,K)*RI2                                          
          RO4 = RO2*RO2                                                 
          RO6 = RO2*RO4                                                 
          U1 = PNB(NBA,K-1)*RO6                                         
          IF (U1.GE.0)  THEN                                            
            ENB1 = ENB1 + U1*(RO6 - TWO)                                
          ELSE                                                          
            ENB2 = ENB2 - U1*(RO6 - TWO*RO4)                            
          ENDIF                                                         
  30    CONTINUE                                                        
        ENB=ENB+ENB1+ENB2                                               
*TUNING END                                                             
COMMENT END                                                             
                                                                        
C                                                                       
  40    IF (NUM4.EQ.0.AND.KEY.EQ.0)  MA = MA + 1                        
        IF (KEY.LT.0)  MA = MA + 1                                      
  100 CONTINUE                                                          
      RETURN                                                            
      END                                                               
      SUBROUTINE  ECALSS (IPAIR1,IPAIR2)                                
C                                                                       
C  THIS SUBROUTINE COMPUTES THE ENERGIES OF DISULFIDE BRIDGES           
C                                                                       
      IMPLICIT REAL*8(A-H,O-Z)                                          
      PARAMETER  (MAXATM=436)                                           
      COMMON/COORD/   CO(MAXATM,3)                                      
      COMMON/ENE000/  ETOR,EES,ENB,ELOOP,ECYSTR                         
      COMMON/DISULF/  RSS(4),ASS(4),BSS(9)                              
      DIMENSION  IPAIR1(6),IPAIR2(6),RMAG(6),RI1(6)                     
      DO  10  L = 1, 6                                                  
        JPA = IPAIR1(L)                                                 
        JPB = IPAIR2(L)                                                 
        RMAG(L) = (CO(JPA,1)-CO(JPB,1))**2 + (CO(JPA,2)-CO(JPB,2))**2   
     &               + (CO(JPA,3)-CO(JPB,3))**2                         
        RI1(L) = DSQRT(RMAG(L))                                         
  10  CONTINUE                                                          
        DO  20  L = 1, 3                                                
          ELOOP = ELOOP + ASS(L)*(RI1(L)-RSS(L))**2                     
  20    CONTINUE                                                        
        ECYSTR = ECYSTR + ASS(4)*(RI1(4)-RSS(4))**2                     
          RETURN                                                        
C 21    DO  22  L = 5, 6                                                
C         IF (RI1(L).LT.BSS(8))  THEN                                   
C         ECYSTR = ECYSTR + ((BSS(1)*RMAG(L) + BSS(3))*RMAG(L) + BSS(5))
C    &           *RMAG(L) + ((BSS(2)*RMAG(L) + BSS(4))*RMAG(L) + BSS(6))
C    &            *RI1(L) + BSS(7)                                      
C         ELSE                                                          
C         ECYSTR = ECYSTR + BSS(9)*(RI1(L)-BSS(8))**2                   
C         ENDIF                                                         
C 22    CONTINUE                                                        
C     RETURN                                                            
      END                                                               
      SUBROUTINE DERVTV(VAR,ETOTAL,F,G)                                 
      IMPLICIT REAL*8(A-H,O-Z)                                          
      PARAMETER  (MAXATM=436,MAXVAR=160,MAXINT=2740,MAXSS=10)           
      PARAMETER  (MXPAIR=MAXVAR*(MAXVAR+1)/2,MVAR1=MAXVAR+1)            
      PARAMETER  (MAXJ=2*MAXVAR,MAXSS2=MAXSS*2)                         
      COMMON/NUMBER/  NUMATM,NUMVAR,NN2,NUMINT,NSS                      
      COMMON/BOND00/  DIRCOS(MAXVAR,3),IBND1(MAXVAR),IBND2(0:MVAR1)     
      COMMON/COORD/   CO(MAXATM,3)                                      
      COMMON/TABLE1/  IFRONT(MAXVAR),NBACK(0:MAXVAR),IBACK(0:MAXVAR,2)  
      COMMON/TABLE3/  NINT,IPAIR1(MAXINT),IPAIR2(MAXINT),LINT(-1:MAXVAR)
      COMMON/TABLE4/  KMAX,LISTK(-1:MAXVAR),JANGLE(MXPAIR),             
     &                 KANGLE(MXPAIR)                                   
      COMMON/DCAL00/  LFIN,JFIN                                         
      COMMON/TORSN0/  A(MAXVAR),NB(MAXVAR),NS(MAXVAR),IFTOR(MAXVAR)     
      COMMON/SSPAIR/  KSSPER(6,2,MAXSS),JSS(3,MAXSS),KSS(MAXSS2),       
     &                LSS(MAXSS2)                                       
      COMMON/RAB/     R(30,MAXJ,3)                                      
      COMMON/ENE000/  ETOR,EES,ENB,ELOOP,ECYSTR                         
      DIMENSION  VAR(MAXVAR),F(MAXVAR),G(NN2),EF(MAXVAR,6)              
      DIMENSION  JPAIR1(20000),JPAIR2(20000),VECPRD(MAXVAR,3)           
      DIMENSION  JAA(MAXJ),JBB(MAXJ),JBF(MAXJ)                          
      DIMENSION  LIST(30)                                               
      DATA  LIST /1,7,13,4,24,28,2,8,14,19,11,29,3,9,15,20,25,18,10,    
     &            16,21,22,23,5,17,26,27,6,12,30/                       
      DATA  ZERO /0.D0/                                                 
      CALL  CLOCK(TIME0,0,2)                                            
C                                                                       
C  GENERATES THE ATOMIC COORDINATES.                                    
C                                                                       
      CALL  REGENR (VAR)                                                
C                                                                       
      DO  1001  I = 1, NUMVAR                                           
        JBND2 = IBND2(I)                                                
        VECPRD(I,1) = DIRCOS(I,2)*CO(JBND2,3)-DIRCOS(I,3)*CO(JBND2,2)   
        VECPRD(I,2) = DIRCOS(I,3)*CO(JBND2,1)-DIRCOS(I,1)*CO(JBND2,3)   
        VECPRD(I,3) = DIRCOS(I,1)*CO(JBND2,2)-DIRCOS(I,2)*CO(JBND2,1)   
 1001 CONTINUE                                                          
C                                                                       
C  INITIALIZE THE FOLLOWING PARAMETERS.                                 
C                                                                       
      KADD1 = 1                                                         
      KADD2 = 2                                                         
      KADD3 = 3                                                         
C                                                                       
      ETOR   = ZERO                                                     
      ENB    = ZERO                                                     
      EES    = ZERO                                                     
      ELOOP  = ZERO                                                     
      ECYSTR = ZERO                                                     
C                                                                       
      DO  1002  J = 1, NUMVAR                                           
        EF(J,1) = ZERO                                                  
        EF(J,2) = ZERO                                                  
        EF(J,3) = ZERO                                                  
        EF(J,4) = ZERO                                                  
        EF(J,5) = ZERO                                                  
        EF(J,6) = ZERO                                                  
 1002 CONTINUE                                                          
C                                                                       
      DO  1003  I = 1, NN2                                              
 1003 G(I) = ZERO                                                       
C************************************************************           
C  THIS SECTION CAICULATES THE FIRST AND SECOND DERIVATIVES.            
C************************************************************           
      MSS = 1                                                           
      DO  100  K = KMAX, 0, -1                                          
        JK = LISTK(K)                                                   
        JFIN = LISTK(K-1) - LISTK(K)                                    
C                                                                       
        DO  1  J = JK, JK+JFIN-1                                        
          I = J-JK+1                                                    
          KA = IABS(KANGLE(J))                                          
          JAA(I) = KA/10000                                             
          JBB(I) = KA - JAA(I)*10000                                    
          JBF(I) = JBB(I)                                               
          IF (KANGLE(J).LT.0)  JBF(I) = IFRONT(JBB(I))                  
   1    CONTINUE                                                        
C                                                                       
         LFIN = LINT(K-1) - LINT(K)                                     
C                                                                       
         DO  1000  J01 = 1, 30, 5                                       
         DO  1000  J02 = 1, JFIN                                        
           R(J01  ,J02,KADD1) = ZERO                                    
           R(J01+1,J02,KADD1) = ZERO                                    
           R(J01+2,J02,KADD1) = ZERO                                    
           R(J01+3,J02,KADD1) = ZERO                                    
 1000      R(J01+4,J02,KADD1) = ZERO                                    
C                                                                       
         IF (LFIN.EQ.0)  GOTO  5                                        
C                                                                       
        IF (K.LE.2)  THEN                                               
          LI = LINT(K) - LINT(2) + 1                                    
          CALL  DCAL (K,IPAIR1(LI),IPAIR2(LI),R(1,1,KADD1),JANGLE(JK),  
     &                JAA,JBF,EF)                                       
          IF (NSS.EQ.0)  GOTO  5                                        
          IF (MSS.LT.0)  GOTO  5                                        
  20      IF (KSS(LSS(MSS)).NE.K)  GOTO  5                              
            LS = (LSS(MSS)+1)/2                                         
            CALL  DCALSS (KSSPER(1,1,LS),KSSPER(1,2,LS),R(1,1,KADD1),   
     &                    JSS(1,LS),KANGLE(JK),EF,MOD(LSS(MSS)+1,2)+1)  
            MSS = MSS+1                                                 
            IF (MSS.LE.2*NSS)  GOTO  20                                 
            MSS = -MSS                                                  
        ELSE                                                            
          MFLAG = -1                                                    
          IF (NSS.EQ.0)  GOTO   40                                      
          IF (MSS.LT.0)  GOTO   40                                      
   30     IF (KSS(LSS(MSS)).NE.K)  GOTO   40                            
            LS = (LSS(MSS)+1)/2                                         
            CALL  DCALSS (KSSPER(1,1,LS),KSSPER(1,2,LS),R(1,1,KADD1),   
     &                    JSS(1,LS),KANGLE(JK),EF,MOD(LSS(MSS)+1,2)+1)  
            MSS = MSS + 1                                               
            MFLAG = 1                                                   
            IF (MSS.LE.2*NSS)  GOTO   30                                
              MSS = - MSS                                               
   40     CALL  PAIR15 (JPAIR1,JPAIR2,JAA,JBF,JFIN,MFLAG)               
          CALL  DCAL (MFLAG,JPAIR1,JPAIR2,R(1,1,KADD1),JANGLE(JK),      
     &                JAA,JBF,EF)                                       
        ENDIF                                                           
C                                                                       
   5    IF (K.EQ.KMAX)  GOTO  60                                        
      DO  600  J = JK, JK+JFIN-1                                        
        JJ = J-JK+1                                                     
        IA = JAA(JJ)                                                    
        IB = JBB(JJ)                                                    
        IFLAG = NBACK(IA)-1                                             
        IF (KANGLE(J))  300, 600, 200                                   
  200     IF (NBACK(IB)-1)  210, 220, 230                               
  210       IF(IFLAG)  600, 212, 212                                    
  212         IA1 = IBACK(IA,1)                                         
              MA = (IA1*(IA1-1))/2                                      
              J1 = MOD(JANGLE(MA+IB),10000)                             
              IF(IFLAG)  600, 410, 214                                  
  214           IA2 = IBACK(IA,2)                                       
                MA = (IA2*(IA2-1))/2                                    
                J2 = MOD(JANGLE(MA+IB),10000)                           
                  GOTO  420                                             
  220     IB1 = IBACK(IB,1)                                             
  222     MA = (IA*(IA-1))/2                                            
          J1 = MOD(JANGLE(MA+IB1),10000)                                
          IF(IFLAG)  410, 224, 224                                      
  224       IA1 = IBACK(IA,1)                                           
            MA = (IA1*(IA1-1))/2                                        
            J2 = MOD(JANGLE(MA+IB),10000)                               
            J5 = MOD(JANGLE(MA+IB1),10000)                              
            IF(IFLAG)  600, 430, 226                                    
  226         IA2 = IBACK(IA,2)                                         
              MA = (IA2*(IA2-1))/2                                      
              J3 = MOD(JANGLE(MA+IB),10000)                             
              J6 = MOD(JANGLE(MA+IB1),10000)                            
                GOTO  440                                               
  230     IB1 = IBACK(IB,1)                                             
          IB2 = IBACK(IB,2)                                             
  232     MA = (IA*(IA-1))/2                                            
          J1 = MOD(JANGLE(MA+IB1),10000)                                
          J2 = MOD(JANGLE(MA+IB2),10000)                                
          IF(IFLAG)  420, 234, 234                                      
  234       IA1 = IBACK(IA,1)                                           
            MA = (IA1*(IA1-1))/2                                        
            J3 = MOD(JANGLE(MA+IB),10000)                               
            J5 = MOD(JANGLE(MA+IB1),10000)                              
            J6 = MOD(JANGLE(MA+IB2),10000)                              
            IF(IFLAG)  600, 440, 236                                    
  236         IA2 = IBACK(IA,2)                                         
              MA = (IA2*(IA2-1))/2                                      
              J4 = MOD(JANGLE(MA+IB),10000)                             
              J7 = MOD(JANGLE(MA+IB1),10000)                            
              J8 = MOD(JANGLE(MA+IB2),10000)                            
                GOTO  450                                               
  300   IFRB = IFRONT(IB)                                               
        IF(IFRB)  600, 310, 330                                         
  310     IF(NBACK(IFRB)-1)  600, 210, 320                              
  320       IB1 = IBACK(IFRB,1)                                         
            IF(IB1.EQ.IB)  IB1 = IBACK(IFRB,2)                          
            IF(IB1.LT.IA)  GOTO  222                                    
            MB = (IB1*(IB1-1))/2                                        
            J2 = MOD(JANGLE(MB+IA),10000)                               
            IF(IFLAG)  460, 322, 322                                    
  322         IA1 = IBACK(IA,1)                                         
              MA = (IA1*(IA1-1))/2                                      
              J1 = MOD(JANGLE(MA+IB),10000)                             
              J5 = MOD(JANGLE(MB+IA1),10000)                            
              IF(IFLAG)  600, 480, 324                                  
  324           IA2 = IBACK(IA,2)                                       
                MA = (IA2*(IA2-1))/2                                    
                J3 = MOD(JANGLE(MA+IB),10000)                           
                J6 = MOD(JANGLE(MB+IA2),10000)                          
                  GOTO  490                                             
  330     IB1 = IFRB                                                    
          IF(NBACK(IFRB)-1)  600, 222, 332                              
  332       IB2 = IBACK(IFRB,1)                                         
            IF(IB2.EQ.IB)  IB2 = IBACK(IFRB,2)                          
            IF(IB2.LT.IA)  GOTO  232                                    
            MA = (IA*(IA-1))/2                                          
            J1 = MOD(JANGLE(MA+IB1),10000)                              
            MB = (IB2*(IB2-1))/2                                        
            J2 = MOD(JANGLE(MB+IA),10000)                               
            IF(IFLAG)  470, 334, 334                                    
  334         IA1 = IBACK(IA,1)                                         
              MA = (IA1*(IA1-1))/2                                      
              J3 = MOD(JANGLE(MA+IB),10000)                             
              J5 = MOD(JANGLE(MA+IB1),10000)                            
              J6 = MOD(JANGLE(MB+IA1),10000)                            
              IF(IFLAG)  600, 500, 336                                  
  336           IA2 = IBACK(IA,2)                                       
                MA = (IA2*(IA2-1))/2                                    
                J4 = MOD(JANGLE(MA+IB),10000)                           
                J7 = MOD(JANGLE(MA+IB1),10000)                          
                J8 = MOD(JANGLE(MB+IA2),10000)                          
                  GOTO  510                                             
  410 DO  412  I = 1, 30                                                
  412 R(I,JJ,KADD1)=R(I,JJ,KADD1) + R(I,J1,KADD2)                       
        GOTO  600                                                       
  420 DO  422  I = 1, 30                                                
  422 R(I,JJ,KADD1)=R(I,JJ,KADD1) + R(I,J1,KADD2) + R(I,J2,KADD2)       
        GOTO  600                                                       
  430 DO  432  I = 1, 30                                                
  432 R(I,JJ,KADD1)=R(I,JJ,KADD1) + R(I,J1,KADD2) + R(I,J2,KADD2)       
     &              - R(I,J5,KADD3)                                     
        GOTO  600                                                       
  440 DO  442  I = 1, 30                                                
  442 R(I,JJ,KADD1)=R(I,JJ,KADD1) + R(I,J1,KADD2) + R(I,J2,KADD2)       
     &            + R(I,J3,KADD2) - R(I,J5,KADD3) - R(I,J6,KADD3)       
        GOTO  600                                                       
  450 DO  452  I = 1, 30                                                
  452 R(I,JJ,KADD1)=R(I,JJ,KADD1) + R(I,J1,KADD2) + R(I,J2,KADD2)       
     &            + R(I,J3,KADD2) + R(I,J4,KADD2) - R(I,J5,KADD3)       
     &            - R(I,J6,KADD3) - R(I,J7,KADD3) - R(I,J8,KADD3)       
        GOTO  600                                                       
*VOPTION VEC                                                            
*VOCL LOOP,NOVREC(R)                                                    
  460 DO  462  I = 1, 30                                                
  462 R(I,JJ,KADD1)=R(I,JJ,KADD1) + R(LIST(I),J2,KADD2)                 
        GOTO  600                                                       
*VOPTION VEC                                                            
*VOCL LOOP,NOVREC(R)                                                    
  470 DO  472  I = 1, 30                                                
  472 R(I,JJ,KADD1)=R(I,JJ,KADD1) + R(I,J1,KADD2) + R(LIST(I),J2,KADD2) 
        GOTO  600                                                       
*VOPTION VEC                                                            
*VOCL LOOP,NOVREC(R)                                                    
  480 DO  482  I = 1, 30                                                
  482 R(I,JJ,KADD1)=R(I,JJ,KADD1) + R(I,J1,KADD2) + R(LIST(I),J2,KADD2) 
     &            - R(LIST(I),J5,KADD3)                                 
        GOTO  600                                                       
*VOPTION VEC                                                            
*VOCL LOOP,NOVREC(R)                                                    
  490 DO  492  I = 1, 30                                                
  492 R(I,JJ,KADD1)=R(I,JJ,KADD1) + R(I,J1,KADD2) + R(LIST(I),J2,KADD2) 
     &     + R(I,J3,KADD2) - R(LIST(I),J5,KADD3) - R(LIST(I),J6,KADD3)  
        GOTO  600                                                       
*VOPTION VEC                                                            
*VOCL LOOP,NOVREC(R)                                                    
  500 DO  502  I = 1, 30                                                
  502 R(I,JJ,KADD1)=R(I,JJ,KADD1) + R(I,J1,KADD2) + R(LIST(I),J2,KADD2) 
     &            + R(I,J3,KADD2) - R(I,J5,KADD3) - R(LIST(I),J6,KADD3) 
        GOTO  600                                                       
*VOPTION VEC                                                            
*VOCL LOOP,NOVREC(R)                                                    
  510 DO  512  I = 1, 30                                                
  512 R(I,JJ,KADD1)=R(I,JJ,KADD1) + R(I,J1,KADD2) + R(LIST(I),J2,KADD2) 
     &              + R(I,J3,KADD2) + R(I,J4,KADD2) - R(I,J5,KADD3)     
     &      - R(LIST(I),J6,KADD3) - R(I,J7,KADD3) - R(LIST(I),J8,KADD3) 
  600 CONTINUE                                                          
C                                                                       
*VOPTION VEC,NOFVAL                                                     
*VOCL LOOP,TEMP(I,IA,IB,G0,NADD)                                        
  60  DO  70  J = JK, JK+JFIN-1                                         
      I = J - JK + 1                                                    
        IA = JAA(I)                                                     
        IB = JBB(I)                                                     
      G0 =     DIRCOS(IA,1)*(R(1,I,KADD1)*DIRCOS(IB,1)+R(7,I,KADD1)*    
     &DIRCOS(IB,2)+R(13,I,KADD1)*DIRCOS(IB,3)+R(4,I,KADD1)*VECPRD(IB,1) 
     &+R(24,I,KADD1)*VECPRD(IB,2)+R(28,I,KADD1)*VECPRD(IB,3))           
      G0 = G0 + DIRCOS(IA,2)*(R(2,I,KADD1)*DIRCOS(IB,1)+R(8,I,KADD1)*   
     &DIRCOS(IB,2)+R(14,I,KADD1)*DIRCOS(IB,3)+R(19,I,KADD1)*VECPRD(IB,1)
     &+R(11,I,KADD1)*VECPRD(IB,2)+R(29,I,KADD1)*VECPRD(IB,3))           
      G0 = G0 + DIRCOS(IA,3)*(R(3,I,KADD1)*DIRCOS(IB,1)+R(9,I,KADD1)*   
     &DIRCOS(IB,2)+R(15,I,KADD1)*DIRCOS(IB,3)+R(20,I,KADD1)*VECPRD(IB,1)
     &+R(25,I,KADD1)*VECPRD(IB,2)+R(18,I,KADD1)*VECPRD(IB,3))           
      G0 = G0 + VECPRD(IA,1)*(R(4,I,KADD1)*DIRCOS(IB,1)+R(10,I,KADD1)*  
     &DIRCOS(IB,2)+R(16,I,KADD1)*DIRCOS(IB,3)+R(21,I,KADD1)*VECPRD(IB,1)
     &+R(22,I,KADD1)*VECPRD(IB,2)+R(23,I,KADD1)*VECPRD(IB,3))           
      G0 = G0 + VECPRD(IA,2)*(R(5,I,KADD1)*DIRCOS(IB,1)+R(11,I,KADD1)*  
     &DIRCOS(IB,2)+R(17,I,KADD1)*DIRCOS(IB,3)+R(22,I,KADD1)*VECPRD(IB,1)
     &+R(26,I,KADD1)*VECPRD(IB,2)+R(27,I,KADD1)*VECPRD(IB,3))           
      G0 = G0 + VECPRD(IA,3)*(R(6,I,KADD1)*DIRCOS(IB,1)+R(12,I,KADD1)*  
     &DIRCOS(IB,2)+R(18,I,KADD1)*DIRCOS(IB,3)+R(23,I,KADD1)*VECPRD(IB,1)
     &+R(27,I,KADD1)*VECPRD(IB,2)+R(30,I,KADD1)*VECPRD(IB,3))           
      NADD = IA*(IA-1)/2 + IB                                           
      IF (KANGLE(J).GT.0)  THEN                                         
        G(NADD) = -G0                                                   
      ELSE                                                              
        G(NADD) = G0                                                    
      ENDIF                                                             
  70  CONTINUE                                                          
C                                                                       
      KA1 = KADD1                                                       
      KADD1 = KADD3                                                     
      KADD3 = KADD2                                                     
      KADD2 = KA1                                                       
  100 CONTINUE                                                          
C                                                                       
C***********************************************************            
C                                                                       
      DO  130  I = NUMVAR-1, 1, -1                                      
        IF (NBACK(I)-1)  130, 110, 120                                  
*VOPTION VEC                                                            
*VOCL LOOP,NOVREC(EF)                                                   
  110     DO  112  J = 1, 6                                             
  112     EF(I,J) = EF(I,J) + EF(IBACK(I,1),J)                          
            GOTO  130                                                   
*VOPTION VEC                                                            
*VOCL LOOP,NOVREC(EF)                                                   
  120     DO  122  J = 1, 6                                             
  122     EF(I,J) = EF(I,J) + EF(IBACK(I,1),J) + EF(IBACK(I,2),J)       
  130 CONTINUE                                                          
C                                                                       
*VOPTION VEC                                                            
*VOCL LOOP,NOVREC(G)                                                    
      DO  140  I = 1, NUMVAR                                            
      F(I)=-DIRCOS(I,1)*EF(I,1)-DIRCOS(I,2)*EF(I,2)-DIRCOS(I,3)*EF(I,3) 
     &     -VECPRD(I,1)*EF(I,4)-VECPRD(I,2)*EF(I,5)-VECPRD(I,3)*EF(I,6) 
        IF (IFTOR(I).EQ.1)  THEN                                        
          COSV = A(I)*NS(I)*DCOS(NB(I)*VAR(I))                          
          ETOR = ETOR + A(I) + COSV                                     
          F(I) = F(I) - A(I)*NS(I)*NB(I)*DSIN(NB(I)*VAR(I))             
          NADD = I*(I+1)/2                                              
          G(NADD) = G(NADD) - NB(I)*NB(I)*COSV                          
        ENDIF                                                           
  140 CONTINUE                                                          
C                                                                       
      ETOTAL = ETOR + EES + ENB + ELOOP + ECYSTR                        
C                                                                       
 2000 FORMAT(' DERVTV:'/' ',10X,'ETOR',10X,'EES',10X,'ENB',9X,          
     &       'ELOOP',7X,'ECYSTR'/' ',5X,1P5D13.5/)                      
      RETURN                                                            
      END                                                               
      SUBROUTINE  DCAL (KFLAG,IPAIR1,IPAIR2,EL,NOPAIR,JAA,JBF,EF)       
      IMPLICIT REAL*8(A-H,O-Z)                                          
      PARAMETER  (MAXATM=436,MAXVAR=160)                                
C     PARAMETER  (MAXPER=20*MAXVAR)                                     
      PARAMETER  (MAXPER=200*MAXVAR)                                    
      COMMON/COORD/   CO(MAXATM,3)                                      
      COMMON/EPARAM/  PNB(1568),CHARGE(MAXATM),NBTYPE(MAXATM)           
      COMMON/ENE000/  ETOR,EES,ENB,ELOOP,ECYSTR                         
      COMMON/DCAL00/  LFIN,JFIN                                         
      COMMON/TABLE1/  IFRONT(MAXVAR),NBACK(0:MAXVAR),IBACK(0:MAXVAR,2)  
      DIMENSION  EL(30,JFIN),NOPAIR(JFIN),JAA(JFIN),JBF(JFIN)           
      DIMENSION  EF(MAXVAR,6)                                           
      DIMENSION  IPAIR1(LFIN),IPAIR2(LFIN),CAB(MAXPER),DAB(MAXPER)      
      DIMENSION  IPA(MAXPER),IPB(MAXPER)                                
      DIMENSION  XA(MAXPER)  ,YA(MAXPER)  ,ZA(MAXPER)                   
      DIMENSION  XB(MAXPER)  ,YB(MAXPER)  ,ZB(MAXPER)                   
      DIMENSION  XAB(MAXPER) ,YAB(MAXPER) ,ZAB(MAXPER)                  
      DIMENSION  XAXB(MAXPER),YAXB(MAXPER),ZAXB(MAXPER)                 
      DIMENSION  RI2(MAXPER)                                            
      DATA  HALF,ONE,TWO /0.5D0,1.D0,2.D0/                              
      DO  10  L = 1, LFIN                                               
        JPA = IABS(IPAIR1(L))                                           
        JPB = IPAIR2(L)                                                 
        XA(L) = CO(JPA,1)                                               
        YA(L) = CO(JPA,2)                                               
        ZA(L) = CO(JPA,3)                                               
        XB(L) = CO(JPB,1)                                               
        YB(L) = CO(JPB,2)                                               
        ZB(L) = CO(JPB,3)                                               
        CAB(L) = CHARGE(JPA)*CHARGE(JPB)                                
        IPB(L) = (NBTYPE(JPB)-1)*56 + NBTYPE(JPA)                       
  10  CONTINUE                                                          
      DO  11  L = 1, LFIN                                               
        XAB(L) = XA(L)-XB(L)                                            
        YAB(L) = YA(L)-YB(L)                                            
        ZAB(L) = ZA(L)-ZB(L)                                            
        XAXB(L) = YA(L)*ZB(L) - ZA(L)*YB(L)                             
        YAXB(L) = ZA(L)*XB(L) - XA(L)*ZB(L)                             
        ZAXB(L) = XA(L)*YB(L) - YA(L)*XB(L)                             
        RI2(L) = ONE / (XAB(L)*XAB(L)+YAB(L)*YAB(L)+ZAB(L)*ZAB(L))      
        Q = CAB(L)*DSQRT(RI2(L))                                        
        EES = EES + Q                                                   
        CAB(L) = - Q*RI2(L)                                             
        DAB(L) = 3*(Q*RI2(L)*RI2(L))                                    
        IPA(L) = IPB(L)+28                                              
  11  CONTINUE                                                          
                                                                        
COMMENT BY NOGUTI                                                       
* TUNING FOR VP100                                                      
        ENB1=0.                                                         
        ENB2=0.                                                         
        ENB3=0.                                                         
* ENB IN THE FOLLOWING LOOP ARE CHANGE TO ENB1 ENB2 AND ENB3            
      IF (KFLAG.GE.0)  THEN                                             
        DO  20  L = 1, LFIN                                             
          RO2 = PNB(IPA(L))*RI2(L)                                      
          RO4 = RO2*RO2                                                 
          RO6 = RO2*RO4                                                 
          U1 = PNB(IPB(L))*RO6                                          
          U2 = U1*RI2(L)                                                
          IF (U1.GE.0)  THEN                                            
            IF (IPAIR1(L).LT.0)  THEN                                   
              ENB1 = ENB1 + U1*(HALF*RO6 - TWO)                         
              CAB(L) = CAB(L) - U2*(6*RO6 - 12.D0)                      
              DAB(L) = DAB(L) + U2*RI2(L)*(84.D0*RO6 - 96.D0)           
            ELSE                                                        
              ENB2 = ENB2 + U1*(RO6-TWO)                                
              CAB(L) = CAB(L) - U2*(12.D0*RO6 - 12.D0)                  
              DAB(L) = DAB(L) + U2*RI2(L)*(168.D0*RO6 - 96.D0)          
            ENDIF                                                       
          ELSE                                                          
            ENB3 = ENB3 - U1*(RO6 - TWO*RO4)                            
            CAB(L) = CAB(L) + U2*(12.D0*RO6 - 20.D0*RO4)                
            DAB(L) = DAB(L) - U2*RI2(L)*(168.D0*RO6 - 240.D0*RO4)       
          ENDIF                                                         
  20    CONTINUE                                                        
      ELSE                                                              
        DO  22  L = 1, LFIN                                             
          RO2 = PNB(IPA(L))*RI2(L)                                      
          RO4 = RO2*RO2                                                 
          RO6 = RO2*RO4                                                 
          U1 = PNB(IPB(L))*RO6                                          
          U2 = U1*RI2(L)                                                
          IF (U1.GE.0)  THEN                                            
            ENB2 = ENB2 + U1*(RO6-TWO)                                  
            CAB(L) = CAB(L) - U2*(12.D0*RO6 - 12.D0)                    
            DAB(L) = DAB(L) + U2*RI2(L)*(168.D0*RO6 - 96.D0)            
          ELSE                                                          
            ENB3 = ENB3 - U1*(RO6 - TWO*RO4)                            
            CAB(L) = CAB(L) + U2*(12.D0*RO6 - 20.D0*RO4)                
            DAB(L) = DAB(L) - U2*RI2(L)*(168.D0*RO6 - 240.D0*RO4)       
          ENDIF                                                         
  22    CONTINUE                                                        
      ENDIF                                                             
      ENB=ENB+ENB1+ENB2+ENB3                                            
C                                                                       
      LMAX = NOPAIR(JFIN)/10000                                         
      IPB(JFIN) = LMAX                                                  
      IPA(1) = 0                                                        
      IF (JFIN.GT.1)  THEN                                              
        DO  30  J = 1, JFIN-1                                           
        IPB(J) = NOPAIR(J)/10000                                        
        IPA(J+1) = IPA(J) + IPB(J)                                      
  30    LMAX = MAX(LMAX,IPB(J))                                         
      ENDIF                                                             
        LMIN = MIN(LMAX,6)                                              
C                                                                       
      DO  50  I = 1, LMIN                                               
      I10000=10000*I                                                    
                                                                        
COMMENT BY NOGUTI: THIS LOOP IS BLOCKED BY 500.                         
*   TO AVOID ABNOMAL PROCESSING CAUSED BY SOME BUG IN S810 COMPILER     
      DO 422 JJ=1,JFIN,500                                              
      JS=JJ                                                             
      JE=JJ+499                                                         
      IF(JE.GT.JFIN) JE=JFIN                                            
COMMENT END                                                             
*VOPTION NOFVAL                                                         
*VOCL LOOP,TEMP(L,TX,TY,TZ)                                             
      DO  42  J =JS,JE                                                  
      IF (NOPAIR(J).LT.I10000)  GOTO  42                                
      L = IPA(J) + I                                                    
      TX = DAB(L)*XAXB(L)                                               
       EL(1,J) = EL(1,J) + CAB(L)*(YA(L)*YB(L)+ZA(L)*ZB(L))             
     &                                          +TX*XAXB(L)             
       EL(2,J) = EL(2,J) + CAB(L)*(-XA(L)*YB(L))+TX*YAXB(L)             
       EL(3,J) = EL(3,J) + CAB(L)*(-XA(L)*ZB(L))+TX*ZAXB(L)             
       EL(4,J) = EL(4,J)                        +TX*XAB(L)              
       EL(5,J) = EL(5,J) + CAB(L)*ZB(L)         +TX*YAB(L)              
       EL(6,J) = EL(6,J) + CAB(L)*(-YB(L))      +TX*ZAB(L)              
      TY = DAB(L)*YAXB(L)                                               
       EL(7,J) = EL(7,J) + CAB(L)*(-YA(L)*XB(L))+TY*XAXB(L)             
       EL(8,J) = EL(8,J) + CAB(L)*(XA(L)*XB(L)+ZA(L)*ZB(L))             
     &                                          +TY*YAXB(L)             
       EL(9,J) = EL(9,J) + CAB(L)*(-YA(L)*ZB(L))+TY*ZAXB(L)             
       EL(10,J)= EL(10,J)+ CAB(L)*(-ZB(L))      +TY*XAB(L)              
       EL(11,J)= EL(11,J)                       +TY*YAB(L)              
       EL(12,J)= EL(12,J)+ CAB(L)*XB(L)         +TY*ZAB(L)              
      TZ = DAB(L)*ZAXB(L)                                               
       EL(13,J)= EL(13,J)+ CAB(L)*(-ZA(L)*XB(L))+TZ*XAXB(L)             
       EL(14,J)= EL(14,J)+ CAB(L)*(-ZA(L)*YB(L))+TZ*YAXB(L)             
       EL(15,J)= EL(15,J)+ CAB(L)*(XA(L)*XB(L)+YA(L)*YB(L))             
     &                                          +TZ*ZAXB(L)             
       EL(16,J)= EL(16,J)+ CAB(L)*YB(L)         +TZ*XAB(L)              
       EL(17,J)= EL(17,J)+ CAB(L)*(-XB(L))      +TZ*YAB(L)              
       EL(18,J)= EL(18,J)                       +TZ*ZAB(L)              
  42  CONTINUE                                                          
 422  CONTINUE                                                          
*VOPTION NOFVAL                                                         
*VOCL LOOP,TEMP(L,TX,TY,TZ)                                             
      DO  43  J = 1, JFIN                                               
      IF (NOPAIR(J).LT.I10000)  GOTO  43                                
      L = IPA(J) + I                                                    
      TX = DAB(L)*XAB(L)                                                
       EL(19,J)= EL(19,J)+ CAB(L)*(-ZA(L))      +TX*YAXB(L)             
       EL(20,J)= EL(20,J)+ CAB(L)*YA(L)         +TX*ZAXB(L)             
       EL(21,J)= EL(21,J)+ CAB(L)               +TX*XAB(L)              
       EL(22,J)= EL(22,J)                       +TX*YAB(L)              
       EL(23,J)= EL(23,J)                       +TX*ZAB(L)              
      TY = DAB(L)*YAB(L)                                                
       EL(24,J)= EL(24,J)+ CAB(L)*ZA(L)         +TY*XAXB(L)             
       EL(25,J)= EL(25,J)+ CAB(L)*(-XA(L))      +TY*ZAXB(L)             
       EL(26,J)= EL(26,J)+ CAB(L)               +TY*YAB(L)              
       EL(27,J)= EL(27,J)                       +TY*ZAB(L)              
      TZ = DAB(L)*ZAB(L)                                                
       EL(28,J)= EL(28,J)+ CAB(L)*(-YA(L))      +TZ*XAXB(L)             
       EL(29,J)= EL(29,J)+ CAB(L)*XA(L)         +TZ*YAXB(L)             
       EL(30,J)= EL(30,J)+ CAB(L)               +TZ*ZAB(L)              
  43  CONTINUE                                                          
 50   CONTINUE                                                          
C                                                                       
      IF (LMAX.EQ.LMIN)  GOTO  80                                       
      IFIN=0                                                            
      DO  70  J = 1, JFIN                                               
      ISTRT = IFIN + 7                                                  
      IFIN = IFIN + IPB(J)                                              
      IF(ISTRT.GT.IFIN)  GOTO  70                                       
*VOPTION NOFVAL                                                         
*VOCL LOOP,TEMP(TX,TY,TZ)                                               
      DO  60  L = ISTRT, IFIN                                           
      TX = DAB(L)*XAXB(L)                                               
       EL(1,J) = EL(1,J) + CAB(L)*(YA(L)*YB(L)+ZA(L)*ZB(L))             
     &                                          +TX*XAXB(L)             
       EL(2,J) = EL(2,J) + CAB(L)*(-XA(L)*YB(L))+TX*YAXB(L)             
       EL(3,J) = EL(3,J) + CAB(L)*(-XA(L)*ZB(L))+TX*ZAXB(L)             
       EL(4,J) = EL(4,J)                        +TX*XAB(L)              
       EL(5,J) = EL(5,J) + CAB(L)*ZB(L)         +TX*YAB(L)              
       EL(6,J) = EL(6,J) + CAB(L)*(-YB(L))      +TX*ZAB(L)              
      TY = DAB(L)*YAXB(L)                                               
       EL(7,J) = EL(7,J) + CAB(L)*(-YA(L)*XB(L))+TY*XAXB(L)             
       EL(8,J) = EL(8,J) + CAB(L)*(XA(L)*XB(L)+ZA(L)*ZB(L))             
     &                                          +TY*YAXB(L)             
       EL(9,J) = EL(9,J) + CAB(L)*(-YA(L)*ZB(L))+TY*ZAXB(L)             
       EL(10,J)= EL(10,J)+ CAB(L)*(-ZB(L))      +TY*XAB(L)              
       EL(11,J)= EL(11,J)                       +TY*YAB(L)              
       EL(12,J)= EL(12,J)+ CAB(L)*XB(L)         +TY*ZAB(L)              
      TZ = DAB(L)*ZAXB(L)                                               
       EL(13,J)= EL(13,J)+ CAB(L)*(-ZA(L)*XB(L))+TZ*XAXB(L)             
       EL(14,J)= EL(14,J)+ CAB(L)*(-ZA(L)*YB(L))+TZ*YAXB(L)             
       EL(15,J)= EL(15,J)+ CAB(L)*(XA(L)*XB(L)+YA(L)*YB(L))             
     &                                          +TZ*ZAXB(L)             
       EL(16,J)= EL(16,J)+ CAB(L)*YB(L)         +TZ*XAB(L)              
       EL(17,J)= EL(17,J)+ CAB(L)*(-XB(L))      +TZ*YAB(L)              
       EL(18,J)= EL(18,J)                       +TZ*ZAB(L)              
      TX = DAB(L)*XAB(L)                                                
       EL(19,J)= EL(19,J)+ CAB(L)*(-ZA(L))      +TX*YAXB(L)             
       EL(20,J)= EL(20,J)+ CAB(L)*YA(L)         +TX*ZAXB(L)             
       EL(21,J)= EL(21,J)+ CAB(L)               +TX*XAB(L)              
       EL(22,J)= EL(22,J)                       +TX*YAB(L)              
       EL(23,J)= EL(23,J)                       +TX*ZAB(L)              
      TY = DAB(L)*YAB(L)                                                
       EL(24,J)= EL(24,J)+ CAB(L)*ZA(L)         +TY*XAXB(L)             
       EL(25,J)= EL(25,J)+ CAB(L)*(-XA(L))      +TY*ZAXB(L)             
       EL(26,J)= EL(26,J)+ CAB(L)               +TY*YAB(L)              
       EL(27,J)= EL(27,J)                       +TY*ZAB(L)              
      TZ = DAB(L)*ZAB(L)                                                
       EL(28,J)= EL(28,J)+ CAB(L)*(-YA(L))      +TZ*XAXB(L)             
       EL(29,J)= EL(29,J)+ CAB(L)*XA(L)         +TZ*YAXB(L)             
       EL(30,J)= EL(30,J)+ CAB(L)               +TZ*ZAB(L)              
  60  CONTINUE                                                          
  70  CONTINUE                                                          
  80  IFIN=0                                                            
      DO  90  J = 1, JFIN                                               
      IF (IPB(J).LE.0)  GOTO  90                                        
      ISTRT = IFIN + 1                                                  
      IFIN = IFIN + IPB(J)                                              
      IA = JAA(J)                                                       
      DO  84  L = ISTRT, IFIN                                           
      EF(IA,1) = EF(IA,1) + CAB(L)*XAXB(L)                              
      EF(IA,2) = EF(IA,2) + CAB(L)*YAXB(L)                              
      EF(IA,3) = EF(IA,3) + CAB(L)*ZAXB(L)                              
      EF(IA,4) = EF(IA,4) + CAB(L)*XAB(L)                               
      EF(IA,5) = EF(IA,5) + CAB(L)*YAB(L)                               
      EF(IA,6) = EF(IA,6) + CAB(L)*ZAB(L)                               
  84  CONTINUE                                                          
      IB = JBF(J)                                                       
      IF (IB.EQ.0)  GOTO  90                                            
      DO  86  L = ISTRT, IFIN                                           
      EF(IB,1) = EF(IB,1) - CAB(L)*XAXB(L)                              
      EF(IB,2) = EF(IB,2) - CAB(L)*YAXB(L)                              
      EF(IB,3) = EF(IB,3) - CAB(L)*ZAXB(L)                              
      EF(IB,4) = EF(IB,4) - CAB(L)*XAB(L)                               
      EF(IB,5) = EF(IB,5) - CAB(L)*YAB(L)                               
      EF(IB,6) = EF(IB,6) - CAB(L)*ZAB(L)                               
  86  CONTINUE                                                          
  90  CONTINUE                                                          
      RETURN                                                            
      END                                                               
      SUBROUTINE  DCALSS (IPAIR1,IPAIR2,EL,JJ,KANGLE,EF,IFLAG)          
      IMPLICIT REAL*8(A-H,O-Z)                                          
      PARAMETER  (MAXATM=436,MAXVAR=160)                                
      COMMON/COORD/   CO(MAXATM,3)                                      
      COMMON/ENE000/  ETOR,EES,ENB,ELOOP,ECYSTR                         
      COMMON/TABLE1/  IFRONT(MAXVAR),NBACK(0:MAXVAR),IBACK(0:MAXVAR,2)  
      COMMON/DCAL00/  LDUMMY,JFIN                                       
      COMMON/DISULF/  RSS(4),ASS(4),BSS(9)                              
      DIMENSION  EF(MAXVAR,6),EL(30,JFIN),KANGLE(JFIN)                  
      DIMENSION  IPAIR1(6),IPAIR2(6),CAB(6),DAB(6)                      
      DIMENSION  XA(6),YA(6),ZA(6),XB(6),YB(6),ZB(6)                    
      DIMENSION  XAB(6) ,YAB(6) ,ZAB(6)                                 
      DIMENSION  XAXB(6),YAXB(6),ZAXB(6)                                
      DIMENSION  RMAG(6),RI1(6),RI2(6)                                  
      DIMENSION  KSTRT(2),KFIN(2),LSTRT(2),LFIN(2),MSTRT(3),MFIN(3)     
      DIMENSION  JJ(3)                                                  
      DATA  KSTRT /1,2/, LSTRT/1,5/, MSTRT/1,5,6/                       
      DATA  KFIN  /1,3/, LFIN /4,6/, MFIN /4,5,6/                       
      DATA  ONE,TWO /1.D0,2.D0/                                         
       IF (IFLAG.EQ.2)  RETURN                                          
      DO  10  L = LSTRT(IFLAG), LFIN(IFLAG)                             
        JPA = IPAIR1(L)                                                 
        JPB = IPAIR2(L)                                                 
        XA(L) = CO(JPA,1)                                               
        YA(L) = CO(JPA,2)                                               
        ZA(L) = CO(JPA,3)                                               
        XB(L) = CO(JPB,1)                                               
        YB(L) = CO(JPB,2)                                               
        ZB(L) = CO(JPB,3)                                               
        XAB(L) = XA(L)-XB(L)                                            
        YAB(L) = YA(L)-YB(L)                                            
        ZAB(L) = ZA(L)-ZB(L)                                            
        XAXB(L) = YA(L)*ZB(L) - ZA(L)*YB(L)                             
        YAXB(L) = ZA(L)*XB(L) - XA(L)*ZB(L)                             
        ZAXB(L) = XA(L)*YB(L) - YA(L)*XB(L)                             
        RMAG(L) = XAB(L)*XAB(L) + YAB(L)*YAB(L) + ZAB(L)*ZAB(L)         
        RI2(L) = ONE / RMAG(L)                                          
        RI1(L) = DSQRT(RMAG(L))                                         
  10  CONTINUE                                                          
C     IF (IFLAG.EQ.1)  THEN                                             
        DO  20  L = 1, 4                                                
          IF(L.LE.3) ELOOP = ELOOP + ASS(L)*(RI1(L)-RSS(L))**2          
          RI = RSS(L)/RI1(L)                                            
          CAB(L) = TWO*ASS(L)*(ONE-RI)                                  
          DAB(L) = TWO*ASS(L)*RI*RI2(L)                                 
  20    CONTINUE                                                        
        ECYSTR = ECYSTR + ASS(4)*(RI1(4)-RSS(4))**2                     
      DO  40  K = KSTRT(IFLAG), KFIN(IFLAG)                             
        J = JJ(K)                                                       
        KA = IABS(KANGLE(J))                                            
        IA = KA/10000                                                   
      DO  30  L = MSTRT(K), MFIN(K)                                     
      EF(IA,1) = EF(IA,1) + CAB(L)*XAXB(L)                              
      EF(IA,2) = EF(IA,2) + CAB(L)*YAXB(L)                              
      EF(IA,3) = EF(IA,3) + CAB(L)*ZAXB(L)                              
      EF(IA,4) = EF(IA,4) + CAB(L)*XAB(L)                               
      EF(IA,5) = EF(IA,5) + CAB(L)*YAB(L)                               
      EF(IA,6) = EF(IA,6) + CAB(L)*ZAB(L)                               
      TX = DAB(L)*XAXB(L)                                               
       EL(1,J) = EL(1,J) + CAB(L)*(YA(L)*YB(L)+ZA(L)*ZB(L))             
     &                                          +TX*XAXB(L)             
       EL(2,J) = EL(2,J) + CAB(L)*(-XA(L)*YB(L))+TX*YAXB(L)             
       EL(3,J) = EL(3,J) + CAB(L)*(-XA(L)*ZB(L))+TX*ZAXB(L)             
       EL(4,J) = EL(4,J)                        +TX*XAB(L)              
       EL(5,J) = EL(5,J) + CAB(L)*ZB(L)         +TX*YAB(L)              
       EL(6,J) = EL(6,J) + CAB(L)*(-YB(L))      +TX*ZAB(L)              
      TY = DAB(L)*YAXB(L)                                               
       EL(7,J) = EL(7,J) + CAB(L)*(-YA(L)*XB(L))+TY*XAXB(L)             
       EL(8,J) = EL(8,J) + CAB(L)*(XA(L)*XB(L)+ZA(L)*ZB(L))             
     &                                          +TY*YAXB(L)             
       EL(9,J) = EL(9,J) + CAB(L)*(-YA(L)*ZB(L))+TY*ZAXB(L)             
       EL(10,J)= EL(10,J)+ CAB(L)*(-ZB(L))      +TY*XAB(L)              
       EL(11,J)= EL(11,J)                       +TY*YAB(L)              
       EL(12,J)= EL(12,J)+ CAB(L)*XB(L)         +TY*ZAB(L)              
      TZ = DAB(L)*ZAXB(L)                                               
       EL(13,J)= EL(13,J)+ CAB(L)*(-ZA(L)*XB(L))+TZ*XAXB(L)             
       EL(14,J)= EL(14,J)+ CAB(L)*(-ZA(L)*YB(L))+TZ*YAXB(L)             
       EL(15,J)= EL(15,J)+ CAB(L)*(XA(L)*XB(L)+YA(L)*YB(L))             
     &                                          +TZ*ZAXB(L)             
       EL(16,J)= EL(16,J)+ CAB(L)*YB(L)         +TZ*XAB(L)              
       EL(17,J)= EL(17,J)+ CAB(L)*(-XB(L))      +TZ*YAB(L)              
       EL(18,J)= EL(18,J)                       +TZ*ZAB(L)              
      TX = DAB(L)*XAB(L)                                                
       EL(19,J)= EL(19,J)+ CAB(L)*(-ZA(L))      +TX*YAXB(L)             
       EL(20,J)= EL(20,J)+ CAB(L)*YA(L)         +TX*ZAXB(L)             
       EL(21,J)= EL(21,J)+ CAB(L)               +TX*XAB(L)              
       EL(22,J)= EL(22,J)                       +TX*YAB(L)              
       EL(23,J)= EL(23,J)                       +TX*ZAB(L)              
      TY = DAB(L)*YAB(L)                                                
       EL(24,J)= EL(24,J)+ CAB(L)*ZA(L)         +TY*XAXB(L)             
       EL(25,J)= EL(25,J)+ CAB(L)*(-XA(L))      +TY*ZAXB(L)             
       EL(26,J)= EL(26,J)+ CAB(L)               +TY*YAB(L)              
       EL(27,J)= EL(27,J)                       +TY*ZAB(L)              
      TZ = DAB(L)*ZAB(L)                                                
       EL(28,J)= EL(28,J)+ CAB(L)*(-YA(L))      +TZ*XAXB(L)             
       EL(29,J)= EL(29,J)+ CAB(L)*XA(L)         +TZ*YAXB(L)             
       EL(30,J)= EL(30,J)+ CAB(L)               +TZ*ZAB(L)              
  30  CONTINUE                                                          
        IB = MOD(KA,10000)                                              
        IF (KANGLE(J).LT.0)  IB = IFRONT(IB)                            
      IF (IB.EQ.0)  GOTO  40                                            
      DO  34  L = MSTRT(K), MFIN(K)                                     
      EF(IB,1) = EF(IB,1) - CAB(L)*XAXB(L)                              
      EF(IB,2) = EF(IB,2) - CAB(L)*YAXB(L)                              
      EF(IB,3) = EF(IB,3) - CAB(L)*ZAXB(L)                              
      EF(IB,4) = EF(IB,4) - CAB(L)*XAB(L)                               
      EF(IB,5) = EF(IB,5) - CAB(L)*YAB(L)                               
      EF(IB,6) = EF(IB,6) - CAB(L)*ZAB(L)                               
  34  CONTINUE                                                          
  40  CONTINUE                                                          
      RETURN                                                            
      END                                                               
      SUBROUTINE  PAIR14                                                
C                                                                       
C  THIS SUBROUTINE MAKES THE LISTS OF INTERACTABLE ATOM PAIRS IPAIR1    
C  AND IPAIR2.  IN THIS SUBROUTINE ALL THE ATOM PAIRS ARE TREATED, BUT  
C  ONLY THE ATOM PAIRS THAT BELONG TO THE UNIT PAIRS OF DISTACES K=0,   
C  1 AND 2 ARE STORED IN THESE LISTS, WHERE THE DISTANCE BETWEEN TWO    
C  UNITS IS DEFINED AS THE DISTANCE BETWEEN TWO BONDS IN-SIDE OF THESE  
C  UNITS.                                                               
C  THIS SUBROUTINE IS CALLED ONLY ONCE.                                 
C                                                                       
      IMPLICIT REAL*8 (A-H,O-Z)                                         
      PARAMETER  (MAXATM=436,MAXVAR=160,MAXINT=2740)                    
      PARAMETER  (MXATM1=MAXATM+1,MVAR1=MAXVAR+1)                       
      PARAMETER  (MXPAIR=MAXVAR*(MAXVAR+1)/2)                           
      COMMON/ATOM00/  KUNIT(MAXATM),KATOM(MXATM1),JATOM(MAXATM)         
      COMMON/BOND00/  DIRCOS(MAXVAR,3),IBND1(MAXVAR),IBND2(0:MVAR1)     
      COMMON/TABLE1/  IFRONT(MAXVAR),NBACK(0:MAXVAR),IBACK(0:MAXVAR,2)  
      COMMON/TABLE3/  NINT,IPAIR1(MAXINT),IPAIR2(MAXINT),LINT(-1:MAXVAR)
      COMMON/TABLE4/  KMAX,LISTK(-1:MAXVAR),JANGLE(MXPAIR),             
     &                 KANGLE(MXPAIR)                                   
      NINT = 0                                                          
      DO  30  KAB = KMAX, 0, -1                                         
        LINI = LISTK(KAB)                                               
        LFIN = LISTK(KAB-1) - 1                                         
        LINT0 = 0                                                       
        MFLAG = -1                                                      
        IF (KAB.LE.2)  MFLAG = 1                                        
        DO  20  LKJ = LINI, LFIN                                        
          KA = IABS(KANGLE(LKJ))                                        
          IA = KA/10000                                                 
          IB = KA - 10000*IA                                            
          IF (KANGLE(LKJ).LT.0)  IB = IFRONT(IB)                        
          JA1 = KATOM(IBND2(IA))                                        
          JA2 = KATOM(IBND2(IA+1)) - 1                                  
          JB1 = KATOM(IBND2(IB))                                        
          JB2 = KATOM(IBND2(IB+1)) - 1                                  
          NOPAIR = 0                                                    
          DO  10  JA = JA1, JA2                                         
          DO  10  JB = JB1, JB2                                         
            JJA = JATOM(JA)                                             
            JJB = JATOM(JB)                                             
            NINT1 = NINT + 1                                            
  10        CALL  TYPCHK (JJA,JJB,NINT,NINT1,IPAIR1,IPAIR2,NOPAIR,      
     &                    LINT0,MFLAG)                                  
          JANGLE(LKJ) = JANGLE(LKJ) + NOPAIR                            
  20    CONTINUE                                                        
        LINT(KAB) = LINT0                                               
  30  CONTINUE                                                          
C                                                                       
      LM1 = 0                                                           
      DO  40  K = 0, KMAX                                               
  40  LM1 = LM1 + LINT(K)                                               
      LINT(-1) = LM1 + 1                                                
      DO  50  K = 0, KMAX                                               
  50  LINT(K) = LINT(K-1) - LINT(K)                                     
      RETURN                                                            
      END                                                               
      SUBROUTINE  PAIR15 (JPAIR1,JPAIR2,JAA,JBF,JFIN,MFLAG)             
C                                                                       
C  THIS SUBROUTINE MAKES THE LISTS OF INTERACTABLE ATOM PAIRS JPAIR1    
C  AND JPAIR2.  IN THIS SUBROUTINE ONLY THE ATOM PAIRS THAT BELONGS TO  
C  THE UNIT PAIRS OF A GIVEN DISTANCE K (K>2) ARE LISTED UP.            
C  THIS SUBROUTINE IS CALLED KMAX TIMES EVERY TIME THE SUBROUTINE       
C  DERVTV IS CALLED IN ORDER TO SAVE THE MEMORY SPACE FOR JPAIR1 AND    
C  JPAIR2.                                                              
C                                                                       
      IMPLICIT REAL*8 (A-H,O-Z)                                         
      PARAMETER  (MAXATM=436,MAXVAR=160)                                
      PARAMETER  (MXATM1=MAXATM+1,MVAR1=MAXVAR+1)                       
      COMMON/ATOM00/  KUNIT(MAXATM),KATOM(MXATM1),JATOM(MAXATM)         
      COMMON/BOND00/  DIRCOS(MAXVAR,3),IBND1(MAXVAR),IBND2(0:MVAR1)     
      DIMENSION  JPAIR1(20000),JPAIR2(20000),JAA(JFIN),JBF(JFIN)        
      LFIN = 0                                                          
      IF (MFLAG.GT.0)  GOTO  50                                         
C                                                                       
C  MFLAG.LT.0   INDICATES THAT ALL THE INTERACTIONS OF ATOM PAIRS       
C  CONSIDERED NOW ARE OF 1-5 TYPE.                                      
C                                                                       
      DO  20  LKJ = 1, JFIN                                             
        IA = JAA(LKJ)                                                   
        IB = JBF(LKJ)                                                   
        JA1 = KATOM(IBND2(IA))                                          
        JA2 = KATOM(IBND2(IA+1)) - 1                                    
        JB1 = KATOM(IBND2(IB))                                          
        JB2 = KATOM(IBND2(IB+1)) - 1                                    
        IF (JB2-JB1-3)  1, 5, 6                                         
   1    IF (JB2-JB1-1)  2, 3, 4                                         
C  JB2-JB1=0                                                            
   2    JATJB1 = JATOM(JB1)                                             
        DO  12  JA = JA1, JA2                                           
          LFIN = LFIN + 1                                               
          JPAIR1(LFIN) = JATOM(JA)                                      
  12      JPAIR2(LFIN) = JATJB1                                         
            GOTO  20                                                    
C  JB2-JB1=1                                                            
   3    JATJB1 = JATOM(JB1)                                             
        JATJB2 = JATOM(JB2)                                             
        DO  13  JA = JA1, JA2                                           
          JPAIR1(LFIN+1) = JATOM(JA)                                    
          JPAIR1(LFIN+2) = JATOM(JA)                                    
          JPAIR2(LFIN+1) = JATJB1                                       
          JPAIR2(LFIN+2) = JATJB2                                       
  13      LFIN = LFIN + 2                                               
            GOTO  20                                                    
C  JB2-JB1=2                                                            
   4    JATJB1 = JATOM(JB1)                                             
        JATJB2 = JATOM(JB1+1)                                           
        JATJB3 = JATOM(JB2)                                             
        DO  14  JA = JA1, JA2                                           
          JPAIR1(LFIN+1) = JATOM(JA)                                    
          JPAIR1(LFIN+2) = JATOM(JA)                                    
          JPAIR1(LFIN+3) = JATOM(JA)                                    
          JPAIR2(LFIN+1) = JATJB1                                       
          JPAIR2(LFIN+2) = JATJB2                                       
          JPAIR2(LFIN+3) = JATJB3                                       
  14      LFIN = LFIN + 3                                               
            GOTO  20                                                    
C  JB2-JB1=3                                                            
   5    JATJB1 = JATOM(JB1)                                             
        JATJB2 = JATOM(JB1+1)                                           
        JATJB3 = JATOM(JB1+2)                                           
        JATJB4 = JATOM(JB2)                                             
        DO  15  JA = JA1, JA2                                           
          JPAIR1(LFIN+1) = JATOM(JA)                                    
          JPAIR1(LFIN+2) = JATOM(JA)                                    
          JPAIR1(LFIN+3) = JATOM(JA)                                    
          JPAIR1(LFIN+4) = JATOM(JA)                                    
          JPAIR2(LFIN+1) = JATJB1                                       
          JPAIR2(LFIN+2) = JATJB2                                       
          JPAIR2(LFIN+3) = JATJB3                                       
          JPAIR2(LFIN+4) = JATJB4                                       
  15      LFIN = LFIN + 4                                               
            GOTO  20                                                    
C  JB2-JB1>3                                                            
   6    DO  16  JA = JA1, JA2                                           
          JPA = JATOM(JA)                                               
          DO  16  JB = JB1, JB2                                         
            LFIN = LFIN + 1                                             
            JPAIR1(LFIN) = JPA                                          
            JPAIR2(LFIN) = JATOM(JB)                                    
  16    CONTINUE                                                        
  20  CONTINUE                                                          
      RETURN                                                            
C                                                                       
C  MFLAG.GT.0   INDICATES THAT THE INTERACTIONS OF ATOM PAIRS CONSIDERED
C  NOW ARE OF EITHER 1-4 OR 1-5 TYPE.                                   
C                                                                       
  50  LINT0 = 0                                                         
      NOPAIR = 0                                                        
      DO  70  LKJ = 1, JFIN                                             
        IA = JAA(LKJ)                                                   
        IB = JBF(LKJ)                                                   
        JA1 = KATOM(IBND2(IA))                                          
        JA2 = KATOM(IBND2(IA+1)) - 1                                    
        JB1 = KATOM(IBND2(IB))                                          
        JB2 = KATOM(IBND2(IB+1)) - 1                                    
        DO  60  JA = JA1, JA2                                           
          JJA = JATOM(JA)                                               
        DO  60  JB = JB1, JB2                                           
          JJB = JATOM(JB)                                               
          LFIN1 = LFIN + 1                                              
          CALL  TYPCHK (JJA,JJB,LFIN,LFIN1,JPAIR1,JPAIR2,NOPAIR,        
     &                  LINT0,MFLAG)                                    
  60    CONTINUE                                                        
  70  CONTINUE                                                          
      RETURN                                                            
      END                                                               
      SUBROUTINE  TYPCHK(II,JJ,NINT,NINT1,IPAIR1,IPAIR2,NOPAIR,LINT,    
     &                   MFLAG)                                         
C                                                                       
C  THIS SUBROUTINE CHECKS THE INTERACTION TYPE OF THE PAIR OF ATOMS     
C  II AND JJ.  IF THE INTERACTION IS OF 1-4 TYPE, THEN SET IPAIR1<0.    
C                                                                       
      PARAMETER  (MAXATM=436)                                           
      COMMON/NUMBER/  NUMATM,NUMVAR,NN2,NUMINT,NSS                      
      COMMON/INTER0/  INTER(MAXATM),INTATM(3,3000)                      
      DIMENSION  IPAIR1(NINT1),IPAIR2(NINT1)                            
      M1 = MIN(II,JJ)                                                   
      M2 = MAX(II,JJ)                                                   
      INTM1 = INTER (M1)                                                
  10  IATMI = M1 + INTATM(1,INTM1)                                      
      NUM4 = INTATM(2,INTM1)                                            
      IATMF = IATMI + NUM4 - 1                                          
      IF (NUM4.EQ.0)  GOTO  20                                          
      IF (M2.GE.IATMI.AND.M2.LE.IATMF)  THEN                            
        IF (MFLAG.LT.0)  GOTO  120                                      
        NINT = NINT + 1                                                 
        IPAIR1(NINT) = -II                                              
        IPAIR2(NINT) = JJ                                               
        GOTO  120                                                       
      ENDIF                                                             
  20  KEY = INTATM(3,INTM1)                                             
      IF (KEY.EQ.0)  GOTO  30                                           
      IATMI = IATMF + 1                                                 
      IATMF = NUMATM                                                    
      IF (KEY.GT.0)  IATMF = IATMI + KEY - 1                            
      IF (M2.GE.IATMI.AND.M2.LE.IATMF)  GOTO  100                       
  30  IF (NUM4.EQ.0.AND.KEY.EQ.0)  RETURN                               
      IF (KEY.LT.0)  RETURN                                             
      INTM1 = INTM1 + 1                                                 
         GOTO  10                                                       
  100 IF (MFLAG.LT.0)  GOTO  120                                        
      NINT = NINT + 1                                                   
      IPAIR1(NINT) = II                                                 
      IPAIR2(NINT) = JJ                                                 
  120 NOPAIR = NOPAIR + 10000                                           
      LINT = LINT + 1                                                   
      RETURN                                                            
      END                                                               
      SUBROUTINE CUTOFF(VAR)                                            
      PARAMETER (MAXVAR=160)                                            
      REAL*8 VAR(MAXVAR)                                                
      RETURN                                                            
      END                                                               
C***********************************************************************
C MONTE.FORT77(MONTE)                                                   
C                                                                       
C MONTE CALRO SIMULATION IN ECEPP WITH OR WITHOUT CUTOFF                
C BASED ON 'PERI.PMSGO.MC.FORT(MONTE)'                                  
C                                                                       
C THIS PROGRAM IS LINKED WITH                                           
C      MINIMA.FORT77(FEDERCS) FOR THE CUTOFF OPERATION                  
C      MINIMA.FORT77(FEDERNS) FOR  NO-CUTOFF OPERATION                  
C                                                                       
C INPUT                                                                 
C     5      : CONTROL PARAMETERS                                       
C     IOINIT : THE INITIAL ANGLES IN ECEPP FORMAT                       
C     IOREST : THE DATA FOR CONTINUING A PREVIOUS JOB                   
C     20     : PRECEP OUTPUT                                            
C     21     : ECEPP ENERGY PARAMETERS                                  
C OUTPUT                                                                
C     6      : SYSOUT DATA                                              
C     IOREST : THE DATA FOR CONTINUING A PREVIOUS JOB                   
C     IOERG  : OUTPUT OF ENERGY                                         
C     IOANG  : OUTPUT OF ANGLES                                         
C                                                                       
C CONTROL PARAMETERS                                                    
C     ISTART : = 0 FOR FRESH START; OTHERWISE CONTINUING JOB            
C     IECEPP : = 1 FOR ECEPP FORMAT OF INITIAL ANGLES;                  
C                  OTHERWISE NO FORMAT                                  
C     ICUT   : = 1 FOR CUTOFF; OTHERWISE NO CUTOFF                      
C     IXS    : A SEED FOR RANDOM NUMBER GENERATOR                       
C     TEMP   : TEMPERATURE                                              
C     ESMALL : THE LOWEST LIMIT OF EIGENVALUE (USUALLY = 10.0)          
C     FLUC   : THE COEFFICIENT OF THE STEP LENGTH (USUALLY =1.3)        
C     LOUTE  : OUTPUT OF ENERGY EVERY LOUTE STEPS                       
C     LOUTA  : OUTPUT OF ANGLES EVERY LOUTA STEPS                       
C     LLIST  : REVISION OF INTERACTION TABLE EVERY LLIST STEPS          
C     LMTR   : ACCEPTANCE RATIO IS AVERAGED FOR EACH LMTR STEPS         
C     LLTR   : REVISION OF HESSIAN EVERY LLTR STEPS                     
C     ACPL   : IF ACP < ACPL, HESSIAN IS REVISED                        
C     ITIMEL : CPU TIME LIMIT IN SECOND                                 
C     LTR    : LIMIT OF STEP                                            
C                                                                       
C ARRAY SIZE                                                            
C     MAXRES=28                                                         
C     MAXVAR=160                                                        
C     MAXMTR=2000                                                       
C********************************************************************** 
      IMPLICIT REAL*8(A-H,O-Z)                                          
      PARAMETER (MAXRES=28 ,MAXVAR=160,MAXMTR=2000)                     
      PARAMETER (MAXATM=436)                                            
      PARAMETER (PI=3.141 592 653 589 793D0,RAD=PI/180.D0)              
      COMMON/NUMBER/ NUMATM,NUMVAR,NN2,NUMINT,NSS                       
      COMMON/VARANG/ ANGLES(10,MAXRES),INDXV(MAXVAR),NUMRES             
      COMMON/COORD/ CO(MAXATM,3)                                        
      COMMON/ENE000/ FT(5)                                              
      DIMENSION ANG(MAXVAR),ANGT(MAXVAR),F(6),                          
     &          IACP(MAXMTR),EV(MAXVAR,MAXVAR)                          
      REAL*4 ANGS(MAXVAR)                                               
      REAL*4 XYZ(MAXATM,3)                                              
      INTEGER*4 IX,IXS                                                  
C-----------------------------------------------------------------------
C INPUT OF THE INFORMATION FOR THE SIMULATION                           
C-----------------------------------------------------------------------
C                                                                       
C READ CONTROL PARAMETERS                                               
C                                                                       
      READ(5,*) ISTART,IECEPP,ICUT,IXS                                  
      READ(5,*) TEMP,ESMALL,FLUC                                        
      READ(5,*) LOUTE,LOUTA,LLIST,LMTR                                  
      READ(5,*) ITIMEL,LTR,LLTR,ACPL                                    
      READ(5,*) IOINIT,IOREST,IOERG,IOANG                               
      WRITE(6,*) 'ISTART  ',ISTART                                      
      WRITE(6,*) 'IECEPP  ',IECEPP                                      
      WRITE(6,*) 'ICUT  ',ICUT                                          
      WRITE(6,*) 'IXS  ',IXS                                            
      WRITE(6,*) 'TEMP  ',TEMP                                          
      WRITE(6,*) 'ESMALL  ',ESMALL                                      
      WRITE(6,*) 'FLUC  ',FLUC                                          
      WRITE(6,*) 'LOUTE  ',LOUTE                                        
      WRITE(6,*) 'LOUTA  ',LOUTA                                        
      WRITE(6,*) 'LLIST  ',LLIST                                        
      WRITE(6,*) 'LMTR  ',LMTR                                          
      WRITE(6,*) 'ITIMEL  ',ITIMEL                                      
      WRITE(6,*) 'LTR  ',LTR                                            
      WRITE(6,*) 'LLTR  ',LLTR                                          
      WRITE(6,*) 'ACPL  ',ACPL                                          
      WRITE(6,*) 'IOINIT  ',IOINIT                                      
      WRITE(6,*) 'IOREST  ',IOREST                                      
      WRITE(6,*) 'IOERG  ',IOERG                                        
      WRITE(6,*) 'IOANG  ',IOANG                                        
      BETA=1.0D0/(1.987D-3*TEMP)                                        
C                                                                       
C READ PRECEP OUTPUT AND ENERGY PARAMETERS                              
C                                                                       
      CALL  INPUT                                                       
C                                                                       
C PREPAIR THE BOND INFORMATION                                          
C                                                                       
      CALL  PRESET                                                      
C-----------------------------------------------------------------------
C FOR A FRESH START (ISTART=0)                                          
C-----------------------------------------------------------------------
      IF(ISTART.EQ.0) THEN                                              
        IX=IXS                                                          
        NTR=0                                                           
        MTR=0                                                           
        NOUTE=0                                                         
        NOUTA=0                                                         
        NLIST=0                                                         
        NLTR=0                                                          
        IF(IECEPP .EQ. 1) THEN                                          
C READ A STARTING CONFORMAION (ECEPP FORMAT)                            
          DO 100 I = 1,NUMRES                                           
            READ(IOINIT,'(10F8.3)')(ANGLES(J,I),J=1,10)                 
  100     CONTINUE                                                      
          DO 110 I = 1,NUMVAR                                           
            J = INDXV(I)/100                                            
            K = INDXV(I) - 100*J                                        
            ANG(I) = ANGLES(K,J)*RAD                                    
  110     CONTINUE                                                      
        ELSE                                                            
C NO FORMAT                                                             
          READ(IOINIT) NNN                                              
          READ(IOINIT)(ANG(I),I=1,NUMVAR)                               
        ENDIF                                                           
C     PAIR LIST                                                         
        IF(ICUT .EQ. 1) THEN                                            
          CALL CUTOFF(ANG)                                              
          ICALC = 1                                                     
        ELSE                                                            
          CALL PAIR14                                                   
          ICALC = 2                                                     
        ENDIF                                                           
C     THE INITIAL ENERGY                                                
        CALL ENERGY(ANG,ETOTAL)                                         
        DO 120 I=1,5                                                    
          F(I+1) = FT(I)                                                
  120   CONTINUE                                                        
        F(1) = ETOTAL                                                   
C     THE INITIAL IACP IS ALL 'ACCEPTED'                                
        DO 130 I=1,LMTR                                                 
          IACP(I)=1                                                     
  130   CONTINUE                                                        
        NACP=LMTR                                                       
        ACP=1.0D0                                                       
C-----------------------------------------------------------------------
C FOR A CONTINUATION JOB (ISTART OTHER THAN 0)                          
C-----------------------------------------------------------------------
      ELSE                                                              
        READ(IOREST) IX,NTR,MTR,NOUTE,NOUTA,NLIST,NLTR,IACP,NACP,ACP,   
     &               ICALC                                              
        READ(IOREST) ANG,F,EV                                           
        WRITE(6,*)' IX NTR MTR NOUTE NOUTA NLIST NLTR NACP',            
     &            ' ACP  ICALC'                                         
        WRITE(6,*) IX,NTR,MTR,NOUTE,NOUTA,NLIST,NLTR,NACP,ACP,          
     &             ICALC                                                
        REWIND IOREST                                                   
C     PAIR LIST                                                         
        IF(ICUT .EQ. 1) THEN                                            
          CALL CUTOFF(ANG)                                              
        ELSE                                                            
          CALL PAIR14                                                   
        ENDIF                                                           
      ENDIF                                                             
C-----------------------------------------------------------------------
C TRIAL ANGLE AND TRIAL ENERGY ARE NOW CALCULATED                       
C ACCORDING TO ICALC                                                    
C-----------------------------------------------------------------------
  140 IF(ICALC .EQ. 1) THEN                                             
        CALL SAMPL1(ANG,ANGT,CR,IX,BETA,ESMALL,FLUC,EV,ETOTAL)          
        ICALC = 3                                                       
      ENDIF                                                             
      IF(ICALC .EQ. 2) THEN                                             
        CALL SAMPL2(ANG,ANGT,CR,IX,BETA,ESMALL,FLUC,EV,ETOTAL)          
        ICALC = 3                                                       
      ENDIF                                                             
      IF(ICALC .EQ. 3) THEN                                             
        CALL SAMPL3(ANG,ANGT,CR,IX,EV,ETOTAL)                           
      ENDIF                                                             
C                                                                       
C  UPDATE THE COUNT PARAMETERS                                          
C                                                                       
      NTR=NTR+1                                                         
      NLIST=NLIST+1                                                     
      NOUTE=NOUTE+1                                                     
      NOUTA=NOUTA+1                                                     
      NLTR=NLTR+1                                                       
      MTR=MOD(MTR,LMTR) + 1                                             
C-----------------------------------------------------------------------
C  CHECK WHTHER THE TRIAL STEP IS ACCEPTED                              
C-----------------------------------------------------------------------
C                                                                       
C WHEN ACCEPTED                                                         
C                                                                       
      CRT = DEXP(BETA*(F(1)-ETOTAL))                                    
      IF(CR .LT. CRT) THEN                                              
C                                                                       
C     UPDATE ANGLES AND ENERGY                                          
C                                                                       
        DO 150 I=1,NUMVAR                                               
          ANG(I)=ANGT(I)                                                
  150   CONTINUE                                                        
        DO 160 I=1,5                                                    
          F(I+1) = FT(I)                                                
  160   CONTINUE                                                        
        F(1) = ETOTAL                                                   
C                                                                       
C     UPDATE THE ACCEPTANCE RATIO                                       
C                                                                       
        IF(IACP(MTR).EQ.0) THEN                                         
            NACP=NACP+1                                                 
            ACP=DFLOAT(NACP)/DFLOAT(LMTR)                               
            IACP(MTR)=1                                                 
        ENDIF                                                           
C                                                                       
C WHEN REJECTED                                                         
C                                                                       
      ELSE                                                              
C                                                                       
C     UPDATE THE ACCEPTANCE RATIO                                       
C                                                                       
        IF(IACP(MTR).EQ.1) THEN                                         
          NACP=NACP-1                                                   
          ACP=DFLOAT(NACP)/DFLOAT(LMTR)                                 
          IACP(MTR)=0                                                   
        ENDIF                                                           
      ENDIF                                                             
C-----------------------------------------------------------------------
C  CHECK PRINT OPTION                                                   
C-----------------------------------------------------------------------
C                                                                       
C     OUTPUT OF ENERGY                                                  
C                                                                       
      IF(NOUTE .GE. LOUTE) THEN                                         
        WRITE(IOERG) NTR,ACP,(F(I),I=1,6)                               
        IF(NTR .EQ. (NTR/100)*100) THEN                                 
          WRITE(6,'(I8,F8.3,3X,6D12.5)') NTR,ACP,(F(I),I=1,6)           
        ENDIF                                                           
        NOUTE = 0                                                       
      ENDIF                                                             
C                                                                       
C     OUTPUT OF ANGLES IN SINGLE PRECISION                              
C                                                                       
      IF(NOUTA .GE. LOUTA) THEN                                         
        DO 170 I = 1,NUMVAR                                             
          ANGS(I) = SNGL(ANG(I))                                        
  170   CONTINUE                                                        
        WRITE(IOANG) NTR                                                
        WRITE(IOANG) (ANGS(I),I=1,NUMVAR)                               
        NOUTA = 0                                                       
      ENDIF                                                             
C                                                                       
C     OUTPUT OF COORDINATE IN SINGLE PRECISION                          
C                                                                       
      IF(NTR .EQ. (NTR/100)*100 ) THEN                                  
        DO 171 I = 1,NUMATM                                             
          XYZ(I,1) = SNGL(CO(I,1))                                      
          XYZ(I,2) = SNGL(CO(I,2))                                      
          XYZ(I,3) = SNGL(CO(I,3))                                      
  171   CONTINUE                                                        
        WRITE(15) ( (XYZ(I,J),J=1,3), I=1,NUMATM )                      
      ENDIF                                                             
C-----------------------------------------------------------------------
C WHAT SHOULD BE NEXT STEP?                                             
C-----------------------------------------------------------------------
C                                                                       
C     CHECK CPU TIME LIMIT                                              
C                                                                       
      CALL CLOCK(ICPU)                                                  
      IF(ICPU .GE. ITIMEL) THEN                                         
        WRITE(IOREST) IX,NTR,MTR,NOUTE,NOUTA,NLIST,NLTR,IACP,NACP,ACP,  
     &                ICALC                                             
        WRITE(IOREST) ANG,F,EV                                          
        WRITE(6,*) ' END BY CPU TIME LIMIT'                             
        WRITE(6,*) 'NTR  ',NTR,'ACP  ',ACP                              
        STOP                                                            
      ENDIF                                                             
C                                                                       
C     CHECK THE TOTAL NUMBER OF TRIAL STEPS                             
C                                                                       
      IF(NTR .GE. LTR) THEN                                             
        WRITE(IOREST) IX,NTR,MTR,NOUTE,NOUTA,NLIST,NLTR,IACP,NACP,ACP,  
     &                ICALC                                             
        WRITE(IOREST) ANG,F,EV                                          
        WRITE(6,*) ' END BY STEP NUMBER LIMIT'                          
        WRITE(6,*) 'NTR  ',NTR,'ACP  ',ACP                              
        STOP                                                            
      ENDIF                                                             
C                                                                       
C     FIND ICALC (UPDATE PAIR TABLE? UPDATE SECOND DERIVATIVE?)         
C                                                                       
C     PAIR TABLE IS UPDATED                                             
      IF(ICUT .EQ. 1) THEN                                              
        IF(NLIST .GE. LLIST) THEN                                       
          ICALC = 1                                                     
          NLIST = 0                                                     
        ENDIF                                                           
      ENDIF                                                             
C     SECOND DERIVATIVE IS UPDATED                                      
      IF(ACP .LT. ACPL .OR. NLTR .GE. LLTR) THEN                        
        ICALC = 2                                                       
        NLTR = 0                                                        
      ENDIF                                                             
      GO TO 140                                                         
      END                                                               
C***********************************************************************
C SAMPLING ROUTINE                                                      
C***********************************************************************
      SUBROUTINE SAMPL1(ANG,ANGT,CR,IX,BETA,ESMALL,FLUC,EV,ETOTAL)      
      IMPLICIT REAL*8 (A-H,O-Z)                                         
      PARAMETER (MAXVAR=160,MAXNN2=MAXVAR*(MAXVAR+1)/2)                 
      COMMON/NUMBER/ NUMATM,NUMVAR,NN2,NUMINT,NSS                       
      COMMON/ENE000/ FT(5)                                              
      INTEGER*4 IX                                                      
      REAL*4 A(MAXVAR+1)                                                
      DIMENSION EV(MAXVAR,MAXVAR),G(MAXNN2),                            
     &          ANG(MAXVAR),ANGT(MAXVAR),                               
     &          E(MAXVAR),VW(MAXVAR*15),IVW(MAXVAR*7)                   
C                                                                       
C UPDATE THE PAIR INTERACTION TABLE                                     
C                                                                       
      CALL CUTOFF(ANG)                                                  
C-----------------------------------------------------------------------
C ENTRY OF SAMPL2                                                       
C-----------------------------------------------------------------------
      ENTRY SAMPL2(ANG,ANGT,CR,IX,BETA,ESMALL,FLUC,EV,ETOTAL)           
C                                                                       
C UPDATE THE SECOND DERIVATIVE MATRIX                                   
C                                                                       
CCCCC                                                                   
C     CALL CLOCK(I1)                                                    
      CALL DERVTV(ANG,ETOTAL,E,G)                                       
C     CALL CLOCK(I2)                                                    
C     I3=I2-I1                                                          
C     WRITE(6,*) 'TIME FOR DERVTV ',I3                                  
CCCCC                                                                   
C                                                                       
C EIGENVALUE AND EIGENVECTOR FOR G                                      
C                                                                       
CCCCC                                                                   
C     CALL CLOCK(I1)                                                    
      CALL DVSEG2(G,NUMVAR,-NUMVAR,-1.0D0,E,EV,MAXVAR,VW,IVW,ICON)      
C     CALL CLOCK(I2)                                                    
C     I3=I2-I1                                                          
C     WRITE(6,*) 'TIME FOR DVSEG2 ',I3                                  
CCCCC                                                                   
      IF(ICON .NE. 0) THEN                                              
        WRITE(6,*) ' STOPPED AT DVSEG2 BECAUSE ICON=', ICON             
        STOP                                                            
      ENDIF                                                             
C                                                                       
C STEP SIZE                                                             
C                                                                       
      RVAR = DFLOAT(NUMVAR)                                             
      SIG=2.0D0*FLUC*DSQRT(3.0D0/BETA/RVAR)                             
      SQRE = DSQRT(ESMALL)                                              
      DO 100 I=1,NUMVAR                                                 
        IF(DABS(E(I)).GE.ESMALL) THEN                                   
          E(I)=DSQRT(DABS(E(I)))                                        
        ELSE                                                            
          E(I)=SQRE                                                     
        ENDIF                                                           
  100 CONTINUE                                                          
      DO 110 I=1,NUMVAR                                                 
        DO 110 J=1,NUMVAR                                               
          EV(I,J)=SIG*EV(I,J)/E(J)                                      
  110 CONTINUE                                                          
C-----------------------------------------------------------------------
C ENTRY OF SAMPL3                                                       
C-----------------------------------------------------------------------
      ENTRY SAMPL3(ANG,ANGT,CR,IX,EV,ETOTAL)                            
C                                                                       
C RANDOM NUMBER                                                         
C                                                                       
      CALL RANU2(IX,A,NUMVAR+1,ICON)                                    
      CR=DBLE(A(NUMVAR+1))                                              
C                                                                       
C TRIAL ANGLES                                                          
C                                                                       
      DO 120 I=1,NUMVAR                                                 
        ANGT(I)=ANG(I)                                                  
        DO 120 J=1,NUMVAR                                               
          ANGT(I)=ANGT(I)+(DBLE(A(J))-0.5D0)*EV(I,J)                    
  120 CONTINUE                                                          
C                                                                       
C ENERGY                                                                
C                                                                       
CCCCCC                                                                  
C     CALL CLOCK(I1)                                                    
      CALL ENERGY(ANGT,ETOTAL)                                          
C     CALL CLOCK(I2)                                                    
C     I3=I2-I1                                                          
C     WRITE(6,*) 'TIME FOR ENERGY ',I3                                  
CCCCCCC                                                                 
C                                                                       
      RETURN                                                            
      END                                                               
./ ADD NAME=FLXSUB
./ NUMBER NEW1=10,INCR=10
      SUBROUTINE RDSTD(FL,LEVEL,IDENT,ATTRIB,NR,RECS)                   
      INTEGER FL, LEVEL, NR                                             
      CHARACTER IDENT*8, ATTRIB*8, RECS*(*)                             
      COMMON /BUFFER/BUF                                                
      CHARACTER*80 BUF                                                  
      CALL RDSTDM(FL,BUF,LEVEL,IDENT,ATTRIB,NR,RECS)                    
      RETURN                                                            
      END                                                               
      SUBROUTINE RDSTDM(FL,BUF,LEVEL,IDENT,ATTRIB,NR,RECS)              
      INTEGER FL, LEVEL, NR                                             
      CHARACTER IDENT*8, ATTRIB*8, RECS*(*), BUF*80                     
      CHARACTER*8 LEV0,LEV1,LEV2,LEV3,LEV4,LEV5,ENDL                    
      DATA LEV0/'0       '/, LEV1/'1       '/, LEV2/'2       '/, LEV3/  
     &'3       '/, LEV4/'4       '/, LEV5/'5       '/, ENDL/'END     '/ 
      IF(.NOT.(NR .EQ. 0))GOTO  3000                                    
      READ(FL,'(A80)',END=99) BUF                                       
 3000 CONTINUE                                                          
      IF(.NOT.(BUF(1:8) .EQ. ENDL))GOTO  3002                           
      LEVEL = -1                                                        
      RETURN                                                            
 3002 CONTINUE                                                          
      I = 1                                                             
 3004 CONTINUE                                                          
      IF(.NOT.(I+79 .LE. LEN(RECS)))GOTO  3007                          
      RECS(I:I+79) = BUF                                                
      I = I + 80                                                        
 3007 CONTINUE                                                          
      READ (FL,'(A80)',END=99) BUF                                      
 3005 IF(.NOT.(BUF (1:8) .EQ. LEV0 .OR.BUF (1:8) .EQ. LEV1 .OR.BUF (1:8)
     & .EQ. LEV2 .OR.BUF (1:8) .EQ. LEV3 .OR.BUF (1:8) .EQ. LEV4 .OR.   
     &BUF (1:8) .EQ. LEV5 .OR.BUF (1:8) .EQ. ENDL ))GOTO  3004          
      IF(.NOT.(RECS(1:8) .EQ. LEV0))GOTO  3009                          
      LEVEL = 0                                                         
 3009 CONTINUE                                                          
      IF(.NOT.(RECS(1:8) .EQ. LEV1))GOTO  3011                          
      LEVEL = 1                                                         
 3011 CONTINUE                                                          
      IF(.NOT.(RECS(1:8) .EQ. LEV2))GOTO  3013                          
      LEVEL = 2                                                         
 3013 CONTINUE                                                          
      IF(.NOT.(RECS(1:8) .EQ. LEV3))GOTO  3015                          
      LEVEL = 3                                                         
 3015 CONTINUE                                                          
      IF(.NOT.(RECS(1:8) .EQ. LEV4))GOTO  3017                          
      LEVEL = 4                                                         
 3017 CONTINUE                                                          
      IF(.NOT.(RECS(1:8) .EQ. LEV5))GOTO  3019                          
      LEVEL = 5                                                         
 3019 CONTINUE                                                          
      IDENT = RECS(9:16)                                                
      ATTRIB = RECS(17:24)                                              
      NR = (I-1)/80                                                     
      RETURN                                                            
 99    LEVEL = -1                                                       
      RETURN                                                            
      END                                                               
      SUBROUTINE GTINFO(KEY,NI,INFORM,NR,RECS)                          
      INTEGER NI, NR                                                    
      CHARACTER KEY*8, INFORM*(*), RECS*(*)                             
      CHARACTER*8 CONT,SPCE,LEV0,LEV1,LEV2,LEV3,LEV4,LEV5               
      DATA CONT/'-       '/, SPCE/'        '/, LEV0/'0       '/, LEV1/  
     &'1       '/, LEV2/'2       '/, LEV3/'3       '/, LEV4/'4       '/,
     & LEV5/'5       '/                                                 
      NI = 0                                                            
      I=1                                                               
 3000 IF(.NOT.(I.LE.NR))GOTO  3002                                      
      IB = 80*(I-1)                                                     
      IF(.NOT.(RECS(IB+1:IB+8 ) .EQ. SPCE .OR.RECS(IB+1:IB+8 ) .EQ.     
     &LEV0 .OR.RECS(IB+1:IB+8 ) .EQ. LEV1 .OR.RECS(IB+1:IB+8 ) .EQ.     
     &LEV2 .OR.RECS(IB+1:IB+8 ) .EQ. LEV3 .OR.RECS(IB+1:IB+8 ) .EQ.     
     &LEV4 .OR.RECS(IB+1:IB+8 ) .EQ. LEV5 ))GOTO  3003                  
      IF(.NOT.(RECS(IB+ 9:IB+16) .EQ. KEY))GOTO  3005                   
      GO TO 1                                                           
 3005 CONTINUE                                                          
      IF(.NOT.(RECS(IB+41:IB+48) .EQ. KEY))GOTO  3007                   
      GO TO 2                                                           
 3007 CONTINUE                                                          
 3003 CONTINUE                                                          
      I=I+1                                                             
      GOTO  3000                                                        
 3002 CONTINUE                                                          
      RETURN                                                            
 3009 IF(.NOT.(I.LE.NR))GOTO  3011                                      
      IB = 80*(I-1)                                                     
      IF(.NOT.(RECS(IB+9:IB+16) .NE. CONT))GOTO  3012                   
      GOTO  3011                                                        
 3012 CONTINUE                                                          
 1     INFORM = INFORM(1:NI) // RECS(IB+17:IB+40)                       
      NI = NI + 24                                                      
      IF(.NOT.(RECS(IB+41:IB+48) .NE. CONT))GOTO  3014                  
      GOTO  3011                                                        
 3014 CONTINUE                                                          
 2     INFORM = INFORM(1:NI) // RECS(IB+49:IB+72)                       
      NI = NI + 24                                                      
      I=I+1                                                             
      GOTO  3009                                                        
 3011 CONTINUE                                                          
      RETURN                                                            
      END                                                               
      SUBROUTINE WRSTD(FL,LEVEL,IDENT,ATTRIB,NR,RECS)                   
      CHARACTER IDENT*8, ATTRIB*8, RECS*(*)                             
      INTEGER FL, LEVEL, NR                                             
      CHARACTER*8 LEV0,LEV1,LEV2,LEV3,LEV4,LEV5,ENDL                    
      DATA LEV0 /'0       '/, LEV1 /'1       '/, LEV2 /'2       '/,     
     &LEV3 /'3       '/, LEV4 /'4       '/, LEV5 /'5       '/, ENDL /   
     &'END     '/                                                       
      IF(.NOT.(NR .EQ. 0))GOTO  3000                                    
      NR = 1                                                            
 3000 CONTINUE                                                          
      IF(.NOT.(LEVEL .LT. 0))GOTO  3002                                 
      RECS = ENDL                                                       
      NR = 1                                                            
      GOTO  3003                                                        
 3002 CONTINUE                                                          
      IF(.NOT.(LEVEL .EQ. 0))GOTO  3004                                 
      RECS(1:8) = LEV0                                                  
 3004 CONTINUE                                                          
      IF(.NOT.(LEVEL .EQ. 1))GOTO  3006                                 
      RECS(1:8) = LEV1                                                  
 3006 CONTINUE                                                          
      IF(.NOT.(LEVEL .EQ. 2))GOTO  3008                                 
      RECS(1:8) = LEV2                                                  
 3008 CONTINUE                                                          
      IF(.NOT.(LEVEL .EQ. 3))GOTO  3010                                 
      RECS(1:8) = LEV3                                                  
 3010 CONTINUE                                                          
      IF(.NOT.(LEVEL .EQ. 4))GOTO  3012                                 
      RECS(1:8) = LEV4                                                  
 3012 CONTINUE                                                          
      IF(.NOT.(LEVEL .EQ. 5))GOTO  3014                                 
      RECS(1:8) = LEV5                                                  
 3014 CONTINUE                                                          
      RECS( 9:16) = IDENT                                               
      RECS(17:24) = ATTRIB                                              
      RECS(25:40) = ' '                                                 
 3003 CONTINUE                                                          
      I=1                                                               
 3016 IF(.NOT.(I.LE.NR))GOTO  3018                                      
      WRITE (FL,'(A80)')RECS(80*(I-1)+1:80*I)                           
      I=I+1                                                             
      GOTO  3016                                                        
 3018 CONTINUE                                                          
      RETURN                                                            
      END                                                               
      SUBROUTINE ADINFO(KEY,NI,INFORM,NR,RECS)                          
      CHARACTER KEY*8, INFORM*(*), RECS*(*)                             
      INTEGER NI, NR                                                    
      CHARACTER*8 CONT,SPCE                                             
      DATA CONT/'-       '/, SPCE/'        '/                           
      IF(.NOT.(NR .EQ. 0))GOTO  3000                                    
      I=1                                                               
      GO TO 2                                                           
 3000 CONTINUE                                                          
      IF(.NOT.(NR .EQ. 1))GOTO  3002                                    
      IF(.NOT.(RECS(41:48) .EQ. SPCE))GOTO  3004                        
      I=1                                                               
      GO TO 2                                                           
 3004 CONTINUE                                                          
      I=2                                                               
      GO TO 1                                                           
 3002 CONTINUE                                                          
      IF(.NOT.(RECS(80*(NR-1)+1:80*(NR-1)+8) .NE. SPCE))GOTO  3006      
      I=NR+1                                                            
      GO TO 1                                                           
 3006 CONTINUE                                                          
      IF(.NOT.(RECS(80*(NR-1)+41:80*(NR-1)+48) .EQ. SPCE))GOTO  3008    
      I=NR                                                              
      GO TO 2                                                           
 3008 CONTINUE                                                          
      I=NR+1                                                            
      GO TO 1                                                           
 1    RECS(80*(I-1)+ 1:80*(I-1)+80) = ' '                               
      RECS(80*(I-1)+ 9:80*(I-1)+16) = KEY                               
      RECS(80*(I-1)+17:80*(I-1)+40) = INFORM                            
      NNI = 25                                                          
      GO TO 4                                                           
 2     RECS(80*(I-1)+41:80*(I-1)+48) = KEY                              
      RECS(80*(I-1)+49:80*(I-1)+72) = INFORM                            
      NNI = 25                                                          
      I = I+1                                                           
      GO TO 3                                                           
 3010 IF(.NOT.(I.LE.LEN(RECS)/80))GOTO  3012                            
 3     IF(.NOT.(NNI .GT. NI))GOTO  3013                                 
      GOTO  3012                                                        
 3013 CONTINUE                                                          
      RECS(80*(I-1)+ 1:80*(I-1)+80) = ' '                               
      RECS(80*(I-1)+ 9:80*(I-1)+16) = CONT                              
      RECS(80*(I-1)+17:80*(I-1)+40) = INFORM(NNI:NI)                    
      NNI = NNI + 24                                                    
 4     IF(.NOT.(NNI .GT. NI))GOTO  3015                                 
      I=I+1                                                             
      GOTO  3012                                                        
 3015 CONTINUE                                                          
      RECS(80*(I-1)+41:80*(I-1)+48) = CONT                              
      RECS(80*(I-1)+49:80*(I-1)+72) = INFORM(NNI:NI)                    
      NNI = NNI + 24                                                    
      I=I+1                                                             
      GOTO  3010                                                        
 3012 CONTINUE                                                          
      NR = I-1                                                          
      RETURN                                                            
      END                                                               
./ ADD NAME=GRAPH
./ NUMBER NEW1=10,INCR=10
C                                                                       
C =============================================================         
C       Graph making subroutine                                         
C                                 Programmed by Koji Oda 1990.5         
C =============================================================         
C                                                                       
      SUBROUTINE GRAPH(IOUT,TYPE,TITLE,COLMS,LINES,NDATA,               
     &                 X,DX,XNAME,                                      
     &                 Y,DY,YNAME)                                      
C ==========                                                            
C parameters                                                            
C ==========                                                            
      INTEGER IOUT                                                      
      CHARACTER TYPE*4                                                  
      CHARACTER*(*) TITLE                                               
      INTEGER COLMS, LINES                                              
      INTEGER NDATA                                                     
      REAL*8 X(128),Y(128)                                              
      INTEGER DX,DY                                                     
      CHARACTER*(*) XNAME, YNAME                                        
                                                                        
      CHARACTER SCR(64)*128                                             
      CHARACTER XFMT*8, YFMT*8                                          
      INTEGER XFMTL, YFMTL                                              
      INTEGER XFLOR, YFLOR, XFRAC, YFRAC                                
      INTEGER LFTMAR, RGTMAR, TOPMAR, BTMMAR                            
      REAL*8 SCALE                                                      
      REAL*8 XMIN,XMAX, YMIN,YMAX                                       
      REAL*8 DMY                                                        
      REAL*8 XX,YY                                                      
      INTEGER CX,CY                                                     
      REAL*8 XRANGE, YRANGE, CXR, CYR                                   
      REAL*8 PX,PY                                                      
      GETX(PX) = NINT(LFTMAR             + CXR * (PX - XMIN) / XRANGE)  
      GETY(PY) = NINT(LINES - BTMMAR + 1 - CYR * (PY - YMIN) / YRANGE)  
                                                                        
C                                                                       
C ====================                                                  
C initialize variables                                                  
C ====================                                                  
C                                                                       
C                                                                       
C initialize SCR()                                                      
C ----------------                                                      
      DO 301 I=1,LINES                                                  
        DO 302 J=1,COLMS                                                
          SCR(I)(J:J)=' '                                               
  302   CONTINUE                                                        
  301 CONTINUE                                                          
C                                                                       
C get maximum & minimum value of each data                              
C ----------------------------------------                              
      XMIN = X(1)                                                       
      XMAX = X(1)                                                       
      YMIN = Y(1)                                                       
      YMAX = Y(1)                                                       
      DO 201 I = 2, NDATA                                               
        IF (X(I).GT.XMAX) THEN                                          
          XMAX = X(I)                                                   
        ELSE IF (X(I).LT.XMIN) THEN                                     
            XMIN = X(I)                                                 
        END IF                                                          
        IF (Y(I).GT.YMAX) THEN                                          
          YMAX = Y(I)                                                   
        ELSE IF (Y(I).LT.YMIN) THEN                                     
            YMIN = Y(I)                                                 
        END IF                                                          
  201 CONTINUE                                                          
                                                                        
C     XRANGE = XMAX - XMIN                                              
      YRANGE = YMAX - YMIN                                              
                                                                        
C                                                                       
C rearrange maximum & minimum                                           
C ---------------------------                                           
C     XMAX = XMAX + XRANGE * 0.1                                        
C     XMIN = XMIN - XRANGE * 0.1                                        
      YMAX = YMAX + YRANGE * 0.1                                        
      YMIN = YMIN - YRANGE * 0.1                                        
      IF (TYPE.EQ.'HIST') THEN                                          
        XMIN = 0.0                                                      
        YMIN = 0.0                                                      
      END IF                                                            
      XRANGE = XMAX - XMIN                                              
      YRANGE = YMAX - YMIN                                              
                                                                        
C                                                                       
C set format                                                            
C ----------                                                            
      IF (ABS(XMAX).GT.ABS(XMIN)) THEN                                  
        DMY=XMAX                                                        
      ELSE                                                              
        DMY=XMIN                                                        
      END IF                                                            
                                                                        
      XFLOR =  INT(LOG10(ABS(DMY)))+1                                   
      IF (XFRAC.LE.0) THEN                                              
        XFRAC = 0                                                       
      END IF                                                            
C                                                                       
      IF (ABS(YMAX).GT.ABS(YMIN)) THEN                                  
        DMY=YMAX                                                        
      ELSE                                                              
        DMY=YMIN                                                        
      END IF                                                            
      YFLOR =  INT(LOG10(ABS(DMY)))+1                                   
      YFRAC = -INT(LOG10(ABS(YRANGE))) + 1                              
      IF (YFRAC.LE.0) THEN                                              
        YFRAC = 0                                                       
      END IF                                                            
      XFMTL = XFLOR + XFRAC + 2                                         
      YFMTL = YFLOR + YFRAC + 2                                         
                                                                        
      XFMT = '(F  .  )'                                                 
      YFMT = '(F  .  )'                                                 
      WRITE(XFMT(3:4),'(I2)') XFMTL                                     
      WRITE(XFMT(6:7),'(I2)') XFRAC                                     
      WRITE(YFMT(3:4),'(I2)') YFMTL                                     
      WRITE(YFMT(6:7),'(I2)') YFRAC                                     
C                                                                       
C set margin                                                            
C ----------                                                            
C              YNAME  Y-VARIABLE'S FORMAT  Y-AXIS('I')                  
      LFTMAR = 2    + YFMTL              + 2                            
      RGTMAR = XFMTL / 2                                                
C              TITILE                                                   
      TOPMAR = 2                                                        
C              XNAME  X-AXIS('-')  X-VARIABLE                           
      BTMMAR = 1    + 1          + 1                                    
                                                                        
      CXR = DBLE(COLMS - LFTMAR - RGTMAR)                               
      CYR = DBLE(LINES - TOPMAR - BTMMAR)                               
                                                                        
C                                                                       
C ============                                                          
C main routine                                                          
C ============                                                          
C                                                                       
C                                                                       
C   put Origin                                                          
C   ----------                                                          
      SCR(LINES - BTMMAR + 1)(LFTMAR:LFTMAR) = '+'                      
C                                                                       
C   draw X-axis                                                         
C   -----------                                                         
      DO 101 I = LFTMAR + 1, COLMS                                      
        SCR(LINES - BTMMAR + 1)(I:I) = '-'                              
  101 CONTINUE                                                          
C                                                                       
C   draw Y-axis                                                         
C   -----------                                                         
      DO 102 I = TOPMAR + 1, LINES - BTMMAR                             
        SCR(I)(LFTMAR:LFTMAR) = '!'                                     
  102 CONTINUE                                                          
C                                                                       
C   put title                                                           
C   ---------                                                           
      I0 = INT(COLMS / 2) - INT(LEN(TITLE) / 2)                         
      SCR(1)(I0:I0 + LEN(TITLE) - 1) = TITLE                            
C                                                                       
C   put X-name                                                          
C   ----------                                                          
      I0 = LFTMAR + INT((COLMS - LFTMAR) / 2)                           
     &     - INT(LEN(XNAME) / 2)                                        
      SCR(LINES)(I0:I0 + LEN(XNAME) - 1) = XNAME                        
C                                                                       
C   put Y-name                                                          
C   ----------                                                          
      I0 = TOPMAR + INT((LINES - (TOPMAR + BTMMAR)) / 2)                
     &     - INT(LEN(YNAME) / 2)                                        
      DO 103 I = 1, LEN(YNAME)                                          
        SCR(I0 + I)(1:1) = YNAME(I:I)                                   
  103 CONTINUE                                                          
C                                                                       
C   put X-variables                                                     
C   ---------------                                                     
      SCALE = 10.0**INT(LOG10(ABS(XRANGE)/DX))                          
      DO 106 I = 0,DX                                                   
        XX = XMIN + I * XRANGE / DX                                     
        XX = INT(XX / SCALE) * SCALE                                    
        CX = GETX(XX)                                                   
        IF (CX.GE.0.AND.CX.LE.COLMS) THEN                               
          SCR(LINES-BTMMAR+1)(CX:CX) = '+'                              
          WRITE(SCR(LINES-BTMMAR+2)                                     
     &         (CX-XFMTL/2:CX-XFMTL/2+XFMTL-1),XFMT) XX                 
       END IF                                                           
  106 CONTINUE                                                          
C                                                                       
C   put Y-variables                                                     
C   ---------------                                                     
      SCALE = 10.0**INT(LOG10(ABS(YRANGE)/DY))                          
      DO 105 I = 0,DY                                                   
        YY = YMIN + I * YRANGE / DY                                     
        YY = INT(YY / SCALE) * SCALE                                    
        CY = GETY(YY)                                                   
        IF (CY.GE.0.AND.CY.LE.(LINES-BTMMAR)) THEN                      
          SCR(CY)(LFTMAR:LFTMAR) = '+'                                  
          WRITE(SCR(CY)(3:LFTMAR - 1),YFMT) YY                          
        END IF                                                          
  105 CONTINUE                                                          
C                                                                       
C   put data                                                            
C   --------                                                            
      DO 104 I = 1, NDATA                                               
        CX = GETX(X(I))                                                 
        CY = GETY(Y(I))                                                 
        SCR(CY)(CX:CX) = '*'                                            
        IF (TYPE.EQ.'HIST') THEN                                        
          DO 107 J = CY+1, LINES - BTMMAR                               
            SCR(J)(CX:CX) = '*'                                         
  107     CONTINUE                                                      
        END IF                                                          
  104 CONTINUE                                                          
C                                                                       
C =========                                                             
C print out                                                             
C =========                                                             
C                                                                       
      WRITE(IOUT,601)                                                   
      WRITE(IOUT,602) (SCR(I)(1:COLMS), I = 1, LINES)                   
  601 FORMAT(1H1)                                                       
  602 FORMAT(' ',A)                                                     
      RETURN                                                            
      END                                                               
./ ADD NAME=IOLIB
./ NUMBER NEW1=10,INCR=10
C*MODULE IOLIB *DECK OPENRD                                             
      SUBROUTINE OPENRD(IUNIT,CFORM,CNAME,IOERR)                        
C* 23-MAR-88 ROUTINE OPENRD OPENS A SEQUENTIAL FILE FOR READ ACCESS.    
C*                                                                      
      IMPLICIT REAL*8 (A-H,O-Z)                                         
      CHARACTER*(*) CFORM,CNAME                                         
      CHARACTER  CEXTEN(9)*1,CNAME1*60,CONAME*60                        
      LOGICAL LEXIST,LOPEN,LNAME                                        
      DATA CEXTEN /'1','2','3','4','5','6','7','8','9'/                 
      LEXIST=.FALSE.                                                    
      IVER=1                                                            
C  DELETE PRECEDING BLANKS FROM FILENAME                                
      CALL DLPRBL (CNAME)                                               
      CALL CLCSPC(CNAME,NCLEN)                                          
      CALL CLCSPC(CFORM,NFLEN)                                          
      WRITE(IOERR,11) CFORM(1:NFLEN-1),CNAME(1:NCLEN-1),IUNIT           
  11  FORMAT(' %OPENRD-I, REQUEST TO OPEN ',A,' FILE ',A,               
     .       ' ON UNIT ',I3)                                            
C                                                                       
C             FIRST CHECK FOR AN OPEN FILE ON UNIT= IUNIT               
C                     AND CLOSE ANY OPENED FILES.                       
C                                                                       
CCVX  INQUIRE(IUNIT,OPENED=LOPEN,NAME=CONAME,NAMED=LNAME)               
CCYB  INQUIRE(IUNIT,OPENED=LOPEN,NAME=CONAME,NAMED=LNAME)               
CVAX  INQUIRE(IUNIT,OPENED=LOPEN,NAME=CONAME,NAMED=LNAME)               
      INQUIRE(UNIT=IUNIT,OPENED=LOPEN,NAME=CONAME,NAMED=LNAME)          
      IF (LOPEN) THEN                                                   
         CLOSE(IUNIT,STATUS='KEEP',ERR=110)                             
      ENDIF                                                             
      GO TO 150                                                         
C                                                                       
C                                                                       
 110  CONTINUE                                                          
      WRITE(IOERR,1001) IUNIT,CNAME                                     
 1001 FORMAT(' %OPENRD-E, UNABLE TO CLOSE OPENED FILE ON UNIT ',I4,     
     .       ' BEFORE OPENING NEW FILE ',A)                             
      WRITE(IOERR,993) LOPEN                                            
  993 FORMAT(' %OPENRD-E, OPENED FILE IS NAMED ',L1)                    
      WRITE(IOERR,991) CONAME                                           
  991 FORMAT(' %OPENRD-E, OPENED FILE IS NAMED ',A)                     
      WRITE(IOERR,992) LNAME                                            
  992 FORMAT(' %OPENRD-E, OPENED FILE IS NAMED ',L1)                    
      CALL DIE                                                          
C                                                                       
C               CHECK FOR EXISTING FILE NAME = CNAME                    
C  MODIFY THE INPUT FILE NAME IF THERE IS AN EXISTING OF THE SAME NAME  
C                                                                       
 150  CONTINUE                                                          
      INQUIRE(FILE=CNAME(1:NCLEN-1),                                    
     .        EXIST=LEXIST,                                             
     .        OPENED=LOPEN,                                             
     .        NUMBER=JUNIT)                                             
C                                                                       
      IF (.NOT.LEXIST) THEN                                             
         WRITE(IOERR,1002) CNAME(1:NCLEN-1)                             
 1002    FORMAT(' %OPENRD-I, DETECTED NO FILE NAMED ',A)                
         CALL DIE                                                       
      ENDIF                                                             
C                                                                       
      IF (LOPEN) THEN                                                   
         WRITE(IOERR,1004) CNAME(1:NCLEN-1),JUNIT,IUNIT                 
 1004    FORMAT(' %OPENRD-I, DETECTED AN OPEN FILE NAMED ',A,           
     .          ' ON UNIT ',I3,' WHILE OPENING THIS FILE ON UNIT ',I3)  
         CALL DIE                                                       
      ENDIF                                                             
C                                                                       
C         AT THIS POINT IT IS SAFE TO OPEN THE FILE WITH                
C             NAME = CNAME(1:NCLEN1-1) ON UNIT=IUNIT                    
C                                                                       
CVAX      OPEN(IUNIT,                                                   
CVAX .     FILE=CNAME(1:NCLEN-1),                                       
CVAX .     FORM=CFORM(1:NFLEN-1),                                       
CVAX .     ACCESS='SEQUENTIAL',                                         
CVAX .     STATUS='OLD',                                                
CVAX .     SHARED,READONLY,                                             
CVAX .     ERR=200)                                                     
CCVX      OPEN(IUNIT,                                                   
CCVX .     FILE=CNAME(1:NCLEN-1),                                       
CCVX .     FORM=CFORM(1:NFLEN-1),                                       
CCVX .     ACCESS='SEQUENTIAL',                                         
CCVX .     STATUS='OLD',                                                
CCVX .     ERR=200)                                                     
          OPEN(UNIT=IUNIT,                                              
     .     FILE=CNAME(1:NCLEN-1),                                       
     .     FORM=CFORM(1:NFLEN-1),                                       
     .     STATUS='SHR',                                                
     .     ERR=200)                                                     
CCYB      OPEN(IUNIT,                                                   
CCYB .     FILE=CNAME(1:NCLEN-1),                                       
CCYB .     FORM=CFORM(1:NFLEN-1),                                       
CCYB .     ACCESS='SEQUENTIAL',                                         
CCYB .     STATUS='OLD',                                                
CCYB .     ERR=200)                                                     
      REWIND IUNIT                                                      
      RETURN                                                            
 200  CONTINUE                                                          
      WRITE(IOERR,1006) CNAME(1:NCLEN-1),IUNIT,CFORM(1:NFLEN-1)         
 1006 FORMAT(' %OPENRD-E, ERROR OPENING FILE ',A,' ON UNIT ',I3,        
     .       ' WITH ATTRIBUTES NEW, SEQUENTIAL, AND ',A)                
      CALL DIE                                                          
      RETURN                                                            
      END                                                               
C*MODULE IOLIB *DECK OPENWT                                             
      SUBROUTINE OPENWT(KUNIT,CFORM,CNAME,IOERR)                        
C* 23-MAR-88 ROUTINE OPNWT OPENS A SEQUENTIAL FILE FOR WRITE ACCESS.    
C* 28-AUG-89 MODIFIED TO WRITE TO PO-DATA SET OF FACOM                  
C* BY A.KITAO                                                           
C*                                                                      
      IMPLICIT REAL*8 (A-H,O-Z)                                         
      CHARACTER*(*) CFORM,CNAME                                         
      CHARACTER  CEXTEN(9)*1,CNAME1*60,CONAME*60                        
      LOGICAL LEXIST,LOPEN,LNAME                                        
      DATA CEXTEN /'1','2','3','4','5','6','7','8','9'/                 
      LEXIST=.FALSE.                                                    
      IVER=1                                                            
      IUNIT = KUNIT                                                     
C DELETE PRECING BLANKS FROM FILENAME                                   
      CALL DLPRBL (CNAME)                                               
C                                                                       
      CALL CLCSPC(CNAME,NCLEN)                                          
      CALL CLCSPC(CFORM,NFLEN)                                          
      WRITE(IOERR,11) CFORM(1:NFLEN-1),CNAME(1:NCLEN-1),IUNIT           
  11  FORMAT(' %OPENWT-I, REQUEST TO OPEN ',A,' FILE ',A,               
     .       ' ON UNIT ',I3)                                            
C                                                                       
C             FIRST CHECK FOR AN OPEN FILE ON UNIT= IUNIT               
C                     AND CLOSE ANY OPENED FILES.                       
C                                                                       
      INQUIRE(IUNIT,OPENED=LOPEN,NAME=CONAME,NAMED=LNAME)               
      IF (LOPEN) THEN                                                   
         CLOSE(IUNIT,STATUS='KEEP',ERR=110)                             
      ENDIF                                                             
      GO TO 130                                                         
C                                                                       
C                                                                       
 110  CONTINUE                                                          
      WRITE(IOERR,1001) IUNIT,CNAME                                     
 1001 FORMAT(' %OPENWT-E, UNABLE TO CLOSE OPENED FILE ON UNIT ',I4,     
     .       ' BEFORE OPENING NEW FILE ',A)                             
      WRITE(IOERR,993) LOPEN                                            
  993 FORMAT(' %OPENWT-E, OPENED FILE IS NAMED ',L1)                    
      WRITE(IOERR,991) CONAME                                           
  991 FORMAT(' %OPENWT-E, OPENED FILE IS NAMED ',A)                     
      WRITE(IOERR,992) LNAME                                            
  992 FORMAT(' %OPENWT-E, OPENED FILE IS NAMED ',L1)                    
      CALL DIE                                                          
C                                                                       
C               CHECK FOR EXISTING FILE NAME = CNAME                    
C  MODIFY THE INPUT FILE NAME IF THERE IS AN EXISTING OF THE SAME NAME  
C                                                                       
 130  CONTINUE                                                          
      CNAME1=CNAME                                                      
      NCLEN1=NCLEN                                                      
C                                                                       
 150  CONTINUE                                                          
      LEXIST=.FALSE.                                                    
      LOPEN= .FALSE.                                                    
      INQUIRE(FILE=CNAME1(1:NCLEN1-1),                                  
     .        EXIST=LEXIST,                                             
     .        OPENED=LOPEN,                                             
     .        NUMBER=JUNIT)                                             
C                                                                       
      IF (LEXIST .AND. CFORM(1:NFLEN-1) .EQ. 'OVERWRITE') THEN          
         LEXIST=.FALSE.                                                 
         CFORM ='UNFORMATTED'                                           
         WRITE(IOERR,7777) CNAME1(1:NCLEN1-1)                           
 7777    FORMAT(' %OPENWT-I, OVERWRITE TO FILE NAMED ',A)               
         I1=INDEX(CNAME(1:NCLEN-1),'(')                                 
         NFLEN = 12                                                     
      ENDIF                                                             
      IF (LEXIST) THEN                                                  
         WRITE(IOERR,1002) CNAME1(1:NCLEN1-1)                           
 1002    FORMAT(' %OPENWT-I, DETECTED EXISTING FILE NAMED ',A)          
         I1=INDEX(CNAME(1:NCLEN-1),'(')                                 
         I2=INDEX(CNAME(1:NCLEN-1),')')                                 
         IF(I1.NE.0) THEN                                               
           IF(I2-I1-1.GE.8) THEN                                        
             CNAME1 = CNAME(1:NCLEN-3)//CEXTEN(IVER)//')'               
           ELSE                                                         
             CNAME1 = CNAME(1:NCLEN-2)//CEXTEN(IVER)//')'               
           ENDIF                                                        
         ELSE                                                           
           CNAME1 = CNAME(1:NCLEN-1)//CEXTEN(IVER)                      
         ENDIF                                                          
         IVER=IVER+1                                                    
         CALL DLPRBL (CNAME1)                                           
         CALL CLCSPC(CNAME1,NCLEN1)                                     
         WRITE(IOERR,1003) CNAME(1:NCLEN-1),CNAME1(1:NCLEN1-1)          
 1003    FORMAT(' %OPENWT-I, RENAMING FILE ',A,' TO ',A)                
         GO TO 150                                                      
      ENDIF                                                             
C                                                                       
      IF (LOPEN) THEN                                                   
         WRITE(IOERR,1004) CNAME1(1:NCLEN1-1),JUNIT,IUNIT               
 1004    FORMAT(' %OPENWT-I, DETECTED AN OPEN FILE NAMED ',A,           
     .          ' ON UNIT ',I3,' WHILE OPENING THIS FILE ON UNIT ',I3)  
         IF (IVER .GT. 9) CALL DIE                                      
         I1=INDEX(CNAME(1:NCLEN-1),'(')                                 
         I2=INDEX(CNAME(1:NCLEN-1),')')                                 
         IF(I1.NE.0) THEN                                               
           IF(I2-I1-1.GE.8) THEN                                        
             CNAME1 = CNAME(1:NCLEN-3)//CEXTEN(IVER)//')'               
           ELSE                                                         
             CNAME1 = CNAME(1:NCLEN-2)//CEXTEN(IVER)//')'               
           ENDIF                                                        
         ELSE                                                           
           CNAME1 = CNAME(1:NCLEN-1)//CEXTEN(IVER)                      
         ENDIF                                                          
         IVER=IVER+1                                                    
         CALL DLPRBL (CNAME1)                                           
         CALL CLCSPC(CNAME1,NCLEN1)                                     
         WRITE(IOERR,1005) CNAME(1:NCLEN-1),CNAME1(1:NCLEN1-1)          
 1005    FORMAT(' %OPENWT-I, RENAMING FILE ',A,' TO ',A)                
         GO TO 150                                                      
      ENDIF                                                             
C                                                                       
C         AT THIS POINT IT IS SAFE TO OPEN THE FILE WITH                
C             NAME = CNAME1(1:NCLEN1-1) ON UNIT=IUNIT                   
C                                                                       
CCVX  OPEN(IUNIT,                                                       
CCVX .     FILE=CNAME1(1:NCLEN1-1),                                     
CCVX .     FORM=CFORM(1:NFLEN-1),                                       
CCVX .     ACCESS='SEQUENTIAL',                                         
CCVX .     STATUS='NEW',                                                
CCVX .     ERR=200)                                                     
CCYB  OPEN(IUNIT,                                                       
CCYB .     FILE=CNAME1(1:NCLEN1-1),                                     
CCYB .     FORM=CFORM(1:NFLEN-1),                                       
CCYB .     ACCESS='SEQUENTIAL',                                         
CCYB .     STATUS='NEW',                                                
CCYB .     ERR=200)                                                     
CVAX  OPEN(IUNIT,                                                       
CVAX .     FILE=CNAME1(1:NCLEN1-1),                                     
CVAX .     FORM=CFORM(1:NFLEN-1),                                       
CVAX .     ACCESS='SEQUENTIAL',                                         
CVAX .     STATUS='NEW',                                                
CVAX .     ERR=200)                                                     
      OPEN(UNIT=IUNIT,                                                  
     .     FILE=CNAME1(1:NCLEN1-1),                                     
     .     FORM=CFORM(1:NFLEN-1),                                       
     .     ACCESS='SEQUENTIAL',                                         
     .     STATUS='UNKNOWN',                                            
     .     ERR=200)                                                     
      RETURN                                                            
 200  CONTINUE                                                          
      WRITE(IOERR,1006) CNAME1(1:NCLEN1-1),IUNIT,CFORM(1:NFLEN-1)       
 1006 FORMAT(' %OPENWT-E, ERROR OPENING FILE ',A,' ON UNIT ',I3,        
     .       ' WITH ATTRIBUTES NEW, SEQUENTIAL, AND ',A)                
      CALL DIE                                                          
      RETURN                                                            
      END                                                               
C-----------------------------------------------------------------------
C-----------------------------------------------------------------------
C*MODULE IOLIB *DECK TIMIT                                              
      SUBROUTINE TIMIT(IOUT,IFLAG)                                      
      IMPLICIT REAL*8 (A-H,O-Z)                                         
C                                                                       
      COMMON /SWATCH/ TI,TX,TIM                                         
C                                                                       
C  COMPUTE AND PRINT TOTAL AND INTERVAL CPU TIME.                       
C  IFLAG .EQ. 0 INITIALIZES THE CLOCK..                                 
C  IFLAG .NE. 0 WRITES THE TIME INFORMATION TO UNIT= IOUT               
C               AND FLUSH OUTPUT BUFFER UNIT=IOUT ON CONVEX.            
C                                                                       
      IF (IFLAG .EQ. 0) THEN                                            
         TI=0.0D+00                                                     
         TX=0.0D+00                                                     
         TIM=0.0D+00                                                    
CVAX         CALL SECOND(TIM)                                           
CFHCCVX         CALL SECOND(TIM)                                        
             CALL SECOND(TIM)                                           
CCYB         CALL SECNDSX(TIM)                                          
         RETURN                                                         
      ENDIF                                                             
CCVX  CALL FLUSH(IOUT)                                                  
CFH   CALL FLUSH(IOUT)                                                  
CVAX         CALL SECOND(TIM)                                           
CCVX         CALL SECOND(TIM)                                           
             CALL SECOND(TIM)                                           
CCYB         CALL SECNDSX(TIM)                                          
      TX = TIM-TI                                                       
      TI = TIM                                                          
      TMINUT = TIM/60.0D0                                               
      WRITE (IOUT,9008) TX,TIM,TMINUT                                   
      RETURN                                                            
C                                                                       
 9008 FORMAT(' %TIMIT-I, STEP CPU TIME (SEC) =',F10.2,                  
     *        '  TOTAL CPU TIME (SEC) =',F10.2,                         
     *        '   (',F6.1,' MIN) ')                                     
      END                                                               
C*MODULE IOLIB   *DECK SECOND                                           
CVAX      SUBROUTINE SECOND(TIM)                                        
CCVX      SUBROUTINE SECOND(TIM)                                        
          SUBROUTINE SECOND(TIM)                                        
CCYB      SUBROUTINE SECNDSX(TIM)                                       
C                                                                       
C           MUST USE CYBER 205 COMPILER OPTION SC=1 TO RECOGNIZE SPECIAL
C           CALLS IN THIS ROUTINE....                                   
C                                                                       
CVAX  INTEGER CPUTIM, ITMLST(4), SYS$GETJPI                             
C                                                                       
      REAL*8   CPU0,WAL0,CPU,WAL,TIM                                    
CVAX  REAL*8   CPU0,WAL0,CPU,WAL,TIM                                    
CCVX  REAL*8   CPU0,WAL0,CPU,WAL,TIM                                    
CCVX  REAL*4   CPUTIME,TARRAY(2)                                        
      REAL*4   CPUTIM ,TARRAY                                           
CCYB  REAL     CPU0,WAL0,CPU,WAL,TIM                                    
C                                                                       
      LOGICAL FIRST                                                     
C                                                                       
CVAX  PARAMETER JPI$_CPUTIM = '04070004'X ! ACCUMULATED CPU TIME (10-MS)
CFPS  SAVE FIRST                                                        
CCVX  SAVE FIRST                                                        
      SAVE FIRST                                                        
CCYB  SAVE FIRST                                                        
C                                                                       
      COMMON /TIMING/ CPU0,WAL0,CPU,WAL                                 
C                                                                       
      DATA FIRST/.TRUE./                                                
CCCYB  DATA CPU00 /X'00000000FFFFFFFF'/                                 
C                                                                       
      IF(.NOT. FIRST) GO TO 300                                         
         FIRST=.FALSE.                                                  
C                                                                       
C       ----- INITIALIZE CLOCKS -----                                   
C                                                                       
         WAL0 =0.0                                                      
         CPU0 =0.0                                                      
CCCYB     CALL Q8CLOCK(,,WAL0)                                          
CCCYB     CALL Q8WJTIME(CPU00)                                          
CCYB      CPU0 = SECOND()                                               
C                                                                       
C           INITIALIZE ITEM LIST FOR VAX GETJPI                         
C                                                                       
CVAX     ITMLST(1) = JPI$_CPUTIM   ! SET ITEM CODE (INCLUDING LENGTH)   
CVAX     ITMLST(2) = %LOC(CPUTIM)  ! LOCATION OF CPUTIM VARIABLE        
CVAX     ITMLST(3) = 0             ! LENGTH NOT NEEDED                  
CVAX     ITMLST(4) = 0             ! TERMINATE ITMLST                   
C                                                                       
C              GET CPUTIM INFORMATION FROM GETJPI                       
C                                                                       
CVAX     IF( .NOT. SYS$GETJPI(,,,ITMLST,,,) ) WRITE(6,*) 'GETJPI ERROR' 
C                                                                       
C              CONVERT TO REAL SECONDS                                  
C                                                                       
CVAX     CPU0=CPUTIM*1.0E-2                                             
CVAX     WAL0=SECNDS(SNGL(WAL0))                                        
C                                                                       
CFHCCVX     WAL0=SECNDS(SNGL(WAL0))                                     
CCVX     WAL0=0.0                                                       
         WAL0=0.0                                                       
CCVX     CPUTIME= ETIME (TARRAY)                                        
CFH      CPUTIM = ETIME (TARRAY)                                        
         CALL     CLOCK(TARRAY,0,1)                                     
CCVX     CPU0 = TARRAY(1)                                               
         CPU0 = TARRAY                                                  
C                                                                       
CFH      CALL ZTIME1(WAL0,CPU0)                                         
C                                                                       
CFPS     ISCODE = SYS$GETTIME(CPU0,WAL0)                                
  300 CONTINUE                                                          
C                                                                       
C          - - - RETURN CPU TIME USED SINCE START OF JOB STEP - - -     
C                                                                       
CVAX  IF( .NOT. SYS$GETJPI(,,,ITMLST,,,) ) WRITE(6,*) 'GETJPI ERROR'    
CVAX  CPU=CPUTIM*1.E-2 - CPU0                                           
CVAX  WAL=SECNDS(SNGL(WAL0))                                            
CCVX  CPUTIME=ETIME (TARRAY)                                            
CFH   CPUTIM =ETIME (TARRAY)                                            
      CALL    CLOCK (TARRAY,0,1)                                        
CCVX  CPU = TARRAY(1) - CPU0                                            
      CPU = TARRAY - CPU0                                               
CFHCCVX  WAL=SECNDS(SNGL(WAL0))                                         
CCVX      WAL=1.0                                                       
          WAL=1.0                                                       
C                                                                       
C       CALL TO ZTIME2(IBM) RETURNS WALL AND CPU TIMES ELAPSED          
C       SINCE WAL0 AND CPU0 WERE SET                                    
C                                                                       
CFH   CPU =CPU0                                                         
CFH   WAL =WAL0                                                         
CFH   CALL ZTIME2(WAL,CPU)                                              
C                                                                       
CFPS  ISCODE = SYS$GETTIME(CPU,WAL)                                     
CFPS  CPU = CPU - CPU0                                                  
CFPS  WAL = WAL - WAL0                                                  
C                                                                       
CCCYB  CALL Q8CLOCK(,,WAL)                                              
CCCYB  CALL Q8RJTIME(,,CPU)                                             
CCYB       CPU = SECOND()                                               
CCCYB  CPU=(CPU00-CPU)/1000000                                          
CCCYB  WAL=(WAL-WAL0)/1000000                                           
CCYB   CPU = CPU - CPU0                                                 
      TIM=CPU                                                           
      RETURN                                                            
      END                                                               
C                                                                       
      SUBROUTINE OPWTOL (IUNIT,CFORM,CNAME,IOERR)                       
C* 23-MAR-88 ROUTINE OPENRD OPENS A SEQUENTIAL FILE FOR WRITE ACCESS.   
C*                                                                      
      IMPLICIT REAL*8 (A-H,O-Z)                                         
      CHARACTER*(*) CFORM,CNAME                                         
      CHARACTER  CEXTEN(9)*1,CNAME1*60,CONAME*60                        
      LOGICAL LEXIST,LOPEN,LNAME                                        
      DATA CEXTEN /'1','2','3','4','5','6','7','8','9'/                 
      LEXIST=.FALSE.                                                    
      IVER=1                                                            
C  DELETE PRECEDING BLANKS FROM FILENAME                                
      CALL DLPRBL (CNAME)                                               
      CALL CLCSPC(CNAME,NCLEN)                                          
      CALL CLCSPC(CFORM,NFLEN)                                          
      WRITE(IOERR,11) CFORM(1:NFLEN-1),CNAME(1:NCLEN-1),IUNIT           
  11  FORMAT(' %OPENRD-I, REQUEST TO OPEN ',A,' FILE ',A,               
     .       ' ON UNIT ',I3)                                            
C                                                                       
C             FIRST CHECK FOR AN OPEN FILE ON UNIT= IUNIT               
C                     AND CLOSE ANY OPENED FILES.                       
C                                                                       
      INQUIRE(IUNIT,OPENED=LOPEN,NAME=CONAME,NAMED=LNAME)               
      IF (LOPEN) THEN                                                   
         CLOSE(IUNIT,STATUS='KEEP',ERR=110)                             
      ENDIF                                                             
      GO TO 150                                                         
C                                                                       
C                                                                       
 110  CONTINUE                                                          
      WRITE(IOERR,1001) IUNIT,CNAME                                     
 1001 FORMAT(' %OPENRD-E, UNABLE TO CLOSE OPENED FILE ON UNIT ',I4,     
     .       ' BEFORE OPENING NEW FILE ',A)                             
      WRITE(IOERR,993) LOPEN                                            
  993 FORMAT(' %OPENRD-E, OPENED FILE IS NAMED ',L1)                    
      WRITE(IOERR,991) CONAME                                           
  991 FORMAT(' %OPENRD-E, OPENED FILE IS NAMED ',A)                     
      WRITE(IOERR,992) LNAME                                            
  992 FORMAT(' %OPENRD-E, OPENED FILE IS NAMED ',L1)                    
      CALL DIE                                                          
C                                                                       
C               CHECK FOR EXISTING FILE NAME = CNAME                    
C  MODIFY THE INPUT FILE NAME IF THERE IS AN EXISTING OF THE SAME NAME  
C                                                                       
 150  CONTINUE                                                          
      INQUIRE(FILE=CNAME(1:NCLEN-1),                                    
     .        EXIST=LEXIST,                                             
     .        OPENED=LOPEN,                                             
     .        NUMBER=JUNIT)                                             
C                                                                       
      IF (.NOT.LEXIST) THEN                                             
         WRITE(IOERR,1002) CNAME(1:NCLEN-1)                             
 1002    FORMAT(' %OPENRD-I, DETECTED NO FILE NAMED ',A)                
         CALL DIE                                                       
      ENDIF                                                             
C                                                                       
      IF (LOPEN) THEN                                                   
         WRITE(IOERR,1004) CNAME(1:NCLEN-1),JUNIT,IUNIT                 
 1004    FORMAT(' %OPENRD-I, DETECTED AN OPEN FILE NAMED ',A,           
     .          ' ON UNIT ',I3,' WHILE OPENING THIS FILE ON UNIT ',I3)  
         CALL DIE                                                       
      ENDIF                                                             
C                                                                       
C         AT THIS POINT IT IS SAFE TO OPEN THE FILE WITH                
C             NAME = CNAME(1:NCLEN1-1) ON UNIT=IUNIT                    
C                                                                       
CCVX      OPEN(IUNIT,                                                   
CCVX .     FILE=CNAME(1:NCLEN-1),                                       
CCVX .     FORM=CFORM(1:NFLEN-1),                                       
CCVX .     ACCESS='SEQUENTIAL',                                         
CCVX .     STATUS='OLD',                                                
CCVX .     ERR=200)                                                     
CCYB      OPEN(IUNIT,                                                   
CCYB .     FILE=CNAME(1:NCLEN-1),                                       
CCYB .     FORM=CFORM(1:NFLEN-1),                                       
CCYB .     ACCESS='SEQUENTIAL',                                         
CCYB .     STATUS='OLD',                                                
CCYB .     ERR=200)                                                     
CVAX      OPEN(IUNIT,                                                   
CVAX .     FILE=CNAME(1:NCLEN-1),                                       
CVAX .     FORM=CFORM(1:NFLEN-1),                                       
CVAX .     ACCESS='SEQUENTIAL',                                         
CVAX .     STATUS='OLD',                                                
CVAX .     ERR=200)                                                     
          OPEN(UNIT=IUNIT,                                              
     .     FILE=CNAME(1:NCLEN-1),                                       
     .     FORM=CFORM(1:NFLEN-1),                                       
     .     STATUS='SHR',                                                
     .     ERR=200)                                                     
      RETURN                                                            
 200  CONTINUE                                                          
      WRITE(IOERR,1006) CNAME(1:NCLEN-1),IUNIT,CFORM(1:NFLEN-1)         
 1006 FORMAT(' %OPENRD-E, ERROR OPENING FILE ',A,' ON UNIT ',I3,        
     .       ' WITH ATTRIBUTES NEW, SEQUENTIAL, AND ',A)                
      CALL DIE                                                          
      RETURN                                                            
      END                                                               
./ ADD NAME=IOROUTN
./ NUMBER NEW1=10,INCR=10
CGOGOGOGOGOGOGOGOGOGOGOGOGOGOGOGOGOGOGOGOGOGOGOGOGOGOGOGOGOGOGOGOGOGOG  
C                                                                       
C  *** IOROUTN  ***                                                     
C      THIS FILE INCLUDES I/O ROUTINES.                                 
C                                                                       
C      RDANGL INSTALLED BY AKIO KITAO, APR. 27, 1990                    
C      WTANGL INSTALLED BY AKIO KITAO, APR. 27, 1990                    
C                                                                       
CGOGOGOGOGOGOGOGOGOGOGOGOGOGOGOGOGOGOGOGOGOGOGOGOGOGOGOGOGOGOGOGOGOGOG  
C                                                                       
C     THIS SUBROUTINE READS DIHEDRAL ANGLE DATA FROM ANG.DATA FILE      
C     ( ECEPP FORMAT)                                                   
C                                                                       
      SUBROUTINE RDANGL(IREAD)                                          
C                                                                       
C     *** DECLARE ***                                                   
C                                                                       
      IMPLICIT REAL*8 (A-H,O-Z)                                         
C                                                                       
      PARAMETER (PI=3.141 592 653 589 793D0,RAD=PI/180.D0)              
C                                                                       
CMSP  INCLUDE (MAXSIZE)                                                 
      INCLUDE '/labo/qclib/inspidas/common/maxsize'
CMSP  INCLUDE (SIZE)                                                    
      INCLUDE '/labo/qclib/inspidas/common/size'
CMSP  INCLUDE (COMMAND)                                                 
      INCLUDE '/labo/qclib/inspidas/common/command'
CMSP  INCLUDE (UNITNUMS)                                                
      INCLUDE '/labo/qclib/inspidas/common/unitnums'
CMSP  INCLUDE (VARANG)                                                  
      INCLUDE '/labo/qclib/inspidas/common/varang'
C                                                                       
C     *** READ DIHEDRAL ANGLE DATA FROM ANG.DATA FILE ***               
C                                                                       
      DO 10 I=1,NUMRES                                                  
        READ(IREAD,1100)(ANGLES(J,I),J=1,10)                            
 1100   FORMAT(10F8.3)                                                  
   10 CONTINUE                                                          
C                                                                       
      DO 20 I=1,NUMRES                                                  
      DO 20 J=1,10                                                      
        ANGRAD(J,I) = ANGLES(J,I) * RAD                                 
   20 CONTINUE                                                          
C                                                                       
      RETURN                                                            
      END                                                               
C                                                                       
C     THIS SUBROUTINE WRITE DIHEDRAL ANGLE DATA                         
C     ( ECEPP FORMAT)                                                   
C                                                                       
      SUBROUTINE WTANGL(IWRITE)                                         
C                                                                       
C     *** DECLARE ***                                                   
C                                                                       
      IMPLICIT REAL*8 (A-H,O-Z)                                         
C                                                                       
CMSP  INCLUDE (MAXSIZE)                                                 
      INCLUDE '/labo/qclib/inspidas/common/maxsize'
CMSP  INCLUDE (SIZE)                                                    
      INCLUDE '/labo/qclib/inspidas/common/size'
CMSP  INCLUDE (COMMAND)                                                 
      INCLUDE '/labo/qclib/inspidas/common/command'
CMSP  INCLUDE (UNITNUMS)                                                
      INCLUDE '/labo/qclib/inspidas/common/unitnums'
CMSP  INCLUDE (VARANG)                                                  
      INCLUDE '/labo/qclib/inspidas/common/varang'
C                                                                       
      PARAMETER (PI=3.141 592 653 589 793D0,RAD=PI/180.D0)              
C                                                                       
C     *** WRITE DIHEDRAL ANGLE DATA                                     
C                                                                       
      DO 10 I=1,NUMRES                                                  
      DO 10 J=1,10                                                      
        ANGLES(J,I) = ANGRAD(J,I) / RAD                                 
   10 CONTINUE                                                          
C                                                                       
      DO 20 I=1,NUMRES                                                  
        WRITE(IWRITE,1100)(ANGLES(J,I),J=1,10)                          
 1100   FORMAT(10F8.3)                                                  
   20 CONTINUE                                                          
C                                                                       
      RETURN                                                            
      END                                                               
C-----------------------------------------------------------------------
      SUBROUTINE  GTANGL (IREAD,II)                                     
C-----------------------------------------------------------------------
      IMPLICIT REAL*8 (A-H,O-Z)                                         
CMSP  INCLUDE (MAXSIZE)                                                 
      INCLUDE '/labo/qclib/inspidas/common/maxsize'
CMSP  INCLUDE (SIZE)                                                    
      INCLUDE '/labo/qclib/inspidas/common/size'
CMSP  INCLUDE (VARANG)                                                  
      INCLUDE '/labo/qclib/inspidas/common/varang'
CMSP  INCLUDE (UNITNUMS)                                                
      INCLUDE '/labo/qclib/inspidas/common/unitnums'
C     COMMON/NUMBER/  NUMATM,NUMVAR,NN2,NUMINT,NSS,NUMRES               
C     DIMENSION  VAR(NUMVAR)                                            
C  FOR FRESH START THE INPUT FILE CONTAINS DIHEDRAL ANGLES ONLY.        
C  FOR RESTART THE INPUT FILE CONTAINS DIHEDRAL ANGLES AND THE          
C  ITERATION NUMBER.                                                    
C                                                                       
      II=1                                                              
      READ(IREAD)  (VAR(I),I=1,NUMVAR)                                  
      READ(IREAD,END=10)  II                                            
        WRITE(IOUT06,*) 'READ FROM A RESTART FILE'                      
        WRITE(IOUT02,*) 'READ FROM A RESTART FILE'                      
        II = II + 1                                                     
  10  CONTINUE                                                          
      RETURN                                                            
      END                                                               
C-----------------------------------------------------------------------
      SUBROUTINE  PTANGL (IWRITE,VAR,II)                                
C-----------------------------------------------------------------------
      IMPLICIT REAL*8 (A-H,O-Z)                                         
CMSP  INCLUDE (MAXSIZE)                                                 
      INCLUDE '/labo/qclib/inspidas/common/maxsize'
CMSP  INCLUDE (SIZE)                                                    
      INCLUDE '/labo/qclib/inspidas/common/size'
C     COMMON/NUMBER/  NUMATM,NUMVAR,NN2,NUMINT,NSS,NUMRES               
      DIMENSION  VAR(MAXVAR)                                            
      WRITE(IWRITE) (VAR(I),I=1,NUMVAR)                                 
      WRITE(IWRITE) II                                                  
      REWIND  IWRITE                                                    
      RETURN                                                            
      END                                                               
C-----------------------------------------------------------------------
      SUBROUTINE  PTCOOR (IWRITE)                                       
C-----------------------------------------------------------------------
      IMPLICIT REAL*8 (A-H,O-Z)                                         
CMSP  INCLUDE (MAXSIZE)                                                 
      INCLUDE '/labo/qclib/inspidas/common/maxsize'
CMSP  INCLUDE (SIZE)                                                    
      INCLUDE '/labo/qclib/inspidas/common/size'
CMSP  INCLUDE (COORD)                                                   
      INCLUDE '/labo/qclib/inspidas/common/coord'
      WRITE(IWRITE) ((CO(J,I),J=1,3),I=1,NUMATM)                        
      RETURN                                                            
      END                                                               
C-----------------------------------------------------------------------
      SUBROUTINE RDSTD(FL,LEVEL,IDENT,ATTRIB,NR,RECS)                   
C-----------------------------------------------------------------------
      INTEGER FL, LEVEL, NR                                             
      CHARACTER IDENT*8, ATTRIB*8, RECS*(*)                             
      COMMON /BUFFER/BUF                                                
      CHARACTER*80 BUF                                                  
      CALL RDSTDM(FL,BUF,LEVEL,IDENT,ATTRIB,NR,RECS)                    
      RETURN                                                            
      END                                                               
C-----------------------------------------------------------------------
      SUBROUTINE RDSTDM(FL,BUF,LEVEL,IDENT,ATTRIB,NR,RECS)              
C-----------------------------------------------------------------------
      INTEGER FL, LEVEL, NR                                             
      CHARACTER IDENT*8, ATTRIB*8, RECS*(*), BUF*80                     
      CHARACTER*8 LEV0,LEV1,LEV2,LEV3,LEV4,LEV5,ENDL                    
      DATA LEV0/'0       '/, LEV1/'1       '/, LEV2/'2       '/, LEV3/  
     &'3       '/, LEV4/'4       '/, LEV5/'5       '/, ENDL/'END     '/ 
      IF(.NOT.(NR .EQ. 0))GOTO  3000                                    
      READ(FL,'(A80)',END=99) BUF                                       
 3000 CONTINUE                                                          
      IF(.NOT.(BUF(1:8) .EQ. ENDL))GOTO  3002                           
      LEVEL = -1                                                        
      RETURN                                                            
 3002 CONTINUE                                                          
      I = 1                                                             
 3004 CONTINUE                                                          
      IF(.NOT.(I+79 .LE. LEN(RECS)))GOTO  3007                          
      RECS(I:I+79) = BUF                                                
      I = I + 80                                                        
 3007 CONTINUE                                                          
      READ (FL,'(A80)',END=99) BUF                                      
 3005 IF(.NOT.(BUF (1:8) .EQ. LEV0 .OR.BUF (1:8) .EQ. LEV1 .OR.BUF (1:8)
     & .EQ. LEV2 .OR.BUF (1:8) .EQ. LEV3 .OR.BUF (1:8) .EQ. LEV4 .OR.   
     &BUF (1:8) .EQ. LEV5 .OR.BUF (1:8) .EQ. ENDL ))GOTO  3004          
      IF(.NOT.(RECS(1:8) .EQ. LEV0))GOTO  3009                          
      LEVEL = 0                                                         
 3009 CONTINUE                                                          
      IF(.NOT.(RECS(1:8) .EQ. LEV1))GOTO  3011                          
      LEVEL = 1                                                         
 3011 CONTINUE                                                          
      IF(.NOT.(RECS(1:8) .EQ. LEV2))GOTO  3013                          
      LEVEL = 2                                                         
 3013 CONTINUE                                                          
      IF(.NOT.(RECS(1:8) .EQ. LEV3))GOTO  3015                          
      LEVEL = 3                                                         
 3015 CONTINUE                                                          
      IF(.NOT.(RECS(1:8) .EQ. LEV4))GOTO  3017                          
      LEVEL = 4                                                         
 3017 CONTINUE                                                          
      IF(.NOT.(RECS(1:8) .EQ. LEV5))GOTO  3019                          
      LEVEL = 5                                                         
 3019 CONTINUE                                                          
      IDENT = RECS(9:16)                                                
      ATTRIB = RECS(17:24)                                              
      NR = (I-1)/80                                                     
      RETURN                                                            
 99    LEVEL = -1                                                       
      RETURN                                                            
      END                                                               
C-----------------------------------------------------------------------
      SUBROUTINE GTINFO(KEY,NI,INFORM,NR,RECS)                          
C-----------------------------------------------------------------------
      INTEGER NI, NR                                                    
      CHARACTER KEY*8, INFORM*(*), RECS*(*)                             
      CHARACTER*8 CONT,SPCE,LEV0,LEV1,LEV2,LEV3,LEV4,LEV5               
      DATA CONT/'-       '/, SPCE/'        '/, LEV0/'0       '/, LEV1/  
     &'1       '/, LEV2/'2       '/, LEV3/'3       '/, LEV4/'4       '/,
     & LEV5/'5       '/                                                 
      NI = 0                                                            
      I=1                                                               
 3000 IF(.NOT.(I.LE.NR))GOTO  3002                                      
      IB = 80*(I-1)                                                     
      IF(.NOT.(RECS(IB+1:IB+8 ) .EQ. SPCE .OR.RECS(IB+1:IB+8 ) .EQ.     
     &LEV0 .OR.RECS(IB+1:IB+8 ) .EQ. LEV1 .OR.RECS(IB+1:IB+8 ) .EQ.     
     &LEV2 .OR.RECS(IB+1:IB+8 ) .EQ. LEV3 .OR.RECS(IB+1:IB+8 ) .EQ.     
     &LEV4 .OR.RECS(IB+1:IB+8 ) .EQ. LEV5 ))GOTO  3003                  
      IF(.NOT.(RECS(IB+ 9:IB+16) .EQ. KEY))GOTO  3005                   
      GO TO 1                                                           
 3005 CONTINUE                                                          
      IF(.NOT.(RECS(IB+41:IB+48) .EQ. KEY))GOTO  3007                   
      GO TO 2                                                           
 3007 CONTINUE                                                          
 3003 CONTINUE                                                          
      I=I+1                                                             
      GOTO  3000                                                        
 3002 CONTINUE                                                          
      RETURN                                                            
 3009 IF(.NOT.(I.LE.NR))GOTO  3011                                      
      IB = 80*(I-1)                                                     
      IF(.NOT.(RECS(IB+9:IB+16) .NE. CONT))GOTO  3012                   
      GOTO  3011                                                        
 3012 CONTINUE                                                          
 1     INFORM = INFORM(1:NI) // RECS(IB+17:IB+40)                       
      NI = NI + 24                                                      
      IF(.NOT.(RECS(IB+41:IB+48) .NE. CONT))GOTO  3014                  
      GOTO  3011                                                        
 3014 CONTINUE                                                          
 2     INFORM = INFORM(1:NI) // RECS(IB+49:IB+72)                       
      NI = NI + 24                                                      
      I=I+1                                                             
      GOTO  3009                                                        
 3011 CONTINUE                                                          
      RETURN                                                            
      END                                                               
C-----------------------------------------------------------------------
      SUBROUTINE WTEIG(IOUT)                                            
C-----------------------------------------------------------------------
      IMPLICIT REAL*8(A-H,O-Z)                                          
CMSP  INCLUDE (MAXSIZE)                                                 
      INCLUDE '/labo/qclib/inspidas/common/maxsize'
CMSP  INCLUDE (SIZE)                                                    
      INCLUDE '/labo/qclib/inspidas/common/size'
CMSP  INCLUDE (EIGEN)                                                   
      INCLUDE '/labo/qclib/inspidas/common/eigen'
CMSP  INCLUDE (UNITNUMS)                                                
      INCLUDE '/labo/qclib/inspidas/common/unitnums'
C                                                                       
      WRITE(IOUT,*) NUMVAR                                              
      WRITE(IOUT,1000) (EIGVAL(I),I=1,NUMVAR)                           
      WRITE(IOUT,1000) ((EIGVEC(I,J),I=1,NUMVAR),J=1,NUMVAR)            
 1000 FORMAT(1X,10E12.4)                                                
      RETURN                                                            
      END                                                               
C-----------------------------------------------------------------------
      SUBROUTINE PTEIG(IOUT)                                            
C-----------------------------------------------------------------------
      IMPLICIT REAL*8(A-H,O-Z)                                          
CMSP  INCLUDE (MAXSIZE)                                                 
      INCLUDE '/labo/qclib/inspidas/common/maxsize'
CMSP  INCLUDE (SIZE)                                                    
      INCLUDE '/labo/qclib/inspidas/common/size'
CMSP  INCLUDE (EIGEN)                                                   
      INCLUDE '/labo/qclib/inspidas/common/eigen'
CMSP  INCLUDE (UNITNUMS)                                                
      INCLUDE '/labo/qclib/inspidas/common/unitnums'
C                                                                       
      WRITE(IOUT) NUMVAR,(EIGVAL(I),I=1,NUMVAR),                        
     &            ((EIGVEC(I,J),I=1,NUMVAR),J=1,NUMVAR)                 
      RETURN                                                            
      END                                                               
C-----------------------------------------------------------------------
      SUBROUTINE GTEIG(IIN)                                             
C-----------------------------------------------------------------------
      IMPLICIT REAL*8(A-H,O-Z)                                          
CMSP  INCLUDE (MAXSIZE)                                                 
      INCLUDE '/labo/qclib/inspidas/common/maxsize'
CMSP  INCLUDE (SIZE)                                                    
      INCLUDE '/labo/qclib/inspidas/common/size'
CMSP  INCLUDE (EIGEN)                                                   
      INCLUDE '/labo/qclib/inspidas/common/eigen'
CMSP  INCLUDE (UNITNUMS)                                                
      INCLUDE '/labo/qclib/inspidas/common/unitnums'
C                                                                       
      READ(IIN) NUMVAR,(EIGVAL(I),I=1,NUMVAR),                          
     &          ((EIGVEC(I,J),I=1,NUMVAR),J=1,NUMVAR)                   
      RETURN                                                            
      END                                                               
./ ADD NAME=MAIN
./ NUMBER NEW1=10,INCR=10
C***********************************************************************
C                                                                       
C                             I  N  S  P  I  D  A  S                    
C                                                                       
C  INSPIDAS DEVELOPMENT TEAM                                            
C                                                                       
C           MIZUGUCHI                                                   
C           SHIRAI                                                      
C           KITAO                                                       
C           YAMATO                                                      
C           IKURA                                                       
C           IRISA                                                       
C           HIRATA                                                      
C           GO                                                          
C                                                   JAN. 29, 1990       
C                                                                       
C***********************************************************************
C                                                                       
C PROGRAM MAIN                                                          
C   MAIN PROGRAM FOR INSPIDAS                                           
      IMPLICIT REAL*8 (A-H,O-Z)                                         
      IMPLICIT INTEGER*4 (I-N)                                          
CMSP  INCLUDE (MAXSIZE)                                                 
      INCLUDE '/labo/qclib/inspidas/common/maxsize'
CMSP  INCLUDE (COMMAND)                                                 
      INCLUDE '/labo/qclib/inspidas/common/command'
CMSP  INCLUDE (UNITNUMS)                                                
      INCLUDE '/labo/qclib/inspidas/common/unitnums'
CMSP  INCLUDE (ECHO)                                                    
      INCLUDE '/labo/qclib/inspidas/common/echo'
CMSP  INCLUDE (FILEIO)                                                  
      INCLUDE '/labo/qclib/inspidas/common/fileio'
CMSP  INCLUDE (WORK)                                                    
      INCLUDE '/labo/qclib/inspidas/common/work'
CMSP  INCLUDE (WORKMANA)                                                
      INCLUDE '/labo/qclib/inspidas/common/workmana'
      CHARACTER*1 DEL                                                   
      CHARACTER*4 TASK                                                  
      CHARACTER*5 KEYWOR                                                
      CHARACTER*10 DAY,WHEN                                             
      CHARACTER*80 OUTPUT,TITLE                                         
      CHARACTER*80 UNIT1                                                
      CHARACTER*8  CMCVAX,CMCCVX,CMCCYB,CMCIBM,VERSN                    
      LOGICAL ECH                                                       
      DATA  CMCVAX,CMCCVX,CMCCYB  /'VAX/VMS ','CONVEX  ','CYBER205'/    
      DATA  CMCIBM                /'FACOM   '/                          
C                                                                       
C   ************                                                        
      CALL TIMIT(0,0)                                                   
      ECH=.TRUE.                                                        
      DEL = '*'                                                         
C                                                                       
C INITIALIZE WORKMANAGE COMMON BLOCK                                    
C                                                                       
        ILSTRE   = 1                                                    
        ILSTIN  = 1                                                     
        ILSTCH   = 1                                                    
        PRNTME  = .FALSE.                                               
C                                                                       
CVAX  VERSN=CMCVAX                                                      
CCVX  VERSN=CMCCVX                                                      
      VERSN=CMCIBM                                                      
CCYB  VERSN=CMCCYB                                                      
C                                                                       
C***********************************************************************
C   ASSIGN ALL I/O UNIT NUMBERS FOR ALL TASKS HERE                      
C   SEE UNITNUMS.CMN FOR A SUMMARY OF ALL I/O INFORMATION               
C                                                                       
C                                                                       
      IN1=1                                                             
      IN2=2                                                             
      IN3=3                                                             
      IN4=4                                                             
      IFN4=4                                                            
      IOUT1=1                                                           
      IOUT2=2                                                           
      IOUT3=3                                                           
C                                                                       
C  MAIN INPUT AND OUTPUT FILES                                          
C                                                                       
      IN01=1                                                            
CCVX  CALL GETENV("FOR001",UNIT1)                                       
CFH   CALL GETENV('FOR001',UNIT1)                                       
CCVX  OPEN(IN01,FILE=UNIT1,FORM='FORMATTED',STATUS='OLD')               
C MAIN INPUT FILE                                                       
      IOUT02=2                                                          
C MAIN OUTPUT FILE                                                      
      IOUT06=6                                                          
C MAIN LOG FILE                                                         
C                                                                       
C ----------------------------------------------------------------------
C  TASK PREIN ...                                                       
      IN11=11                                                           
      IN13=13                                                           
      IOUT12=12                                                         
      IOUT14=14                                                         
C                                                                       
C  UNIT 11: AMINO ACID SEQUENCE (ABE FORMAT)                            
C  UNIT 13: DIHEDRAL ANGLE (ECEPP FORMAT)                               
C  UNIT 12: INPUT FILE TO PRECEP                                        
C  UNIT 14: DIHEDRAL ANGLE (ECEPP FORMAT)                               
C                                                                       
C  TASK PRECEP...                                                       
       IN21=21                                                          
       IN23=23                                                          
       IN25=25                                                          
       IN27=27                                                          
       IN29=29                                                          
       IOUT22=22                                                        
       IOUT24=24                                                        
       IOUT26=26                                                        
       IOUT28=28                                                        
C  UNIT 21: OUTPUT FROM PREIN                                           
C  UNIT 22: INPUT TO MINIMIZE                                           
C  TASK MINIM...                                                        
C                                                                       
       IN31=31                                                          
       IN33=33                                                          
       IN35=35                                                          
       IN37=37                                                          
       IOUT32=32                                                        
       IOUT34=34                                                        
       IOUT36=36                                                        
       IOUT38=38                                                        
       IOUT39=39                                                        
       IOUT40=40                                                        
C UNIT 31:  PRECEP OUTPUT DATA                                          
C UNIT 33:  ENERGY PARAMETERS (BD8)                                     
C UNIT 35:  INITIAL ANGLES IN UNIT OF DEGREES (ECCEP FORMAT)            
C UNIT 37:  INITIAL ANGLES IN UNIT OF RADIANS (UNFORMATTED)             
C             (RESTART FILE)                                            
C UNIT 32:  FINAL ANGLES (FORMATTED)                                    
C UNIT 34:  FLEX FORMATTED DATA (ANGLES AND COORDINATES)                
C UNIT 36:  FIRST AND SECOND DERIVATIVE OF POTENTIAL ENERGY             
C               (UNFORMATTED)                                           
C UNIT 38:  FINAL COORDINATES AND ANGLES (FORMATTED)                    
C UNIT 39:  FINAL COORDINATES (UNFORMATTED)                             
C UNIT 40:  FINAL ANGLES IN UNITS OF RADIANS (UNFORMATTED)              
C             (RESTART FILE)                                            
C  TASK NMA                                                             
C                                                                       
       IN41=41                                                          
       IN43=43                                                          
       IN45=45                                                          
       IOUT42=42                                                        
       IOUT44=44                                                        
       IOUT46=46                                                        
       IOUT48=48                                                        
       IOUT50=50                                                        
       IOUT52=52                                                        
       IOUT54=54                                                        
       IOUT56=56                                                        
       IOUT58=58                                                        
       IOUT60=60                                                        
       IOUT62=62                                                        
       IOUT64=64                                                        
C UNIT 41:  PRECEP OUTPUT                                               
C UNIT 43:  EIGEN VALUES AND EIGEN VECTORS (UNFORMATTED)                
C UNIT 45:  K-MATRIX                                                    
C UNIT 42:  EIGEN VALUES AND EIGEN VECTORS (FORMATTED)                  
C UNIT 44:  EIGEN VALUES AND EIGEN VECTORS (UNFORMATTED)                
C UNIT 46:  K-MATRIX * EIGEN VECTORS                                    
C***********************************************************************
C READ IN UNIT 1 DATA FOR ECHO AND REWIND UNIT 1                        
C                                                                       
      CALL ECHOIN(NLINE)                                                
C***********************************************************************
C                                                                       
C  TASK LOOP...                                                         
C  READ IN THE TASK AND DECIDE WHAT TO DO.                              
C                                                                       
    2 CONTINUE                                                          
C                                                                       
      CALL NXTCMN (TASK)                                                
C                                                                       
C PRINT OUT MEMORY USAGE INFO. FOR THIS TASK?                           
C                                                                       
      IF (LCRMST (COMLY2 ,COMLEN,'MEMO',4,'RY',2) .GT. 0) THEN          
          PRNTME  = .TRUE.                                              
      ENDIF                                                             
C                                                                       
      IF(TASK.EQ.'WRIT') THEN                                           
        CALL GTFLNM(OUTPUT)                                             
CFHCVAX    CALL DATE(DAY)                                               
CFHCVAX    CALL TIME(WHEN)                                              
CFHCCVX    CALL DATE(DAY)                                               
CFHCCVX    CALL TIME(WHEN)                                              
       CALL DATE(DAY)                                                   
       CALL TIME(ITIME)                                                 
            ITIME = ITIME/1000                                          
            IHOUR = ITIME/3600                                          
            IMINT = (ITIME-IHOUR*3600)/60                               
            ISCND =ITIME-IHOUR*3600-IMINT*60                            
CFHCCYB    DAY = DATE()                                                 
CFHCCYB    WHEN = TIME()                                                
C                                                                       
        CALL OPENWT(IOUT02,'FORMATTED',OUTPUT,IOUT06)                   
        REWIND IOUT02                                                   
        WRITE(IOUT06,779)OUTPUT                                         
 779    FORMAT(5X,' OUTPUT WRITTEN TO : ',A80,/)                        
C                                                                       
CCVX    WRITE(IOUT02,766)VERSN,DAY,WHEN                                 
CCVX    WRITE(IOUT06,766)VERSN,DAY,WHEN                                 
CCYB    WRITE(IOUT02,766)VERSN,DAY,WHEN                                 
CCYB    WRITE(IOUT06,766)VERSN,DAY,WHEN                                 
CVAX    WRITE(IOUT02,766)VERSN,DAY,WHEN                                 
CVAX    WRITE(IOUT06,766)VERSN,DAY,WHEN                                 
        WRITE(IOUT02,769)VERSN,DAY,IHOUR,IMINT,ISCND                    
        WRITE(IOUT06,769)VERSN,DAY,IHOUR,IMINT,ISCND                    
 766    FORMAT(/,5X,'INSPIDAS V 0.0  ',A8,' VERSION :   ',A10,5X,A10,/) 
 769    FORMAT(/,5X,'INSPIDAS V 0.0  ',A8,' VERSION :   ',A8,7X,        
     .         I2,':',I2,':',I2/)                                       
        CALL GTRMST (COMLY2 ,COMLEN,'TITL',4,'E',1,TITLE,DEL,LENTIT)    
        CALL TRIMST (TITLE,LENTIT)                                      
        WRITE(IOUT02,*)                                                 
        WRITE(IOUT02,*)'      TITLE : ',TITLE(1:LENTIT)                 
        WRITE(IOUT02,*)                                                 
        WRITE(IOUT02,*)'     INPUT: '                                   
        WRITE(IOUT02,*)                                                 
C **  ECHO UNIT 1 DATA                                                  
        IF (ECH) THEN                                                   
           CALL ECHOOU (NLINE)                                          
           ECH=.FALSE.                                                  
        ENDIF                                                           
C                                                                       
        GO TO 2                                                         
      ENDIF                                                             
C                                                                       
C  TASK PREIN....                                                       
C                                                                       
      IF(TASK.EQ.'PREI') THEN                                           
        WRITE(IOUT02,10)                                                
        WRITE(IOUT06,10)                                                
 10     FORMAT(/,5X,' NEXT TASK :  PREIN ',/)                           
        CALL PREIN                                                      
        GO TO 2                                                         
      ENDIF                                                             
C                                                                       
C  TASK PRECEP....                                                      
C                                                                       
      IF(TASK.EQ.'PREC') THEN                                           
        WRITE(IOUT02,20)                                                
        WRITE(IOUT06,20)                                                
 20     FORMAT(/,5X,' NEXT TASK :  PRECEP ',/)                          
        CALL PRECEP                                                     
        GO TO 2                                                         
      ENDIF                                                             
C                                                                       
C  TASK MINIMIZATION....                                                
C                                                                       
      IF(TASK.EQ.'MINI')THEN                                            
        WRITE(IOUT02,30)                                                
        WRITE(IOUT06,30)                                                
 30     FORMAT(/,5X,' NEXT TASK :  MINIMIZATION ',/)                    
        CALL MINIM                                                      
        GO TO 2                                                         
      ENDIF                                                             
C                                                                       
C  TASK NOMAL MODE ANALYSIS....                                         
C                                                                       
      IF(TASK.EQ.'NMA ') THEN                                           
        WRITE(IOUT02,40)                                                
        WRITE(IOUT06,40)                                                
 40     FORMAT(/,5X,' NEXT TASK :  NORMAL MODE ANALYSIS',/)             
        CALL NMA                                                        
        GO TO 2                                                         
      ENDIF                                                             
C                                                                       
C  TASK END....                                                         
C                                                                       
      IF(TASK.EQ.'END ')GO TO 5                                         
C                                                                       
      WRITE(IOUT02,*)' WARNING TASK NOT AVAILABLE ',TASK                
      WRITE(IOUT06,*)' WARNING TASK NOT AVAILABLE ',TASK                
      GO TO 2                                                           
C                                                                       
  5   CONTINUE                                                          
      CALL TIMIT(IOUT02,1)                                              
      STOP' INSPIDAS CONTROLLER: ALL TASKS COMPLETED'                   
      END                                                               
        INTEGER FUNCTION IREQWR (ISIZE,TYPE)                            
        IMPLICIT REAL*8 (A-H,O-Z)                                       
CMSP  INCLUDE (MAXSIZE)                                                 
      INCLUDE '/labo/qclib/inspidas/common/maxsize'
CMSP  INCLUDE (UNITNUMS)                                                
      INCLUDE '/labo/qclib/inspidas/common/unitnums'
CMSP  INCLUDE (WORKMANA)                                                
      INCLUDE '/labo/qclib/inspidas/common/workmana'
CMSP  INCLUDE (WORK)                                                    
      INCLUDE '/labo/qclib/inspidas/common/work'
        CHARACTER*4 TYPE                                                
        CHARACTER*4 BLANK                                               
        DATA ZERO,IZERO/0.0D+00,0/                                      
C                                                                       
C  IREQWRK - RETURNS THE LAST AVAILABLE SPACE IN ONE OF THE WORK COMMON 
C            BLOCKS                                                     
C  TYPE - CHARACTER STRING - TYPE OF COMMON BLOCK - 'REAL','INTE','CHAR'
C           'LOGI'                                                      
C  ISIZE - SIZE OF ARRAY REQUESTED                                      
C                                                                       
C  ROUTINE CHECKS TO SEE IF ARRAY BOUNDS HAVE BEEN EXCEEDED             
C                                                                       
C  THE ELEMENTS IN THE WORK ARRAY WILL THEN BE BOUNDED BY IREQWRK AND   
C    IREQWRK + ISIZE                                                    
C                                                                       
        BLANK = CHAR(0)                                                 
        IF (TYPE .EQ. 'REAL') THEN                                      
           ILSTUS  = ILSTRE                                             
           ILSTRE   = ILSTRE   + ISIZE                                  
           IMAXWR  = MWORK + 1                                          
           IF (ILSTRE   .GT. IMAXWR ) THEN                              
             WRITE(6,*) ' INSUFFICIENT REAL WORK ARRAY SIZE'            
             WRITE(6,*) ' REDIMENSION PROGRAM'                          
         WRITE(6,*) ' REQUESTED SIZE = ',ILSTRE  ,' MWORK SIZE = ',MWORK
             CALL DIE                                                   
           ENDIF                                                        
           IREQWR  = ILSTUS                                             
           DO 10 I=ILSTUS ,ILSTRE                                       
10         WRK(I) = ZERO                                                
           ILST = ILSTRE                                                
        ELSE IF (TYPE .EQ. 'INTE') THEN                                 
           ILSTUS  = ILSTIN                                             
           ILSTIN  = ILSTIN  + ISIZE                                    
           IIMAX = MIWORK + 1                                           
           IF (ILSTIN  .GT. IIMAX) THEN                                 
             WRITE(6,*) ' INSUFFICIENT INTEGER WORK ARRAY SIZE'         
             WRITE(6,*) ' REDIMENSION PROGRAM'                          
        WRITE(6,*)' REQUESTED SIZE = ',ILSTIN ,' MIWORK SIZE = ',MIWORK 
             CALL DIE                                                   
           ENDIF                                                        
           IREQWR  = ILSTUS                                             
           DO 20 I=ILSTUS ,ILSTIN                                       
20         IWRK(I) = IZERO                                              
           ILST = ILSTIN                                                
        ELSE IF (TYPE .EQ. 'CHAR') THEN                                 
           ILSTUS  = ILSTCH                                             
           ILSTCH   = ILSTCH   + ISIZE                                  
           ICHMAX = MCHWOR  + 1                                         
           IF (ILSTCH   .GT. ICHMAX) THEN                               
             WRITE(6,*) ' INSUFFICIENT CHARACTER WORK ARRAY SIZE'       
             WRITE(6,*) ' REDIMENSION PROGRAM'                          
         WRITE(6,*)' REQUESTED SIZE = ',ILSTCH  ,                       
     *       ' MCHWORK SIZE = ',MCHWOR                                  
             CALL DIE                                                   
           ENDIF                                                        
           IREQWR  = ILSTUS                                             
           DO 30 I=ILSTUS ,ILSTCH                                       
30         CWRK(I) = BLANK                                              
           ILST = ILSTCH                                                
        ELSE                                                            
           WRITE(6,*) ' PROGRAMMING ERROR: UNKNOWN WORK ARRAY TYPE '    
           CALL DIE                                                     
        ENDIF                                                           
        IF (PRNTME ) THEN                                               
          WRITE(IOUT02,*)' %I - NEW WORK MEMORY USED: '                 
          WRITE(IOUT02,*)'   WORK ARRAY: ',TYPE                         
          WRITE(IOUT02,*)'   STARTING LOCATION : ',ILSTUS               
          WRITE(IOUT02,*)'   SIZE: ',ISIZE,' LAST USED ELEMENT: ',ILST  
        ENDIF                                                           
        RETURN                                                          
        END                                                             
        INTEGER FUNCTION IRELWR (ISIZE,IBEG,TYPE)                       
        IMPLICIT REAL*8 (A-H,O-Z)                                       
CMSP  INCLUDE (MAXSIZE)                                                 
      INCLUDE '/labo/qclib/inspidas/common/maxsize'
CMSP  INCLUDE (UNITNUMS)                                                
      INCLUDE '/labo/qclib/inspidas/common/unitnums'
CMSP  INCLUDE (WORKMANA)                                                
      INCLUDE '/labo/qclib/inspidas/common/workmana'
CMSP  INCLUDE (WORK)                                                    
      INCLUDE '/labo/qclib/inspidas/common/work'
        CHARACTER*4 TYPE                                                
C                                                                       
C ROUTINE WHICH RELEASES MEMORY FROM WORK ARRAYS                        
C                                                                       
C ISIZE - AMOUNT OF MEMORY TO BE RELEASED                               
C IBEG - ELEMENT IN WORK ARRAY WHERE SECTION OF MEMORY BEGINS           
C TYPE - CHARACTER STRING WHICH INDICATES WHICH INDICATES THE           
C         WHICH WORK ARRAY SHOULD HAVE THE MEMORY RELEASED              
C         'REAL','INTE','CHAR' ARE THE ACCEPTABLE VALUES                
C                                                                       
        IF (TYPE .EQ. 'REAL') THEN                                      
           ITMP = ILSTRE                                                
           INEW = ILSTRE   - ISIZE                                      
          IF (INEW .LT. 1) THEN                                         
            WRITE(6,*) ' PROGRAMMING ERROR: CANNOT RELEASE THIS MEMORY '
            WRITE(6,*) ' READ WORK ARRAY'                               
            CALL DIE                                                    
          ENDIF                                                         
          DO 10 I=IBEG,INEW                                             
            WRK(I) = WRK(I+ISIZE)                                       
10        CONTINUE                                                      
           ILSTRE   = INEW                                              
           IRELWR  = ILSTRE                                             
           ILST = ILSTRE                                                
        ELSE IF (TYPE .EQ. 'INTE') THEN                                 
           ITMP = ILSTIN                                                
           INEW = ILSTIN  - ISIZE                                       
          IF (INEW .LT. 1) THEN                                         
            WRITE(6,*) ' PROGRAMMING ERROR: CANNOT RELEASE THIS MEMORY '
            WRITE(6,*) ' INTEGER WORK ARRAY'                            
            CALL DIE                                                    
          ENDIF                                                         
          DO 20 I=IBEG,INEW                                             
            IWRK(I) = IWRK(I+ISIZE)                                     
20        CONTINUE                                                      
           ILSTIN  = INEW                                               
           IRELWR  = ILSTIN                                             
           ILST = ILSTIN                                                
        ELSE IF (TYPE .EQ. 'CHAR') THEN                                 
           ITMP = ILSTCH                                                
           INEW = ILSTCH   - ISIZE                                      
          IF (INEW .LT. 1) THEN                                         
            WRITE(6,*) ' PROGRAMMING ERROR: CANNOT RELEASE THIS MEMORY '
            WRITE(6,*) ' CHARACTER WORK ARRAY'                          
            CALL DIE                                                    
          ENDIF                                                         
          DO 30 I=IBEG,INEW                                             
            CWRK(I) = CWRK(I+ISIZE)                                     
30        CONTINUE                                                      
           ILSTCH   = INEW                                              
           IRELWR  = ILSTCH                                             
           ILST = ILSTCH                                                
        ELSE                                                            
           WRITE(6,*) ' PROGRAMMING ERROR: UNKNOWN WORK ARRAY TYPE '    
           CALL DIE                                                     
        ENDIF                                                           
        IF (PRNTME ) THEN                                               
          WRITE(IOUT02,*)' %I - WORK MEMORY RELEASED: '                 
          WRITE(IOUT02,*)'   WORK ARRAY: ',TYPE                         
          WRITE(IOUT02,*)'   NEW LAST LOCATION : ',ILST                 
          WRITE(IOUT02,*)'   SIZE: ',ISIZE                              
        ENDIF                                                           
        RETURN                                                          
        END                                                             
./ ADD NAME=MATHLIB
./ NUMBER NEW1=10,INCR=10
C             NICER               LEVEL=1        DATE=84.12.08          
      SUBROUTINE NSHOUS(A,NMAX,NN,NNE,NNV,EPS,IORD,E,V,ILL,             
     *           W1,W2,W3,W4,W5,W6,W7)                                  
CI--------------------------------------------------------------------I 
CI     SUBPROGRAM FOR STANDARD EIGEN-PROBLEM , A*V=V*E ,   BY         I 
CI (HOUSEHOLDER)-(BISECTION & NO-ROOT-QR)-(INVERSE-ITERATION) METHOD  I 
CI-----------------------------------------------(VERSION-2,LEVEL-1)--I 
      DIMENSION A(NMAX,NN),E(NN),V(NMAX,NNV)      ,LS(20),KS(20)        
      DIMENSION W1(NN),W2(NN),W3(NN),W4(NN),W5(NN),W6(NN),W7(1)         
C     W7(I) IS NEVER USED IN VERSION-2.                                 
      DATA ZERO,HALF,FIBONA,ONE /0.E 0,0.5E 0,0.6180339E 0,1.E 0/       
      DATA EXPM30,EXPM20,EXPM6  /1.E-30,1.E-20,1.E-6/                   
      DATA EXPP6,EXPP12,EXPP18  /1.E 6,1.E12,1.E18/                     
C     IAP=0 FOR SCALAR MACHINE   &   IAP=1 FOR VECTOR MACHINE           
      DATA IAP /0/                                                      
      N=NN                                                              
      NE=NNE                                                            
      NV=NNV                                                            
      ILL=300                                                           
      IF(NMAX.LT.2.OR.N.GT.NMAX.OR.N.LT.2.OR.NE.LT.1.OR.NV.LT.0) RETURN 
      IF(NE.GT.N.OR.NV.GT.NE.OR.EPS.LE.ZERO.OR.EPS.GT.ONE)       RETURN 
      NM1=N-1                                                           
      NM2=N-2                                                           
      NE8=NE*8                                                          
      IF(N.EQ.2)                  GO TO 130                             
C  TRI-DIAGONALIZATION                      ( BY A.HOUSEHOLDER )        
      DO 120 K=1,NM2                                                    
      KP1=K+1                                                           
      E(K)=A(K,K)                                                       
      SUM=ZERO                                                          
      DO 10 J=KP1,N                                                     
      E(J)=A(K,J)                                                       
   10 SUM=E(J)*E(J)+SUM                                                 
      S=SIGN(SQRT(SUM),E(KP1))                                          
      W1(K)=-S                                                          
      E(KP1)=E(KP1)+S                                                   
      A(K,KP1)=E(KP1)                                                   
      H=E(KP1)*S                                                        
      IF(H.EQ.ZERO)     GO TO 110                                       
      SUMM=ZERO                                                         
      DO 40 I=KP1,NM1                                                   
      SUM=ZERO                                                          
      DO 20 J=KP1,I                                                     
   20 SUM=A(J,I)*E(J)+SUM                                               
      IP1=I+1                                                           
      DO 30 J=IP1,N                                                     
   30 SUM=A(I,J)*E(J)+SUM                                               
      W1(I)=SUM/H                                                       
      SUMM=W1(I)*E(I)+SUMM                                              
   40 CONTINUE                                                          
      SUM=ZERO                                                          
      DO 50 J=KP1,N                                                     
   50 SUM=A(J,N)*E(J)+SUM                                               
      W1(N)=SUM/H                                                       
      SUMM=W1(N)*E(N)+SUMM                                              
      U=SUMM*HALF/H                                                     
      IF(IAP.EQ.1)  GO TO 70                                            
      DO 60 J=KP1,N                                                     
      W1(J)=E(J)*U-W1(J)                                                
      DO 60 I=KP1,J                                                     
   60 A(I,J)=W1(I)*E(J)+W1(J)*E(I)+A(I,J)                               
      GO TO 110                                                         
   70 CONTINUE                                                          
      DO 100 J=KP1,N                                                    
      W1(J)=E(J)*U-W1(J)                                                
      EJ=E(J)                                                           
      DO 80 I=KP1,J                                                     
   80 A(I,J)=W1(I)*EJ+A(I,J)                                            
      W1J=W1(J)                                                         
      DO 90 I=KP1,J                                                     
   90 A(I,J)=E(I)*W1J+A(I,J)                                            
  100 CONTINUE                                                          
  110 A(K,K)=H                                                          
  120 CONTINUE                                                          
  130 E(NM1)=A(NM1,NM1)                                                 
      E(N)=A(N,N)                                                       
      W1(NM1)=A(NM1,N)                                                  
      W1(N)=ZERO                                                        
      GERSCH=ABS(E(1))+ABS(W1(1))                                       
      DO 140 I=1,NM1                                                    
      SUM=ABS(E(I+1))+ABS(W1(I))+ABS(W1(I+1))                           
      IF(SUM.GT.GERSCH) GERSCH=SUM                                      
      IF(NV.NE.0)  V(I,NV)=E(I)                                         
  140 CONTINUE                                                          
      IF(NV.NE.0)  V(N,NV)=E(N)                                         
      DEL=EPS*GERSCH                                                    
      IF(DEL.EQ.ZERO)             RETURN                                
      IF(NE8.LT.N)                GO TO 360                             
C  NO-ROOT-QR METHOD FOR EIGENVALUES (BY PAL-WALKER-KAHAN & M.SHIMASAKI)
      DD=DEL*DEL                                                        
      DO 150 I=1,NM1                                                    
  150 W3(I+1)=W1(I)*W1(I)                                               
      K=N                                                               
  160 KM1=K-1                                                           
      IF(W3(K).LT.DD) GO TO 190                                         
      EPE=(E(KM1)+E(K))*HALF                                            
      EME=E(K)-EPE                                                      
      QRSHIF=EPE-SIGN(SQRT(W3(K)+EME*EME),EPE)                          
      CC=ONE                                                            
      SS=ZERO                                                           
      G=E(1)-QRSHIF                                                     
      PP=G*G                                                            
      DO 180 I=1,KM1                                                    
      BB=W3(I+1)                                                        
      TT=PP+BB                                                          
      W3(I)=SS*TT                                                       
      OLDCC=CC                                                          
      SS=BB/TT                                                          
      CC=PP/TT                                                          
      OLDG=G                                                            
      IF(CC.EQ.ZERO) GO TO 170                                          
      G=(E(I+1)-QRSHIF)*CC-OLDG*SS                                      
      E(I)=E(I+1)+OLDG-G                                                
      PP=(G*G)/CC                                                       
      GO TO 180                                                         
  170 G=-OLDG                                                           
      E(I)=E(I+1)+OLDG+OLDG                                             
      PP=BB*OLDCC                                                       
  180 CONTINUE                                                          
      E(K)=G+QRSHIF                                                     
      W3(K)=SS*PP                                                       
      GO TO 160                                                         
  190 K=K-1                                                             
      IF(K.GT.1) GO TO 160                                              
C  QUICK SORT OF EIGENVALUES                ( BY C.HOARE )              
      ISP=0                                                             
      L=1                                                               
      K=N                                                               
  200 IF(K-L.LT.16)          GO TO 290                                  
      M=(K+L)/2                                                         
      MAX=K                                                             
      IF(E(M).GT.E(K))   MAX=M                                          
      IF(E(L).GT.E(MAX)) MAX=L                                          
      IF(MAX.EQ.K)           GO TO 210                                  
      BK=E(MAX)                                                         
      E(MAX)=E(K)                                                       
      E(K)=BK                                                           
  210 IF(E(L).GE.E(M))       GO TO 220                                  
      BK=E(L)                                                           
      E(L)=E(M)                                                         
      E(M)=BK                                                           
  220 BK=E(L)                                                           
      I=L                                                               
      J=K                                                               
      GO TO 250                                                         
  230 E(J)=E(I)                                                         
      E(I)=BK                                                           
  240 J=J-1                                                             
  250 IF(BK.LT.E(J))         GO TO 240                                  
      IF(J.LE.I)             GO TO 270                                  
      E(I)=E(J)                                                         
      E(J)=BK                                                           
  260 I=I+1                                                             
      IF(E(I).LT.BK)         GO TO 260                                  
      IF(J.GT.I)             GO TO 230                                  
  270 ISP=ISP+1                                                         
      IF(K-I.GE.I-L)         GO TO 280                                  
      LS(ISP)=L                                                         
      KS(ISP)=I-1                                                       
      L=I+1                                                             
      GO TO 200                                                         
  280 LS(ISP)=I+1                                                       
      KS(ISP)=K                                                         
      K=I-1                                                             
      GO TO 200                                                         
  290 IF(K-L.LT.1)           GO TO 330                                  
      J=K                                                               
  300 BK=E(J-1)                                                         
      I=J                                                               
  310 IF(E(I).GE.BK)         GO TO 320                                  
      E(I-1)=E(I)                                                       
      I=I+1                                                             
      IF(I.LE.K)             GO TO 310                                  
  320 E(I-1)=BK                                                         
      J=J-1                                                             
      IF(J.GT.L)             GO TO 300                                  
  330 IF(ISP.EQ.0)           GO TO 340                                  
      L=LS(ISP)                                                         
      K=KS(ISP)                                                         
      ISP=ISP-1                                                         
      GO TO 200                                                         
  340 IF(IORD.LT.0)               GO TO 500                             
      NP1=N+1                                                           
      NE2=N/2                                                           
      DO 350 K=1,NE2                                                    
      TEMP=E(K)                                                         
      E(K)=E(NP1-K)                                                     
  350 E(NP1-K)=TEMP                                                     
      GO TO 500                                                         
C  BISECTION METHOD FOR EIGENVALUES         ( BY J.GIVENS)              
  360 CONTINUE                                                          
      DO 370 I=1,NE                                                     
      W2(I)=E(I)                                                        
      E(I)=-GERSCH                                                      
      W4(I)=GERSCH                                                      
  370 W3(I)=-W1(I)*W1(I)                                                
      NEP1=NE+1                                                         
      DO 380 I=NEP1,N                                                   
      W2(I)=E(I)                                                        
  380 W3(I)=-W1(I)*W1(I)                                                
      IF(IORD.GT.0)               GO TO 400                             
      DO 390 I=1,N                                                      
  390 W2(I)=-W2(I)                                                      
  400 CONTINUE                                                          
      DO 490 K=1,NE                                                     
  410 X=(E(K)+W4(K))*HALF                                               
      IF(ABS(W4(K)-X).LE.DEL)     GO TO 490                             
      NAG=0                                                             
      I=1                                                               
  420 S=W2(I)-X                                                         
  430 IF(S.GE.ZERO) NAG=NAG+1                                           
      IF(ABS(S).LT.EXPM30)        GO TO 440                             
      I=I+1                                                             
      IF(I.GT.N)                  GO TO 450                             
      S=W3(I-1)/S+W2(I)-X                                               
      GO TO 430                                                         
  440 I=I+2                                                             
      IF(I.LE.N)                  GO TO 420                             
  450 IF(NAG.GE.K)                GO TO 470                             
      DO 460 J=K,NE                                                     
      IF(X.LT.W4(J)) W4(J)=X                                            
  460 CONTINUE                                                          
      GO TO 410                                                         
  470 MG=NAG                                                            
      IF(NE.LT.MG) MG=NE                                                
      DO 480 J=K,MG                                                     
  480 E(J)=X                                                            
      GO TO 410                                                         
  490 E(K)=X                                                            
  500 IF(NV.EQ.0)                 GO TO 810                             
      IF(NE8.GE.N .OR. IORD.GT.0) GO TO 520                             
      DO 510 I=1,N                                                      
      W1(I)=-W1(I)                                                      
  510 V(I,NV)=-V(I,NV)                                                  
C   INVERSE ITERATION FOR EIGENVECTORS      ( BY H.WIELANDT )           
  520 FN=FLOAT(N)                                                       
      SN=SQRT(FN)                                                       
      SEPS=SQRT(EPS)                                                    
      EPS1=(GERSCH*EXPM6)/(FN*SEPS)                                     
      EPS2=EXPP12*FN/SEPS                                               
      TM6N=EXPM6*SN                                                     
      TP6N=EXPP6*SN                                                     
      TP18N=EXPP18*SN                                                   
      RN=ZERO                                                           
      RA=EPS*FIBONA                                                     
      DO 530 J=1,N                                                      
      W3(J)=ZERO                                                        
      W4(J)=W1(J)                                                       
      W5(J)=V(J,NV)-E(1)                                                
      RN=RN+RA                                                          
      IF(RN.GE.EPS) RN=RN-EPS                                           
  530 W6(J)=RN                                                          
      IG=1                                                              
      DO 750 I=1,NV                                                     
      IM1=I-1                                                           
      IF(I.EQ.1)                       GO TO 550                        
      DO 540 J=1,NM1                                                    
      W3(J)=ZERO                                                        
      W4(J)=W1(J)                                                       
      W5(J)=V(J,NV)-E(I)                                                
  540 W6(J)=V(J+1,IM1)                                                  
      W3(N)=ZERO                                                        
      W4(N)=W1(N)                                                       
      W5(N)=V(N,NV)-E(I)                                                
      W6(N)=V(1,IM1)                                                    
  550 CONTINUE                                                          
      DO 580 J=1,NM1                                                    
      IF(ABS(W5(J)).GE.ABS(W1(J)))     GO TO 560                        
      W2(J)=-W5(J)/W1(J)                                                
      W5(J)=W1(J)                                                       
      T=W5(J+1)                                                         
      W5(J+1)=W4(J)                                                     
      W4(J)=T                                                           
      W3(J)=W4(J+1)                                                     
      IF(W3(J).EQ.ZERO) W3(J)=DEL                                       
      W4(J+1)=ZERO                                                      
      GO TO 570                                                         
  560 IF(W5(J).EQ.ZERO) W5(J)=DEL                                       
      W2(J)=-W1(J)/W5(J)                                                
  570 W4(J+1)=W3(J)*W2(J)+W4(J+1)                                       
  580 W5(J+1)=W4(J)*W2(J)+W5(J+1)                                       
      IF(W5(N).EQ.ZERO) W5(N)=DEL                                       
      ITELIM=2                                                          
      IF(EPS.LT.EXPM20)                          ITELIM=3               
      IF(I.GT.1.AND.ABS(E(I)-E(IM1)).LT.EPS1)    ITELIM=3               
      DO 640 IT=1,ITELIM                                                
      IF(IT.EQ.1)       GO TO 600                                       
      DO 590 J=1,NM1                                                    
      IF(W3(J).EQ.ZERO) GO TO 590                                       
      T=W6(J)                                                           
      W6(J)=W6(J+1)                                                     
      W6(J+1)=T                                                         
  590 W6(J+1)=W6(J)*W2(J)+W6(J+1)                                       
  600 W6(N)=W6(N)/W5(N)                                                 
      W6(NM1)=(W6(NM1)-W6(N)*W4(NM1))/W5(NM1)                           
      VN=ABS(W6(N))+ABS(W6(NM1))                                        
      IF(N.EQ.2)                       GO TO 620                        
      DO 610 KK=2,NM1                                                   
      K=N-KK                                                            
      W6(K)=(W6(K)-W6(K+1)*W4(K)-W6(K+2)*W3(K))/W5(K)                   
  610 VN=ABS(W6(K))+VN                                                  
  620 IF(VN.GT.TM6N.AND.VN.LT.TP6N)    GO TO 640                        
      IF(IT.EQ.ITELIM)                 GO TO 650                        
      IF(VN.GT.EPS2)                   GO TO 650                        
      DUMP=FN/VN                                                        
      DO 630 J=1,N                                                      
  630 W6(J)=W6(J)*DUMP                                                  
  640 CONTINUE                                                          
C   RE-ORTHOGONALIZATION                    ( BY GRAM & SCHMIDT )       
  650 CONTINUE                                                          
      DO 660 J=IG,I                                                     
      IF(ABS(E(J)-E(I)).LT.EPS1)       GO TO 670                        
  660 CONTINUE                                                          
      J=I                                                               
  670 IG=J                                                              
      IF(IG.EQ.I.AND.VN.LT.TP18N)      GO TO 720                        
      DUMP=FN/VN                                                        
      DO 680 J=1,N                                                      
  680 W6(J)=W6(J)*DUMP                                                  
      IF(IG.EQ.I)                      GO TO 720                        
      DO 710 K=IG,IM1                                                   
      SUM=ZERO                                                          
      DO 690 J=1,N                                                      
  690 SUM=V(J,K)*W6(J)+SUM                                              
      S=-SUM                                                            
      DO 700 J=1,N                                                      
  700 W6(J)=V(J,K)*S+W6(J)                                              
  710 CONTINUE                                                          
C   NORMALIZATION                                                       
  720 SUM=ZERO                                                          
      DO 730 J=1,N                                                      
  730 SUM=W6(J)*W6(J)+SUM                                               
      SINV=ONE/SQRT(SUM)                                                
      DO 740 J=1,N                                                      
  740 V(J,I)=W6(J)*SINV                                                 
  750 CONTINUE                                                          
C   BACK-TRANSFORMATION OF EIGEN-VECTORS                                
      IF(N.EQ.2)                       GO TO 810                        
      DO 800 J=1,NM2                                                    
      K=N-J-1                                                           
      IF(A(K,K).EQ.ZERO)               GO TO 800                        
      DO 760 KK=K,N                                                     
  760 W1(KK)=A(K,KK)                                                    
      KP1=K+1                                                           
      DO 790 I=1,NV                                                     
      SUM=ZERO                                                          
      DO 770 KK=KP1,N                                                   
  770 SUM=V(KK,I)*W1(KK)+SUM                                            
      S=-SUM/W1(K)                                                      
      DO 780 KK=KP1,N                                                   
  780 V(KK,I)=W1(KK)*S+V(KK,I)                                          
  790 CONTINUE                                                          
  800 CONTINUE                                                          
  810 ILL=0                                                             
      IF(NE8.GE.N .OR. IORD.GT.0) RETURN                                
      DO 820 I=1,NE                                                     
  820 E(I)=-E(I)                                                        
      RETURN                                                            
      END                                                               
      SUBROUTINE NSJENS(A,NMAX,NN,NNE,NNV,EPS,ITER,ESHIFT,              
     *                  E,V,ILL,W1,W2,U)                                
CI--------------------------------------------------------------------I 
CI       SUBPROGRAM FOR STANDARD EIGEN-PROBLEM , A*V=V*E , BY         I 
CI      JENNINGS METHOD                                               I 
CI-----------------------------------------------(VERSION-2,LEVEL-1)--I 
      DIMENSION  A(NMAX,NN),E(NNE),V(NMAX,NNV)                          
      DIMENSION  W1(NN),W2(NN),U(NMAX,NNV)                              
      DATA ZERO,HALF,V0985,ONE /0.E 0,0.5E 0,0.985E 0,1.E 0/            
      DATA TWO,TEN,HUND        /2.E 0,1.E 1,1.E 2/                      
      DATA INDEX/0/                                                     
      IF(INDEX.EQ.0)  WRITE(6,1000)                                     
 1000 FORMAT(1H //5X,70HPACKAGE-NAME : NICER(NAGOYA ITERATIVE COMPUTATIO
     *N EIGENVALUE ROUTINES)     /20X,                                  
     * 50H(VERSION-2,LEVEL-1) MODIFIED ON JAN. 1983         / 5X,       
     * 90HREFERENCE    : Y.BEPPU AND I.NINOMIYA;COMPUTER PHYSICS COMMUNI
     *CATIONS, V.23,Y.1981,P.123       /)                               
      N=NN                                                              
      NE=NNE                                                            
      NV=NNV                                                            
      ILL=300                                                           
      IF(NMAX.LT.2.OR.N.GT.NMAX.OR.N.LT.2.OR.NE.LT.1.OR.NV.LT.1) RETURN 
      IF(NE.GT.N.OR.NV.LT.NE.OR.EPS.LE.ZERO.OR.EPS.GT.ONE)       RETURN 
      NM1=N-1                                                           
      NEP1=NE+1                                                         
      NVM1=NV-1                                                         
      IF(INDEX.NE.0)                   GO TO 10                         
      SEPS=SQRT(EPS*HUND)                                               
      SEPS10=SEPS*TEN                                                   
      SSEPS=SQRT(SEPS10)                                                
      INDEX=1                                                           
   10 SEPS2=SEPS*( ABS(A(1,1)) + ABS(A(N,N)) )                          
      ITELIM=ITER                                                       
      ITERE=0                                                           
      IF(ABS(ESHIFT).LT.SEPS2)         GO TO 40                         
      DO 20 I=1,NE                                                      
      A(I,I)=A(I,I)-ESHIFT                                              
   20 E(I)=E(I)-ESHIFT                                                  
      DO 30 I=NEP1,N                                                    
   30 A(I,I)=A(I,I)-ESHIFT                                              
CC   TRANSFORMATION OF LARGE SQUARE-MATRIX-A TO SMALL SQUARE-MATRIX-V   
CC  BY MATRIX-MULTIPLICATION ; FIRST U=A*V , THEN V=TRANS(V)*U .        
   40 CONTINUE                                                          
      DO 80 I=1,NM1                                                     
      DO 50 K=1,I                                                       
   50 W1(K)=A(K,I)                                                      
      IP1=I+1                                                           
      DO 60 K=IP1,N                                                     
   60 W1(K)=A(I,K)                                                      
      DO 80 J=1,NV                                                      
      SUM=ZERO                                                          
      DO 70 K=1,N                                                       
   70 SUM=V(K,J)*W1(K)+SUM                                              
      U(I,J)=SUM                                                        
   80 CONTINUE                                                          
      DO 100 J=1,NV                                                     
      SUM=ZERO                                                          
      DO 90 K=1,N                                                       
   90 SUM=A(K,N)*V(K,J)+SUM                                             
      U(N,J)=SUM                                                        
  100 CONTINUE                                                          
      DO 130 J=1,NV                                                     
      DO 110 K=1,N                                                      
  110 W1(K)=V(K,J)                                                      
      DO 130 I=J,NV                                                     
      SUM=ZERO                                                          
      DO 120 K=1,N                                                      
  120 SUM=U(K,I)*W1(K)+SUM                                              
      V(I,J)=SUM                                                        
  130 CONTINUE                                                          
CC  SOLVING EIGEN-PROBLEM IN SUB-SPACE                                  
      ERROR=ABS(E(1)-V(1,1))                                            
      E(1)=V(1,1)                                                       
      IF(NV.EQ.1)                      GO TO 630                        
      DO 140 K=2,NV                                                     
      ERROR=ABS(E(K)-V(K,K))+ERROR                                      
  140 E(K)=V(K,K)                                                       
      E1ENE=ABS(E(1)) + ABS(E(NE))                                      
      ERROR=ERROR/( E1ENE*FLOAT(NV) )                                   
C                                                                       
      IF(ERROR.GT.SSEPS)               GO TO 260                        
C          BY APPROXIMATE FORMULA                                       
      DEGENE=SEPS*E1ENE                                                 
      K=1                                                               
  150 CONTINUE                                                          
      ND=1                                                              
  160 KND=K+ND                                                          
      IF(KND.GT.NV)                    GO TO 170                        
      IF(ABS(E(KND)-E(K)).GT.DEGENE)   GO TO 170                        
      ND=ND+1                                                           
      GO TO 160                                                         
  170 IF(ND.EQ.1)                      GO TO 190                        
      DD=FLOAT(ND)*SEPS10                                               
      ND2=ND/2                                                          
      LI=K                                                              
      LF=K+ND2-1                                                        
      LM=ND-1                                                           
      DW=FLOAT(LM)                                                      
      DO 180 L=LI,LF                                                    
      DDDW=DD*DW                                                        
      V(L,L)=   DDDW*V(L,L)                                             
      LL=LI+LM                                                          
      V(LL,LL)=-DDDW*V(LL,LL)                                           
      DW=DW-TWO                                                         
      LM=LM-1                                                           
  180 CONTINUE                                                          
  190 K=K+ND                                                            
      IF(K.LT.NV)                      GO TO 150                        
C                                                                       
      DO 200 I=1,NVM1                                                   
      IP1=I+1                                                           
      DO 200 J=IP1,NV                                                   
      V(I,J)=V(J,I) / ( V(J,J)-V(I,I) )                                 
  200 V(J,I)=-V(I,J)                                                    
C                                                                       
      SUM=ZERO                                                          
      DO 210 J=2,NV                                                     
  210 SUM=V(J,1)*V(J,1)+SUM                                             
      IF(SUM.GT.ONE)    GO TO 230                                       
      S1=SQRT(ONE-SUM)                                                  
      SUM=ZERO                                                          
      DO 220 J=1,NVM1                                                   
  220 SUM=V(J,NV)*V(J,NV)+SUM                                           
      IF(SUM.GT.ONE)    GO TO 230                                       
      SNV=SQRT(ONE-SUM)                                                 
      VDIAGO=HALF*(S1+SNV)                                              
      ILLIND=0                                                          
      GO TO 240                                                         
  230 VDIAGO=V0985                                                      
      ILLIND=200                                                        
  240 CONTINUE                                                          
      DO 250 K=1,NV                                                     
  250 V(K,K)=VDIAGO                                                     
      GO TO 510                                                         
C          BY HOUSEHOLDER-QR FORMULA                                    
  260 NVM2=NV-2                                                         
      DO 270 J=2,NV                                                     
      J1=J-1                                                            
      DO 270 I=1,J1                                                     
  270 V(I,J)=V(J,I)                                                     
      IF(NV.LE.2) GO TO 360                                             
      DO 350 K=1,NVM2                                                   
      K1=K+1                                                            
      E(K)=V(K,K)                                                       
      SUM=ZERO                                                          
      DO 280 J=K1,NV                                                    
      E(J)=V(K,J)                                                       
  280 SUM=E(J)*E(J)+SUM                                                 
      SUM=SIGN(SQRT(SUM),E(K1))                                         
      W1(K)=-SUM                                                        
      E(K1)=E(K1)+SUM                                                   
      V(K,K1)=E(K1)                                                     
      C=E(K1)*SUM                                                       
      IF(C.LE.ZERO) GO TO 340                                           
      SUMM=ZERO                                                         
      DO 320 I=K1,NV                                                    
      SUM=ZERO                                                          
      DO 290 J=K1,I                                                     
  290 SUM=V(J,I)*E(J)+SUM                                               
      IF(I.GE.NV) GO TO 310                                             
      IP1=I+1                                                           
      DO 300 J=IP1,NV                                                   
  300 SUM=V(I,J)*E(J)+SUM                                               
  310 W1(I)=SUM/C                                                       
  320 SUMM=E(I)*W1(I)+SUMM                                              
      W=SUMM*HALF/C                                                     
      DO 330 J=K1,NV                                                    
      W1(J)=E(J)*W-W1(J)                                                
      DO 330 I=K1,J                                                     
  330 V(I,J)=E(J)*W1(I)+E(I)*W1(J)+V(I,J)                               
  340 V(K,K)=C                                                          
  350 CONTINUE                                                          
  360 E(NV)=V(NV,NV)                                                    
      V(NV,NV)=ONE                                                      
      IF(NV.EQ.1) GO TO 510                                             
      E(NVM1)=V(NVM1,NVM1)                                              
      W1(NVM1)=V(NVM1,NV)                                               
      W1(NV)=ZERO                                                       
      V(NVM1,NVM1)=ONE                                                  
      V(NVM1,NV)=ZERO                                                   
      V(NV,NVM1)=ZERO                                                   
      IF(NV.EQ.2) GO TO 420                                             
      DO 410 L=1,NVM2                                                   
      K=NVM1-L                                                          
      K1=K+1                                                            
      C=-V(K,K)                                                         
      V(K,K)=ONE                                                        
      IF(C.GE.ZERO) GO TO 390                                           
      DO 380 J=K1,NV                                                    
      SUM=ZERO                                                          
      DO 370 I=K1,NV                                                    
  370 SUM=V(I,J)*V(K,I)+SUM                                             
      S=SUM/C                                                           
      DO 380 I=K1,NV                                                    
  380 V(I,J)=S*V(K,I)+V(I,J)                                            
  390 CONTINUE                                                          
      DO 400 I=K1,NV                                                    
      V(K,I)=ZERO                                                       
  400 V(I,K)=ZERO                                                       
  410 CONTINUE                                                          
  420 D=ABS(E(1))                                                       
      DO 430 J=2,NV                                                     
      IF(( ABS(W1(J-1))+ABS(E(J)) ).GT.D) D=ABS(W1(J-1))+ABS(E(J))      
  430 CONTINUE                                                          
      IF(D.EQ.ZERO) GO TO 510                                           
      D=D*EPS                                                           
      K=NV                                                              
  440 L=K                                                               
  450 IF(ABS(W1(L-1)).LT.D) GO TO 460                                   
      L=L-1                                                             
      IF(L.GT.1) GO TO 450                                              
  460 IF(L.EQ.K) GO TO 500                                              
      WWW=(E(K-1)+E(K))*HALF                                            
      R=E(K)-WWW                                                        
      Z=WWW-SIGN(SQRT(W1(K-1)*W1(K-1)+R*R),WWW)                         
      EE=E(L)-Z                                                         
      E(L)=EE                                                           
      FF=W1(L)                                                          
      R=SQRT(EE*EE+FF*FF)                                               
      J=L                                                               
      GO TO 480                                                         
  470 R=SQRT(E(J)*E(J)+W1(J)*W1(J))                                     
      W1(J-1)=S*R                                                       
      EE=C*E(J)                                                         
      FF=C*W1(J)                                                        
  480 C=E(J)/R                                                          
      S=W1(J)/R                                                         
      WWW=E(J+1)-Z                                                      
      E(J)=(FF*C+WWW*S)*S+EE+Z                                          
      E(J+1)=C*WWW-S*FF                                                 
      DO 490 I=1,NV                                                     
      R=V(I,J+1)                                                        
      V(I,J+1)=R*C-V(I,J)*S                                             
  490 V(I,J)=V(I,J)*C+R*S                                               
      J=J+1                                                             
      IF(J.LT.K) GO TO 470                                              
      W1(K-1)=E(K)*S                                                    
      E(K)=E(K)*C+Z                                                     
      GO TO 440                                                         
  500 K=K-1                                                             
      IF(K.GT.1) GO TO 440                                              
C        STRAIGHT INSERTION SORT OF EIGENVALUES                         
  510 J=NV                                                              
  520 CONTINUE                                                          
      DO 530 L=1,NV                                                     
  530 W1(L)=V(L,J-1)                                                    
      EK=E(J-1)                                                         
      DO 550 I=J,NV                                                     
      IF(ABS(E(I)).LE.ABS(EK)) GO TO 570                                
      DO 540 L=1,NV                                                     
  540 V(L,I-1)=V(L,I)                                                   
  550 E(I-1)=E(I)                                                       
      DO 560 L=1,NV                                                     
  560 V(L,NV)=W1(L)                                                     
      E(NV)=EK                                                          
      GO TO 590                                                         
  570 CONTINUE                                                          
      DO 580 L=1,NV                                                     
  580 V(L,I-1)=W1(L)                                                    
      E(I-1)=EK                                                         
  590 J=J-1                                                             
      IF(J.GT.1) GO TO 520                                              
C                                                                       
CC  NORM-ORTHOGONALIZATION OF EIGEN-VECTORS                             
      DO 620 I=1,N                                                      
      DO 600 K=1,NV                                                     
  600 W1(K)=U(I,K)                                                      
      DO 620 J=1,NV                                                     
      SUM=ZERO                                                          
      DO 610 K=1,NV                                                     
  610 SUM=V(K,J)*W1(K)+SUM                                              
      U(I,J)=SUM                                                        
  620 CONTINUE                                                          
C                                                                       
  630 CONTINUE                                                          
      DO 660 J=1,NV                                                     
      DO 640 K=1,N                                                      
  640 W1(K)=U(K,J)                                                      
      DO 660 I=1,J                                                      
      SUM=ZERO                                                          
      DO 650 K=1,N                                                      
  650 SUM=U(K,I)*W1(K)+SUM                                              
      V(I,J)=SUM                                                        
  660 CONTINUE                                                          
C                                                                       
      IF(V(1,1).LT.ZERO)      ILLIND=200                                
      IF(V(NV,NV).LT.ZERO)    ILLIND=200                                
      IF(V(1,1).LT.V(NV,NV))  ILLIND=200                                
      W2(1)=ONE/SQRT(V(1,1))                                            
      IF(NV.EQ.1)             GO TO 710                                 
      V(1,2)=V(1,2)*W2(1)                                               
      W2(2)=ONE/SQRT(  V(2,2)-V(1,2)**2  )                              
      IF(NV.EQ.2)             GO TO 710                                 
      DO 700 J=3,NV                                                     
      V(1,J)=V(1,J)*W2(1)                                               
      JM1=J-1                                                           
      DO 680 I=2,JM1                                                    
      SUM=ZERO                                                          
      IM1=I-1                                                           
      DO 670 L=1,IM1                                                    
  670 SUM=V(L,I)*V(L,J)+SUM                                             
      V(I,J)=(  V(I,J)-SUM  )*W2(I)                                     
  680 CONTINUE                                                          
      SUM=ZERO                                                          
      DO 690 L=1,JM1                                                    
  690 SUM=V(L,J)*V(L,J)+SUM                                             
      W2(J)=ONE/SQRT(  V(J,J)-SUM  )                                    
  700 CONTINUE                                                          
C                                                                       
  710 CONTINUE                                                          
      C11=W2(1)                                                         
      DO 720 J=1,N                                                      
  720 V(J,1)=U(J,1)*C11                                                 
      IF(NV.EQ.1)  GO TO 760                                            
      DO 750 I=2,NV                                                     
      CII=W2(I)                                                         
      IM1=I-1                                                           
      DO 730 K=1,IM1                                                    
  730 W1(K)=V(K,I)                                                      
      DO 750 J=1,N                                                      
      SUM=ZERO                                                          
      DO 740 K=1,IM1                                                    
  740 SUM=V(J,K)*W1(K)+SUM                                              
      V(J,I)=(U(J,I)-SUM)*CII                                           
  750 CONTINUE                                                          
  760 ITERE=ITERE+1                                                     
      IF(ITERE.LT.ITELIM .AND. ERROR.GT.SEPS10)  GO TO 40               
      IF(ITERE.GE.ITELIM .AND. ERROR.GT.SEPS10)  GO TO 770              
C                                                                       
      ILL=0                                                             
      IF(ILLIND.EQ.200)                          GO TO 770              
      GO TO 780                                                         
  770 ILL=200                                                           
  780 CONTINUE                                                          
      ITER=ITERE                                                        
      IF(ABS(ESHIFT).LT.SEPS2) RETURN                                   
      DO 790 I=1,NE                                                     
      A(I,I)=A(I,I)+ESHIFT                                              
  790 E(I)=E(I)+ESHIFT                                                  
      DO 800 I=NEP1,N                                                   
  800 A(I,I)=A(I,I)+ESHIFT                                              
      RETURN                                                            
      END                                                               
      SUBROUTINE NGHOUS(AB,NNMAX,NN,NNE,NNV,EPS,IORD,ICHO,BD,E,V,ILL,   
     *                  W1,W2,W3,W4,W5,W6,W7)                           
CI--------------------------------------------------------------------I 
CI       SUBPROGRAM FOR GENERALIZED EIGEN-PROBLEM , A*V=B*V*E , BY    I 
CI  ( SIMULTANEOUSLY TRIANGULAR DECOMPOSITION )-                      I 
CI  (HOUSEHOLDER)-(BISECTION & NO-ROOT-QR)-(INVERSE-ITERATION) METHOD I 
CI-----------------------------------------------(VERSION-2,LEVEL-1)--I 
      DIMENSION AB(NNMAX,NN),BD(NN),V(NNMAX,NNV),E(NNE)                 
      DIMENSION W1(NN),W2(NN),W3(NN),W4(NN),W5(NN),W6(NN),W7(1)         
C     W7(I) IS NEVER USED IN VERSION-2.                                 
      DATA ZERO,ONE /0.E 0,1.E 0/                                       
      NMAX=NNMAX                                                        
      N=NN                                                              
      NE=NNE                                                            
      NV=NNV                                                            
      ILL=300                                                           
      IF(NMAX.LT.2.OR.N.GT.NMAX.OR.N.LT.2.OR.NE.LT.1.OR.NV.LT.0) RETURN 
      IF(NE.GT.N.OR.NV.GT.NE.OR.EPS.LE.ZERO.OR.EPS.GT.ONE)       RETURN 
      NM1=N-1                                                           
      DO 10 I=1,NM1                                                     
      IP1=I+1                                                           
      DO 10 J=IP1,N                                                     
      T=AB(J,I)                                                         
      AB(J,I)=AB(I,J)                                                   
   10 AB(I,J)=T                                                         
CC   CHOLESKY TRANSFORMATION OF A BY DECOMPOSED B                       
      IF(ICHO.EQ.1)          GO TO 60                                   
      ILL=100                                                           
      IF(BD(1).LT.EPS)       RETURN                                     
      BD(1)=ONE/SQRT(BD(1))                                             
      AB(1,2)=AB(1,2)*BD(1)                                             
      PPP=BD(2)-AB(1,2)*AB(1,2)                                         
      IF(PPP.LT.EPS)         RETURN                                     
      BD(2)=ONE/SQRT(PPP)                                               
      IF(N.EQ.2)             GO TO 60                                   
      DO 50 J=3,N                                                       
      AB(1,J)=AB(1,J)*BD(1)                                             
      JM1=J-1                                                           
      DO 30 I=2,JM1                                                     
      SUM=ZERO                                                          
      IM1=I-1                                                           
      DO 20 L=1,IM1                                                     
   20 SUM=AB(L,I)*AB(L,J)+SUM                                           
      AB(I,J)=(  AB(I,J)-SUM  )*BD(I)                                   
   30 CONTINUE                                                          
      SUM=ZERO                                                          
      DO 40 L=1,JM1                                                     
   40 SUM=AB(L,J)*AB(L,J)+SUM                                           
      PPP=BD(J)-SUM                                                     
      IF(PPP.LT.EPS)         RETURN                                     
      BD(J)=ONE/SQRT(PPP)                                               
   50 CONTINUE                                                          
C                                                                       
   60 CONTINUE                                                          
      DO 70 J=1,N                                                       
   70 AB(J,1)=AB(J,1)*BD(1)                                             
      DO 90 I=2,N                                                       
      BDI=BD(I)                                                         
      IM1=I-1                                                           
      DO 90 J=I,N                                                       
      SUM=ZERO                                                          
      DO 80 K=1,IM1                                                     
   80 SUM=AB(K,I)*AB(J,K)+SUM                                           
      AB(J,I)=(AB(J,I)-SUM)*BDI                                         
   90 CONTINUE                                                          
C                                                                       
      AB(1,1)=AB(1,1)*BD(1)                                             
      DO 110 I=2,N                                                      
      SUM=ZERO                                                          
      IM1=I-1                                                           
      DO 100 K=1,IM1                                                    
  100 SUM=AB(K,1)*AB(K,I)+SUM                                           
      AB(I,1)=(AB(I,1)-SUM)*BD(I)                                       
  110 CONTINUE                                                          
C                                                                       
      DO 150 J=2,NM1                                                    
      JM1=J-1                                                           
      JP1=J+1                                                           
      SUM=ZERO                                                          
      DO 120 K=1,JM1                                                    
  120 SUM=AB(K,J)*AB(J,K)+SUM                                           
      AB(J,J)=(AB(J,J)-SUM)*BD(J)                                       
      DO 150 I=JP1,N                                                    
      SUM=ZERO                                                          
      DO 130 K=1,JM1                                                    
  130 SUM=AB(K,I)*AB(J,K)+SUM                                           
      IM1=I-1                                                           
      DO 140 K=J,IM1                                                    
  140 SUM=AB(K,J)*AB(K,I)+SUM                                           
      AB(I,J)=(AB(I,J)-SUM)*BD(I)                                       
  150 CONTINUE                                                          
      SUM=ZERO                                                          
      DO 160 K=1,NM1                                                    
  160 SUM=AB(K,N)*AB(N,K)+SUM                                           
      AB(N,N)=(AB(N,N)-SUM)*BD(N)                                       
C#  SOLVING STANDARD EIGEN-PROBLEM FOR TRANSFORMED A                    
      DO 170 I=1,NM1                                                    
      IP1=I+1                                                           
      DO 170 J=IP1,N                                                    
      T=AB(J,I)                                                         
      AB(J,I)=AB(I,J)                                                   
  170 AB(I,J)=T                                                         
      CALL NSHOUS(AB,NMAX,N,NE,NV,EPS,IORD,E,V,ILL,W1,W2,W3,W4,W5,W6,W7)
      IF(NV.EQ.0.OR.ILL.NE.0) RETURN                                    
C#  CONVERSION OF EIGEN-VECTORS( STANDARD FORM -> GENERALIZED FORM )    
      DO 190 I=1,NV                                                     
      V(N,I)=V(N,I)*BD(N)                                               
      DO 190 JJ=1,NM1                                                   
      J=N-JJ                                                            
      SUM=ZERO                                                          
      JP1=J+1                                                           
      DO 180 K=JP1,N                                                    
  180 SUM=AB(K,J)*V(K,I)+SUM                                            
      V(J,I)=(V(J,I)-SUM)*BD(J)                                         
  190 CONTINUE                                                          
      RETURN                                                            
      END                                                               
      SUBROUTINE NGJENS(AB,NNMAX,NN,NNE,NNV,EPS,BD,IUV,ITER,ESHIFT,     
     *                  E,V,U,ILL,W1,W2)                                
CI--------------------------------------------------------------------I 
CI       SUBPROGRAM FOR GENERALIZED EIGEN-PROBLEM , A*V=B*V*E , BY    I 
CI      (SIMULTANEOUSLY TRIANGULAR DECOMPOSITION)-(JENNINGS) METHOD   I 
CI-----------------------------------------------(VERSION-2,LEVEL-1)--I 
      DIMENSION AB(NNMAX,NN),BD(NN),E(NNE),V(NNMAX,NNV),U(NNMAX,NNV)    
      DIMENSION W1(NN),W2(NN)                                           
      DATA ZERO,ONE /0.E 0,1.E 0/                                       
      NMAX=NNMAX                                                        
      N=NN                                                              
      NE=NNE                                                            
      NV=NNV                                                            
      ILL=300                                                           
      IF(NMAX.LT.2.OR.N.GT.NMAX.OR.N.LT.2.OR.NE.LT.1.OR.NV.LT.1) RETURN 
      IF(NE.GT.N.OR.NV.LT.NE.OR.EPS.LE.ZERO.OR.EPS.GT.ONE)       RETURN 
      NM1=N-1                                                           
C   CHOLESKY TRASFORMATION OF A BY DECOMPOSED B                         
      DO 10 J=1,N                                                       
   10 AB(1,J)=AB(1,J)*BD(1)                                             
      DO 30 I=2,N                                                       
      BDI=BD(I)                                                         
      IM1=I-1                                                           
      DO 30 J=I,N                                                       
      SUM=ZERO                                                          
      DO 20 K=1,IM1                                                     
   20 SUM=AB(I,K)*AB(K,J)+SUM                                           
      AB(I,J)=(AB(I,J)-SUM)*BDI                                         
   30 CONTINUE                                                          
C                                                                       
      AB(1,1)=AB(1,1)*BD(1)                                             
      DO 50 I=2,N                                                       
      SUM=ZERO                                                          
      IM1=I-1                                                           
      DO 40 K=1,IM1                                                     
   40 SUM=AB(1,K)*AB(I,K)+SUM                                           
      AB(1,I)=(AB(1,I)-SUM)*BD(I)                                       
   50 CONTINUE                                                          
C                                                                       
      DO 90 J=2,NM1                                                     
      JM1=J-1                                                           
      JP1=J+1                                                           
      SUM=ZERO                                                          
      DO 60 K=1,JM1                                                     
   60 SUM=AB(K,J)*AB(J,K)+SUM                                           
      AB(J,J)=(AB(J,J)-SUM)*BD(J)                                       
      DO 90 I=JP1,N                                                     
      SUM=ZERO                                                          
      DO 70 K=1,JM1                                                     
   70 SUM=AB(K,J)*AB(I,K)+SUM                                           
      IM1=I-1                                                           
      DO 80 K=J,IM1                                                     
   80 SUM=AB(J,K)*AB(I,K)+SUM                                           
      AB(J,I)=(AB(J,I)-SUM)*BD(I)                                       
   90 CONTINUE                                                          
      SUM=ZERO                                                          
      DO 100 K=1,NM1                                                    
  100 SUM=AB(K,N)*AB(N,K)+SUM                                           
      AB(N,N)=(AB(N,N)-SUM)*BD(N)                                       
C   TRANSFORMATION OF INITIAL EIGEN-VECTORS                             
      IF(IUV.EQ.1)           GO TO 150                                  
      DO 130 I=1,NM1                                                    
      W2(I)=ONE/BD(I)                                                   
      IP1=I+1                                                           
      DO 110 K=IP1,N                                                    
  110 W2(K)=AB(K,I)                                                     
      DO 130 J=1,NV                                                     
      SUM=ZERO                                                          
      DO 120 K=I,N                                                      
  120 SUM=V(K,J)*W2(K)+SUM                                              
      U(I,J)=SUM                                                        
  130 CONTINUE                                                          
      BNN=ONE/BD(N)                                                     
      DO 140 J=1,NV                                                     
  140 U(N,J)=V(N,J)*BNN                                                 
C#  SOLVING STANDARD EIGEN-PROBLEM FOR TRANSFORMED A                    
  150 CALL NSJENS(AB,NMAX,N,NE,NV,EPS,ITER,ESHIFT,E,U,ILLE,W1,W2,V)     
C#  CONVERSION OF EIGEN-VECTORS( STANDARD FORM -> GENERALIZED FORM )    
      DO 170 I=1,NV                                                     
      V(N,I)=U(N,I)*BD(N)                                               
      DO 170 JJ=1,NM1                                                   
      J=N-JJ                                                            
      SUM=ZERO                                                          
      JP1=J+1                                                           
      DO 160 K=JP1,N                                                    
  160 SUM=AB(K,J)*V(K,I)+SUM                                            
      V(J,I)=(U(J,I)-SUM)*BD(J)                                         
  170 CONTINUE                                                          
      ILL=ILLE                                                          
      RETURN                                                            
      END                                                               
      SUBROUTINE NSHOUD(A,NMAX,NN,NNE,NNV,EPS,IORD,E,V,ILL,             
     *           W1,W2,W3,W4,W5,W6,W7)                                  
CI--------------------------------------------------------------------I 
CI     SUBPROGRAM FOR STANDARD EIGEN-PROBLEM , A*V=V*E ,   BY         I 
CI (HOUSEHOLDER)-(BISECTION & NO-ROOT-QR)-(INVERSE-ITERATION) METHOD  I 
CI-----------------------------------------------(VERSION-2,LEVEL-1)--I 
      IMPLICIT REAL*8 (A-H,O-Z)                                         
      DIMENSION A(NMAX,NN),E(NN),V(NMAX,NNV)      ,LS(20),KS(20)        
      DIMENSION W1(NN),W2(NN),W3(NN),W4(NN),W5(NN),W6(NN),W7(1)         
C     W7(I) IS NEVER USED IN VERSION-2.                                 
      DATA ZERO,HALF,FIBONA,ONE /0.D 0,0.5D 0,0.6180339D 0,1.D 0/       
      DATA EXPM30,EXPM20,EXPM6  /1.D-30,1.D-20,1.D-6/                   
      DATA EXPP6,EXPP12,EXPP18  /1.D 6,1.D12,1.D18/                     
C     IAP=0 FOR SCALAR MACHINE   &   IAP=1 FOR VECTOR MACHINE           
      DATA IAP /0/                                                      
      N=NN                                                              
      NE=NNE                                                            
      NV=NNV                                                            
      ILL=300                                                           
      IF(NMAX.LT.2.OR.N.GT.NMAX.OR.N.LT.2.OR.NE.LT.1.OR.NV.LT.0) RETURN 
      IF(NE.GT.N.OR.NV.GT.NE.OR.EPS.LE.ZERO.OR.EPS.GT.ONE)       RETURN 
      NM1=N-1                                                           
      NM2=N-2                                                           
      NE8=NE*8                                                          
      IF(N.EQ.2)                  GO TO 130                             
C  TRI-DIAGONALIZATION                      ( BY A.HOUSEHOLDER )        
      DO 120 K=1,NM2                                                    
      KP1=K+1                                                           
      E(K)=A(K,K)                                                       
      SUM=ZERO                                                          
      DO 10 J=KP1,N                                                     
      E(J)=A(K,J)                                                       
   10 SUM=E(J)*E(J)+SUM                                                 
      S=DSIGN(DSQRT(SUM),E(KP1))                                        
      W1(K)=-S                                                          
      E(KP1)=E(KP1)+S                                                   
      A(K,KP1)=E(KP1)                                                   
      H=E(KP1)*S                                                        
      IF(H.EQ.ZERO)     GO TO 110                                       
      SUMM=ZERO                                                         
      DO 40 I=KP1,NM1                                                   
      SUM=ZERO                                                          
      DO 20 J=KP1,I                                                     
   20 SUM=A(J,I)*E(J)+SUM                                               
      IP1=I+1                                                           
      DO 30 J=IP1,N                                                     
   30 SUM=A(I,J)*E(J)+SUM                                               
      W1(I)=SUM/H                                                       
      SUMM=W1(I)*E(I)+SUMM                                              
   40 CONTINUE                                                          
      SUM=ZERO                                                          
      DO 50 J=KP1,N                                                     
   50 SUM=A(J,N)*E(J)+SUM                                               
      W1(N)=SUM/H                                                       
      SUMM=W1(N)*E(N)+SUMM                                              
      U=SUMM*HALF/H                                                     
      IF(IAP.EQ.1)  GO TO 70                                            
      DO 60 J=KP1,N                                                     
      W1(J)=E(J)*U-W1(J)                                                
      DO 60 I=KP1,J                                                     
   60 A(I,J)=W1(I)*E(J)+W1(J)*E(I)+A(I,J)                               
      GO TO 110                                                         
   70 CONTINUE                                                          
      DO 100 J=KP1,N                                                    
      W1(J)=E(J)*U-W1(J)                                                
      EJ=E(J)                                                           
      DO 80 I=KP1,J                                                     
   80 A(I,J)=W1(I)*EJ+A(I,J)                                            
      W1J=W1(J)                                                         
      DO 90 I=KP1,J                                                     
   90 A(I,J)=E(I)*W1J+A(I,J)                                            
  100 CONTINUE                                                          
  110 A(K,K)=H                                                          
  120 CONTINUE                                                          
  130 E(NM1)=A(NM1,NM1)                                                 
      E(N)=A(N,N)                                                       
      W1(NM1)=A(NM1,N)                                                  
      W1(N)=ZERO                                                        
      GERSCH=DABS(E(1))+DABS(W1(1))                                     
      DO 140 I=1,NM1                                                    
      SUM=DABS(E(I+1))+DABS(W1(I))+DABS(W1(I+1))                        
      IF(SUM.GT.GERSCH) GERSCH=SUM                                      
      IF(NV.NE.0)  V(I,NV)=E(I)                                         
  140 CONTINUE                                                          
      IF(NV.NE.0)  V(N,NV)=E(N)                                         
      DEL=EPS*GERSCH                                                    
      IF(DEL.EQ.ZERO)             RETURN                                
      IF(NE8.LT.N)                GO TO 360                             
C  NO-ROOT-QR METHOD FOR EIGENVALUES (BY PAL-WALKER-KAHAN & M.SHIMASAKI)
      DD=DEL*DEL                                                        
      DO 150 I=1,NM1                                                    
  150 W3(I+1)=W1(I)*W1(I)                                               
      K=N                                                               
  160 KM1=K-1                                                           
      IF(W3(K).LT.DD) GO TO 190                                         
      EPE=(E(KM1)+E(K))*HALF                                            
      EME=E(K)-EPE                                                      
      QRSHIF=EPE-DSIGN(DSQRT(W3(K)+EME*EME),EPE)                        
      CC=ONE                                                            
      SS=ZERO                                                           
      G=E(1)-QRSHIF                                                     
      PP=G*G                                                            
      DO 180 I=1,KM1                                                    
      BB=W3(I+1)                                                        
      TT=PP+BB                                                          
      W3(I)=SS*TT                                                       
      OLDCC=CC                                                          
      SS=BB/TT                                                          
      CC=PP/TT                                                          
      OLDG=G                                                            
      IF(CC.EQ.ZERO) GO TO 170                                          
      G=(E(I+1)-QRSHIF)*CC-OLDG*SS                                      
      E(I)=E(I+1)+OLDG-G                                                
      PP=(G*G)/CC                                                       
      GO TO 180                                                         
  170 G=-OLDG                                                           
      E(I)=E(I+1)+OLDG+OLDG                                             
      PP=BB*OLDCC                                                       
  180 CONTINUE                                                          
      E(K)=G+QRSHIF                                                     
      W3(K)=SS*PP                                                       
      GO TO 160                                                         
  190 K=K-1                                                             
      IF(K.GT.1) GO TO 160                                              
C  QUICK SORT OF EIGENVALUES                ( BY C.HOARE )              
      ISP=0                                                             
      L=1                                                               
      K=N                                                               
  200 IF(K-L.LT.16)          GO TO 290                                  
      M=(K+L)/2                                                         
      MAX=K                                                             
      IF(E(M).GT.E(K))   MAX=M                                          
      IF(E(L).GT.E(MAX)) MAX=L                                          
      IF(MAX.EQ.K)           GO TO 210                                  
      BK=E(MAX)                                                         
      E(MAX)=E(K)                                                       
      E(K)=BK                                                           
  210 IF(E(L).GE.E(M))       GO TO 220                                  
      BK=E(L)                                                           
      E(L)=E(M)                                                         
      E(M)=BK                                                           
  220 BK=E(L)                                                           
      I=L                                                               
      J=K                                                               
      GO TO 250                                                         
  230 E(J)=E(I)                                                         
      E(I)=BK                                                           
  240 J=J-1                                                             
  250 IF(BK.LT.E(J))         GO TO 240                                  
      IF(J.LE.I)             GO TO 270                                  
      E(I)=E(J)                                                         
      E(J)=BK                                                           
  260 I=I+1                                                             
      IF(E(I).LT.BK)         GO TO 260                                  
      IF(J.GT.I)             GO TO 230                                  
  270 ISP=ISP+1                                                         
      IF(K-I.GE.I-L)         GO TO 280                                  
      LS(ISP)=L                                                         
      KS(ISP)=I-1                                                       
      L=I+1                                                             
      GO TO 200                                                         
  280 LS(ISP)=I+1                                                       
      KS(ISP)=K                                                         
      K=I-1                                                             
      GO TO 200                                                         
  290 IF(K-L.LT.1)           GO TO 330                                  
      J=K                                                               
  300 BK=E(J-1)                                                         
      I=J                                                               
  310 IF(E(I).GE.BK)         GO TO 320                                  
      E(I-1)=E(I)                                                       
      I=I+1                                                             
      IF(I.LE.K)             GO TO 310                                  
  320 E(I-1)=BK                                                         
      J=J-1                                                             
      IF(J.GT.L)             GO TO 300                                  
  330 IF(ISP.EQ.0)           GO TO 340                                  
      L=LS(ISP)                                                         
      K=KS(ISP)                                                         
      ISP=ISP-1                                                         
      GO TO 200                                                         
  340 IF(IORD.LT.0)               GO TO 500                             
      NP1=N+1                                                           
      NE2=N/2                                                           
      DO 350 K=1,NE2                                                    
      TEMP=E(K)                                                         
      E(K)=E(NP1-K)                                                     
  350 E(NP1-K)=TEMP                                                     
      GO TO 500                                                         
C  BISECTION METHOD FOR EIGENVALUES         ( BY J.GIVENS)              
  360 CONTINUE                                                          
      DO 370 I=1,NE                                                     
      W2(I)=E(I)                                                        
      E(I)=-GERSCH                                                      
      W4(I)=GERSCH                                                      
  370 W3(I)=-W1(I)*W1(I)                                                
      NEP1=NE+1                                                         
      DO 380 I=NEP1,N                                                   
      W2(I)=E(I)                                                        
  380 W3(I)=-W1(I)*W1(I)                                                
      IF(IORD.GT.0)               GO TO 400                             
      DO 390 I=1,N                                                      
  390 W2(I)=-W2(I)                                                      
  400 CONTINUE                                                          
      DO 490 K=1,NE                                                     
  410 X=(E(K)+W4(K))*HALF                                               
      IF(DABS(W4(K)-X).LE.DEL)    GO TO 490                             
      NAG=0                                                             
      I=1                                                               
  420 S=W2(I)-X                                                         
  430 IF(S.GE.ZERO) NAG=NAG+1                                           
      IF(DABS(S).LT.EXPM30)       GO TO 440                             
      I=I+1                                                             
      IF(I.GT.N)                  GO TO 450                             
      S=W3(I-1)/S+W2(I)-X                                               
      GO TO 430                                                         
  440 I=I+2                                                             
      IF(I.LE.N)                  GO TO 420                             
  450 IF(NAG.GE.K)                GO TO 470                             
      DO 460 J=K,NE                                                     
      IF(X.LT.W4(J)) W4(J)=X                                            
  460 CONTINUE                                                          
      GO TO 410                                                         
  470 MG=NAG                                                            
      IF(NE.LT.MG) MG=NE                                                
      DO 480 J=K,MG                                                     
  480 E(J)=X                                                            
      GO TO 410                                                         
  490 E(K)=X                                                            
  500 IF(NV.EQ.0)                 GO TO 810                             
      IF(NE8.GE.N .OR. IORD.GT.0) GO TO 520                             
      DO 510 I=1,N                                                      
      W1(I)=-W1(I)                                                      
  510 V(I,NV)=-V(I,NV)                                                  
C   INVERSE ITERATION FOR EIGENVECTORS      ( BY H.WIELANDT )           
  520 FN=DFLOAT(N)                                                      
      SN=DSQRT(FN)                                                      
      SEPS=DSQRT(EPS)                                                   
      EPS1=(GERSCH*EXPM6)/(FN*SEPS)                                     
      EPS2=EXPP12*FN/SEPS                                               
      TM6N=EXPM6*SN                                                     
      TP6N=EXPP6*SN                                                     
      TP18N=EXPP18*SN                                                   
      RN=ZERO                                                           
      RA=EPS*FIBONA                                                     
      DO 530 J=1,N                                                      
      W3(J)=ZERO                                                        
      W4(J)=W1(J)                                                       
      W5(J)=V(J,NV)-E(1)                                                
      RN=RN+RA                                                          
      IF(RN.GE.EPS) RN=RN-EPS                                           
  530 W6(J)=RN                                                          
      IG=1                                                              
      DO 750 I=1,NV                                                     
      IM1=I-1                                                           
      IF(I.EQ.1)                       GO TO 550                        
      DO 540 J=1,NM1                                                    
      W3(J)=ZERO                                                        
      W4(J)=W1(J)                                                       
      W5(J)=V(J,NV)-E(I)                                                
  540 W6(J)=V(J+1,IM1)                                                  
      W3(N)=ZERO                                                        
      W4(N)=W1(N)                                                       
      W5(N)=V(N,NV)-E(I)                                                
      W6(N)=V(1,IM1)                                                    
  550 CONTINUE                                                          
      DO 580 J=1,NM1                                                    
      IF(DABS(W5(J)).GE.DABS(W1(J)))   GO TO 560                        
      W2(J)=-W5(J)/W1(J)                                                
      W5(J)=W1(J)                                                       
      T=W5(J+1)                                                         
      W5(J+1)=W4(J)                                                     
      W4(J)=T                                                           
      W3(J)=W4(J+1)                                                     
      IF(W3(J).EQ.ZERO) W3(J)=DEL                                       
      W4(J+1)=ZERO                                                      
      GO TO 570                                                         
  560 IF(W5(J).EQ.ZERO) W5(J)=DEL                                       
      W2(J)=-W1(J)/W5(J)                                                
  570 W4(J+1)=W3(J)*W2(J)+W4(J+1)                                       
  580 W5(J+1)=W4(J)*W2(J)+W5(J+1)                                       
      IF(W5(N).EQ.ZERO) W5(N)=DEL                                       
      ITELIM=2                                                          
      IF(EPS.LT.EXPM20)                          ITELIM=3               
      IF(I.GT.1.AND.DABS(E(I)-E(IM1)).LT.EPS1)   ITELIM=3               
      DO 640 IT=1,ITELIM                                                
      IF(IT.EQ.1)       GO TO 600                                       
      DO 590 J=1,NM1                                                    
      IF(W3(J).EQ.ZERO) GO TO 590                                       
      T=W6(J)                                                           
      W6(J)=W6(J+1)                                                     
      W6(J+1)=T                                                         
  590 W6(J+1)=W6(J)*W2(J)+W6(J+1)                                       
  600 W6(N)=W6(N)/W5(N)                                                 
      W6(NM1)=(W6(NM1)-W6(N)*W4(NM1))/W5(NM1)                           
      VN=DABS(W6(N))+DABS(W6(NM1))                                      
      IF(N.EQ.2)                       GO TO 620                        
      DO 610 KK=2,NM1                                                   
      K=N-KK                                                            
      W6(K)=(W6(K)-W6(K+1)*W4(K)-W6(K+2)*W3(K))/W5(K)                   
  610 VN=DABS(W6(K))+VN                                                 
  620 IF(VN.GT.TM6N.AND.VN.LT.TP6N)    GO TO 640                        
      IF(IT.EQ.ITELIM)                 GO TO 650                        
      IF(VN.GT.EPS2)                   GO TO 650                        
      DUMP=FN/VN                                                        
      DO 630 J=1,N                                                      
  630 W6(J)=W6(J)*DUMP                                                  
  640 CONTINUE                                                          
C   RE-ORTHOGONALIZATION                    ( BY GRAM & SCHMIDT )       
  650 CONTINUE                                                          
      DO 660 J=IG,I                                                     
      IF(DABS(E(J)-E(I)).LT.EPS1)      GO TO 670                        
  660 CONTINUE                                                          
      J=I                                                               
  670 IG=J                                                              
      IF(IG.EQ.I.AND.VN.LT.TP18N)      GO TO 720                        
      DUMP=FN/VN                                                        
      DO 680 J=1,N                                                      
  680 W6(J)=W6(J)*DUMP                                                  
      IF(IG.EQ.I)                      GO TO 720                        
      DO 710 K=IG,IM1                                                   
      SUM=ZERO                                                          
      DO 690 J=1,N                                                      
  690 SUM=V(J,K)*W6(J)+SUM                                              
      S=-SUM                                                            
      DO 700 J=1,N                                                      
  700 W6(J)=V(J,K)*S+W6(J)                                              
  710 CONTINUE                                                          
C   NORMALIZATION                                                       
  720 SUM=ZERO                                                          
      DO 730 J=1,N                                                      
  730 SUM=W6(J)*W6(J)+SUM                                               
      SINV=ONE/DSQRT(SUM)                                               
      DO 740 J=1,N                                                      
  740 V(J,I)=W6(J)*SINV                                                 
  750 CONTINUE                                                          
C   BACK-TRANSFORMATION OF EIGEN-VECTORS                                
      IF(N.EQ.2)                       GO TO 810                        
      DO 800 J=1,NM2                                                    
      K=N-J-1                                                           
      IF(A(K,K).EQ.ZERO)               GO TO 800                        
      DO 760 KK=K,N                                                     
  760 W1(KK)=A(K,KK)                                                    
      KP1=K+1                                                           
      DO 790 I=1,NV                                                     
      SUM=ZERO                                                          
      DO 770 KK=KP1,N                                                   
  770 SUM=V(KK,I)*W1(KK)+SUM                                            
      S=-SUM/W1(K)                                                      
      DO 780 KK=KP1,N                                                   
  780 V(KK,I)=W1(KK)*S+V(KK,I)                                          
  790 CONTINUE                                                          
  800 CONTINUE                                                          
  810 ILL=0                                                             
      IF(NE8.GE.N .OR. IORD.GT.0) RETURN                                
      DO 820 I=1,NE                                                     
  820 E(I)=-E(I)                                                        
      RETURN                                                            
      END                                                               
      SUBROUTINE NSJEND(A,NMAX,NN,NNE,NNV,EPS,ITER,ESHIFT,              
     *                  E,V,ILL,W1,W2,U)                                
CI--------------------------------------------------------------------I 
CI       SUBPROGRAM FOR STANDARD EIGEN-PROBLEM , A*V=V*E , BY         I 
CI      JENNINGS METHOD                                               I 
CI-----------------------------------------------(VERSION-2,LEVEL-1)--I 
      IMPLICIT REAL*8 (A-H,O-Z)                                         
      DIMENSION  A(NMAX,NN),E(NNE),V(NMAX,NNV)                          
      DIMENSION  W1(NN),W2(NN),U(NMAX,NNV)                              
      DATA ZERO,HALF,V0985,ONE /0.D 0,0.5D 0,0.985D 0,1.D 0/            
      DATA TWO,TEN,HUND        /2.D 0,1.D 1,1.D 2/                      
      DATA INDEX/0/                                                     
      IF(INDEX.EQ.0)  WRITE(6,1000)                                     
 1000 FORMAT(1H //5X,70HPACKAGE-NAME : NICER(NAGOYA ITERATIVE COMPUTATIO
     *N EIGENVALUE ROUTINES)     /20X,                                  
     * 50H(VERSION-2,LEVEL-1) MODIFIED ON JAN. 1983         / 5X,       
     * 90HREFERENCE    : Y.BEPPU AND I.NINOMIYA;COMPUTER PHYSICS COMMUNI
     *CATIONS, V.23,Y.1981,P.123       /)                               
      N=NN                                                              
      NE=NNE                                                            
      NV=NNV                                                            
      ILL=300                                                           
      IF(NMAX.LT.2.OR.N.GT.NMAX.OR.N.LT.2.OR.NE.LT.1.OR.NV.LT.1) RETURN 
      IF(NE.GT.N.OR.NV.LT.NE.OR.EPS.LE.ZERO.OR.EPS.GT.ONE)       RETURN 
      NM1=N-1                                                           
      NEP1=NE+1                                                         
      NVM1=NV-1                                                         
      IF(INDEX.NE.0)                   GO TO 10                         
      SEPS=DSQRT(EPS*HUND)                                              
      SEPS10=SEPS*TEN                                                   
      SSEPS=DSQRT(SEPS10)                                               
      INDEX=1                                                           
   10 SEPS2=SEPS*( DABS(A(1,1)) + DABS(A(N,N)) )                        
      ITELIM=ITER                                                       
      ITERE=0                                                           
      IF(DABS(ESHIFT).LT.SEPS2)        GO TO 40                         
      DO 20 I=1,NE                                                      
      A(I,I)=A(I,I)-ESHIFT                                              
   20 E(I)=E(I)-ESHIFT                                                  
      DO 30 I=NEP1,N                                                    
   30 A(I,I)=A(I,I)-ESHIFT                                              
CC   TRANSFORMATION OF LARGE SQUARE-MATRIX-A TO SMALL SQUARE-MATRIX-V   
CC  BY MATRIX-MULTIPLICATION ; FIRST U=A*V , THEN V=TRANS(V)*U .        
   40 CONTINUE                                                          
      DO 80 I=1,NM1                                                     
      DO 50 K=1,I                                                       
   50 W1(K)=A(K,I)                                                      
      IP1=I+1                                                           
      DO 60 K=IP1,N                                                     
   60 W1(K)=A(I,K)                                                      
      DO 80 J=1,NV                                                      
      SUM=ZERO                                                          
      DO 70 K=1,N                                                       
   70 SUM=V(K,J)*W1(K)+SUM                                              
      U(I,J)=SUM                                                        
   80 CONTINUE                                                          
      DO 100 J=1,NV                                                     
      SUM=ZERO                                                          
      DO 90 K=1,N                                                       
   90 SUM=A(K,N)*V(K,J)+SUM                                             
      U(N,J)=SUM                                                        
  100 CONTINUE                                                          
      DO 130 J=1,NV                                                     
      DO 110 K=1,N                                                      
  110 W1(K)=V(K,J)                                                      
      DO 130 I=J,NV                                                     
      SUM=ZERO                                                          
      DO 120 K=1,N                                                      
  120 SUM=U(K,I)*W1(K)+SUM                                              
      V(I,J)=SUM                                                        
  130 CONTINUE                                                          
CC  SOLVING EIGEN-PROBLEM IN SUB-SPACE                                  
      ERROR=DABS(E(1)-V(1,1))                                           
      E(1)=V(1,1)                                                       
      IF(NV.EQ.1)                      GO TO 630                        
      DO 140 K=2,NV                                                     
      ERROR=DABS(E(K)-V(K,K))+ERROR                                     
  140 E(K)=V(K,K)                                                       
      E1ENE=DABS(E(1)) + DABS(E(NE))                                    
      ERROR=ERROR/( E1ENE*DFLOAT(NV) )                                  
C                                                                       
      IF(ERROR.GT.SSEPS)               GO TO 260                        
C          BY APPROXIMATE FORMULA                                       
      DEGENE=SEPS*E1ENE                                                 
      K=1                                                               
  150 CONTINUE                                                          
      ND=1                                                              
  160 KND=K+ND                                                          
      IF(KND.GT.NV)                    GO TO 170                        
      IF(DABS(E(KND)-E(K)).GT.DEGENE)  GO TO 170                        
      ND=ND+1                                                           
      GO TO 160                                                         
  170 IF(ND.EQ.1)                      GO TO 190                        
      DD=DFLOAT(ND)*SEPS10                                              
      ND2=ND/2                                                          
      LI=K                                                              
      LF=K+ND2-1                                                        
      LM=ND-1                                                           
      DW=DFLOAT(LM)                                                     
      DO 180 L=LI,LF                                                    
      DDDW=DD*DW                                                        
      V(L,L)=   DDDW*V(L,L)                                             
      LL=LI+LM                                                          
      V(LL,LL)=-DDDW*V(LL,LL)                                           
      DW=DW-TWO                                                         
      LM=LM-1                                                           
  180 CONTINUE                                                          
  190 K=K+ND                                                            
      IF(K.LT.NV)                      GO TO 150                        
C                                                                       
      DO 200 I=1,NVM1                                                   
      IP1=I+1                                                           
      DO 200 J=IP1,NV                                                   
      V(I,J)=V(J,I) / ( V(J,J)-V(I,I) )                                 
  200 V(J,I)=-V(I,J)                                                    
C                                                                       
      SUM=ZERO                                                          
      DO 210 J=2,NV                                                     
  210 SUM=V(J,1)*V(J,1)+SUM                                             
      IF(SUM.GT.ONE)    GO TO 230                                       
      S1=DSQRT(ONE-SUM)                                                 
      SUM=ZERO                                                          
      DO 220 J=1,NVM1                                                   
  220 SUM=V(J,NV)*V(J,NV)+SUM                                           
      IF(SUM.GT.ONE)    GO TO 230                                       
      SNV=DSQRT(ONE-SUM)                                                
      VDIAGO=HALF*(S1+SNV)                                              
      ILLIND=0                                                          
      GO TO 240                                                         
  230 VDIAGO=V0985                                                      
      ILLIND=200                                                        
  240 CONTINUE                                                          
      DO 250 K=1,NV                                                     
  250 V(K,K)=VDIAGO                                                     
      GO TO 510                                                         
C          BY HOUSEHOLDER-QR FORMULA                                    
  260 NVM2=NV-2                                                         
      DO 270 J=2,NV                                                     
      J1=J-1                                                            
      DO 270 I=1,J1                                                     
  270 V(I,J)=V(J,I)                                                     
      IF(NV.LE.2) GO TO 360                                             
      DO 350 K=1,NVM2                                                   
      K1=K+1                                                            
      E(K)=V(K,K)                                                       
      SUM=ZERO                                                          
      DO 280 J=K1,NV                                                    
      E(J)=V(K,J)                                                       
  280 SUM=E(J)*E(J)+SUM                                                 
      SUM=DSIGN(DSQRT(SUM),E(K1))                                       
      W1(K)=-SUM                                                        
      E(K1)=E(K1)+SUM                                                   
      V(K,K1)=E(K1)                                                     
      C=E(K1)*SUM                                                       
      IF(C.LE.ZERO) GO TO 340                                           
      SUMM=ZERO                                                         
      DO 320 I=K1,NV                                                    
      SUM=ZERO                                                          
      DO 290 J=K1,I                                                     
  290 SUM=V(J,I)*E(J)+SUM                                               
      IF(I.GE.NV) GO TO 310                                             
      IP1=I+1                                                           
      DO 300 J=IP1,NV                                                   
  300 SUM=V(I,J)*E(J)+SUM                                               
  310 W1(I)=SUM/C                                                       
  320 SUMM=E(I)*W1(I)+SUMM                                              
      W=SUMM*HALF/C                                                     
      DO 330 J=K1,NV                                                    
      W1(J)=E(J)*W-W1(J)                                                
      DO 330 I=K1,J                                                     
  330 V(I,J)=E(J)*W1(I)+E(I)*W1(J)+V(I,J)                               
  340 V(K,K)=C                                                          
  350 CONTINUE                                                          
  360 E(NV)=V(NV,NV)                                                    
      V(NV,NV)=ONE                                                      
      IF(NV.EQ.1) GO TO 510                                             
      E(NVM1)=V(NVM1,NVM1)                                              
      W1(NVM1)=V(NVM1,NV)                                               
      W1(NV)=ZERO                                                       
      V(NVM1,NVM1)=ONE                                                  
      V(NVM1,NV)=ZERO                                                   
      V(NV,NVM1)=ZERO                                                   
      IF(NV.EQ.2) GO TO 420                                             
      DO 410 L=1,NVM2                                                   
      K=NVM1-L                                                          
      K1=K+1                                                            
      C=-V(K,K)                                                         
      V(K,K)=ONE                                                        
      IF(C.GE.ZERO) GO TO 390                                           
      DO 380 J=K1,NV                                                    
      SUM=ZERO                                                          
      DO 370 I=K1,NV                                                    
  370 SUM=V(I,J)*V(K,I)+SUM                                             
      S=SUM/C                                                           
      DO 380 I=K1,NV                                                    
  380 V(I,J)=S*V(K,I)+V(I,J)                                            
  390 CONTINUE                                                          
      DO 400 I=K1,NV                                                    
      V(K,I)=ZERO                                                       
  400 V(I,K)=ZERO                                                       
  410 CONTINUE                                                          
  420 D=DABS(E(1))                                                      
      DO 430 J=2,NV                                                     
      IF(( DABS(W1(J-1))+DABS(E(J)) ).GT.D) D=DABS(W1(J-1))+DABS(E(J))  
  430 CONTINUE                                                          
      IF(D.EQ.ZERO) GO TO 510                                           
      D=D*EPS                                                           
      K=NV                                                              
  440 L=K                                                               
  450 IF(DABS(W1(L-1)).LT.D) GO TO 460                                  
      L=L-1                                                             
      IF(L.GT.1) GO TO 450                                              
  460 IF(L.EQ.K) GO TO 500                                              
      WWW=(E(K-1)+E(K))*HALF                                            
      R=E(K)-WWW                                                        
      Z=WWW-DSIGN(DSQRT(W1(K-1)*W1(K-1)+R*R),WWW)                       
      EE=E(L)-Z                                                         
      E(L)=EE                                                           
      FF=W1(L)                                                          
      R=DSQRT(EE*EE+FF*FF)                                              
      J=L                                                               
      GO TO 480                                                         
  470 R=DSQRT(E(J)*E(J)+W1(J)*W1(J))                                    
      W1(J-1)=S*R                                                       
      EE=C*E(J)                                                         
      FF=C*W1(J)                                                        
  480 C=E(J)/R                                                          
      S=W1(J)/R                                                         
      WWW=E(J+1)-Z                                                      
      E(J)=(FF*C+WWW*S)*S+EE+Z                                          
      E(J+1)=C*WWW-S*FF                                                 
      DO 490 I=1,NV                                                     
      R=V(I,J+1)                                                        
      V(I,J+1)=R*C-V(I,J)*S                                             
  490 V(I,J)=V(I,J)*C+R*S                                               
      J=J+1                                                             
      IF(J.LT.K) GO TO 470                                              
      W1(K-1)=E(K)*S                                                    
      E(K)=E(K)*C+Z                                                     
      GO TO 440                                                         
  500 K=K-1                                                             
      IF(K.GT.1) GO TO 440                                              
C        STRAIGHT INSERTION SORT OF EIGENVALUES                         
  510 J=NV                                                              
  520 CONTINUE                                                          
      DO 530 L=1,NV                                                     
  530 W1(L)=V(L,J-1)                                                    
      EK=E(J-1)                                                         
      DO 550 I=J,NV                                                     
      IF(DABS(E(I)).LE.DABS(EK)) GO TO 570                              
      DO 540 L=1,NV                                                     
  540 V(L,I-1)=V(L,I)                                                   
  550 E(I-1)=E(I)                                                       
      DO 560 L=1,NV                                                     
  560 V(L,NV)=W1(L)                                                     
      E(NV)=EK                                                          
      GO TO 590                                                         
  570 CONTINUE                                                          
      DO 580 L=1,NV                                                     
  580 V(L,I-1)=W1(L)                                                    
      E(I-1)=EK                                                         
  590 J=J-1                                                             
      IF(J.GT.1) GO TO 520                                              
C                                                                       
CC  NORM-ORTHOGONALIZATION OF EIGEN-VECTORS                             
      DO 620 I=1,N                                                      
      DO 600 K=1,NV                                                     
  600 W1(K)=U(I,K)                                                      
      DO 620 J=1,NV                                                     
      SUM=ZERO                                                          
      DO 610 K=1,NV                                                     
  610 SUM=V(K,J)*W1(K)+SUM                                              
      U(I,J)=SUM                                                        
  620 CONTINUE                                                          
C                                                                       
  630 CONTINUE                                                          
      DO 660 J=1,NV                                                     
      DO 640 K=1,N                                                      
  640 W1(K)=U(K,J)                                                      
      DO 660 I=1,J                                                      
      SUM=ZERO                                                          
      DO 650 K=1,N                                                      
  650 SUM=U(K,I)*W1(K)+SUM                                              
      V(I,J)=SUM                                                        
  660 CONTINUE                                                          
C                                                                       
      IF(V(1,1).LT.ZERO)      ILLIND=200                                
      IF(V(NV,NV).LT.ZERO)    ILLIND=200                                
      IF(V(1,1).LT.V(NV,NV))  ILLIND=200                                
      W2(1)=ONE/DSQRT(V(1,1))                                           
      IF(NV.EQ.1)             GO TO 710                                 
      V(1,2)=V(1,2)*W2(1)                                               
      W2(2)=ONE/DSQRT(  V(2,2)-V(1,2)**2  )                             
      IF(NV.EQ.2)             GO TO 710                                 
      DO 700 J=3,NV                                                     
      V(1,J)=V(1,J)*W2(1)                                               
      JM1=J-1                                                           
      DO 680 I=2,JM1                                                    
      SUM=ZERO                                                          
      IM1=I-1                                                           
      DO 670 L=1,IM1                                                    
  670 SUM=V(L,I)*V(L,J)+SUM                                             
      V(I,J)=(  V(I,J)-SUM  )*W2(I)                                     
  680 CONTINUE                                                          
      SUM=ZERO                                                          
      DO 690 L=1,JM1                                                    
  690 SUM=V(L,J)*V(L,J)+SUM                                             
      W2(J)=ONE/DSQRT(  V(J,J)-SUM  )                                   
  700 CONTINUE                                                          
C                                                                       
  710 CONTINUE                                                          
      C11=W2(1)                                                         
      DO 720 J=1,N                                                      
  720 V(J,1)=U(J,1)*C11                                                 
      IF(NV.EQ.1)  GO TO 760                                            
      DO 750 I=2,NV                                                     
      CII=W2(I)                                                         
      IM1=I-1                                                           
      DO 730 K=1,IM1                                                    
  730 W1(K)=V(K,I)                                                      
      DO 750 J=1,N                                                      
      SUM=ZERO                                                          
      DO 740 K=1,IM1                                                    
  740 SUM=V(J,K)*W1(K)+SUM                                              
      V(J,I)=(U(J,I)-SUM)*CII                                           
  750 CONTINUE                                                          
  760 ITERE=ITERE+1                                                     
      IF(ITERE.LT.ITELIM .AND. ERROR.GT.SEPS10)  GO TO 40               
      IF(ITERE.GE.ITELIM .AND. ERROR.GT.SEPS10)  GO TO 770              
C                                                                       
      ILL=0                                                             
      IF(ILLIND.EQ.200)                          GO TO 770              
      GO TO 780                                                         
  770 ILL=200                                                           
  780 CONTINUE                                                          
      ITER=ITERE                                                        
      IF(DABS(ESHIFT).LT.SEPS2) RETURN                                  
      DO 790 I=1,NE                                                     
      A(I,I)=A(I,I)+ESHIFT                                              
  790 E(I)=E(I)+ESHIFT                                                  
      DO 800 I=NEP1,N                                                   
  800 A(I,I)=A(I,I)+ESHIFT                                              
      RETURN                                                            
      END                                                               
      SUBROUTINE NGHOUD(AB,NNMAX,NN,NNE,NNV,EPS,IORD,ICHO,BD,E,V,ILL,   
     *                  W1,W2,W3,W4,W5,W6,W7)                           
CI--------------------------------------------------------------------I 
CI       SUBPROGRAM FOR GENERALIZED EIGEN-PROBLEM , A*V=B*V*E , BY    I 
CI  ( SIMULTANEOUSLY TRIANGULAR DECOMPOSITION )-                      I 
CI  (HOUSEHOLDER)-(BISECTION & NO-ROOT-QR)-(INVERSE-ITERATION) METHOD I 
CI-----------------------------------------------(VERSION-2,LEVEL-1)--I 
      IMPLICIT REAL*8 (A-H,O-Z)                                         
      DIMENSION AB(NNMAX,NN),BD(NN),V(NNMAX,NNV),E(NNE)                 
      DIMENSION W1(NN),W2(NN),W3(NN),W4(NN),W5(NN),W6(NN),W7(1)         
C     W7(I) IS NEVER USED IN VERSION-2.                                 
      DATA ZERO,ONE /0.D 0,1.D 0/                                       
      NMAX=NNMAX                                                        
      N=NN                                                              
      NE=NNE                                                            
      NV=NNV                                                            
      ILL=300                                                           
      IF(NMAX.LT.2.OR.N.GT.NMAX.OR.N.LT.2.OR.NE.LT.1.OR.NV.LT.0) RETURN 
      IF(NE.GT.N.OR.NV.GT.NE.OR.EPS.LE.ZERO.OR.EPS.GT.ONE)       RETURN 
      NM1=N-1                                                           
      DO 10 I=1,NM1                                                     
      IP1=I+1                                                           
      DO 10 J=IP1,N                                                     
      T=AB(J,I)                                                         
      AB(J,I)=AB(I,J)                                                   
   10 AB(I,J)=T                                                         
CC   CHOLESKY TRANSFORMATION OF A BY DECOMPOSED B                       
      IF(ICHO.EQ.1)          GO TO 60                                   
      ILL=100                                                           
      IF(BD(1).LT.EPS)       RETURN                                     
      BD(1)=ONE/DSQRT(BD(1))                                            
      AB(1,2)=AB(1,2)*BD(1)                                             
      PPP=BD(2)-AB(1,2)*AB(1,2)                                         
      IF(PPP.LT.EPS)         RETURN                                     
      BD(2)=ONE/DSQRT(PPP)                                              
      IF(N.EQ.2)             GO TO 60                                   
      DO 50 J=3,N                                                       
      AB(1,J)=AB(1,J)*BD(1)                                             
      JM1=J-1                                                           
      DO 30 I=2,JM1                                                     
      SUM=ZERO                                                          
      IM1=I-1                                                           
      DO 20 L=1,IM1                                                     
   20 SUM=AB(L,I)*AB(L,J)+SUM                                           
      AB(I,J)=(  AB(I,J)-SUM  )*BD(I)                                   
   30 CONTINUE                                                          
      SUM=ZERO                                                          
      DO 40 L=1,JM1                                                     
   40 SUM=AB(L,J)*AB(L,J)+SUM                                           
      PPP=BD(J)-SUM                                                     
      IF(PPP.LT.EPS)         RETURN                                     
      BD(J)=ONE/DSQRT(PPP)                                              
   50 CONTINUE                                                          
C                                                                       
   60 CONTINUE                                                          
      DO 70 J=1,N                                                       
   70 AB(J,1)=AB(J,1)*BD(1)                                             
      DO 90 I=2,N                                                       
      BDI=BD(I)                                                         
      IM1=I-1                                                           
      DO 90 J=I,N                                                       
      SUM=ZERO                                                          
      DO 80 K=1,IM1                                                     
   80 SUM=AB(K,I)*AB(J,K)+SUM                                           
      AB(J,I)=(AB(J,I)-SUM)*BDI                                         
   90 CONTINUE                                                          
C                                                                       
      AB(1,1)=AB(1,1)*BD(1)                                             
      DO 110 I=2,N                                                      
      SUM=ZERO                                                          
      IM1=I-1                                                           
      DO 100 K=1,IM1                                                    
  100 SUM=AB(K,1)*AB(K,I)+SUM                                           
      AB(I,1)=(AB(I,1)-SUM)*BD(I)                                       
  110 CONTINUE                                                          
C                                                                       
      DO 150 J=2,NM1                                                    
      JM1=J-1                                                           
      JP1=J+1                                                           
      SUM=ZERO                                                          
      DO 120 K=1,JM1                                                    
  120 SUM=AB(K,J)*AB(J,K)+SUM                                           
      AB(J,J)=(AB(J,J)-SUM)*BD(J)                                       
      DO 150 I=JP1,N                                                    
      SUM=ZERO                                                          
      DO 130 K=1,JM1                                                    
  130 SUM=AB(K,I)*AB(J,K)+SUM                                           
      IM1=I-1                                                           
      DO 140 K=J,IM1                                                    
  140 SUM=AB(K,J)*AB(K,I)+SUM                                           
      AB(I,J)=(AB(I,J)-SUM)*BD(I)                                       
  150 CONTINUE                                                          
      SUM=ZERO                                                          
      DO 160 K=1,NM1                                                    
  160 SUM=AB(K,N)*AB(N,K)+SUM                                           
      AB(N,N)=(AB(N,N)-SUM)*BD(N)                                       
C#  SOLVING STANDARD EIGEN-PROBLEM FOR TRANSFORMED A                    
      DO 170 I=1,NM1                                                    
      IP1=I+1                                                           
      DO 170 J=IP1,N                                                    
      T=AB(J,I)                                                         
      AB(J,I)=AB(I,J)                                                   
  170 AB(I,J)=T                                                         
      CALL NSHOUD(AB,NMAX,N,NE,NV,EPS,IORD,E,V,ILL,W1,W2,W3,W4,W5,W6,W7)
      IF(NV.EQ.0.OR.ILL.NE.0) RETURN                                    
C#  CONVERSION OF EIGEN-VECTORS( STANDARD FORM -> GENERALIZED FORM )    
      DO 190 I=1,NV                                                     
      V(N,I)=V(N,I)*BD(N)                                               
      DO 190 JJ=1,NM1                                                   
      J=N-JJ                                                            
      SUM=ZERO                                                          
      JP1=J+1                                                           
      DO 180 K=JP1,N                                                    
  180 SUM=AB(K,J)*V(K,I)+SUM                                            
      V(J,I)=(V(J,I)-SUM)*BD(J)                                         
  190 CONTINUE                                                          
      RETURN                                                            
      END                                                               
      SUBROUTINE NGJEND(AB,NNMAX,NN,NNE,NNV,EPS,BD,IUV,ITER,ESHIFT,     
     *                  E,V,U,ILL,W1,W2)                                
CI--------------------------------------------------------------------I 
CI       SUBPROGRAM FOR GENERALIZED EIGEN-PROBLEM , A*V=B*V*E , BY    I 
CI      (SIMULTANEOUSLY TRIANGULAR DECOMPOSITION)-(JENNINGS) METHOD   I 
CI-----------------------------------------------(VERSION-2,LEVEL-1)--I 
      IMPLICIT REAL*8 (A-H,O-Z)                                         
      DIMENSION AB(NNMAX,NN),BD(NN),E(NNE),V(NNMAX,NNV),U(NNMAX,NNV)    
      DIMENSION W1(NN),W2(NN)                                           
      DATA ZERO,ONE /0.D 0,1.D 0/                                       
      NMAX=NNMAX                                                        
      N=NN                                                              
      NE=NNE                                                            
      NV=NNV                                                            
      ILL=300                                                           
      IF(NMAX.LT.2.OR.N.GT.NMAX.OR.N.LT.2.OR.NE.LT.1.OR.NV.LT.1) RETURN 
      IF(NE.GT.N.OR.NV.LT.NE.OR.EPS.LE.ZERO.OR.EPS.GT.ONE)       RETURN 
      NM1=N-1                                                           
C   CHOLESKY TRASFORMATION OF A BY DECOMPOSED B                         
      DO 10 J=1,N                                                       
   10 AB(1,J)=AB(1,J)*BD(1)                                             
      DO 30 I=2,N                                                       
      BDI=BD(I)                                                         
      IM1=I-1                                                           
      DO 30 J=I,N                                                       
      SUM=ZERO                                                          
      DO 20 K=1,IM1                                                     
   20 SUM=AB(I,K)*AB(K,J)+SUM                                           
      AB(I,J)=(AB(I,J)-SUM)*BDI                                         
   30 CONTINUE                                                          
C                                                                       
      AB(1,1)=AB(1,1)*BD(1)                                             
      DO 50 I=2,N                                                       
      SUM=ZERO                                                          
      IM1=I-1                                                           
      DO 40 K=1,IM1                                                     
   40 SUM=AB(1,K)*AB(I,K)+SUM                                           
      AB(1,I)=(AB(1,I)-SUM)*BD(I)                                       
   50 CONTINUE                                                          
C                                                                       
      DO 90 J=2,NM1                                                     
      JM1=J-1                                                           
      JP1=J+1                                                           
      SUM=ZERO                                                          
      DO 60 K=1,JM1                                                     
   60 SUM=AB(K,J)*AB(J,K)+SUM                                           
      AB(J,J)=(AB(J,J)-SUM)*BD(J)                                       
      DO 90 I=JP1,N                                                     
      SUM=ZERO                                                          
      DO 70 K=1,JM1                                                     
   70 SUM=AB(K,J)*AB(I,K)+SUM                                           
      IM1=I-1                                                           
      DO 80 K=J,IM1                                                     
   80 SUM=AB(J,K)*AB(I,K)+SUM                                           
      AB(J,I)=(AB(J,I)-SUM)*BD(I)                                       
   90 CONTINUE                                                          
      SUM=ZERO                                                          
      DO 100 K=1,NM1                                                    
  100 SUM=AB(K,N)*AB(N,K)+SUM                                           
      AB(N,N)=(AB(N,N)-SUM)*BD(N)                                       
C   TRANSFORMATION OF INITIAL EIGEN-VECTORS                             
      IF(IUV.EQ.1)           GO TO 150                                  
      DO 130 I=1,NM1                                                    
      W2(I)=ONE/BD(I)                                                   
      IP1=I+1                                                           
      DO 110 K=IP1,N                                                    
  110 W2(K)=AB(K,I)                                                     
      DO 130 J=1,NV                                                     
      SUM=ZERO                                                          
      DO 120 K=I,N                                                      
  120 SUM=V(K,J)*W2(K)+SUM                                              
      U(I,J)=SUM                                                        
  130 CONTINUE                                                          
      BNN=ONE/BD(N)                                                     
      DO 140 J=1,NV                                                     
  140 U(N,J)=V(N,J)*BNN                                                 
C#  SOLVING STANDARD EIGEN-PROBLEM FOR TRANSFORMED A                    
  150 CALL NSJEND(AB,NMAX,N,NE,NV,EPS,ITER,ESHIFT,E,U,ILLE,W1,W2,V)     
C#  CONVERSION OF EIGEN-VECTORS( STANDARD FORM -> GENERALIZED FORM )    
      DO 170 I=1,NV                                                     
      V(N,I)=U(N,I)*BD(N)                                               
      DO 170 JJ=1,NM1                                                   
      J=N-JJ                                                            
      SUM=ZERO                                                          
      JP1=J+1                                                           
      DO 160 K=JP1,N                                                    
  160 SUM=AB(K,J)*V(K,I)+SUM                                            
      V(J,I)=(U(J,I)-SUM)*BD(J)                                         
  170 CONTINUE                                                          
      ILL=ILLE                                                          
      RETURN                                                            
      END                                                               
./ ADD NAME=MC
./ NUMBER NEW1=10,INCR=10
C***********************************************************************
C MONTE.FORT77(MONTE)                                                   
C                                                                       
C MONTE CALRO SIMULATION IN ECEPP WITH OR WITHOUT CUTOFF                
C BASED ON 'PERI.PMSGO.MC.FORT(MONTE)'                                  
C                                                                       
C THIS PROGRAM IS LINKED WITH                                           
C      MINIMA.FORT77(FEDERCS) FOR THE CUTOFF OPERATION                  
C      MINIMA.FORT77(FEDERNS) FOR  NO-CUTOFF OPERATION                  
C                                                                       
C INPUT                                                                 
C     5      : CONTROL PARAMETERS                                       
C     IOINIT : THE INITIAL ANGLES IN ECEPP FORMAT                       
C     IOREST : THE DATA FOR CONTINUING A PREVIOUS JOB                   
C     20     : PRECEP OUTPUT                                            
C     21     : ECEPP ENERGY PARAMETERS                                  
C OUTPUT                                                                
C     6      : SYSOUT DATA                                              
C     IOREST : THE DATA FOR CONTINUING A PREVIOUS JOB                   
C     IOERG  : OUTPUT OF ENERGY                                         
C     IOANG  : OUTPUT OF ANGLES                                         
C                                                                       
C CONTROL PARAMETERS                                                    
C     ISTART : = 0 FOR FRESH START; OTHERWISE CONTINUING JOB            
C     IECEPP : = 1 FOR ECEPP FORMAT OF INITIAL ANGLES;                  
C                  OTHERWISE NO FORMAT                                  
C     ICUT   : = 1 FOR CUTOFF; OTHERWISE NO CUTOFF                      
C     IXS    : A SEED FOR RANDOM NUMBER GENERATOR                       
C     TEMP   : TEMPERATURE                                              
C     ESMALL : THE LOWEST LIMIT OF EIGENVALUE (USUALLY = 10.0)          
C     FLUC   : THE COEFFICIENT OF THE STEP LENGTH (USUALLY =1.3)        
C     LOUTE  : OUTPUT OF ENERGY EVERY LOUTE STEPS                       
C     LOUTA  : OUTPUT OF ANGLES EVERY LOUTA STEPS                       
C     LLIST  : REVISION OF INTERACTION TABLE EVERY LLIST STEPS          
C     LMTR   : ACCEPTANCE RATIO IS AVERAGED FOR EACH LMTR STEPS         
C     LLTR   : REVISION OF HESSIAN EVERY LLTR STEPS                     
C     ACPL   : IF ACP < ACPL, HESSIAN IS REVISED                        
C     ITIMEL : CPU TIME LIMIT IN SECOND                                 
C     LTR    : LIMIT OF STEP                                            
C                                                                       
C ARRAY SIZE                                                            
C     MAXRES=28                                                         
C     MAXVAR=160                                                        
C     MAXMTR=2000                                                       
C********************************************************************** 
      IMPLICIT REAL*8(A-H,O-Z)                                          
C     PARAMETER (MAXRES=28 ,MAXVAR=160,MAXMTR=2000)                     
C     PARAMETER (MAXATM=436)                                            
CMSP  INCLUDE (MAXSIZE)                                                 
      INCLUDE '/labo/qclib/inspidas/common/maxsize'
      PARAMETER (PI=3.141 592 653 589 793D0,RAD=PI/180.D0)              
C     COMMON/NUMBER/ NUMATM,NUMVAR,NN2,NUMINT,NSS                       
C     COMMON/VARANG/ ANGLES(10,MAXRES),INDXV(MAXVAR),NUMRES             
C     COMMON/COORD/ CO(MAXATM,3)                                        
CMSP  INCLUDE (SIZE)                                                    
      INCLUDE '/labo/qclib/inspidas/common/size'
CMSP  INCLUDE (VARANG)                                                  
      INCLUDE '/labo/qclib/inspidas/common/varang'
CMSP  INCLUDE (EIGEN)                                                   
      INCLUDE '/labo/qclib/inspidas/common/eigen'
      COMMON/ENE000/ FT(5)                                              
C     DIMENSION VAR(MAXVAR),ANGT(MAXVAR),F(6),                          
C    &          IACP(MAXMTR),EIGVEC(MAXVAR,MAXVAR)                      
      DIMENSION ANGT(MAXVAR),F(6),                                      
     &          IACP(MAXMTR)                                            
      REAL*4 ANGS(MAXVAR)                                               
      REAL*4 XYZ(MAXATM,3)                                              
      INTEGER*4 IX,IXS                                                  
C-----------------------------------------------------------------------
C INPUT OF THE INFORMATION FOR THE SIMULATION                           
C-----------------------------------------------------------------------
C                                                                       
C READ CONTROL PARAMETERS                                               
C                                                                       
      READ(5,*) ISTART,IECEPP,ICUT,IXS                                  
      READ(5,*) TEMP,ESMALL,FLUC                                        
      READ(5,*) LOUTE,LOUTA,LLIST,LMTR                                  
      READ(5,*) ITIMEL,LTR,LLTR,ACPL                                    
      READ(5,*) IOINIT,IOREST,IOERG,IOANG                               
      WRITE(6,*) 'ISTART  ',ISTART                                      
      WRITE(6,*) 'IECEPP  ',IECEPP                                      
      WRITE(6,*) 'ICUT  ',ICUT                                          
      WRITE(6,*) 'IXS  ',IXS                                            
      WRITE(6,*) 'TEMP  ',TEMP                                          
      WRITE(6,*) 'ESMALL  ',ESMALL                                      
      WRITE(6,*) 'FLUC  ',FLUC                                          
      WRITE(6,*) 'LOUTE  ',LOUTE                                        
      WRITE(6,*) 'LOUTA  ',LOUTA                                        
      WRITE(6,*) 'LLIST  ',LLIST                                        
      WRITE(6,*) 'LMTR  ',LMTR                                          
      WRITE(6,*) 'ITIMEL  ',ITIMEL                                      
      WRITE(6,*) 'LTR  ',LTR                                            
      WRITE(6,*) 'LLTR  ',LLTR                                          
      WRITE(6,*) 'ACPL  ',ACPL                                          
      WRITE(6,*) 'IOINIT  ',IOINIT                                      
      WRITE(6,*) 'IOREST  ',IOREST                                      
      WRITE(6,*) 'IOERG  ',IOERG                                        
      WRITE(6,*) 'IOANG  ',IOANG                                        
      BETA=1.0D0/(1.987D-3*TEMP)                                        
C                                                                       
C READ PRECEP OUTPUT AND ENERGY PARAMETERS                              
C                                                                       
      CALL  INPUT                                                       
C                                                                       
C PREPAIR THE BOND INFORMATION                                          
C                                                                       
      CALL  PRESET(KMAX,LISTK,JANGLE,KANGLE,IBCHAR)                     
      CALL  PRESS2(JANGLE,KUNIT,IBCHAR,KSSPER,JSS,KSS,LSS)              
C-----------------------------------------------------------------------
C FOR A FRESH START (ISTART=0)                                          
C-----------------------------------------------------------------------
      IF(ISTART.EQ.0) THEN                                              
        IX=IXS                                                          
        NTR=0                                                           
        MTR=0                                                           
        NOUTE=0                                                         
        NOUTA=0                                                         
        NLIST=0                                                         
        NLTR=0                                                          
        IF(IECEPP .EQ. 1) THEN                                          
C READ A STARTING CONFORMAION (ECEPP FORMAT)                            
          DO 100 I = 1,NUMRES                                           
            READ(IOINIT,'(10F8.3)')(ANGLES(J,I),J=1,10)                 
  100     CONTINUE                                                      
          DO 110 I = 1,NUMVAR                                           
            J = INDXV(I)/100                                            
            K = INDXV(I) - 100*J                                        
            VAR(I) = ANGLES(K,J)*RAD                                    
  110     CONTINUE                                                      
        ELSE                                                            
C NO FORMAT                                                             
          READ(IOINIT) NNN                                              
          READ(IOINIT)(VAR(I),I=1,NUMVAR)                               
        ENDIF                                                           
C     PAIR LIST                                                         
        IF(ICUT .EQ. 1) THEN                                            
          CALL CUTOFF(VAR)                                              
          ICALC = 1                                                     
        ELSE                                                            
          CALL PAIR14                                                   
          ICALC = 2                                                     
        ENDIF                                                           
C     THE INITIAL ENERGY                                                
CMK     CALL ENERGY(VAR,ETOTAL)                                         
        CALL ENERGA(VAR,ETOTAL,CO,CHARGE)                               
        DO 120 I=1,5                                                    
          F(I+1) = FT(I)                                                
  120   CONTINUE                                                        
        F(1) = ETOTAL                                                   
C     THE INITIAL IACP IS ALL 'ACCEPTED'                                
        DO 130 I=1,LMTR                                                 
          IACP(I)=1                                                     
  130   CONTINUE                                                        
        NACP=LMTR                                                       
        ACP=1.0D0                                                       
C-----------------------------------------------------------------------
C FOR A CONTINUATION JOB (ISTART OTHER THAN 0)                          
C-----------------------------------------------------------------------
      ELSE                                                              
        READ(IOREST) IX,NTR,MTR,NOUTE,NOUTA,NLIST,NLTR,IACP,NACP,ACP,   
     &               ICALC                                              
        READ(IOREST) VAR,F,EIGVEC                                       
        WRITE(6,*)' IX NTR MTR NOUTE NOUTA NLIST NLTR NACP',            
     &            ' ACP  ICALC'                                         
        WRITE(6,*) IX,NTR,MTR,NOUTE,NOUTA,NLIST,NLTR,NACP,ACP,          
     &             ICALC                                                
        REWIND IOREST                                                   
C     PAIR LIST                                                         
        IF(ICUT .EQ. 1) THEN                                            
          CALL CUTOFF(VAR)                                              
        ELSE                                                            
          CALL PAIR14 (KMAX,LISTK,JANGLE,KANGLE)                        
        ENDIF                                                           
      ENDIF                                                             
C-----------------------------------------------------------------------
C TRIAL ANGLE AND TRIAL ENERGY ARE NOW CALCULATED                       
C ACCORDING TO ICALC                                                    
C-----------------------------------------------------------------------
  140 IF(ICALC .EQ. 1) THEN                                             
        CALL SAMPL1(VAR,ANGT,CR,IX,BETA,ESMALL,FLUC,EIGVEC,ETOTAL)      
        ICALC = 3                                                       
      ENDIF                                                             
      IF(ICALC .EQ. 2) THEN                                             
        CALL SAMPL2(VAR,ANGT,CR,IX,BETA,ESMALL,FLUC,EIGVEC,ETOTAL)      
        ICALC = 3                                                       
      ENDIF                                                             
      IF(ICALC .EQ. 3) THEN                                             
        CALL SAMPL3(VAR,ANGT,CR,IX,EIGVEC,ETOTAL)                       
      ENDIF                                                             
C                                                                       
C  UPDATE THE COUNT PARAMETERS                                          
C                                                                       
      NTR=NTR+1                                                         
      NLIST=NLIST+1                                                     
      NOUTE=NOUTE+1                                                     
      NOUTA=NOUTA+1                                                     
      NLTR=NLTR+1                                                       
      MTR=MOD(MTR,LMTR) + 1                                             
C-----------------------------------------------------------------------
C  CHECK WHTHER THE TRIAL STEP IS ACCEPTED                              
C-----------------------------------------------------------------------
C                                                                       
C WHEN ACCEPTED                                                         
C                                                                       
      CRT = DEXP(BETA*(F(1)-ETOTAL))                                    
      IF(CR .LT. CRT) THEN                                              
C                                                                       
C     UPDATE ANGLES AND ENERGY                                          
C                                                                       
        DO 150 I=1,NUMVAR                                               
          VAR(I)=ANGT(I)                                                
  150   CONTINUE                                                        
        DO 160 I=1,5                                                    
          F(I+1) = FT(I)                                                
  160   CONTINUE                                                        
        F(1) = ETOTAL                                                   
C                                                                       
C     UPDATE THE ACCEPTANCE RATIO                                       
C                                                                       
        IF(IACP(MTR).EQ.0) THEN                                         
            NACP=NACP+1                                                 
            ACP=DFLOAT(NACP)/DFLOAT(LMTR)                               
            IACP(MTR)=1                                                 
        ENDIF                                                           
C                                                                       
C WHEN REJECTED                                                         
C                                                                       
      ELSE                                                              
C                                                                       
C     UPDATE THE ACCEPTANCE RATIO                                       
C                                                                       
        IF(IACP(MTR).EQ.1) THEN                                         
          NACP=NACP-1                                                   
          ACP=DFLOAT(NACP)/DFLOAT(LMTR)                                 
          IACP(MTR)=0                                                   
        ENDIF                                                           
      ENDIF                                                             
C-----------------------------------------------------------------------
C  CHECK PRINT OPTION                                                   
C-----------------------------------------------------------------------
C                                                                       
C     OUTPUT OF ENERGY                                                  
C                                                                       
      IF(NOUTE .GE. LOUTE) THEN                                         
        WRITE(IOERG) NTR,ACP,(F(I),I=1,6)                               
        IF(NTR .EQ. (NTR/100)*100) THEN                                 
          WRITE(6,'(I8,F8.3,3X,6D12.5)') NTR,ACP,(F(I),I=1,6)           
        ENDIF                                                           
        NOUTE = 0                                                       
      ENDIF                                                             
C                                                                       
C     OUTPUT OF ANGLES IN SINGLE PRECISION                              
C                                                                       
      IF(NOUTA .GE. LOUTA) THEN                                         
        DO 170 I = 1,NUMVAR                                             
          ANGS(I) = SNGL(VAR(I))                                        
  170   CONTINUE                                                        
        WRITE(IOANG) NTR                                                
        WRITE(IOANG) (ANGS(I),I=1,NUMVAR)                               
        NOUTA = 0                                                       
      ENDIF                                                             
C                                                                       
C     OUTPUT OF COORDINATE IN SINGLE PRECISION                          
C                                                                       
      IF(NTR .EQ. (NTR/100)*100 ) THEN                                  
        DO 171 I = 1,NUMATM                                             
          XYZ(I,1) = SNGL(CO(I,1))                                      
          XYZ(I,2) = SNGL(CO(I,2))                                      
          XYZ(I,3) = SNGL(CO(I,3))                                      
  171   CONTINUE                                                        
        WRITE(15) ( (XYZ(I,J),J=1,3), I=1,NUMATM )                      
      ENDIF                                                             
C-----------------------------------------------------------------------
C WHAT SHOULD BE NEXT STEP?                                             
C-----------------------------------------------------------------------
C                                                                       
C     CHECK CPU TIME LIMIT                                              
C                                                                       
      CALL CLOCK(ICPU)                                                  
      IF(ICPU .GE. ITIMEL) THEN                                         
        WRITE(IOREST) IX,NTR,MTR,NOUTE,NOUTA,NLIST,NLTR,IACP,NACP,ACP,  
     &                ICALC                                             
        WRITE(IOREST) VAR,F,EIGVEC                                      
        WRITE(6,*) ' END BY CPU TIME LIMIT'                             
        WRITE(6,*) 'NTR  ',NTR,'ACP  ',ACP                              
        STOP                                                            
      ENDIF                                                             
C                                                                       
C     CHECK THE TOTAL NUMBER OF TRIAL STEPS                             
C                                                                       
      IF(NTR .GE. LTR) THEN                                             
        WRITE(IOREST) IX,NTR,MTR,NOUTE,NOUTA,NLIST,NLTR,IACP,NACP,ACP,  
     &                ICALC                                             
        WRITE(IOREST) VAR,F,EIGVEC                                      
        WRITE(6,*) ' END BY STEP NUMBER LIMIT'                          
        WRITE(6,*) 'NTR  ',NTR,'ACP  ',ACP                              
        STOP                                                            
      ENDIF                                                             
C                                                                       
C     FIND ICALC (UPDATE PAIR TABLE? UPDATE SECOND DERIVATIVE?)         
C                                                                       
C     PAIR TABLE IS UPDATED                                             
      IF(ICUT .EQ. 1) THEN                                              
        IF(NLIST .GE. LLIST) THEN                                       
          ICALC = 1                                                     
          NLIST = 0                                                     
        ENDIF                                                           
      ENDIF                                                             
C     SECOND DERIVATIVE IS UPDATED                                      
      IF(ACP .LT. ACPL .OR. NLTR .GE. LLTR) THEN                        
        ICALC = 2                                                       
        NLTR = 0                                                        
      ENDIF                                                             
      GO TO 140                                                         
      END                                                               
C***********************************************************************
C SAMPLING ROUTINE                                                      
C***********************************************************************
      SUBROUTINE SAMPL1(VAR,ANGT,CR,IX,BETA,ESMALL,FLUC,EIGVEC,ETOTAL)  
      IMPLICIT REAL*8 (A-H,O-Z)                                         
C     PARAMETER (MAXVAR=160,MAXNN2=MAXVAR*(MAXVAR+1)/2)                 
CMSP  INCLUDE (MAXSIZE)                                                 
      INCLUDE '/labo/qclib/inspidas/common/maxsize'
CMSP  INCLUDE (SIZE)                                                    
      INCLUDE '/labo/qclib/inspidas/common/size'
CMSP  INCLUDE (EIGEN)                                                   
      INCLUDE '/labo/qclib/inspidas/common/eigen'
CMSP  INCLUDE (VARANG)                                                  
      INCLUDE '/labo/qclib/inspidas/common/varang'
C     COMMON/NUMBER/ NUMATM,NUMVAR,NN2,NUMINT,NSS                       
      COMMON/ENE000/ FT(5)                                              
      INTEGER*4 IX                                                      
      REAL*4 A(MAXVAR+1)                                                
      DIMENSION G(MAXPAIR),                                             
     &          ANGT(MAXVAR),                                           
     &          VW(MAXVAR*15),IVW(MAXVAR*7)                             
C                                                                       
C UPDATE THE PAIR INTERACTION TABLE                                     
C                                                                       
      CALL CUTOFF(VAR)                                                  
C-----------------------------------------------------------------------
C ENTRY OF SAMPL2                                                       
C-----------------------------------------------------------------------
      ENTRY SAMPL2(VAR,ANGT,CR,IX,BETA,ESMALL,FLUC,EIGVEC,ETOTAL)       
C                                                                       
C UPDATE THE SECOND DERIVATIVE MATRIX                                   
C                                                                       
CCCCC                                                                   
C     CALL CLOCK(I1)                                                    
      CALL DERVTV(VAR,ETOTAL,EIGVAL,G)                                  
C     CALL CLOCK(I2)                                                    
C     I3=I2-I1                                                          
C     WRITE(6,*) 'TIME FOR DERVTV ',I3                                  
CCCCC                                                                   
C                                                                       
C EIGENVALUE AND EIGENVECTOR FOR G                                      
C                                                                       
CCCCC                                                                   
C     CALL CLOCK(I1)                                                    
      CALL DVSEG2(G,NUMVAR,-NUMVAR,-1.0D0,EIGVAL,                       
    >                 EIGVEC,MAXVAR,VW,IVW,ICON)                        
C     CALL CLOCK(I2)                                                    
C     I3=I2-I1                                                          
C     WRITE(6,*) 'TIME FOR DVSEG2 ',I3                                  
CCCCC                                                                   
      IF(ICON .NE. 0) THEN                                              
        WRITE(6,*) ' STOPPED AT DVSEG2 BECAUSE ICON=', ICON             
        STOP                                                            
      ENDIF                                                             
C                                                                       
C STEP SIZE                                                             
C                                                                       
      RVAR = DFLOAT(NUMVAR)                                             
      SIG=2.0D0*FLUC*DSQRT(3.0D0/BETA/RVAR)                             
      SQRE = DSQRT(ESMALL)                                              
      DO 100 I=1,NUMVAR                                                 
        IF(DABS(EIGVAL(I)).GE.ESMALL) THEN                              
          EIGVAL(I)=DSQRT(DABS(EIGVAL(I)))                              
        ELSE                                                            
          EIGVAL(I)=SQRE                                                
        ENDIF                                                           
  100 CONTINUE                                                          
      DO 110 I=1,NUMVAR                                                 
        DO 110 J=1,NUMVAR                                               
          EIGVEC(I,J)=SIG*EIGVEC(I,J)/EIGVAL(J)                         
  110 CONTINUE                                                          
C-----------------------------------------------------------------------
C ENTRY OF SAMPL3                                                       
C-----------------------------------------------------------------------
      ENTRY SAMPL3(VAR,ANGT,CR,IX,EIGVEC,ETOTAL)                        
C                                                                       
C RANDOM NUMBER                                                         
C                                                                       
      CALL RANU2(IX,A,NUMVAR+1,ICON)                                    
      CR=DBLE(A(NUMVAR+1))                                              
C                                                                       
C TRIAL ANGLES                                                          
C                                                                       
      DO 120 I=1,NUMVAR                                                 
        ANGT(I)=VAR(I)                                                  
        DO 120 J=1,NUMVAR                                               
          ANGT(I)=ANGT(I)+(DBLE(A(J))-0.5D0)*EIGVEC(I,J)                
  120 CONTINUE                                                          
C                                                                       
C ENERGY                                                                
C                                                                       
CCCCCC                                                                  
C     CALL CLOCK(I1)                                                    
      CALL ENERGY(ANGT,ETOTAL)                                          
C     CALL CLOCK(I2)                                                    
C     I3=I2-I1                                                          
C     WRITE(6,*) 'TIME FOR ENERGY ',I3                                  
CCCCCCC                                                                 
C                                                                       
      RETURN                                                            
      END                                                               
./ ADD NAME=MCMAIN
./ NUMBER NEW1=10,INCR=10
C***********************************************************************
C MONTE.FORT77(MONTE)                                                   
C                                                                       
C MONTE CALRO SIMULATION IN ECEPP WITH OR WITHOUT CUTOFF                
C BASED ON 'PERI.PMSGO.MC.FORT(MONTE)'                                  
C                                                                       
C THIS PROGRAM IS LINKED WITH                                           
C      MINIMA.FORT77(FEDERCS) FOR THE CUTOFF OPERATION                  
C      MINIMA.FORT77(FEDERNS) FOR  NO-CUTOFF OPERATION                  
C                                                                       
C INPUT                                                                 
C     5      : CONTROL PARAMETERS                                       
C     IOINIT : THE INITIAL ANGLES IN ECEPP FORMAT                       
C     IOREST : THE DATA FOR CONTINUING A PREVIOUS JOB                   
C     20     : PRECEP OUTPUT                                            
C     21     : ECEPP ENERGY PARAMETERS                                  
C OUTPUT                                                                
C     6      : SYSOUT DATA                                              
C     IOREST : THE DATA FOR CONTINUING A PREVIOUS JOB                   
C     IOERG  : OUTPUT OF ENERGY                                         
C     IOANG  : OUTPUT OF ANGLES                                         
C                                                                       
C CONTROL PARAMETERS                                                    
C     ISTART : = 0 FOR FRESH START; OTHERWISE CONTINUING JOB            
C     IECEPP : = 1 FOR ECEPP FORMAT OF INITIAL ANGLES;                  
C                  OTHERWISE NO FORMAT                                  
C     ICUT   : = 1 FOR CUTOFF; OTHERWISE NO CUTOFF                      
C     IXS    : A SEED FOR RANDOM NUMBER GENERATOR                       
C     TEMP   : TEMPERATURE                                              
C     ESMALL : THE LOWEST LIMIT OF EIGENVALUE (USUALLY = 10.0)          
C     FLUC   : THE COEFFICIENT OF THE STEP LENGTH (USUALLY =1.3)        
C     LOUTE  : OUTPUT OF ENERGY EVERY LOUTE STEPS                       
C     LOUTA  : OUTPUT OF ANGLES EVERY LOUTA STEPS                       
C     LLIST  : REVISION OF INTERACTION TABLE EVERY LLIST STEPS          
C     LMTR   : ACCEPTANCE RATIO IS AVERAGED FOR EACH LMTR STEPS         
C     LLTR   : REVISION OF HESSIAN EVERY LLTR STEPS                     
C     ACPL   : IF ACP < ACPL, HESSIAN IS REVISED                        
C     ITIMEL : CPU TIME LIMIT IN SECOND                                 
C     LTR    : LIMIT OF STEP                                            
C                                                                       
C ARRAY SIZE                                                            
C     MAXRES=28                                                         
C     MAXVAR=160                                                        
C     MAXMTR=2000                                                       
C********************************************************************** 
      IMPLICIT REAL*8(A-H,O-Z)                                          
      PARAMETER (MAXRES=28 ,MAXVAR=160,MAXMTR=2000)                     
      PARAMETER (MAXATM=436)                                            
      PARAMETER (PI=3.141 592 653 589 793D0,RAD=PI/180.D0)              
      COMMON/NUMBER/ NUMATM,NUMVAR,NN2,NUMINT,NSS                       
      COMMON/VARANG/ ANGLES(10,MAXRES),INDXV(MAXVAR),NUMRES             
      COMMON/COORD/ CO(MAXATM,3)                                        
      COMMON/ENE000/ FT(5)                                              
      DIMENSION ANG(MAXVAR),ANGT(MAXVAR),F(6),                          
     &          IACP(MAXMTR),EV(MAXVAR,MAXVAR)                          
      REAL*4 ANGS(MAXVAR)                                               
      REAL*4 XYZ(MAXATM,3)                                              
      INTEGER*4 IX,IXS                                                  
C-----------------------------------------------------------------------
C INPUT OF THE INFORMATION FOR THE SIMULATION                           
C-----------------------------------------------------------------------
C                                                                       
C READ CONTROL PARAMETERS                                               
C                                                                       
      READ(5,*) ISTART,IECEPP,ICUT,IXS                                  
      READ(5,*) TEMP,ESMALL,FLUC                                        
      READ(5,*) LOUTE,LOUTA,LLIST,LMTR                                  
      READ(5,*) ITIMEL,LTR,LLTR,ACPL                                    
      READ(5,*) IOINIT,IOREST,IOERG,IOANG                               
      WRITE(6,*) 'ISTART  ',ISTART                                      
      WRITE(6,*) 'IECEPP  ',IECEPP                                      
      WRITE(6,*) 'ICUT  ',ICUT                                          
      WRITE(6,*) 'IXS  ',IXS                                            
      WRITE(6,*) 'TEMP  ',TEMP                                          
      WRITE(6,*) 'ESMALL  ',ESMALL                                      
      WRITE(6,*) 'FLUC  ',FLUC                                          
      WRITE(6,*) 'LOUTE  ',LOUTE                                        
      WRITE(6,*) 'LOUTA  ',LOUTA                                        
      WRITE(6,*) 'LLIST  ',LLIST                                        
      WRITE(6,*) 'LMTR  ',LMTR                                          
      WRITE(6,*) 'ITIMEL  ',ITIMEL                                      
      WRITE(6,*) 'LTR  ',LTR                                            
      WRITE(6,*) 'LLTR  ',LLTR                                          
      WRITE(6,*) 'ACPL  ',ACPL                                          
      WRITE(6,*) 'IOINIT  ',IOINIT                                      
      WRITE(6,*) 'IOREST  ',IOREST                                      
      WRITE(6,*) 'IOERG  ',IOERG                                        
      WRITE(6,*) 'IOANG  ',IOANG                                        
      BETA=1.0D0/(1.987D-3*TEMP)                                        
C                                                                       
C READ PRECEP OUTPUT AND ENERGY PARAMETERS                              
C                                                                       
      CALL  INPUT                                                       
C                                                                       
C PREPAIR THE BOND INFORMATION                                          
C                                                                       
      CALL  PRESET                                                      
C-----------------------------------------------------------------------
C FOR A FRESH START (ISTART=0)                                          
C-----------------------------------------------------------------------
      IF(ISTART.EQ.0) THEN                                              
        IX=IXS                                                          
        NTR=0                                                           
        MTR=0                                                           
        NOUTE=0                                                         
        NOUTA=0                                                         
        NLIST=0                                                         
        NLTR=0                                                          
        IF(IECEPP .EQ. 1) THEN                                          
C READ A STARTING CONFORMAION (ECEPP FORMAT)                            
          DO 100 I = 1,NUMRES                                           
            READ(IOINIT,'(10F8.3)')(ANGLES(J,I),J=1,10)                 
  100     CONTINUE                                                      
          DO 110 I = 1,NUMVAR                                           
            J = INDXV(I)/100                                            
            K = INDXV(I) - 100*J                                        
            ANG(I) = ANGLES(K,J)*RAD                                    
  110     CONTINUE                                                      
        ELSE                                                            
C NO FORMAT                                                             
          READ(IOINIT) NNN                                              
          READ(IOINIT)(ANG(I),I=1,NUMVAR)                               
        ENDIF                                                           
C     PAIR LIST                                                         
        IF(ICUT .EQ. 1) THEN                                            
          CALL CUTOFF(ANG)                                              
          ICALC = 1                                                     
        ELSE                                                            
          CALL PAIR14                                                   
          ICALC = 2                                                     
        ENDIF                                                           
C     THE INITIAL ENERGY                                                
        CALL ENERGY(ANG,ETOTAL)                                         
        DO 120 I=1,5                                                    
          F(I+1) = FT(I)                                                
  120   CONTINUE                                                        
        F(1) = ETOTAL                                                   
C     THE INITIAL IACP IS ALL 'ACCEPTED'                                
        DO 130 I=1,LMTR                                                 
          IACP(I)=1                                                     
  130   CONTINUE                                                        
        NACP=LMTR                                                       
        ACP=1.0D0                                                       
C-----------------------------------------------------------------------
C FOR A CONTINUATION JOB (ISTART OTHER THAN 0)                          
C-----------------------------------------------------------------------
      ELSE                                                              
        READ(IOREST) IX,NTR,MTR,NOUTE,NOUTA,NLIST,NLTR,IACP,NACP,ACP,   
     &               ICALC                                              
        READ(IOREST) ANG,F,EV                                           
        WRITE(6,*)' IX NTR MTR NOUTE NOUTA NLIST NLTR NACP',            
     &            ' ACP  ICALC'                                         
        WRITE(6,*) IX,NTR,MTR,NOUTE,NOUTA,NLIST,NLTR,NACP,ACP,          
     &             ICALC                                                
        REWIND IOREST                                                   
C     PAIR LIST                                                         
        IF(ICUT .EQ. 1) THEN                                            
          CALL CUTOFF(ANG)                                              
        ELSE                                                            
          CALL PAIR14                                                   
        ENDIF                                                           
      ENDIF                                                             
C-----------------------------------------------------------------------
C TRIAL ANGLE AND TRIAL ENERGY ARE NOW CALCULATED                       
C ACCORDING TO ICALC                                                    
C-----------------------------------------------------------------------
  140 IF(ICALC .EQ. 1) THEN                                             
        CALL SAMPL1(ANG,ANGT,CR,IX,BETA,ESMALL,FLUC,EV,ETOTAL)          
        ICALC = 3                                                       
      ENDIF                                                             
      IF(ICALC .EQ. 2) THEN                                             
        CALL SAMPL2(ANG,ANGT,CR,IX,BETA,ESMALL,FLUC,EV,ETOTAL)          
        ICALC = 3                                                       
      ENDIF                                                             
      IF(ICALC .EQ. 3) THEN                                             
        CALL SAMPL3(ANG,ANGT,CR,IX,EV,ETOTAL)                           
      ENDIF                                                             
C                                                                       
C  UPDATE THE COUNT PARAMETERS                                          
C                                                                       
      NTR=NTR+1                                                         
      NLIST=NLIST+1                                                     
      NOUTE=NOUTE+1                                                     
      NOUTA=NOUTA+1                                                     
      NLTR=NLTR+1                                                       
      MTR=MOD(MTR,LMTR) + 1                                             
C-----------------------------------------------------------------------
C  CHECK WHTHER THE TRIAL STEP IS ACCEPTED                              
C-----------------------------------------------------------------------
C                                                                       
C WHEN ACCEPTED                                                         
C                                                                       
      CRT = DEXP(BETA*(F(1)-ETOTAL))                                    
      IF(CR .LT. CRT) THEN                                              
C                                                                       
C     UPDATE ANGLES AND ENERGY                                          
C                                                                       
        DO 150 I=1,NUMVAR                                               
          ANG(I)=ANGT(I)                                                
  150   CONTINUE                                                        
        DO 160 I=1,5                                                    
          F(I+1) = FT(I)                                                
  160   CONTINUE                                                        
        F(1) = ETOTAL                                                   
C                                                                       
C     UPDATE THE ACCEPTANCE RATIO                                       
C                                                                       
        IF(IACP(MTR).EQ.0) THEN                                         
            NACP=NACP+1                                                 
            ACP=DFLOAT(NACP)/DFLOAT(LMTR)                               
            IACP(MTR)=1                                                 
        ENDIF                                                           
C                                                                       
C WHEN REJECTED                                                         
C                                                                       
      ELSE                                                              
C                                                                       
C     UPDATE THE ACCEPTANCE RATIO                                       
C                                                                       
        IF(IACP(MTR).EQ.1) THEN                                         
          NACP=NACP-1                                                   
          ACP=DFLOAT(NACP)/DFLOAT(LMTR)                                 
          IACP(MTR)=0                                                   
        ENDIF                                                           
      ENDIF                                                             
C-----------------------------------------------------------------------
C  CHECK PRINT OPTION                                                   
C-----------------------------------------------------------------------
C                                                                       
C     OUTPUT OF ENERGY                                                  
C                                                                       
      IF(NOUTE .GE. LOUTE) THEN                                         
        WRITE(IOERG) NTR,ACP,(F(I),I=1,6)                               
        IF(NTR .EQ. (NTR/100)*100) THEN                                 
          WRITE(6,'(I8,F8.3,3X,6D12.5)') NTR,ACP,(F(I),I=1,6)           
        ENDIF                                                           
        NOUTE = 0                                                       
      ENDIF                                                             
C                                                                       
C     OUTPUT OF ANGLES IN SINGLE PRECISION                              
C                                                                       
      IF(NOUTA .GE. LOUTA) THEN                                         
        DO 170 I = 1,NUMVAR                                             
          ANGS(I) = SNGL(ANG(I))                                        
  170   CONTINUE                                                        
        WRITE(IOANG) NTR                                                
        WRITE(IOANG) (ANGS(I),I=1,NUMVAR)                               
        NOUTA = 0                                                       
      ENDIF                                                             
C                                                                       
C     OUTPUT OF COORDINATE IN SINGLE PRECISION                          
C                                                                       
      IF(NTR .EQ. (NTR/100)*100 ) THEN                                  
        DO 171 I = 1,NUMATM                                             
          XYZ(I,1) = SNGL(CO(I,1))                                      
          XYZ(I,2) = SNGL(CO(I,2))                                      
          XYZ(I,3) = SNGL(CO(I,3))                                      
  171   CONTINUE                                                        
        WRITE(15) ( (XYZ(I,J),J=1,3), I=1,NUMATM )                      
      ENDIF                                                             
C-----------------------------------------------------------------------
C WHAT SHOULD BE NEXT STEP?                                             
C-----------------------------------------------------------------------
C                                                                       
C     CHECK CPU TIME LIMIT                                              
C                                                                       
      CALL CLOCK(ICPU)                                                  
      IF(ICPU .GE. ITIMEL) THEN                                         
        WRITE(IOREST) IX,NTR,MTR,NOUTE,NOUTA,NLIST,NLTR,IACP,NACP,ACP,  
     &                ICALC                                             
        WRITE(IOREST) ANG,F,EV                                          
        WRITE(6,*) ' END BY CPU TIME LIMIT'                             
        WRITE(6,*) 'NTR  ',NTR,'ACP  ',ACP                              
        STOP                                                            
      ENDIF                                                             
C                                                                       
C     CHECK THE TOTAL NUMBER OF TRIAL STEPS                             
C                                                                       
      IF(NTR .GE. LTR) THEN                                             
        WRITE(IOREST) IX,NTR,MTR,NOUTE,NOUTA,NLIST,NLTR,IACP,NACP,ACP,  
     &                ICALC                                             
        WRITE(IOREST) ANG,F,EV                                          
        WRITE(6,*) ' END BY STEP NUMBER LIMIT'                          
        WRITE(6,*) 'NTR  ',NTR,'ACP  ',ACP                              
        STOP                                                            
      ENDIF                                                             
C                                                                       
C     FIND ICALC (UPDATE PAIR TABLE? UPDATE SECOND DERIVATIVE?)         
C                                                                       
C     PAIR TABLE IS UPDATED                                             
      IF(ICUT .EQ. 1) THEN                                              
        IF(NLIST .GE. LLIST) THEN                                       
          ICALC = 1                                                     
          NLIST = 0                                                     
        ENDIF                                                           
      ENDIF                                                             
C     SECOND DERIVATIVE IS UPDATED                                      
      IF(ACP .LT. ACPL .OR. NLTR .GE. LLTR) THEN                        
        ICALC = 2                                                       
        NLTR = 0                                                        
      ENDIF                                                             
      GO TO 140                                                         
      END                                                               
C***********************************************************************
C SAMPLING ROUTINE                                                      
C***********************************************************************
      SUBROUTINE SAMPL1(ANG,ANGT,CR,IX,BETA,ESMALL,FLUC,EV,ETOTAL)      
      IMPLICIT REAL*8 (A-H,O-Z)                                         
      PARAMETER (MAXVAR=160,MAXNN2=MAXVAR*(MAXVAR+1)/2)                 
      COMMON/NUMBER/ NUMATM,NUMVAR,NN2,NUMINT,NSS                       
      COMMON/ENE000/ FT(5)                                              
      INTEGER*4 IX                                                      
      REAL*4 A(MAXVAR+1)                                                
      DIMENSION EV(MAXVAR,MAXVAR),G(MAXNN2),                            
     &          ANG(MAXVAR),ANGT(MAXVAR),                               
     &          E(MAXVAR),VW(MAXVAR*15),IVW(MAXVAR*7)                   
C                                                                       
C UPDATE THE PAIR INTERACTION TABLE                                     
C                                                                       
      CALL CUTOFF(ANG)                                                  
C-----------------------------------------------------------------------
C ENTRY OF SAMPL2                                                       
C-----------------------------------------------------------------------
      ENTRY SAMPL2(ANG,ANGT,CR,IX,BETA,ESMALL,FLUC,EV,ETOTAL)           
C                                                                       
C UPDATE THE SECOND DERIVATIVE MATRIX                                   
C                                                                       
CCCCC                                                                   
C     CALL CLOCK(I1)                                                    
      CALL DERVTV(ANG,ETOTAL,E,G)                                       
C     CALL CLOCK(I2)                                                    
C     I3=I2-I1                                                          
C     WRITE(6,*) 'TIME FOR DERVTV ',I3                                  
CCCCC                                                                   
C                                                                       
C EIGENVALUE AND EIGENVECTOR FOR G                                      
C                                                                       
CCCCC                                                                   
C     CALL CLOCK(I1)                                                    
      CALL DVSEG2(G,NUMVAR,-NUMVAR,-1.0D0,E,EV,MAXVAR,VW,IVW,ICON)      
C     CALL CLOCK(I2)                                                    
C     I3=I2-I1                                                          
C     WRITE(6,*) 'TIME FOR DVSEG2 ',I3                                  
CCCCC                                                                   
      IF(ICON .NE. 0) THEN                                              
        WRITE(6,*) ' STOPPED AT DVSEG2 BECAUSE ICON=', ICON             
        STOP                                                            
      ENDIF                                                             
C                                                                       
C STEP SIZE                                                             
C                                                                       
      RVAR = DFLOAT(NUMVAR)                                             
      SIG=2.0D0*FLUC*DSQRT(3.0D0/BETA/RVAR)                             
      SQRE = DSQRT(ESMALL)                                              
      DO 100 I=1,NUMVAR                                                 
        IF(DABS(E(I)).GE.ESMALL) THEN                                   
          E(I)=DSQRT(DABS(E(I)))                                        
        ELSE                                                            
          E(I)=SQRE                                                     
        ENDIF                                                           
  100 CONTINUE                                                          
      DO 110 I=1,NUMVAR                                                 
        DO 110 J=1,NUMVAR                                               
          EV(I,J)=SIG*EV(I,J)/E(J)                                      
  110 CONTINUE                                                          
C-----------------------------------------------------------------------
C ENTRY OF SAMPL3                                                       
C-----------------------------------------------------------------------
      ENTRY SAMPL3(ANG,ANGT,CR,IX,EV,ETOTAL)                            
C                                                                       
C RANDOM NUMBER                                                         
C                                                                       
      CALL RANU2(IX,A,NUMVAR+1,ICON)                                    
      CR=DBLE(A(NUMVAR+1))                                              
C                                                                       
C TRIAL ANGLES                                                          
C                                                                       
      DO 120 I=1,NUMVAR                                                 
        ANGT(I)=ANG(I)                                                  
        DO 120 J=1,NUMVAR                                               
          ANGT(I)=ANGT(I)+(DBLE(A(J))-0.5D0)*EV(I,J)                    
  120 CONTINUE                                                          
C                                                                       
C ENERGY                                                                
C                                                                       
CCCCCC                                                                  
C     CALL CLOCK(I1)                                                    
      CALL ENERGY(ANGT,ETOTAL)                                          
C     CALL CLOCK(I2)                                                    
C     I3=I2-I1                                                          
C     WRITE(6,*) 'TIME FOR ENERGY ',I3                                  
CCCCCCC                                                                 
C                                                                       
      RETURN                                                            
      END                                                               
./ ADD NAME=MINIM
./ NUMBER NEW1=10,INCR=10
C***********************************************************************
      SUBROUTINE MINIM                                                  
C***********************************************************************
C        MAIN SUBROUTINE FOR MINIMIZATION                               
C********************************************************************** 
C*                                                                    * 
C* <<REGULARIZATION OF PDB DATA FOR FEDER PROGRAM>>                   * 
C*                                                                    * 
C*    CONFORMATIONAL ENERGY MINIMIZATION WITH DISTANCE CONSTRAINTS    * 
C*      * DISTANCE CONSTRAINTS ARE GIVEN FROM ATOMIC COORDINATES      * 
C*      * ALL INTERACTABLE ATOM PAIRS ARE CONSIDERED IN               * 
C*        CONFORMATIONAL ENERGY CALCULTION                            * 
C*                                                                    * 
C*        VERSION     1.0                  (DEC  1986)                * 
C*        VERSION     2.0                  (AUG  1987)                * 
C*                                                                    * 
C********************************************************************** 
C*       <INPUT FILES>                                                  
C*                                                                      
C*     31:    PRECEP OUTPUT DATA                                        
C*     33:    ENERGY PARAMETERS                                         
C*     35:    INITIAL ANGLES IN UNITS OF DEGREES (FORMATTED)            
C*     37:    INITIAL ANGLES IN UNITS OF RADIANS (UNFORMATTED)          
C*              (RESTART FILE )                                         
C*    --------------------------------------------------------------    
C*       <OUTPUT FILES>                                                 
C*     32:    FINAL ANGLES (FORMATTED)                                  
C*     34:    FLEXS FORMATTED DATA (ANGLES AND COORDINATES)             
C*     36:    FIRST AND SECOND DERIVATIVE (UNFORMATTED)                 
C*     38:    FINAL COORDINATES AND ANGLES (FORMATTED)                  
C*     39:    FINAL COORDINATES (UNFORMATTED)                           
C*     40:    FINAL ANGLES IN UNITS OF RADIANS (UNFORMATTED)            
C*              (RESTART FILE )                                         
C*                OPERAND   SHR   IS NECESSARY IN >>FILE.               
C*                USED FOR CONTINUATION TO THE NEXT JOB, IF             
C*                CONVERGENCE IS NOT ATTAINED IN THIS JOB.              
C***********************************************************************
C                                                                       
C     PLEASE CHECK THE FOLLOWING PARAMETERS IN PARAMETER STATEMENTS ON  
C     WHETHER SUITABLE VALUES ARE ASSIGNED TO THEM, BEFORE YOU RUN THIS 
C     PROGRAM.                                                          
C                                                                       
C          MAXVAR, MAXRES, MAXATM, MAXLEN, MAXSS, MAXINT, MAXPER        
C                                                                       
C     IN THE SUBROUTINES;  INPUTA, CRDREF, PAIR14, CRCRNT, GENRA,       
C        DRVTVA, DRVTVX, DRVTVZ, ENRGYA, ENRGYX, ENRGYZ, ECALX, ECALZ,  
C        DCALA, DCALX, DCALZ                                            
C***********************************************************************
      IMPLICIT REAL*8 (A-H,O-Z)                                         
      IMPLICIT INTEGER*4 (I-N)                                          
CMSP  INCLUDE (MAXSIZE)                                                 
      INCLUDE '/labo/qclib/inspidas/common/maxsize'
CMSP  INCLUDE (COMMAND)                                                 
      INCLUDE '/labo/qclib/inspidas/common/command'
CMSP  INCLUDE (UNITNUMS)                                                
      INCLUDE '/labo/qclib/inspidas/common/unitnums'
CMSP  INCLUDE (FILEIO)                                                  
      INCLUDE '/labo/qclib/inspidas/common/fileio'
CMSP  INCLUDE (SIZE)                                                    
      INCLUDE '/labo/qclib/inspidas/common/size'
CMSP  INCLUDE (ALPHA)                                                   
      INCLUDE '/labo/qclib/inspidas/common/alpha'
CMSP  INCLUDE (ATOM)                                                    
      INCLUDE '/labo/qclib/inspidas/common/atom'
CMSP  INCLUDE (BOND)                                                    
      INCLUDE '/labo/qclib/inspidas/common/bond'
CMSP  INCLUDE (CHARGE)                                                  
      INCLUDE '/labo/qclib/inspidas/common/charge'
CMSP  INCLUDE (COORD)                                                   
      INCLUDE '/labo/qclib/inspidas/common/coord'
CMSP  INCLUDE (REFRNC)                                                  
      INCLUDE '/labo/qclib/inspidas/common/refrnc'
CMSP  INCLUDE (SSPAIR)                                                  
      INCLUDE '/labo/qclib/inspidas/common/sspair'
CMSP  INCLUDE (TORSN0)                                                  
      INCLUDE '/labo/qclib/inspidas/common/torsn0'
CMSP  INCLUDE (VARANG)                                                  
      INCLUDE '/labo/qclib/inspidas/common/varang'
CMSP  INCLUDE (FMATRIX)                                                 
      INCLUDE '/labo/qclib/inspidas/common/fmatrix'
C     CHARACTER  ATNAME*4,RENAME*4,TITLE1*80                            
      CHARACTER  TITLE1*80                                              
      REAL*4  TLIMIT                                                    
      CHARACTER*4 SUBTAS,NXTWD                                          
      CHARACTER*20 FORMA                                                
      CHARACTER*80 NAME                                                 
C     PARAMETER  (MAXATM=3000,MAXVAR=800,MAXRES=150)                    
C     PARAMETER  (MXATM1=MAXATM+1)                                      
C     PARAMETER  (MXPAIR=MAXVAR*(MAXVAR+1)/2)                           
C     PARAMETER  (MXPAR1=(MAXVAR+1)*(MAXVAR+2)/2)                       
C     PARAMETER  (MAXSS =5,MAXSS2=2*MAXSS)                              
      PARAMETER  (PI=3.141 592 653 589 793D0,RAD=PI/180.D0)             
      PARAMETER  (HALFPI=PI/2.)                                         
      EXTERNAL  ENRGYA,DRVTVA,ENRGYX,DRVTVX,ENRGYZ,DRVTVZ               
C     COMMON/NUMBER/  NUMATM,NUMVAR,NN2,NUMINT,NSS,NUMRES               
C     COMMON/ALPH1/   ATNAME(MAXATM),RENAME(MAXATM)                     
C     COMMON/ALPH2/   NMBRES(MAXATM)                                    
C     COMMON/ATOM00/  KUNIT(MAXATM),KATOM(MXATM1),JATOM(MAXATM)         
C     COMMON/BOND01/  IBCHAR(3,MAXVAR)                                  
C     COMMON/CHARGE/  CHARGE(MAXATM)                                    
C     COMMON/COORD/   CO(3,MAXATM)                                      
      COMMON/CTIME/   ITIME,TLIMIT,LOUT,ITRS,LAMBDA,IREST               
      COMMON/ENE001/  ERRR,WVLTN                                        
      COMMON/ENE002/  COX(3,MAXATM),NFLAG(MAXATM)                       
      COMMON/RANGE/   KRANGE                                            
C     COMMON/REFRNC/  REFCRD(3,MAXATM),REFANG(MAXVAR)                   
C     COMMON/SSPAIR/  KSSPER(6,2,MAXSS),JSS(3,MAXSS),KSS(MAXSS2),       
C    &                LSS(MAXSS2)                                       
      COMMON/TABLE4/  KMAX,LISTK(-1:MAXVAR),JANGLE(MXPAIR),             
     &                KANGLE(0:MXPAR1)                                  
      COMMON/TITLE1/  TITLE1                                            
C     COMMON/TORSN0/  A(MAXVAR),NB(MAXVAR),NS(MAXVAR),IFTOR(MAXVAR)     
C     COMMON/VARANG/  ANGLES(10,MAXRES),INDXV(MAXVAR)                   
C     DIMENSION  VAR(MAXVAR),DF(MAXVAR),G(MXPAIR),G0(MXPAIR)            
C     DIMENSION  DF(MAXVAR),G(MXPAIR),G0(MXPAIR)                        
      DIMENSION  WORK1(MAXVAR),WORK2(MAXVAR),WORK3(MAXVAR),WORK4(MAXVAR)
      DIMENSION  IWRK1(MAXVAR),IWRK2(MAXVAR)                            
      DIMENSION  WORK6(4,MAXRES)                                        
      DIMENSION  LRANGE(100),WVLTN0(100),LFUNC0(100),NITRTN(100)        
      DIMENSION  CONV0(100),LOMEGA(100)                                 
      DIMENSION  COWRK(3,MAXATM),LFLAG(MAXATM)                          
C     DATA  IREAD/20/,KREAD/22/,MREAD/63/                               
C     DATA  KWRITE/3/, ISF/2/                                           
      DATA  ISF/2/                                                      
C  DEFAULT VALUES OF CONTROL PARAMETERS                                 
      TLIMIT=600.                                                       
      LOUT=50                                                           
      NUMRNG=1                                                          
      LRANGE(1)=400                                                     
      WVLTN0(1)=0.0                                                     
      LFUNC0(1)=-1                                                      
      NITRTN(1)=200                                                     
      CONV0(1)=1.D-12                                                   
      LOMEGA(1)=0                                                       
CKM  INITIALIZATION OF ITTERATION NUMBER (?)                            
      II = 1                                                            
CKM  INTIALIZATION OF RESTART FLAG                                      
      IREST=0                                                           
C                                                                       
C     *** GET SUBTASK                                                   
C                                                                       
  999 CONTINUE                                                          
      CALL NXTCMN(SUBTAS)                                               
      WRITE(IOUT02,5) SUBTAS                                            
      WRITE(IOUT06,5) SUBTAS                                            
    5 FORMAT(/5X,' NEXT SUBTASK : ',A4,/)                               
      IF (SUBTAS.EQ.'QUIT') GOTO 990                                    
C                                                                       
C-----------R E A D  I N   C O N T R O L   P A R A M E T E R S -------- 
C                                                                       
C   TLIMIT     CPU TIME LIMIT (SEC).                                    
C   LOUT       CONTROL FOR OUTPUT.    AT EVERY LOUT-TH ITERATION        
C              ANGLES ARE OUTPUTTED TO THE FILE #40.                    
C                                                                       
C   NUMRNG     NUMBER OF DATA SPECIFIED BELOW.                          
C                                                                       
C   LRANGE     RANGE OF INTERACTABLE ATOM PAIRS.  RANGE IS GIVEN BY     
C              THE DISTANCE BETWEEN UNITS.                              
C   WVLTN0     WEIGHTING FACTOR FOR PENALTY FUNCTION IN THE FUNCTON     
C              TO  BE MINIMIZED.                                        
C   LFUNC0     OPTION OF ENERGY FUNCTION.                               
C              LFUNC0<0 : CONFORMATIONAL ENERGY ONLY.                   
C              LFUNC0=0 : CONF. ENERGY + (PENALTY  FUNC.)*WVLTN.        
C              LFUNC0>0 : PENALTY FUNCTION ONLY.                        
C   NITRTN     LIMIT NUMBER OF ITERATIONS.                              
C   CONV0      WHEN ENERGY DIFFERENCE BETWEEN TWO CONSECUTIVE ITERATION 
C              IS LESS THAN THIS VALUE, MINIMIZATION IS TERMINATED.     
C               (1.D-12  IS RECOMMENDED)                                
C   LOMEGA     OPTION FOR ENERGY BARRIER OF OMEGA.                      
C              IF LOMEGA=0, STANDARD VALUES (10 KCAL/MOL) ARE ASSIGNED. 
C              OTHERWISE 1000 KCAL/MOL IS ASSIGNED.                     
C                                                                       
C   IRNDM      INITIALIZING NUMBER FOR RANDOM NUMBER GENERATOR.         
C                  NECESSARY ONLY IF ISTART<0                           
C                                                                       
C     READ(5,*)     NCONF                                               
C     READ(5,*)     ISTART,TLIMIT,LOUT                                  
C     READ(5,*)     NUMRNG                                              
C      READ(5,*)        LRANGE(I),WVLTN0(I),LFUNC0(I),NITRTN(I),CONV0(I)
C    &               ,LOMEGA(I)                                         
C     IF (ISTART.LT.0)  READ(5,*)  IRNDM                                
C                                                                       
      IF (SUBTAS.EQ.'INPU') THEN                                        
        CALL NXTWRD(COMLY2,COMLEN,NXTWD,4)                              
        IF (NXTWD.EQ.'CNTL') THEN                                       
          CALL GETPAF(COMLY2,COMLEN,'TLIMIT',6,' ',0,TLIMIT)            
          CALL GETPAI(COMLY2,COMLEN,'LOUT',4,' ',0,LOUT)                
          CALL GETPAI(COMLY2,COMLEN,'NUMRNG',6,' ',0,NUMRNG)            
          DO 10 I=1,NUMRNG                                              
            CALL GETPAI(COMLY2,COMLEN,'LRANGE',6,' ',0,LRANGE(I))       
            CALL GETPAF(COMLY2,COMLEN,'WVLTN0',6,' ',0,WVLTN0(I))       
            CALL GETPAI(COMLY2,COMLEN,'LFUNC0',6,' ',0,LFUNC0(I))       
            CALL GETPAI(COMLY2,COMLEN,'NITRTN',6,' ',0,NITRTN(I))       
            CALL GETPAF(COMLY2,COMLEN,'CONV0',5,' ',0,CONV0(I))         
            CALL GETPAI(COMLY2,COMLEN,'LOMEGA',6,' ',0,LOMEGA(I))       
   10     CONTINUE                                                      
C         IF (ISTART.LT.0) THEN                                         
C           CALL GETPAI(COMLY2,COMLEN,'IRNDM',5,' ',0,IRNDM)            
C         END IF                                                        
        END IF                                                          
      GOTO 999                                                          
      END IF                                                            
C-----------S P E C I F Y   R E S T A R T   F I L E  ------------------ 
C                          (UNIT 40)                                    
      IF (SUBTAS.EQ.'REST') THEN                                        
        CALL GTFLNM(NAME)                                               
        CALL NXTWRD(COMLY2,COMLEN,NXTWD,4)                              
        FORMA='UNFORMATTED'                                             
        IF (NXTWD.EQ.'OVER') FORMA='OVERWRITE  '                        
        CALL OPENWT(IOUT40,FORMA,NAME,IOUT06)                           
        WRITE(IOUT06,5900) NXTWD,NAME                                   
 5900    FORMAT(5X,A4,' RESTART FILE NAME ',A60)                        
        WRITE (IOUT02,1900) NAME                                        
 1900    FORMAT (5X,'RESTART FILE NAME:',A60)                           
        IREST=1                                                         
        GOTO 999                                                        
      END IF                                                            
C-----------R E A D  I N   E N E R G Y   P A R A M E T E R S -----------
C                          (FROM UNIT 33)                               
      IF (SUBTAS.EQ.'READ') THEN                                        
        CALL NXTWRD(COMLY2,COMLEN,NXTWD,4)                              
        IF (NXTWD.EQ.'PARM') THEN                                       
          CALL GTFLNM(NAME)                                             
          CALL OPENRD(IN33,'FORMATTED',NAME,IOUT06)                     
          WRITE(IOUT06,6000) NXTWD,NAME                                 
 6000    FORMAT(5X,A4,' READ FROM ',A60)                                
          CALL CRDREF(CO)                                               
          CALL READ21                                                   
          CLOSE (IN33)                                                  
          WRITE (IOUT02,2000) NAME                                      
 2000    FORMAT (5X,'ENERGY PARAMETERS ARE READ IN FROM FILE:',         
     1            A60)                                                  
        END IF                                                          
C-----------R E A D   I N   I N I T I A L   A N G L E S ----------------
C               (FORMATTED, FROM UNIT 35)                               
        IF (NXTWD.EQ.'ANGL') THEN                                       
          CALL GTFLNM(NAME)                                             
          CALL OPENRD(IN35,'FORMATTED',NAME,IOUT06)                     
          WRITE(IOUT06,6100) NXTWD,NAME                                 
 6100    FORMAT(5X,A4,' READ FROM ',A60)                                
          CALL INPANG                                                   
          CLOSE (IN35)                                                  
          WRITE (IOUT02,2100) NAME                                      
 2100    FORMAT (5X,'INITIAL ANGLES ARE READ IN FROM FILE:',            
     1            A60)                                                  
        END IF                                                          
C-----------R E A D   I N   P R E C E P  O U T P U T   D A T A ---------
C                           (FROM UNIT 31)                              
        IF (NXTWD.EQ.'PREC') THEN                                       
          CALL GTFLNM(NAME)                                             
          CALL OPENRD(IN31,'FORMATTED',NAME,IOUT06)                     
          WRITE(IOUT06,6200) NXTWD,NAME                                 
 6200    FORMAT(5X,A4,' READ FROM ',A60)                                
          CALL INPUTA                                                   
          CLOSE (IN31)                                                  
          WRITE (IOUT02,2200) NAME                                      
 2200    FORMAT (5X,'PRECEP OUTPUT DATA ARE READ IN FROM FILE:',        
     1            A60)                                                  
        END IF                                                          
      GOTO 999                                                          
      END IF                                                            
C-----------R E A D   I N   I N I T I A L   A N G L E S --------------- 
C              (UNFORMATTED, FROM UNIT 37)                              
      IF (SUBTAS.EQ.'GET ') THEN                                        
        CALL NXTWRD(COMLY2,COMLEN,NXTWD,4)                              
        IF (NXTWD.EQ.'ANGL') THEN                                       
          CALL GTFLNM(NAME)                                             
          CALL OPENRD(IN37,'UNFORMATTED',NAME,IOUT06)                   
          WRITE(IOUT06,7100) NXTWD,NAME                                 
 7100    FORMAT(5X,A4,' READ FROM ',A60)                                
          CALL GTANGL(IN37,II)                                          
          CLOSE (IN37)                                                  
          WRITE (IOUT02,3100) NAME                                      
 3100    FORMAT (5X,'INITIAL ANGLES ARE READ IN FROM FILE:',            
     1            A60)                                                  
        END IF                                                          
        GOTO 999                                                        
      END IF                                                            
C-----------R U N   M I N I M I Z A T I O N ----------------------------
C                                                                       
      IF (SUBTAS.EQ.'RUN') THEN                                         
        WRITE(IOUT06,200)                                               
*HITAC  CALL  CLOCK                                                     
C     CALL  INPUTA (IREAD,CO,CHARGE)                                    
C     CALL  READ21                                                      
      WRITE(IOUT06,*)' NUMVAR=',NUMVAR,' NUMINT=',NUMINT,' NN2=',NN2    
      WRITE(IOUT02,*)' NUMVAR=',NUMVAR,' NUMINT=',NUMINT,' NN2=',NN2    
        CALL  PRESET (KMAX,LISTK,JANGLE,KANGLE,IBCHAR)                  
        CALL  PRESS2 (JANGLE,KUNIT,IBCHAR,KSSPER,JSS,KSS,LSS)           
        CALL  PAIR14 (KMAX,LISTK,JANGLE,KANGLE)                         
C                                                                       
C       WRITE(IOUT06,400) NCONF                                         
        WRITE(IOUT06,401) TLIMIT,LOUT                                   
        WRITE(IOUT02,401) TLIMIT,LOUT                                   
        DO  2  I = 1, NUMRNG                                            
          WRITE(IOUT06,402) I, LRANGE(I),WVLTN0(I),LFUNC0(I),           
     &                  NITRTN(I),CONV0(I),LOMEGA(I)                    
          WRITE(IOUT02,402) I, LRANGE(I),WVLTN0(I),LFUNC0(I),           
     &                  NITRTN(I),CONV0(I),LOMEGA(I)                    
    2   CONTINUE                                                        
C 400   FORMAT('  NCONF=',I5)                                           
  401   FORMAT(',   TLIMIT=',F7.1,'(SEC),   LOUT=',I3)                  
  402   FORMAT('  ',I3,':  LRANGE=',I3,',   WVLTN0=',1PD12.5,           
     &         ',   LFUNC0=',I2,',   NITRTN=',I5,',   CONVO=',1PD10.3,  
     &         ',   LOMEGA=',I1)                                        
C                                                                       
C---- INPUT X-RAY DATA  --------------------------------------          
C                                                                       
C*    CALL  INPUTX (MREAD,COX,NFLAG,TITLE1,LFLAG,ATNAME)                
C                                                                       
C+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
C                                                                       
C       DO  2010  ICONF =  1, NCONF                                     
C                                                                       
C         WRITE(IOUT06,420) ICONF                                       
C 420     FORMAT('0    **************************************'/         
C    &           '     *      CONFORMATION  NO. ',I5,'       *'/        
C    &           '     **************************************')         
C                                                                       
C---  READ A STARTING CONFORMAION ----------------                      
C                                                                       
C       II = 1                                                          
C                                                                       
C       IF (ISTART.EQ.0)  THEN                                          
C         CALL  CNVTDR (INDXV,ANGLES,VAR)                               
C       IF (ISTART.GT.0)  THEN                                          
C         CALL  READ31 (VAR,II)                                         
C       ELSE IF (ISTART.LT.0) THEN                                      
C         CALL  INPUTR (VAR,ANGLES,INDXV,IRNDM)                         
C       ENDIF                                                           
C                                                                       
C---  R.M.S. DEVIATION  -------------------------------------           
C                                                                       
C*    CALL  RMSDEV (VAR,CO,COX,COWRK,LFLAG)                             
C                                                                       
C********** MINIMIZATION SECTION ***************************************
C                                                                       
      DO  70  K = 1, NUMRNG                                             
C                                                                       
        KRANGE = LRANGE(K)                                              
        IF (KRANGE.GT.KMAX)  KRANGE=KMAX                                
        WVLTN  = WVLTN0(K)                                              
        LFUNC  = LFUNC0(K)                                              
        MAXITR = NITRTN(K)                                              
        CONV   = CONV0(K)                                               
        AMBDA = 0.102D5                                                 
        IF (LOMEGA(K).EQ.0)  THEN                                       
          DO  22  I = 1, NUMVAR                                         
            J = INDXV(I)/100                                            
            KK = INDXV(I) - 100*J                                       
C*          IF (KK.EQ.3)  A(I) = 10.D0                                  
  22      CONTINUE                                                      
        ELSE                                                            
          DO  23  I = 1, NUMVAR                                         
            J = INDXV(I)/100                                            
            KK = INDXV(I) - 100*J                                       
            IF (KK.EQ.3)  A(I) = 1000.D0                                
  23      CONTINUE                                                      
        ENDIF                                                           
C                                                                       
        WRITE(IOUT06,600) KRANGE,WVLTN,LFUNC,MAXITR,CONV,LOMEGA(K)      
        WRITE(IOUT02,600) KRANGE,WVLTN,LFUNC,MAXITR,CONV,LOMEGA(K)      
C                                                                       
C--- LFUNC>0 ------ PENALTY FUNCTION ONLY ------------------------------
              IF (LFUNC.GE.1)  THEN                                     
C                                                                       
      WRITE(IOUT06,610)                                                 
      WRITE(IOUT02,610)                                                 
C                                                                       
        NITR = MAXITR-II+1                                              
        ITRS = II-1                                                     
        LAMBDA = 0                                                      
C                                                                       
        CALL  MINMZ2 (NUMVAR,NN2,F0,VAR,DF,G,G0,WORK1,WORK2,WORK3,WORK4,
     &       IWRK1,IWRK2,NITR,AMBDA,CONV,ENRGYX,DRVTVX,ICONV,CO,CHARGE) 
C                                                                       
C* CHECK CPU TIME LIMIT *                                               
          IF (ITIME.EQ.1)  THEN                                         
              WRITE(IOUT06,260)                                         
              WRITE(IOUT02,260)                                         
              CALL  DEVIAT (VAR,CO,COX,COWRK,LFLAG,WORK6,               
     &                      ATNAME,RENAME,NMBRES)                       
              STOP                                                      
          ENDIF                                                         
C                                                                       
C* CHECK CIS/TRANS OFOMEGA *                                            
        KOMEGA=0                                                        
        DO  40  J = 1, NUMVAR                                           
          JJ = INDXV(J)/100                                             
          JK = INDXV(J) - 100*JJ                                        
          IF (JK.EQ.3)  THEN                                            
            OMEGA=VAR(J)                                                
            IF (OMEGA.GT.PI)  THEN                                      
  42          OMEGA=OMEGA-2*PI                                          
              IF (OMEGA.GT.PI)  GOTO  42                                
            ELSE IF (OMEGA.LT.-PI)  THEN                                
  44          OMEGA=OMEGA+2*PI                                          
              IF (OMEGA.LT.PI)  GOTO  44                                
            ENDIF                                                       
            OMEGA=ABS(OMEGA)                                            
            IF (ABS(REFANG(J)).GT.HALFPI)  THEN                         
              IF (OMEGA.LT.HALFPI)  THEN                                
                WRITE(IOUT06,650) J,VAR(J)/RAD                          
                WRITE(IOUT02,650) J,VAR(J)/RAD                          
                KOMEGA=1                                                
              ENDIF                                                     
            ELSE                                                        
              IF (OMEGA.GT.HALFPI)  THEN                                
                WRITE(IOUT06,660) J,VAR(J)/RAD                          
                WRITE(IOUT02,660) J,VAR(J)/RAD                          
                KOMEGA=1                                                
              ENDIF                                                     
            ENDIF                                                       
          ENDIF                                                         
  40    CONTINUE                                                        
        IF (KOMEGA.EQ.1)  THEN                                          
          WRITE(IOUT06,670)                                             
          WRITE(IOUT02,670)                                             
          STOP                                                          
        ENDIF                                                           
  650   FORMAT(' *** OMEGA OF RESIDUE NO.',I4,' IS CIS, WHILE THIS ',   
     &   'OMEGA IN PRECEP DATA IS TRANS.'/' ',10X,'OMEGA=',F8.3)        
  660   FORMAT(' *** OMEGA OF RESIDUE NO.',I4,' IS TRANS, WHILE THIS ', 
     &   'OMEGA IN PRECEP DATA IS CIS.'/' ',10X,'OMEGA=',F8.3)          
  670   FORMAT(' ***** OMEGA VALUES ARE INVALID.   COMPUTATION IS ',    
     &   'TERMINATED.')                                                 
C                                                                       
C* MINIMIZATION CONVERGED *                                             
        IF (ICONV.EQ.1)  THEN                                           
          WRITE(IOUT06,230)                                             
          WRITE(IOUT02,230)                                             
C         CALL  OUTMIN (VAR,DF,ICONV,ANGLES,INDXV)                      
          GOTO  60                                                      
        ENDIF                                                           
  30  CONTINUE                                                          
C                                                                       
C--- LFUNC=0 --- COFORMATIONAL ENERGY + PENALTY FUNCTION -------------  
                  ELSE  IF (LFUNC.EQ.0)  THEN                           
C                                                                       
      WRITE(IOUT06,620)                                                 
      WRITE(IOUT02,620)                                                 
C                                                                       
        NITR = MAXITR-II+1                                              
        ITRS = II-1                                                     
        LAMBDA = 1                                                      
C                                                                       
        CALL  MINMZ2 (NUMVAR,NN2,F0,VAR,DF,G,G0,WORK1,WORK2,WORK3,WORK4,
     &       IWRK1,IWRK2,NITR,AMBDA,CONV,ENRGYZ,DRVTVZ,ICONV,CO,CHARGE) 
C                                                                       
C* CHECK CPU TIME LIMIT *                                               
          IF (ITIME.EQ.1)  THEN                                         
              WRITE(IOUT06,260)                                         
              WRITE(IOUT02,260)                                         
C            ------------------------------                             
              CALL  DEVIAT (VAR,CO,COX,COWRK,LFLAG,WORK6,               
     &                      ATNAME,RENAME,NMBRES)                       
C            ------------------------------                             
              STOP                                                      
          ENDIF                                                         
C                                                                       
C* MINIMIZATION CONVERGED  *                                            
        IF (ICONV.EQ.1)  THEN                                           
          WRITE(IOUT06,230)                                             
          WRITE(IOUT02,230)                                             
C         CALL  OUTMIN (VAR,DF,ICONV,ANGLES,INDXV)                      
          GOTO  60                                                      
        ENDIF                                                           
C                                                                       
C--- LFUNC<0 ---- CONFORMATIONAL ENERGY ONLY -------------------------  
                  ELSE                                                  
C                                                                       
      WRITE(IOUT06,630)                                                 
      WRITE(IOUT02,630)                                                 
C                                                                       
        NITR = MAXITR-II+1                                              
        ITRS = II-1                                                     
        LAMBDA = 1                                                      
C                                                                       
        CALL  MINMZ2 (NUMVAR,NN2,F0,VAR,DF,G,G0,WORK1,WORK2,WORK3,WORK4,
     &       IWRK1,IWRK2,NITR,AMBDA,CONV,ENRGYA,DRVTVA,ICONV,CO,CHARGE) 
C                                                                       
C* CHECK CPU TIME LIMIT *                                               
          IF (ITIME.EQ.1)  THEN                                         
              WRITE(IOUT06,260)                                         
              WRITE(IOUT02,260)                                         
C            ------------------------------                             
C*            CALL  DEVIAT (VAR,CO,COX,COWRK,LFLAG,WORK6,               
C*   &                      ATNAME,RENAME,NMBRES)                       
C            ------------------------------                             
              STOP                                                      
          ENDIF                                                         
C                                                                       
C* MINIMIZATION CONVERGED *                                             
        IF (ICONV.EQ.1)  THEN                                           
          WRITE(IOUT06,230)                                             
          WRITE(IOUT02,230)                                             
C         CALL  OUTMIN (VAR,DF,ICONV,ANGLES,INDXV)                      
C         CALL  DRVTVA(NUMVAR,NN2,VAR,F0,DF,G,CO,CHARGE)                
C         CALL  DRVTVA(VAR,F0,DF,G,CO,CHARGE)                           
C         CALL  OUTFMT(F0,DF,G)                                         
          GOTO  60                                                      
        ENDIF                                                           
  32  CONTINUE                                                          
C---------------------------------------------------------------------  
                       ENDIF                                            
      WRITE(IOUT06,240)                                                 
      WRITE(IOUT02,240)                                                 
  60  II = 1                                                            
C                                                                       
C--------- R.M.S. DEVIATION ----------------------------------          
C                                                                       
C*    CALL  RMSDEV (VAR,CO,COX,COWRK,LFLAG)                             
C                                                                       
C--------- OUTPUT TO I/O UNIT #69 ----------------------------          
C                                                                       
CKM  NOT SUPPORTED IN THIS VERSION.                                     
C     IF (K.EQ.1) WRITE(IOUT38,730)                                     
C    >           ((COX(J,I),J=1,3),LFLAG(I),I=1,NUMATM)                 
C     WRITE(IOUT38,700) K,NUMATM,NUMVAR                                 
C     WRITE(IOUT38,710) ((COWRK(J,I),J=1,3),I=1,NUMATM)                 
C     WRITE(IOUT38,720) (VAR(I),I=1,NUMVAR)                             
C 700 FORMAT('K=',I5,I10,I10)                                           
C 710 FORMAT(10F8.3)                                                    
C 720 FORMAT(8F10.6)                                                    
C 730 FORMAT(3(3F8.3,I2))                                               
C                                                                       
C***********************************************************************
C                                                                       
  70  CONTINUE                                                          
C                                                                       
C  CLOSE RESTART FILE                                                   
        IF (IREST.EQ.1) THEN                                            
          CLOSE (IOUT40)                                                
        END IF                                                          
C                                                                       
C     WRITE(IOUT06,242) ICONF                                           
C*    CALL  DEVIAT (VAR,CO,COX,COWRK,LFLAG,WORK6,ATNAME,                
C*   &              RENAME,NMBRES)                                      
C     CALL  OUTMIN (VAR,DF,ICONV,ANGLES,INDXV)                          
C     CALL  OUTSTD (KWRITE,ISF,CO,ANGLES,KSSPER,TITLE1,ATNAME,RENAME,   
C    &              NMBRES)                                             
C2010 CONTINUE                                                          
C                                                                       
C+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
C                                                                       
  200 FORMAT('1'//'   ***  DISTANCE-CONSTRAINED ENERGY MINIMIZATION ',  
     &       '(COORDINATE)  ***')                                       
  230 FORMAT('0    ***  END OF MINIMIZATION  ***'/)                     
  240 FORMAT('0    ***  MINIMIZATION HAS EXHAUSTED  ***'/)              
C 242 FORMAT('0    ***  THE CALCULATION FOR THE CONFORMATION NO.',I5,   
C    &       ' IS FINISHED  ***'/)                                      
  260 FORMAT('0    ***  CPU TIME LIMIT  ***')                           
  320 FORMAT(10F8.3)                                                    
  600 FORMAT('0',15X,'******** PARAMETERS HAVE BEEN CHANGED ********'/  
     &       '    KRANGE=',I3,',  WVLTN=',1PE10.3,',   LFUNC=',I1,      
     &       ',   MAXITR=',I5,',   CONV=',1PE10.3,',   LOMEGA=',I1/)    
  610 FORMAT('    -> MINIMIZE PENELTY FUNCTION ONLY'/)                  
  620 FORMAT('    -> MINIMIZE CONFORMATIONAL ENERGY + PENALTY FUNCTION'/
     &)                                                                 
  630 FORMAT('    -> MINIMIZA CONFORMATIONAL ENERGY ONLY'/)             
      GOTO 999                                                          
      END IF                                                            
      IF (SUBTAS.EQ.'WRIT') THEN                                        
        CALL NXTWRD(COMLY2,COMLEN,NXTWD,4)                              
C-----------P R I N T   O U T   F I N A L   A N G L E S ----------------
C                           (TO UNIT 32)                                
        IF (NXTWD.EQ.'ANGL') THEN                                       
          CALL GTFLNM(NAME)                                             
          CALL OPENWT(IOUT32,'FORMATTED',NAME,IOUT06)                   
          WRITE(IOUT06,6300) NXTWD,NAME                                 
 6300    FORMAT(5X,A4,' WRITTEN TO ',A60)                               
          CALL OUTMIN                                                   
          CLOSE (IOUT32)                                                
          WRITE (IOUT02,2300) NAME                                      
 2300    FORMAT (5X,'FINAL ANGLES ARE WRITEN TO FILE:',                 
     1            A60)                                                  
        END IF                                                          
C-----------P R I N T   O U T   F I N A L   C O O R D I N A T E S ------
C                (FORMATTTED,TO UNIT 34)                                
        IF (NXTWD.EQ.'COOR') THEN                                       
          CALL NXTWRD(COMLY2,COMLEN,NXTWD,4)                            
          IF (NXTWD.EQ.'FLEX') THEN                                     
            CALL GTFLNM(NAME)                                           
            CALL OPENWT(IOUT34,'FORMATTED',NAME,IOUT06)                 
            WRITE(IOUT06,6400) NXTWD,NAME                               
 6400       FORMAT(5X,A4,' WRITTEN TO ',A60)                            
            CALL OUTSTD(ISF,CO,ANGLES,KSSPER,TITLE1,ATNAME,             
     &                  RENAME,NMBRES)                                  
            CLOSE (IOUT34)                                              
            WRITE (IOUT02,2400) NAME                                    
 2400       FORMAT (5X,'FINAL COORDINATES ARE WRITEN TO FILE:',         
     &            A60)                                                  
          END IF                                                        
          IF (NXTWD.EQ.'PDB ') THEN                                     
C    *************NOT SUPPORTED IN THIS VERSION********                 
          END IF                                                        
        END IF                                                          
      GOTO 999                                                          
      END IF                                                            
      IF (SUBTAS.EQ.'PUT ') THEN                                        
        CALL NXTWRD(COMLY2,COMLEN,NXTWD,4)                              
C-----------P R I N T   O U T   F I N A L   C O O R D I N A T E S ------
C                (UNFORMATTTED,TO UNIT 39)                              
        IF (NXTWD.EQ.'COOR') THEN                                       
          CALL GTFLNM(NAME)                                             
          CALL NXTWRD(COMLY2,COMLEN,NXTWD,4)                            
          FORMA='UNFORMATTED'                                           
          IF (NXTWD.EQ.'OVER') FORMA='OVERWRITE  '                      
          CALL OPENWT(IOUT39,FORMA,NAME,IOUT06)                         
          WRITE(IOUT06,6600) NXTWD,NAME                                 
 6600     FORMAT(5X,A4,' WRITTEN TO ',A60)                              
          CALL PTCOOR(IOUT39)                                           
          CLOSE (IOUT39)                                                
          WRITE (IOUT02,2600) NAME                                      
 2600     FORMAT (5X,'FINAL COORDINATES ARE WRITEN TO FILE:',           
     &            A60)                                                  
        END IF                                                          
C-----------P R I N T   O U T   D E R I V A T I V E S -----------       
C                           (TO UNIT 36)                                
        IF (NXTWD.EQ.'FMAT') THEN                                       
          CALL GTFLNM(NAME)                                             
          CALL NXTWRD(COMLY2,COMLEN,NXTWD,4)                            
          FORMA='UNFORMATTED'                                           
          IF (NXTWD.EQ.'OVER') FORMA='OVERWRITE  '                      
          CALL OPENWT(IOUT36,FORMA,NAME,IOUT06)                         
          WRITE(IOUT06,6500) NXTWD,NAME                                 
 6500    FORMAT(5X,A4,' WRITTEN TO ',A60)                               
          CALL  DRVTVA(VAR,F0,DF,G,CO,CHARGE)                           
          CALL  OUTFMT(F0)                                              
          CLOSE (IOUT36)                                                
          WRITE (IOUT02,2500) NAME                                      
 2500    FORMAT (5X,'FIRST AND SECOND DIRIVATIVES ',                    
     &           'ARE WRITEN TO FILE:',A60)                             
        END IF                                                          
        GOTO 999                                                        
      END IF                                                            
      GOTO 999                                                          
  990 RETURN                                                            
      END                                                               
C-----------------------------------------------------------------------
      SUBROUTINE  INPUTA                                                
C-----------------------------------------------------------------------
C     READ IN PRECET OUTPUT DATA.                                       
C                                                                       
      IMPLICIT REAL*8 (A-H,O-Z)                                         
C     PARAMETER  (MAXATM=3000,MAXVAR=800,MAXRES=150,MAXLEN=3500)        
C     PARAMETER  (MXATM1=MAXATM+1,MVAR1=MAXVAR+1)                       
C     PARAMETER  (MAXSS =5,MAXSS2=2*MAXSS)                              
      CHARACTER*80 TITLE1                                               
C     CHARACTER*4  SEQATM,SEQAA                                         
CMSP  INCLUDE (MAXSIZE)                                                 
      INCLUDE '/labo/qclib/inspidas/common/maxsize'
CMSP  INCLUDE (SIZE)                                                    
      INCLUDE '/labo/qclib/inspidas/common/size'
CMSP  INCLUDE (ATOM)                                                    
      INCLUDE '/labo/qclib/inspidas/common/atom'
CMSP  INCLUDE (BOND)                                                    
      INCLUDE '/labo/qclib/inspidas/common/bond'
CMSP  INCLUDE (CHARGE)                                                  
      INCLUDE '/labo/qclib/inspidas/common/charge'
CMSP  INCLUDE (NBTYPE)                                                  
      INCLUDE '/labo/qclib/inspidas/common/nbtype'
CMSP  INCLUDE (INTER0)                                                  
      INCLUDE '/labo/qclib/inspidas/common/inter0'
CMSP  INCLUDE (REFRNC)                                                  
      INCLUDE '/labo/qclib/inspidas/common/refrnc'
CMSP  INCLUDE (TABLE1)                                                  
      INCLUDE '/labo/qclib/inspidas/common/table1'
CMSP  INCLUDE (TORSN0)                                                  
      INCLUDE '/labo/qclib/inspidas/common/torsn0'
CMSP  INCLUDE (SSPAIR)                                                  
      INCLUDE '/labo/qclib/inspidas/common/sspair'
CMSP  INCLUDE (VARANG)                                                  
      INCLUDE '/labo/qclib/inspidas/common/varang'
CMSP  INCLUDE (ALPHA)                                                   
      INCLUDE '/labo/qclib/inspidas/common/alpha'
CMSP  INCLUDE (UNITNUMS)                                                
      INCLUDE '/labo/qclib/inspidas/common/unitnums'
C     COMMON/NUMBER/  NUMATM,NUMVAR,NN2,NUMINT,NSS,NUMRES               
C     COMMON/NUMBR1/  NATM1,NVAR1,NPAIR1                                
C     COMMON/ATOM00/  KUNIT(MAXATM),KATOM(MXATM1),JATOM(MAXATM)         
C     COMMON/ATOM01/  LATOM0(0:MAXVAR),LATOM1(MAXATM)                   
C     COMMON/BOND00/  DIRCOS(3,MAXVAR),IBND1(MAXVAR),IBND2(0:MVAR1)     
C     COMMON/BOND01/  IBCHAR(3,MAXVAR)                                  
C     COMMON/NBTYPE/  NBTYPE(MAXATM)                                    
C     COMMON/INTER0/  INTER(MAXATM),INTATM(3,MAXLEN)                    
C     COMMON/REFRNC/  REFCRD(3,MAXATM),REFANG(MAXVAR)                   
C     COMMON/TABLE1/  IFRONT(MAXVAR),NBACK(0:MAXVAR),IBACK(2,0:MAXVAR)  
C     COMMON/TORSN0/  A(MAXVAR),NB(MAXVAR),NS(MAXVAR),IFTOR(MAXVAR)     
C     COMMON/SSPAIR/  KSSPER(6,2,MAXSS),JSS(3,MAXSS),KSS(MAXSS2),       
C    &                LSS(MAXSS2)                                       
C     COMMON/VARANG/  ANGLES(10,MAXRES),INDXV(MAXVAR)                   
C     COMMON/ALPH1/   SEQATM(MAXATM),SEQAA(MAXATM)                      
C     COMMON/ALPH2/   ISEQRS(MAXATM)                                    
      COMMON/EPARAM/  PNB(28,56)                                        
      COMMON/TITLE1/  TITLE1                                            
C                                                                       
      READ(IN31,100)  TITLE1                                            
      READ(IN31,110)  NUMATM,NUMVAR,NUMRES,NUMINT,NSS                   
C     NATM1 = NUMATM + 1                                                
C     NVAR1 = NUMVAR + 1                                                
C     NN2 = NUMVAR*(NUMVAR+1)/2                                         
C     NPAIR1 = (NUMVAR+1)*(NUMVAR+2)/2                                  
C                                                                       
      DO  10  I = 1, NUMRES                                             
  10  READ(IN31,120)  (ANGLES(J,I),J=1,10)                              
C                                                                       
      READ(IN31,131)  NBACK(0),IBACK(1,0),IBACK(2,0)                    
      DO  20  I = 1, NUMVAR                                             
C INDEXV CANNOT BE READ USING OPEN STATEMENT COMMENTED BY M.IRISA       
C 20  READ(IN31,130)  INDXV(I),IBND1(I),IBND2(I),IFRONT(I),             
C    &     (IBCHAR(J,I),J=1,3),A(I),NB(I),NS(I),IFTOR(I),               
C    &     NBACK(I),IBACK(1,I),IBACK(2,I)                               
      READ(IN31,132)  INDXV1,INDXV2,IBND1(I),IBND2(I),IFRONT(I),        
     &     (IBCHAR(J,I),J=1,3),A(I),NB(I),NS(I),IFTOR(I),               
     &     NBACK(I),IBACK(1,I),IBACK(2,I)                               
      INDXV(I)=100*INDXV1+INDXV2                                        
  20  CONTINUE                                                          
C FOLLOWING TWO LINES ARE MOVED TO CRDREF                               
C     IBND2(0) = 1                                                      
C     IBND2(NUMVAR+1) = NUMATM+1                                        
C                                                                       
      DO  30  I = 1, NUMATM                                             
C 30  READ(IN31,140)  (REFCRD(L,I),L=1,3),CHARGE(I),NBTYPE(I),          
C    &      KUNIT(I),KATOM(I),JATOM(KATOM(I))                           
C    &      ,SEQATM(I),SEQAA(I),ISEQRS(I)                               
  30  READ(IN31,140)  (REFCRD(L,I),L=1,3),CHARGE(I),NBTYPE(I),          
     &      KUNIT(I),KATOM(I),JATOM(KATOM(I))                           
     &      ,ATNAME(I),RENAME(I),NMBRES(I)                              
      READ(IN31,110)  (INTER(I),I=1,NUMATM)                             
      READ(IN31,150)  ((INTATM(J,I),J=1,3),I=1,NUMINT)                  
C THIS EQUATION WAS MOVED TO CRDREF                                     
C     KATOM(NUMATM+1) = NUMATM+1                                        
C                                                                       
      IF (NSS.EQ.0)  GOTO  50                                           
C                                                                       
      DO  40  I = 1, NSS                                                
  40  READ(IN31,110)  (KSSPER(J,1,I),J=1,6)                             
C                                                                       
  100 FORMAT(A80)                                                       
  110 FORMAT(16I5)                                                      
  120 FORMAT(10F8.3)                                                    
  130 FORMAT(I6,2X,2I5,2X,2I5,2I2,F10.4,3I3,5X,I5,2I5)                  
C INDEXV CANNOT BE READ USING OPEN STATEMENT COMMENTED BY M.IRISA       
  132 FORMAT(I4,I2,2X,2I5,2X,2I5,2I2,F10.4,3I3,5X,I5,2I5)               
C 130 FORMAT(I6,2X,2I5,2X,2I5,2I2,F10.4,3I3,5X,I5,1X,2I3)               
  131 FORMAT(53X,5X,I5,1X,2I3)                                          
  140 FORMAT(3F10.4,4X,F10.3,4I5,2X,A4,1X,A4,I5)                        
  150 FORMAT(5(1X,3I5))                                                 
  160 FORMAT(A6)                                                        
  170 FORMAT(I5,2F10.4,I10)                                             
  180 FORMAT(I10,F10.4,I5)                                              
C                                                                       
  50  CALL  OUT001                                                      
C                                                                       
C '90 1/12 COMMENTED BY M. IRISA                                        
C THIS SUBROUTINE WILL NOT BE NEEDED IN THE COMPLETE VERSION (PRECEPP   
C + FEDER)                                                              
C IN THE COMPLETE VERSION, REFANG IS INCLUIDED IN THE GLOBAL COMMON     
      CALL  CNVTDR (INDXV,ANGLES,REFANG)                                
C                                                                       
C     CALL  CRDREF (CO)                                                 
C                                                                       
      RETURN                                                            
      END                                                               
      SUBROUTINE  INPUTD (LREAD,KMAX,LCNSTR)                            
C                                                                       
C  READ THE DATA ON DISTANCE CONSTRAINTS                                
C                                                                       
      IMPLICIT REAL*8 (A-H,O-Z)                                         
C     PARAMETER  (MAXCNS=900)                                           
CMSP  INCLUDE (MAXSIZE)                                                 
      INCLUDE '/labo/qclib/inspidas/common/maxsize'
CMSP  INCLUDE (SIZE)                                                    
      INCLUDE '/labo/qclib/inspidas/common/size'
C     COMMON/NUMBER/  NUMATM,NUMVAR,NN2,NUMINT,NSS,NUMRES               
      COMMON/CNSTR1/  DCNSTR(MAXCNS),WGHT(MAXCNS)                       
      COMMON/CNSTR2/  NUMCNS,NCNSTR(MAXCNS),                            
     &                MPAIR1(MAXCNS),MPAIR2(MAXCNS)                     
      DIMENSION  LCNSTR(-1:KMAX)                                        
C                                                                       
      READ(LREAD,100)  (LCNSTR(I),I=-1,KMAX)                            
  100 FORMAT(16I5)                                                      
C                                                                       
      KK = 1                                                            
  10  READ(LREAD,110,END=200)  NCNSTR(KK),DCNSTR(KK),MPAIR1(KK),        
     &                         MPAIR2(KK),WGHT(KK)                      
  110 FORMAT(I5,F10.3,2I6,5X,F10.3)                                     
      KK = KK+1                                                         
        GOTO  10                                                        
C                                                                       
 200  NUMCNS = KK-1                                                     
      RETURN                                                            
      END                                                               
      SUBROUTINE  INPUTX (MREAD,COX,NFLAG,TITLE1,LFLAG,ATNAME)          
      IMPLICIT REAL*8 (A-H,O-Z)                                         
      CHARACTER  TITLE1*80,ITITL1*80,ID*4                               
      CHARACTER  ATNAME(NUMATM)*4,FLAG*2                                
CMSP  INCLUDE (SIZE)                                                    
      INCLUDE '/labo/qclib/inspidas/common/size'
CMSP  INCLUDE (UNITNUMS)                                                
      INCLUDE '/labo/qclib/inspidas/common/unitnums'
C     COMMON/NUMBER/  NUMATM,NUMVAR,NN2,NUMINT,NSS,NUMRES               
      DIMENSION  COX(3,NUMATM),NFLAG(NUMATM),LFLAG(NUMATM)              
C                                                                       
      READ(MREAD,110)  ID                                               
      READ(MREAD,120)  ITITL1                                           
      DO  10  I = 1, NUMATM                                             
        READ(MREAD,130)  (COX(K,I),K=1,3),NFLAG(I),FLAG                 
        LFLAG(I) = 0                                                    
        IF (.NOT.(FLAG.EQ.'  '.OR.FLAG(1:1).EQ.'-'))  THEN              
          IF (ATNAME(I).EQ.'CA  ' .OR. ATNAME(I).EQ.'N   ' .OR.         
     &        ATNAME(I).EQ.'C   ' .OR. ATNAME(I).EQ.'O   ' .OR.         
     &        ATNAME(I).EQ.'CB  ')  THEN                                
                 LFLAG(I)=2                                             
          ELSE                                                          
                 LFLAG(I)=1                                             
          ENDIF                                                         
        ENDIF                                                           
  10  CONTINUE                                                          
C                                                                       
 110  FORMAT(A4)                                                        
 120  FORMAT(A80)                                                       
 130  FORMAT(3F8.3,1X,I1,11X,A2)                                        
C                                                                       
      WRITE(IOUT06,210) TITLE1                                          
      WRITE(IOUT06,220) ITITL1,ID                                       
      WRITE(IOUT02,210) TITLE1                                          
      WRITE(IOUT02,220) ITITL1,ID                                       
 210  FORMAT('0  TITLE1 OF CALUCULATED PROTEIN  :  ',A80)               
 220  FORMAT('   TITLE1 OF X-RAY DATA PROTEIN   :  ',A80,' (ID:',A4,')')
      RETURN                                                            
      END                                                               
C---------------------------------------------------------------------  
      SUBROUTINE INPANG                                                 
C-----------------------------------------------------------------------
C     READ IN INITIAL ANGLES FROM AN ECCEP FORMATTED FILE               
      IMPLICIT REAL*8 (A-H,O-Z)                                         
CMSP  INCLUDE (MAXSIZE)                                                 
      INCLUDE '/labo/qclib/inspidas/common/maxsize'
CMSP  INCLUDE (SIZE)                                                    
      INCLUDE '/labo/qclib/inspidas/common/size'
CMSP  INCLUDE (UNITNUMS)                                                
      INCLUDE '/labo/qclib/inspidas/common/unitnums'
CMSP  INCLUDE (VARANG)                                                  
      INCLUDE '/labo/qclib/inspidas/common/varang'
      CALL RDANGL(IN35)                                                 
C     DO  10  I = 1, NUMRES                                             
C 10    READ(IN35,320)  (ANGLES(J,I),J=1,10)                            
      CALL  CNVTDR (INDXV,ANGLES,VAR)                                   
  320 FORMAT(10F8.3)                                                    
      RETURN                                                            
      END                                                               
C-----------------------------------------------------------------------
      SUBROUTINE  INPUTR (VAR,ANGLES,INDXV,IRNDM)                       
C-----------------------------------------------------------------------
C                                                                       
C  ASSIGN THE RANDOM NUMBERS TO VAR(I)                                  
C                                                                       
      IMPLICIT REAL*8 (A-H,O-Z)                                         
      PARAMETER  (PI=3.141 592 653 589 793D0)                           
CMSP  INCLUDE (SIZE)                                                    
      INCLUDE '/labo/qclib/inspidas/common/size'
C     COMMON/NUMBER/  NUMATM,NUMVAR,NN2,NUMINT,NSS,NUMRES               
      DIMENSION  VAR(NUMVAR),ANGLES(10,NUMRES),INDXV(NUMVAR)            
      DATA  ZERO /0.D0/                                                 
C                                                                       
      DO  10  I = 1, NUMVAR                                             
        J = INDXV(I)/100                                                
        K = INDXV(I) - 100*J                                            
C                                                                       
C  VAR(I) IS NOT OMEGA, THEN..                                          
C                                                                       
        IF (K.NE.3)  THEN                                               
          VAR(I) = RANDUN(IRNDM)*PI                                     
C                                                                       
C  VAR(I) IS OMEGA, THEN..                                              
C                                                                       
        ELSE                                                            
          IF (ABS(ANGLES(K,J)).GT.90.D0)  THEN                          
            VAR(I) = PI                                                 
          ELSE                                                          
            VAR(I) = ZERO                                               
          ENDIF                                                         
        ENDIF                                                           
C                                                                       
 10   CONTINUE                                                          
C                                                                       
      RETURN                                                            
      END                                                               
      FUNCTION RANDUN(IX)                                               
      IMPLICIT REAL*8 (A-H,O-Z)                                         
      IX=IX*48828125                                                    
      IF(IX) 10,20,20                                                   
   10 IX=(IX+2147483647)+1                                              
   20 X=DFLOAT(IX)*0.4656613D-9                                         
      RANDUN = X + X - 1.0                                              
      RETURN                                                            
      END                                                               
C-----------------------------------------------------------------------
      SUBROUTINE  READ21                                                
C-----------------------------------------------------------------------
C     READ IN ENERGY PARAMETERS (BD8)                                   
      IMPLICIT REAL*8 (A-H,O-Z)                                         
CMSP  INCLUDE (UNITNUMS)                                                
      INCLUDE '/labo/qclib/inspidas/common/unitnums'
      COMMON/DISULF/  RSS(4),ASS(4),BSS(9)                              
      COMMON/EPARAM/  PNB(28,56)                                        
C                                                                       
C     DATA  JREAD/21/                                                   
C                                                                       
      DO  200  J = 1, 56, 2                                             
C       READ(JREAD,210)  (PNB(I,J),I=1,28)                              
C       READ(JREAD,210)  (PNB(I,J+1),I=1,28)                            
        READ(IN33,210)  (PNB(I,J),I=1,28)                               
        READ(IN33,210)  (PNB(I,J+1),I=1,28)                             
  200 CONTINUE                                                          
  210 FORMAT(8F10.6)                                                    
C                                                                       
C     READ(JREAD,220)  (RSS(I),I=1,4)                                   
C     READ(JREAD,220)  (ASS(I),I=1,4)                                   
C     READ(JREAD,230)  (BSS(I),I=1,9)                                   
      READ(IN33,220)  (RSS(I),I=1,4)                                    
      READ(IN33,220)  (ASS(I),I=1,4)                                    
      READ(IN33,230)  (BSS(I),I=1,9)                                    
  220 FORMAT(10F8.3)                                                    
  230 FORMAT(3D25.0)                                                    
C                                                                       
      RETURN                                                            
      END                                                               
C                                                                       
      SUBROUTINE  PRESET (KMAX,LISTK,JANGLE,KANGLE,IBCHAR)              
CMSP  INCLUDE (MAXSIZE)                                                 
      INCLUDE '/labo/qclib/inspidas/common/maxsize'
CMSP  INCLUDE (SIZE)                                                    
      INCLUDE '/labo/qclib/inspidas/common/size'
C     COMMON/NUMBER/  NUMATM,NUMVAR,NN2,NUMINT,NSS,NUMRES               
C     COMMON/NUMBR1/  NATM1,NVAR1,NPAIR1                                
      DIMENSION  LISTK(-1:MAXVAR),JANGLE(MXPAIR),KANGLE(0:MXPAR1)       
      DIMENSION  IBCHAR(3,MAXVAR)                                       
C************************************************                       
C  THIS SECTION MAKES THE LISTS OF BOND PAIRS.                          
C************************************************                       
C                                                                       
C  LIST:     JANGLE                                                     
C                                                                       
      KMAX = 0                                                          
      KMIN = NUMVAR                                                     
      LISTK(KMIN-1) = 1                                                 
      DO  30  KK = NUMVAR-1, 0, -1                                      
      DO  30  IB = 1, NUMVAR-KK                                         
        IA = IB + KK                                                    
        NAB = IA*(IA-1)/2 + IB                                          
        KAB = KDIST(IA,IB,IBCHAR)                                       
C       IF(KAB.GT.MAXVAR)WRITE(6,*)'KAB=',KAB,' IA=',IA,' IB=',IB       
        KMAX = MAX (KMAX,KAB)                                           
        IF (KAB.LT.KMIN)  THEN                                          
          LISTK0 = LISTK(KMIN-1)                                        
          DO  10  I = KAB-1, KMIN-2                                     
  10      LISTK(I) = LISTK0                                             
          KMIN = KAB                                                    
        ENDIF                                                           
        DO  20  I = KMIN-1, KAB-1                                       
  20    LISTK(I) = LISTK(I) + 1                                         
        JANGLE(NAB) = LISTK(KAB-1) - LISTK(KAB)                         
  30  CONTINUE                                                          
C                                                                       
C  LIST:     KANGLE                                                     
C                                                                       
      DO  70  KK = NUMVAR-1, 0, -1                                      
      DO  70  IB = 1, NUMVAR-KK                                         
        IA = IB + KK                                                    
        NAB = IA*(IA-1)/2 + IB                                          
        KAB = KDIST(IA,IB,IBCHAR)                                       
        KNC = IA*10000 + IB                                             
        IF (IBCHAR(2,IB).EQ.0)   GOTO  50                               
        IF (IBCHAR(1,IA).NE.IBCHAR(1,IB))  GOTO  60                     
        IF (IBCHAR(3,IA).LT.IBCHAR(3,IB))  GOTO  60                     
  50    KNC = - KNC                                                     
  60    L = LISTK(KAB) - 1 + JANGLE(NAB)                                
        KANGLE(L) = KNC                                                 
  70  CONTINUE                                                          
      RETURN                                                            
      END                                                               
      SUBROUTINE  PRESS2 (JANGLE,KUNIT,IBCHAR,KSSPER,JSS,KSS,LSS)       
CMSP  INCLUDE (SIZE)                                                    
      INCLUDE '/labo/qclib/inspidas/common/size'
C     COMMON/NUMBER/  NUMATM,NUMVAR,NN2,NUMINT,NSS,NUMRES               
      DIMENSION  KSSPER(6,2,NSS),JSS(3,NSS),KSS(NSS*2),LSS(NSS*2)       
      DIMENSION  JANGLE(NN2),KUNIT(NUMATM),IBCHAR(3,NUMVAR)             
      DIMENSION  LSSPER(6,2)                                            
C                                                                       
      IF (NSS.EQ.0)  RETURN                                             
C                                                                       
      DO  140  I = 1, NSS                                               
C                                                                       
C  UNIT IB : CB(2),SG(3),        UNIT (IB-1) : CA(1)                    
C  UNIT IA : CB(5),SG(6),        UNIT (IA-1) : CA(4)                    
C                                                                       
        IA = KUNIT(KSSPER(6,1,I))                                       
        IB = KUNIT(KSSPER(3,1,I))                                       
        I2 = 2*I                                                        
        I1 = I2 - 1                                                     
        LSS(I1) = I1                                                    
        LSS(I2) = I2                                                    
        KSS(I1) = KDIST(IA,IB,IBCHAR)                                   
        KSS(I2) = KSS(I1) - 1                                           
C                                                                       
C UNIT PAIR : IA & IB  / SG(6)-SG(3),SG(6)-CB(2),CB(5)-SG(3),CB(5)-CB(2)
C                                                                       
        NAB = IA*(IA-1)/2 + IB                                          
        JSS(1,I) = JANGLE(NAB)                                          
          LSSPER(1,1) = KSSPER(6,1,I)                                   
          LSSPER(1,2) = KSSPER(3,1,I)                                   
          LSSPER(2,1) = KSSPER(6,1,I)                                   
          LSSPER(2,2) = KSSPER(2,1,I)                                   
          LSSPER(3,1) = KSSPER(5,1,I)                                   
          LSSPER(3,2) = KSSPER(3,1,I)                                   
          LSSPER(4,1) = KSSPER(5,1,I)                                   
          LSSPER(4,2) = KSSPER(2,1,I)                                   
C                                                                       
C UNIT PAIR : IA & IB-1 / SG(6)-CA(1)                                   
C                                                                       
        NAB = NAB+1                                                     
        JSS(2,I) = JANGLE(NAB)                                          
          LSSPER(5,1) = KSSPER(6,1,I)                                   
          LSSPER(5,2) = KSSPER(1,1,I)                                   
C                                                                       
C UNIT PAIR : IA-1 & IB / CA(4)-SG(3)                                   
C                                                                       
        NAB = NAB - IA                                                  
        JSS(3,I) = JANGLE(NAB)                                          
          LSSPER(6,1) = KSSPER(4,1,I)                                   
          LSSPER(6,2) = KSSPER(3,1,I)                                   
C                                                                       
        DO  100  J = 1, 6                                               
          KSSPER(J,1,I) = LSSPER(J,1)                                   
  100     KSSPER(J,2,I) = LSSPER(J,2)                                   
C                                                                       
        IF (I.EQ.1)  GOTO  140                                          
C                                                                       
C ARRANGE IN DESCENDING ORDER OF UNIT DISTANCES                         
C                                                                       
        MSS = I1                                                        
  110   MSS = MSS-1                                                     
        IF (KSS(LSS(MSS)).GE.KSS(LSS(MSS+1)))  GOTO  120                
          LS = LSS(MSS)                                                 
          LSS(MSS) = LSS(MSS+1)                                         
          LSS(MSS+1) = LS                                               
        IF (MSS.GT.1)  GOTO  110                                        
C                                                                       
  120   MSS = I2                                                        
  130   MSS = MSS-1                                                     
        IF (KSS(LSS(MSS)).GE.KSS(LSS(MSS+1)))  GOTO  140                
          LS = LSS(MSS)                                                 
          LSS(MSS) = LSS(MSS+1)                                         
          LSS(MSS+1) = LS                                               
        IF (MSS.GT.1)  GOTO  130                                        
C                                                                       
  140 CONTINUE                                                          
      RETURN                                                            
      END                                                               
      SUBROUTINE  PAIR14 (KMAX,LISTK,JANGLE,KANGLE)                     
C                                                                       
C  THIS SUBROUTINE MAKES THE LISTS OF INTERACTABLE ATOM PAIRS IPAIR1    
C  AND IPAIR2.                                                          
C                                                                       
C FOR ATOM PAIRS THAT BELONG TO THE UNIT PAIRS OF DISTACES K=0, 1 OR 2  
C   THE LISTS IPAIR1 AND IPIAR2 ARE MADE.                               
C FOR ATOM PAIRS THAT BELONG TO THE UNIT PAIRS OF DISTACES K>=3         
C   ONLY INTERACTION TYPES (1-4 OR 1-5) ARE CHECKED, AND ATOM PAIRS OF  
C   1-4 INTERACTION ARE STORED  IN LIST14.                              
C                                                                       
C  THIS SUBROUTINE IS CALLED ONLY ONCE.                                 
C                                                                       
      IMPLICIT REAL*8 (A-H,O-Z)                                         
C     PARAMETER  (MAXATM=3000,MAXVAR=800,MAXLEN=3500,MAXINT=60000)      
C     PARAMETER  (MXATM1=MAXATM+1,MVAR1=MAXVAR+1)                       
C     PARAMETER  (MAXI1=MAXINT/2,MAXI2=MAXINT-MAXI1)                    
CMSP  INCLUDE (MAXSIZE)                                                 
      INCLUDE '/labo/qclib/inspidas/common/maxsize'
CMSP  INCLUDE (SIZE)                                                    
      INCLUDE '/labo/qclib/inspidas/common/size'
CMSP  INCLUDE (ATOM)                                                    
      INCLUDE '/labo/qclib/inspidas/common/atom'
CMSP  INCLUDE (BOND)                                                    
      INCLUDE '/labo/qclib/inspidas/common/bond'
CMSP  INCLUDE (INTER0)                                                  
      INCLUDE '/labo/qclib/inspidas/common/inter0'
CMSP  INCLUDE (TABLE1)                                                  
      INCLUDE '/labo/qclib/inspidas/common/table1'
C     COMMON/NUMBER/  NUMATM,NUMVAR,NN2,NUMINT,NSS,NUMRES               
C     COMMON/NUMBR1/  NATM1,NVAR1,NPAIR1                                
C     COMMON/ATOM00/  KUNIT(MAXATM),KATOM(MXATM1),JATOM(MAXATM)         
C     COMMON/BOND00/  DIRCOS(3,MAXVAR),IBND1(MAXVAR),IBND2(0:MVAR1)     
      COMMON/INTR14/  NO14(-1:MAXVAR),LIST14(100),                      
     &                NO12(-1:MAXVAR),LIST12(100)                       
C     COMMON/INTER0/  INTER(MAXATM),INTATM(3,MAXLEN)                    
C     COMMON/TABLE1/  IFRONT(MAXVAR),NBACK(0:MAXVAR),IBACK(2,0:MAXVAR)  
      COMMON/TABLE3/  NINT,IPAIR1(MAXI1),IPAIR2(MAXI2),LINT(-1:MAXVAR)  
      DIMENSION  LISTK(-1:NUMVAR),JANGLE(NN2),KANGLE(0:NPAIR1)          
      NINT = 0                                                          
      N14  = 0                                                          
      NO14(KMAX) = 1                                                    
      N12  = 0                                                          
      NO12(KMAX) = 1                                                    
C                                                                       
      DO  30  KAB = KMAX, 0, -1                                         
        LINI = LISTK(KAB)                                               
        LFIN = LISTK(KAB-1) - 1                                         
        LINT0 = 0                                                       
        MINT0 = 0                                                       
        MFLAG = -1                                                      
        IF (KAB.LE.2)  MFLAG = 1                                        
C                                                                       
        DO  20  LKJ = LINI, LFIN                                        
          KA = IABS(KANGLE(LKJ))                                        
          IA = KA/10000                                                 
          IB = KA - 10000*IA                                            
          IF (KANGLE(LKJ).LT.0)  IB = IFRONT(IB)                        
          JA1 = KATOM(IBND2(IA))                                        
          JA2 = KATOM(IBND2(IA+1)) - 1                                  
          JB1 = KATOM(IBND2(IB))                                        
          JB2 = KATOM(IBND2(IB+1)) - 1                                  
          NRPAIR = 0                                                    
C                                                                       
          DO  10  JA = JA1, JA2                                         
            JJA = JATOM(JA)                                             
          DO  10  JB = JB1, JB2                                         
            JJB = JATOM(JB)                                             
            LPRE = LINT0                                                
            CALL  TYPCK  (JJA,JJB,NINT,INTER,INTATM,IPAIR1,IPAIR2,      
     &                    NRPAIR,LINT0,MFLAG)                           
C                                                                       
C  IF INTERACTION BETWEEN ATOMS JJA AND JJB IS OF 1-4 TYPE, THEN ...    
C                                                                       
            IF (MFLAG.EQ.-2)  THEN                                      
              N14 = N14 + 1                                             
              LIST14(N14) = LINT0                                       
              MFLAG = -1                                                
            ENDIF                                                       
C                                                                       
C  IF INTERACTION BETWEEN ATOMS JJA AND JJB IS OF 1-2 OR 1-3 TYPE, THEN 
C                                                                       
            IF (MFLAG.LT.0)  THEN                                       
              MINT0 = MINT0 + 1                                         
              IF (LPRE.EQ.LINT0)  THEN                                  
                N12 = N12 + 1                                           
                LIST12(N12) = MINT0                                     
              ENDIF                                                     
            ENDIF                                                       
C                                                                       
  10      CONTINUE                                                      
C                                                                       
          JANGLE(LKJ) = JANGLE(LKJ) + NRPAIR                            
C                                                                       
  20    CONTINUE                                                        
C                                                                       
        LINT(KAB) = LINT0                                               
        NO14(KAB-1) = N14 + 1                                           
        NO12(KAB-1) = N12 + 1                                           
C                                                                       
  30  CONTINUE                                                          
C                                                                       
      LM1 = 0                                                           
      DO  40  K = 0, KMAX                                               
  40  LM1 = LM1 + LINT(K)                                               
      LINT(-1) = LM1 + 1                                                
      DO  50  K = 0, KMAX                                               
  50  LINT(K) = LINT(K-1) - LINT(K)                                     
      RETURN                                                            
      END                                                               
      SUBROUTINE TYPCK (II,JJ,NINT,INTER,INTATM,IPAIR1,IPAIR2,NRPAIR,   
     &                   LINT,MFLAG)                                    
C                                                                       
C  THIS SUBROUTINE CHECKS THE INTERACTION TYPE OF THE PAIR OF ATOMS     
C  II AND JJ.  IF THE INTERACTION IS OF 1-4 TYPE, THEN SET IPAIR1<0     
C  IF MFLAG>0  OR SET MFLAG=-2 IF MFLAG<0.                              
C                                                                       
C     PARAMETER  (MAXATM=3000,MAXVAR=800,MAXLEN=3500,MAXINT=60000)      
CMSP  INCLUDE (MAXSIZE)                                                 
      INCLUDE '/labo/qclib/inspidas/common/maxsize'
CMSP  INCLUDE (SIZE)                                                    
      INCLUDE '/labo/qclib/inspidas/common/size'
C     INCLUDE (INTER0)                                                  
C     COMMON/NUMBER/  NUMATM,NUMVAR,NN2,NUMINT,NSS,NUMRES               
      DIMENSION  IPAIR1(*),IPAIR2(*),INTER(NUMATM),INTATM(3,NUMINT)     
      M1 = MIN(II,JJ)                                                   
      M2 = MAX(II,JJ)                                                   
      INTM1 = INTER (M1)                                                
C                                                                       
  10  IATMI = M1 + INTATM(1,INTM1)                                      
      NUM4 = INTATM(2,INTM1)                                            
      IATMF = IATMI + NUM4 - 1                                          
      IF (NUM4.EQ.0)  GOTO  20                                          
      IF (M2.GE.IATMI.AND.M2.LE.IATMF)  THEN                            
        IF (MFLAG.LT.0)  THEN                                           
          MFLAG = -2                                                    
        ELSE                                                            
          NINT = NINT + 1                                               
          IPAIR1(NINT) = -II                                            
          IPAIR2(NINT) = JJ                                             
        ENDIF                                                           
        GOTO  120                                                       
      ENDIF                                                             
C                                                                       
  20  KEY = INTATM(3,INTM1)                                             
      IF (KEY.EQ.0)  GOTO  30                                           
      IATMI = IATMF + 1                                                 
      IATMF = NUMATM                                                    
      IF (KEY.GT.0)  IATMF = IATMI + KEY - 1                            
      IF (M2.GE.IATMI.AND.M2.LE.IATMF)  THEN                            
        IF (MFLAG.GT.0)  THEN                                           
          NINT = NINT + 1                                               
          IPAIR1(NINT) = II                                             
          IPAIR2(NINT) = JJ                                             
        ENDIF                                                           
        GOTO  120                                                       
      ENDIF                                                             
C                                                                       
  30  IF (NUM4.EQ.0.AND.KEY.EQ.0)  RETURN                               
      IF (KEY.LT.0)  RETURN                                             
      INTM1 = INTM1 + 1                                                 
         GOTO  10                                                       
C                                                                       
  120 NRPAIR = NRPAIR + 10000                                           
      LINT = LINT + 1                                                   
      RETURN                                                            
      END                                                               
      SUBROUTINE  PAIR15 (JPAIR1,JPAIR2,JAA,JBF,JFIN,                   
     &              KATOM,JATOM,IBND2,LI,LF,LIST14,MI,MF,LIST12,MFLAG)  
C                                                                       
C  THIS SUBROUTINE MAKES THE LISTS OF INTERACTABLE ATOM PAIRS JPAIR1    
C  AND JPAIR2.  IN THIS SUBROUTINE ONLY THE ATOM PAIRS THAT BELONGS TO  
C  THE UNIT PAIRS OF A GIVEN DISTANCE K (K>2) ARE LISTED UP.            
C                                                                       
C  THIS SUBROUTINE IS CALLED EVERY TIME THE SUBROUTINE DERVTV IS        
C  CALLED IN ORDER TO SAVE THE MEMORY SPACE FOR JPAIR1 AND JPAIR2.      
C                                                                       
      IMPLICIT REAL*8 (A-H,O-Z)                                         
CMSP  INCLUDE (SIZE)                                                    
      INCLUDE '/labo/qclib/inspidas/common/size'
C     COMMON/NUMBER/  NUMATM,NUMVAR,NN2,NUMINT,NSS,NUMRES               
C     COMMON/NUMBR1/  NATM1,NVAR1,NPAIR1                                
      DIMENSION  JPAIR1(*),JPAIR2(*),JAA(JFIN),JBF(JFIN)                
      DIMENSION  KATOM(NATM1),JATOM(NUMATM),IBND2(0:NVAR1)              
      DIMENSION  LIST14(*),LIST12(*)                                    
C                                                                       
      LFIN = 0                                                          
C                                                                       
      DO  20  LKJ = 1, JFIN                                             
        IA = JAA(LKJ)                                                   
        IB = JBF(LKJ)                                                   
        JA1 = KATOM(IBND2(IA))                                          
        JA2 = KATOM(IBND2(IA+1)) - 1                                    
        JB1 = KATOM(IBND2(IB))                                          
        JB2 = KATOM(IBND2(IB+1)) - 1                                    
C                                                                       
C  TO EXPAND A MOST INNER LOOP FIVE CASES ARE CONSIDERED.               
C                                                                       
        IF (JB2-JB1-3)  1, 5, 6                                         
   1    IF (JB2-JB1-1)  2, 3, 4                                         
C  JB2-JB1=0                                                            
   2    JATJB1 = JATOM(JB1)                                             
        DO  12  JA = JA1, JA2                                           
          LFIN = LFIN + 1                                               
          JPAIR1(LFIN) = JATOM(JA)                                      
  12      JPAIR2(LFIN) = JATJB1                                         
            GOTO  20                                                    
C  JB2-JB1=1                                                            
   3    JATJB1 = JATOM(JB1)                                             
        JATJB2 = JATOM(JB2)                                             
        DO  13  JA = JA1, JA2                                           
          JPAIR1(LFIN+1) = JATOM(JA)                                    
          JPAIR1(LFIN+2) = JATOM(JA)                                    
          JPAIR2(LFIN+1) = JATJB1                                       
          JPAIR2(LFIN+2) = JATJB2                                       
  13      LFIN = LFIN + 2                                               
            GOTO  20                                                    
C  JB2-JB1=2                                                            
   4    JATJB1 = JATOM(JB1)                                             
        JATJB2 = JATOM(JB1+1)                                           
        JATJB3 = JATOM(JB2)                                             
        DO  14  JA = JA1, JA2                                           
          JPAIR1(LFIN+1) = JATOM(JA)                                    
          JPAIR1(LFIN+2) = JATOM(JA)                                    
          JPAIR1(LFIN+3) = JATOM(JA)                                    
          JPAIR2(LFIN+1) = JATJB1                                       
          JPAIR2(LFIN+2) = JATJB2                                       
          JPAIR2(LFIN+3) = JATJB3                                       
  14      LFIN = LFIN + 3                                               
            GOTO  20                                                    
C  JB2-JB1=3                                                            
   5    JATJB1 = JATOM(JB1)                                             
        JATJB2 = JATOM(JB1+1)                                           
        JATJB3 = JATOM(JB1+2)                                           
        JATJB4 = JATOM(JB2)                                             
        DO  15  JA = JA1, JA2                                           
          JPAIR1(LFIN+1) = JATOM(JA)                                    
          JPAIR1(LFIN+2) = JATOM(JA)                                    
          JPAIR1(LFIN+3) = JATOM(JA)                                    
          JPAIR1(LFIN+4) = JATOM(JA)                                    
          JPAIR2(LFIN+1) = JATJB1                                       
          JPAIR2(LFIN+2) = JATJB2                                       
          JPAIR2(LFIN+3) = JATJB3                                       
          JPAIR2(LFIN+4) = JATJB4                                       
  15      LFIN = LFIN + 4                                               
            GOTO  20                                                    
C  JB2-JB1>3                                                            
   6    DO  17  JA = JA1, JA2                                           
          JPA = JATOM(JA)                                               
          DO  16  JB = JB1, JB2                                         
            LFIN = LFIN + 1                                             
            JPAIR1(LFIN) = JPA                                          
            JPAIR2(LFIN) = JATOM(JB)                                    
  16     CONTINUE                                                       
  17   CONTINUE                                                         
  20  CONTINUE                                                          
C                                                                       
C  MFLAG.LT.0   INDICATES THAT ALL THE INTERACTIONS OF ATOM PAIRS       
C               CONSIDERED NOW ARE OF 1-5 TYPE.                         
C  MFLAG.GT.0   INDICATES THAT THE INTERACTIONS OF ATOM PAIRS CONSIDERED
C               NOW ARE OF EITHER 1-4 OR 1-5 TYPE. THIS IS THE CASE OF  
C               DISULFIDE BONDS.                                        
C                                                                       
      IF (MFLAG.LT.0)  RETURN                                           
C                                                                       
      IF (MF.LT.MI)    GOTO  50                                         
C                                                                       
C  1-2 AND 1-3 TYPE INTERACTIONS ARE DISCARDED.                         
C                                                                       
      KFIN = LIST12(MI)-1                                               
      DO  42  M = MI, MF                                                
        M1 = LIST12(M)+1                                                
        IF (M.EQ.MF)  THEN                                              
          M2 = LFIN                                                     
        ELSE                                                            
          M2 = LIST12(M+1)-1                                            
        ENDIF                                                           
        IF (M2.LT.M1)  GOTO  42                                         
        DO  40  J = M1, M2                                              
          KFIN = KFIN+1                                                 
          JPAIR1(KFIN) = JPAIR1(J)                                      
          JPAIR2(KFIN) = JPAIR2(J)                                      
  40    CONTINUE                                                        
  42  CONTINUE                                                          
      LFIN=KFIN                                                         
C                                                                       
  50  IF (LF.LT.LI)    RETURN                                           
C                                                                       
C  1-4 TYPE INTERACTIONS ARE MARKED.                                    
C                                                                       
*VOPTION VEC                                                            
      DO  60  L = LI, LF                                                
  60    JPAIR1(LIST14(L)) = -JPAIR1(LIST14(L))                          
C                                                                       
      RETURN                                                            
      END                                                               
      FUNCTION  KDIST (IA,IB,IBCHAR)                                    
C                                                                       
C  THIS FUNCTION SUBPROGRAM COMPUTES THE DISTANCE BETWEEN TWO BONDS     
C  IA AND IB ALONG THE CHAIN.                                           
C                                                                       
C     COMMON/NUMBER/  NUMATM,NUMVAR,NN2,NUMINT,NSS,NUMRES               
CMSP  INCLUDE (MAXSIZE)                                                 
      INCLUDE '/labo/qclib/inspidas/common/maxsize'
CMSP  INCLUDE (SIZE)                                                    
      INCLUDE '/labo/qclib/inspidas/common/size'
C     DIMENSION  IBCHAR(3,NUMVAR)                                       
      DIMENSION  IBCHAR(3,MAXVAR)                                       
C                                                                       
      IF (IBCHAR(1,IA).NE.IBCHAR(1,IB))  THEN                           
        KDIST=IABS(IBCHAR(1,IA)-IBCHAR(1,IB))+IBCHAR(2,IA)+IBCHAR(2,IB) 
     &                                       +IBCHAR(3,IA)+IBCHAR(3,IB) 
        KDIST = KDIST/2                                                 
      ELSE IF (IBCHAR(2,IA).NE.IBCHAR(2,IB))  THEN                      
        KDIST=IABS(IBCHAR(2,IA)-IBCHAR(2,IB))+IBCHAR(3,IA)+IBCHAR(3,IB) 
        KDIST = KDIST/2                                                 
      ELSE                                                              
        KDIST=IABS(IBCHAR(3,IA)-IBCHAR(3,IB))/2                         
      ENDIF                                                             
C                                                                       
      RETURN                                                            
      END                                                               
      SUBROUTINE  DEVIAT (VAR,CO,COX,COWRK,LFLAG,WRK,                   
     &                    ATNAME,RENAME,NMBRES)                         
C                                                                       
C  THIS SUBROUTINE COMPUTES THE DEVIATIONS OF ATOM POSITIONS INCOMPUTED 
C  CONFORMATION FROM THOSE IN X-RAY DATA, WHEN TWO CONFORMATIONS ARE    
C  SUPERIMPOSED ON EACH OTHER.                                          
C  LARGER DEVIATED ATOMS AND MEAN DEVIATON FOR EACH RESIDUE ARE PRINTED 
C  OUT.                                                                 
C                                                                       
      IMPLICIT REAL*8 (A-H,O-Z)                                         
      CHARACTER*4  ATNAME(NUMATM),RENAME(NUMATM)                        
CMSP  INCLUDE (SIZE)                                                    
      INCLUDE '/labo/qclib/inspidas/common/size'
CMSP  INCLUDE (UNITNUMS)                                                
      INCLUDE '/labo/qclib/inspidas/common/unitnums'
C     COMMON/NUMBER/  NUMATM,NUMVAR,NN2,NUMINT,NSS,NUMRES               
      DIMENSION  VAR(NUMVAR),CO(3,NUMATM),COX(3,NUMATM),COWRK(3,NUMATM) 
      DIMENSION  LFLAG(NUMATM),WRK(4,NUMRES),NMBRES(NUMATM)             
      DATA  DEVMAX /2.0/,IPRMAX/100/                                    
C                                                                       
      CALL  GENRA (VAR,CO)                                              
      DO  10  L = 1, 3                                                  
      DO  10  I = 1, NUMATM                                             
  10    COWRK(L,I) = CO(L,I)                                            
C                                                                       
      CALL  BSTFTX (NUMATM,COX,COWRK,LFLAG,1,RMS)                       
C                                                                       
      DO  20  I = 1, NUMRES                                             
        WRK(1,I) = 0.D0                                                 
        WRK(2,I) = 0.D0                                                 
        WRK(3,I) = 0.D0                                                 
        WRK(4,I) = 0.D0                                                 
  20  CONTINUE                                                          
C                                                                       
      WRITE(IOUT06,200) DEVMAX                                          
      WRITE(IOUT02,200) DEVMAX                                          
      JPR = 0                                                           
C                                                                       
      DO  30  I = 1, NUMATM                                             
        IF (LFLAG(I).GE.1)  THEN                                        
          D = (COWRK(1,I)-COX(1,I))**2 + (COWRK(2,I)-COX(2,I))**2       
     &        + (COWRK(3,I)-COX(3,I))**2                                
          IF (DSQRT(D).GT.DEVMAX)  THEN                                 
            JPR = JPR + 1                                               
            IF (JPR.LE.IPRMAX)  THEN                                    
              WRITE(IOUT06,100) ATNAME(I),RENAME(I),NMBRES(I),DSQRT(D)  
              WRITE(IOUT02,100) ATNAME(I),RENAME(I),NMBRES(I),DSQRT(D)  
  100         FORMAT('  ',10X,A4,1X,A4,I5,F10.2)                        
            ENDIF                                                       
          ENDIF                                                         
          IRES = NMBRES(I)                                              
          WRK(1,IRES) = WRK(1,IRES) + D                                 
          WRK(2,IRES) = WRK(2,IRES) + 1.                                
          IF (LFLAG(I).GE.2)  THEN                                      
            WRK(3,IRES) = WRK(3,IRES) + D                               
            WRK(4,IRES) = WRK(4,IRES) + 1.                              
          ENDIF                                                         
        ENDIF                                                           
  30  CONTINUE                                                          
C                                                                       
      WRITE(IOUT06,110) JPR                                             
      WRITE(IOUT06,120) RMS                                             
      WRITE(IOUT06,210)                                                 
      WRITE(IOUT02,110) JPR                                             
      WRITE(IOUT02,120) RMS                                             
      WRITE(IOUT02,210)                                                 
      DO  40  I = 1, NUMRES-2                                           
        IF (WRK(2,I).NE.0.)  WRK(1,I) = WRK(1,I)/WRK(2,I)               
        IF (WRK(4,I).NE.0.)  WRK(3,I) = WRK(3,I)/WRK(4,I)               
        WRITE(IOUT06,130) I,WRK(1,I),WRK(3,I)                           
        WRITE(IOUT02,130) I,WRK(1,I),WRK(3,I)                           
  40  CONTINUE                                                          
C                                                                       
      RETURN                                                            
  110 FORMAT('       NO. OF ATOMS WITH LARGER DEVIATON : ',I6)          
  120 FORMAT('0      R.M.S. DEVIATON (ALL ATOMS)=',F8.3)                
  130 FORMAT(' ',10X,I5,5X,F10.2,5X,F10.2)                              
  200 FORMAT('0 *****  DEVIATIONS FROM THE X-RAY DATA  *****'//         
     &       '    ATOM LIST THAT DEVIATES FROM X-RAY DATA BY MORE THAN' 
     &       F4.1,'(A)'/)                                               
  210 FORMAT('0',10X,'<<MEAN DEVIATON OF EACH RESIDUE>>'/               
     &       ' ',10X,'RES.#      ALL ATOM     BACKBONE ONLY')           
      END                                                               
      SUBROUTINE  BSTFTX (N,CO1,CO2,IFLAG,IMS,RMS)                      
      IMPLICIT REAL*8 (A-H,O-Z)                                         
      DIMENSION  A(3,3)                                                 
      DIMENSION  CO1(3,N),CO2(3,N),IFLAG(N)                             
      DIMENSION  XC1(3),XC2(3)                                          
C                                                                       
      DO  10  K = 1, 3                                                  
        XC1(K) = 0.0                                                    
        XC2(K) = 0.0                                                    
  10  CONTINUE                                                          
C                                                                       
      NATOM=0                                                           
      DO  14  NA = 1, N                                                 
        IF (IFLAG(NA).GE.IMS)  THEN                                     
          NATOM=NATOM+1                                                 
          DO  12  K = 1, 3                                              
            XC1(K) = XC1(K) + CO1(K,NA)                                 
            XC2(K) = XC2(K) + CO2(K,NA)                                 
  12      CONTINUE                                                      
        ENDIF                                                           
  14  CONTINUE                                                          
C                                                                       
      DO  18  K = 1, 3                                                  
        XC1(K) = XC1(K)/NATOM                                           
        XC2(K) = XC2(K)/NATOM                                           
        DO  16  NA = 1, N                                               
          CO1(K,NA) = CO1(K,NA) - XC1(K)                                
          CO2(K,NA) = CO2(K,NA) - XC2(K)                                
  16    CONTINUE                                                        
  18  CONTINUE                                                          
C                                                                       
      DO  32  I = 1, 3                                                  
      DO  32  J = 1, 3                                                  
        A(I,J) = 0.0                                                    
        DO  30  NA = 1, N                                               
          IF (IFLAG(NA).GE.IMS)  THEN                                   
            A(I,J) = A(I,J) + CO1(I,NA)*CO2(J,NA)                       
          ENDIF                                                         
  30    CONTINUE                                                        
  32  CONTINUE                                                          
C                                                                       
      CALL  BSTFT0 (N,CO2,A)                                            
C                                                                       
      RMS = 0.D0                                                        
      DO  80  NA = 1, N                                                 
        IF (IFLAG(NA).GE.IMS)  THEN                                     
          XD = CO2(1,NA) - CO1(1,NA)                                    
          YD = CO2(2,NA) - CO1(2,NA)                                    
          ZD = CO2(3,NA) - CO1(3,NA)                                    
          RMS = RMS + XD*XD + YD*YD + ZD*ZD                             
        ENDIF                                                           
  80  CONTINUE                                                          
C                                                                       
      RMS = SQRT(RMS/NATOM)                                             
C                                                                       
      RETURN                                                            
      END                                                               
      SUBROUTINE  BSTFT0 (N,CO2,A)                                      
      IMPLICIT REAL*8 (A-H,O-Z)                                         
      DIMENSION  A(3,3),U(3,3),V(3,3),R(3,3),D(3),WK(3),C(3)            
      DIMENSION  CO2(3,N)                                               
C                                                                       
      DETA = A(1,1)*A(2,2)*A(3,3) + A(1,2)*A(2,3)*A(3,1)                
     &     + A(1,3)*A(2,1)*A(3,2) - A(3,1)*A(2,2)*A(1,3)                
     &     - A(3,2)*A(2,3)*A(1,1) - A(3,3)*A(2,1)*A(1,2)                
C                                                                       
      CALL  SVDD (A,3,3,3,3,D,U,3,V,3,WK,IER)                           
C                                                                       
      IF (DETA.GT.0.)  THEN                                             
        DO  60  I = 1, 3                                                
        DO  60  J = 1, 3                                                
  60      R(I,J) = U(I,1)*V(J,1)+U(I,2)*V(J,2)+U(I,3)*V(J,3)            
      ELSE IF (DETA.LT.0.)  THEN                                        
        DO  62  I = 1, 3                                                
        DO  62  J = 1, 3                                                
  62      R(I,J) = U(I,1)*V(J,1)+U(I,2)*V(J,2)-U(I,3)*V(J,3)            
      ELSE                                                              
        PRINT *,'**  ERROR IN CALCULATION OF DETERMINANT. **'           
      ENDIF                                                             
C                                                                       
      DO  80  NA = 1, N                                                 
          C(1) = R(1,1)*CO2(1,NA)+R(1,2)*CO2(2,NA)+R(1,3)*CO2(3,NA)     
          C(2) = R(2,1)*CO2(1,NA)+R(2,2)*CO2(2,NA)+R(2,3)*CO2(3,NA)     
          C(3) = R(3,1)*CO2(1,NA)+R(3,2)*CO2(2,NA)+R(3,3)*CO2(3,NA)     
          CO2(1,NA) = C(1)                                              
          CO2(2,NA) = C(2)                                              
          CO2(3,NA) = C(3)                                              
  80  CONTINUE                                                          
C                                                                       
      RETURN                                                            
      END                                                               
C#NUMPAC#SVDD                REVISED ON 1984-11-30                      
      SUBROUTINE SVDD(A,KA,M,N,ISW,Q,U,KU,V,KV,W,IND)                   
      IMPLICIT REAL*8 (A-H,O-Z)                                         
      DIMENSION A(KA,N),U(KU,N),V(KV,*),Q(N),W(N)                       
      IND=30000                                                         
      MN=MIN0(M,N)                                                      
      IF(MN.LT.1.OR.M.GT.KA.OR.M.GT.KU) GO TO 490                       
      MU=ISW/2                                                          
      MV=MOD(ISW,2)                                                     
      IF(MU.LT.0.OR.MU.GT.1.OR.MV.LT.0.OR.MV.GT.1) GO TO 490            
      IF(MV.EQ.1.AND.N.GT.KV) GO TO 490                                 
      M1N=MIN0(M+1,N)                                                   
      DO 10 J=1,N                                                       
      DO 10 I=1,M                                                       
   10 U(I,J)=A(I,J)                                                     
      ANORM=0.                                                          
      G=0.                                                              
      DO 100 I=1,M1N                                                    
      Q(I)=0.                                                           
      W(I)=G                                                            
      IF(I.GT.M) GO TO 100                                              
      IP1=I+1                                                           
      G=U(I,I)                                                          
      IF(I.EQ.M) GO TO 30                                               
      SUM=0.                                                            
      DO 20 K=I,M                                                       
   20 SUM=U(K,I)*U(K,I)+SUM                                             
      S=SUM                                                             
      G=-DSIGN(DSQRT(S),G)                                              
      H=U(I,I)*G-S                                                      
      U(I,I)=U(I,I)-G                                                   
   30 Q(I)=G                                                            
      IF(I.EQ.N) GO TO 100                                              
      IF(S.EQ.0..OR.I.EQ.M) GO TO 60                                    
      DO 50 J=IP1,N                                                     
      SUM=0.                                                            
      DO 40 K=I,M                                                       
   40 SUM=U(K,I)*U(K,J)+SUM                                             
      F=SUM/H                                                           
      DO 50 K=I,M                                                       
   50 U(K,J)=U(K,I)*F+U(K,J)                                            
   60 G=U(I,IP1)                                                        
      IF(IP1.EQ.N) GO TO 100                                            
      SUM=0.                                                            
      DO 70 K=IP1,N                                                     
   70 SUM=U(I,K)*U(I,K)+SUM                                             
      S=SUM                                                             
      G=-DSIGN(DSQRT(S),G)                                              
      H=U(I,IP1)*G-S                                                    
      U(I,IP1)=U(I,IP1)-G                                               
      IF(S.EQ.0..OR.I.EQ.M) GO TO 100                                   
      DO 90 J=IP1,M                                                     
      SUM=0.                                                            
      DO 80 K=IP1,N                                                     
   80 SUM=U(I,K)*U(J,K)+SUM                                             
      F=SUM/H                                                           
      DO 90 K=IP1,N                                                     
   90 U(J,K)=U(I,K)*F+U(J,K)                                            
  100 ANORM=DMAX1(DABS(Q(I))+DABS(W(I)),ANORM)                          
      TOL=DMACH(TOL)*ANORM                                              
      IF(MV.EQ.0) GO TO 180                                             
      DO 170 II=1,M1N                                                   
      I=M1N+1-II                                                        
      IF(I.EQ.N) GO TO 170                                              
      IP1=I+1                                                           
      IF(I.EQ.M1N) GO TO 150                                            
      IF(IP1.EQ.N.OR.W(IP1).EQ.0.) GO TO 130                            
      H=U(I,IP1)*W(IP1)                                                 
      DO 120 J=IP1,M1N                                                  
      SUM=0.                                                            
      DO 110 K=IP1,N                                                    
  110 SUM=U(I,K)*V(K,J)+SUM                                             
      F=SUM/H                                                           
      DO 120 K=IP1,N                                                    
  120 V(K,J)=U(I,K)*F+V(K,J)                                            
  130 DO 140 J=IP1,M1N                                                  
  140 V(I,J)=0.                                                         
  150 DO 160 J=IP1,N                                                    
  160 V(J,I)=0.                                                         
  170 V(I,I)=1.                                                         
  180 IF(MU.EQ.0) GO TO 260                                             
      DO 250 II=1,MN                                                    
      I=MN+1-II                                                         
      IF(I.EQ.MN) GO TO 200                                             
      IP1=I+1                                                           
      DO 190 J=IP1,MN                                                   
  190 U(I,J)=0.                                                         
  200 IF(Q(I).EQ.0.) GO TO 250                                          
      IF(I.EQ.MN) GO TO 230                                             
      H=U(I,I)*Q(I)                                                     
      DO 220 J=IP1,MN                                                   
      SUM=0.                                                            
      DO 210 K=IP1,M                                                    
  210 SUM=U(K,I)*U(K,J)+SUM                                             
      F=SUM/H                                                           
      DO 220 K=I,M                                                      
  220 U(K,J)=U(K,I)*F+U(K,J)                                            
  230 DO 240 K=I,M                                                      
  240 U(K,I)=U(K,I)/Q(I)                                                
  250 IF(I.LT.M.OR.Q(I).EQ.0.) U(I,I)=U(I,I)+1.                         
  260 IF(ANORM.EQ.0.) GO TO 470                                         
      DO 390 KK=1,M1N                                                   
      K=M1N+1-KK                                                        
      DO 360 IT=1,30                                                    
      DO 270 LL=1,K                                                     
      L=K+1-LL                                                          
      IF(DABS(W(L)).LT.TOL) GO TO 310                                   
      IF(DABS(Q(L)).LT.TOL) GO TO 280                                   
  270 CONTINUE                                                          
  280 C=0.                                                              
      S=-1.                                                             
      DO 300 II=2,L                                                     
      I=L+1-II                                                          
      F=-W(I+1)*S                                                       
      W(I+1)=W(I+1)*C                                                   
      IF(DABS(F).LT.TOL) GO TO 310                                      
      G=Q(I)                                                            
      Q(I)=DSQRT(G*G+F*F)                                               
      C=G/Q(I)                                                          
      S=F/Q(I)                                                          
      IF(MV.EQ.0) GO TO 300                                             
      DO 290 J=1,N                                                      
      X=V(J,I)                                                          
      V(J,I)=V(J,L)*S+X*C                                               
  290 V(J,L)=V(J,L)*C-X*S                                               
  300 CONTINUE                                                          
  310 IF(L.EQ.K) GO TO 370                                              
      G=W(K-1)                                                          
      H=W(K)                                                            
      X=Q(L)                                                            
      Y=Q(K-1)                                                          
      Z=Q(K)                                                            
      F=((Y-Z)*(Y+Z)+(G-H)*(G+H))/(H*Y*2.)                              
      F=((X-Z)*(X+Z)+H*(Y/(DSIGN(DSQRT(F*F+1.),F)+F)-H))/X              
      C=1.                                                              
      S=1.                                                              
      LP1=L+1                                                           
      DO 350 I=LP1,K                                                    
      H=W(I)*S                                                          
      G=W(I)*C                                                          
      W(I-1)=DSQRT(F*F+H*H)                                             
      C=F/W(I-1)                                                        
      S=H/W(I-1)                                                        
      F=X*C+G*S                                                         
      G=G*C-X*S                                                         
      H=Q(I)*S                                                          
      Y=Q(I)*C                                                          
      IF(MV.EQ.0) GO TO 330                                             
      DO 320 J=1,N                                                      
      X=V(J,I-1)                                                        
      V(J,I-1)=V(J,I)*S+X*C                                             
  320 V(J,I)=V(J,I)*C-X*S                                               
  330 Q(I-1)=DSQRT(F*F+H*H)                                             
      C=F/Q(I-1)                                                        
      S=H/Q(I-1)                                                        
      F=G*C+Y*S                                                         
      X=Y*C-G*S                                                         
      IF(MU.EQ.0) GO TO 350                                             
      DO 340 J=1,M                                                      
      Y=U(J,I-1)                                                        
      U(J,I-1)=U(J,I)*S+Y*C                                             
  340 U(J,I)=U(J,I)*C-Y*S                                               
  350 CONTINUE                                                          
      W(L)=0.                                                           
      W(K)=F                                                            
  360 Q(K)=X                                                            
      GO TO 480                                                         
  370 IF(Q(K).GE.0.) GO TO 390                                          
      Q(K)=-Q(K)                                                        
      IF(MV.EQ.0) GO TO 390                                             
      DO 380 J=1,N                                                      
  380 V(J,K)=-V(J,K)                                                    
  390 CONTINUE                                                          
      IF(N.EQ.1) GO TO 470                                              
      K=MN                                                              
  400 L=1                                                               
      II=1                                                              
      LL=1                                                              
      DO 420 I=2,K                                                      
      IF(Q(I).GT.Q(L)) GO TO 410                                        
      L=I                                                               
      GO TO 420                                                         
  410 II=I                                                              
      LL=L                                                              
  420 CONTINUE                                                          
      IF(II.EQ.LL) GO TO 460                                            
      S=Q(II)                                                           
      Q(II)=Q(LL)                                                       
      Q(LL)=S                                                           
      IF(MV.EQ.0) GO TO 440                                             
      DO 430 J=1,N                                                      
      S=V(J,II)                                                         
      V(J,II)=V(J,LL)                                                   
  430 V(J,LL)=S                                                         
  440 IF(MU.EQ.0) GO TO 460                                             
      DO 450 J=1,M                                                      
      S=U(J,II)                                                         
      U(J,II)=U(J,LL)                                                   
  450 U(J,LL)=S                                                         
  460 K=II-1                                                            
      IF(K.GE.2) GO TO 400                                              
  470 IND=0                                                             
      RETURN                                                            
  480 IND=20000                                                         
  490 RETURN                                                            
      END                                                               
C#NUMPAC#DMACH               REVISED ON 1984-11-30                      
      FUNCTION DMACH(X)                                                 
      REAL*8 DMACH,X,ONE,EPS                                            
      DATA ONE,IFIRST/1.0D0,1/                                          
      IF(IFIRST.EQ.0) GO TO 20                                          
      IFIRST=0                                                          
      EPS=ONE                                                           
   10 EPS=EPS*0.5D0                                                     
      IF(EPS+ONE.NE.ONE) GO TO 10                                       
      EPS=EPS+EPS                                                       
   20 DMACH=EPS                                                         
      RETURN                                                            
      END                                                               
      SUBROUTINE  CNVTDR (INDXV,ANGLES,VAR)                             
      IMPLICIT REAL*8 (A-H,O-Z)                                         
CMSP  INCLUDE (MAXSIZE)                                                 
      INCLUDE '/labo/qclib/inspidas/common/maxsize'
CMSP  INCLUDE (SIZE)                                                    
      INCLUDE '/labo/qclib/inspidas/common/size'
      PARAMETER (PI=3.141 592 653 589 793D0,RAD=PI/180.D0)              
C     COMMON/NUMBER/  NUMATM,NUMVAR,NN2,NUMINT,NSS,NUMRES               
      DIMENSION  INDXV(MAXVAR),ANGLES(10,MAXRES),VAR(MAXVAR)            
C                                                                       
C CONVERT UNITS OF DIHEDRAL ANGLES FROM DEGREE TO RADIAN.               
C                                                                       
      DO  10  I = 1, NUMVAR                                             
        J = INDXV(I)/100                                                
        K = INDXV(I) - 100*J                                            
        VAR(I) = ANGLES(K,J)*RAD                                        
  10  CONTINUE                                                          
C                                                                       
      RETURN                                                            
      END                                                               
      SUBROUTINE  CRDREF (CO)                                           
      IMPLICIT REAL*8 (A-H,O-Z)                                         
CMSP  INCLUDE (MAXSIZE)                                                 
      INCLUDE '/labo/qclib/inspidas/common/maxsize'
CMSP  INCLUDE (SIZE)                                                    
      INCLUDE '/labo/qclib/inspidas/common/size'
CMSP  INCLUDE (TABLE1)                                                  
      INCLUDE '/labo/qclib/inspidas/common/table1'
CMSP  INCLUDE (ATOM)                                                    
      INCLUDE '/labo/qclib/inspidas/common/atom'
CMSP  INCLUDE (BOND)                                                    
      INCLUDE '/labo/qclib/inspidas/common/bond'
CMSP  INCLUDE (REFRNC)                                                  
      INCLUDE '/labo/qclib/inspidas/common/refrnc'
C     PARAMETER  (MAXATM=3000,MAXVAR=800)                               
C     PARAMETER  (MXATM1=MAXATM+1,MVAR1=MAXVAR+1)                       
C     COMMON/NUMBER/  NUMATM,NUMVAR,NN2,NUMINT,NSS,NUMRES               
C     COMMON/TABLE1/  IFRONT(MAXVAR),NBACK(0:MAXVAR),IBACK(2,0:MAXVAR)  
C     COMMON/ATOM00/  KUNIT(MAXATM),KATOM(MXATM1),JATOM(MAXATM)         
C     COMMON/ATOM01/  LATOM0(0:MAXVAR),LATOM1(MAXATM)                   
C     COMMON/BOND00/  DIRCOS(3,MAXVAR),IBND1(MAXVAR),IBND2(0:MVAR1)     
C     COMMON/REFRNC/  REFCRD(3,MAXATM),REFANG(MAXVAR)                   
      DIMENSION  CO(3,MAXATM)                                           
C FOLLOWING LINES ARE MOVED FROM INPUTA                                 
      NATM1 = NUMATM + 1                                                
      NVAR1 = NUMVAR + 1                                                
      NN2 = NUMVAR*(NUMVAR+1)/2                                         
      NPAIR1 = (NUMVAR+1)*(NUMVAR+2)/2                                  
      IBND2(0) = 1                                                      
      IBND2(NUMVAR+1) = NUMATM+1                                        
C  KATOM HAS NUMATM+1 ELEMENTS, NUMATM+1TH ELEMENT IS DEFINED AS FOLLOWS
      KATOM(NUMATM+1) = NUMATM+1                                        
C* REFERENCE COORDINATES *                                              
C                                                                       
C          UNIT 0                                                       
C                                                                       
      J2 = KATOM(IBND2(1))-1                                            
      DO  10  J = 1, J2                                                 
        K = JATOM(J)                                                    
        CO(1,K) = REFCRD(1,K)                                           
        CO(2,K) = REFCRD(2,K)                                           
        CO(3,K) = REFCRD(3,K)                                           
  10  CONTINUE                                                          
C                                                                       
      IF (NBACK(0).GT.0)  THEN                                          
        DO  20  I = 1, NBACK(0)                                         
          K = IBND2(IBACK(I,0))                                         
          CO(1,K) = REFCRD(1,K)                                         
          CO(2,K) = REFCRD(2,K)                                         
          CO(3,K) = REFCRD(3,K)                                         
  20    CONTINUE                                                        
      ENDIF                                                             
C                                                                       
C          UNITS 1 TO NUMVAR                                            
C                                                                       
      NAT = 0                                                           
      LATOM0(NUMVAR) = 1                                                
      DO  50  I = NUMVAR, 1, -1                                         
        IU = IBND2(I)                                                   
        REFX0 = REFCRD(1,IU)                                            
        REFY0 = REFCRD(2,IU)                                            
        REFZ0 = REFCRD(3,IU)                                            
C                                                                       
        J1 = KATOM(IU) + 1                                              
        J2 = KATOM(IBND2(I+1)) - 1                                      
        IF (J1.LE.J2)  THEN                                             
          DO  30  J = J1, J2                                            
            K = JATOM(J)                                                
            NAT = NAT + 1                                               
            LATOM1(NAT) = K                                             
            REFCRD(1,K) = REFCRD(1,K) - REFX0                           
            REFCRD(2,K) = REFCRD(2,K) - REFY0                           
            REFCRD(3,K) = REFCRD(3,K) - REFZ0                           
  30      CONTINUE                                                      
        ENDIF                                                           
C                                                                       
        IF (NBACK(I).GT.0)  THEN                                        
          DO  40  J = 1, NBACK(I)                                       
            K = IBND2(IBACK(J,I))                                       
            NAT = NAT + 1                                               
            LATOM1(NAT) = K                                             
            REFCRD(1,K) = REFCRD(1,K) - REFX0                           
            REFCRD(2,K) = REFCRD(2,K) - REFY0                           
            REFCRD(3,K) = REFCRD(3,K) - REFZ0                           
  40      CONTINUE                                                      
        ENDIF                                                           
        LATOM0(I-1) = NAT + 1                                           
C                                                                       
  50  CONTINUE                                                          
C                                                                       
      RETURN                                                            
      END                                                               
      SUBROUTINE  OUT001                                                
      IMPLICIT REAL*8 (A-H,O-Z)                                         
CMSP  INCLUDE (SIZE)                                                    
      INCLUDE '/labo/qclib/inspidas/common/size'
CMSP  INCLUDE (UNITNUMS)                                                
      INCLUDE '/labo/qclib/inspidas/common/unitnums'
      CHARACTER  TITLE1*80                                              
C     COMMON/NUMBER/  NUMATM,NUMVAR,NN2,NUMINT,NSS,NUMRES               
      COMMON/TITLE1/  TITLE1                                            
C                                                                       
      WRITE(IOUT06,300) TITLE1                                          
      WRITE(IOUT06,310) NUMATM,NUMVAR,NUMRES,NUMINT,NSS                 
      WRITE(IOUT02,300) TITLE1                                          
      WRITE(IOUT02,310) NUMATM,NUMVAR,NUMRES,NUMINT,NSS                 
C                                                                       
  300 FORMAT(//' TITLE1 :  ',A80)                                       
  310 FORMAT('0   NUMATM=',I4,',   NUMVAR=',I4,',   NUMRES=',I3,        
     &       ',   NUMINT=',I8,',   NSS=',I2/)                           
C                                                                       
      RETURN                                                            
      END                                                               
      SUBROUTINE  OUT002                                                
      IMPLICIT REAL*8 (A-H,O-Z)                                         
CMSP  INCLUDE (UNITNUMS)                                                
      INCLUDE '/labo/qclib/inspidas/common/unitnums'
      COMMON/ENE000/  ETOR,EES,ENB,ELOOP,ECYSTR                         
        ETOTAL = ETOR + EES + ENB + ELOOP + ECYSTR                      
        WRITE(IOUT06,2000) ETOR,EES,ENB,ELOOP,ECYSTR,ETOTAL             
        WRITE(IOUT02,2000) ETOR,EES,ENB,ELOOP,ECYSTR,ETOTAL             
 2000   FORMAT('0',10X,'ETOR',10X,'EES',10X,'ENB',8X,                   
     &         'ELOOP',7X,'ECYSTR',7X,'ETOTAL'/' ',5X,1P6D13.5/)        
      RETURN                                                            
      END                                                               
C---------------------------------------------------------------------  
      SUBROUTINE  OUTMIN                                                
C---------------------------------------------------------------------  
      IMPLICIT REAL*8 (A-H,O-Z)                                         
CMSP  INCLUDE (MAXSIZE)                                                 
      INCLUDE '/labo/qclib/inspidas/common/maxsize'
CMSP  INCLUDE (SIZE)                                                    
      INCLUDE '/labo/qclib/inspidas/common/size'
CMSP  INCLUDE (UNITNUMS)                                                
      INCLUDE '/labo/qclib/inspidas/common/unitnums'
CMSP  INCLUDE (VARANG)                                                  
      INCLUDE '/labo/qclib/inspidas/common/varang'
C     PARAMETER  (PI=3.141 592 653 589 793D0,DEG=180.D0/PI)             
C     COMMON/NUMBER/  NUMATM,NUMVAR,NN2,NUMINT,NSS,NUMRES               
C     COMMON/ENE000/  ETOR,EES,ENB,ELOOP,ECYSTR                         
C     DIMENSION  VAR(NUMVAR),DF(NUMVAR)                                 
C     DIMENSION  ANGLES(10,NUMRES),INDXV(NUMVAR)                        
C     DATA  JPUNCH /29/                                                 
C                                                                       
C  OUTPUT THE LATEST VALUES OF VARIABLES.  ANGLES ARE IN UNITS OF       
C  DEGREES.  THE ANGLES ARE RANGED BETWEEN -180 TO 180 DEGREES.         
C  THIS OUTPUT CAN BE USED AS THE INITIAL DATA OF THE NEXT JOB OF       
C  MINIMIZATION.                                                        
C                                                                       
      DO  10  I = 1, NUMVAR                                             
        J = INDXV(I)/100                                                
        K = INDXV(I) - 100*J                                            
C       ANG = VAR(I)*DEG                                                
C       IF (ANG.LE.-180.D0.OR.ANG.GT.180.D0)THEN                        
C         ANGS = ANG + 180.D0                                           
C         IANG = ANGS/360.D0                                            
C         ANG = ANGS - 360.D0*IANG                                      
C         IF (ANG.GT.0)  THEN                                           
C           ANG = ANG - 180.D0                                          
C         ELSE                                                          
C           ANG = ANG + 180.D0                                          
C         ENDIF                                                         
C       ENDIF                                                           
        ANGRAD(K,J) = VAR(I)                                            
  10  CONTINUE                                                          
C                                                                       
      CALL WTANGL(IOUT32)                                               
C                                                                       
C  OUTPUT THE ENERGY VALUES, IF THE CONVERGENCE CRITERION IS SATISFIED  
C  IN THE SUBROUTINE MINMIZ.                                            
C                                                                       
C     IF (IOPTN.EQ.0)  RETURN                                           
C                                                                       
C     WRITE(IOUT06,500) ETOR                                            
C     WRITE(IOUT06,510) EES                                             
C     WRITE(IOUT06,520) ENB                                             
C     WRITE(IOUT06,530) ELOOP                                           
C     WRITE(IOUT06,540) ECYSTR                                          
C     WRITE(IOUT02,500) ETOR                                            
C     WRITE(IOUT02,510) EES                                             
C     WRITE(IOUT02,520) ENB                                             
C     WRITE(IOUT02,530) ELOOP                                           
C     WRITE(IOUT02,540) ECYSTR                                          
C                                                                       
C     ETOTAL = ETOR+EES+ENB+ELOOP+ECYSTR                                
C     WRITE(IOUT06,550) ETOTAL                                          
C     WRITE(IOUT02,550) ETOTAL                                          
C                                                                       
C     WRITE(IOUT06,600) (I,DF(I),I=1,NUMVAR)                            
C     WRITE(IOUT02,600) (I,DF(I),I=1,NUMVAR)                            
C                                                                       
C 500 FORMAT(/'0  CONFORMATIONAL ENERGIES (KCAL/MOL):'/                 
C    &       '0',5X,'ETOR  ',1PD15.5,3X,'(TORSIONAL)')                  
C 510 FORMAT('0',5X,'EES   ',1PD15.5,3X,'(ELECTROSTATIC)')              
C 520 FORMAT('0',5X,'ENB   ',1PD15.5,3X,'(NONBONDED)')                  
C 530 FORMAT('0',5X,'ELOOP ',1PD15.5,3X,'(LOOP-CLOSING)')               
C 540 FORMAT('0',5X,'ECYSTR',1PD15.5,3X,'(CYSTINE TORSIONAL)')          
C 550 FORMAT('0',5X,'ETOTAL',1PD15.5,3X,'(TOTAL)')                      
C 600 FORMAT('0'//'    GRADIENT (KCAL/MOL/RADIAN)'/                     
C    &      (' ',7(I5,1PD12.3,:':')))                                   
      RETURN                                                            
      END                                                               
C-----------------------------------------------------------------------
      SUBROUTINE  OUTFMT(F0)                                            
C-----------------------------------------------------------------------
      IMPLICIT REAL*8 (A-H,O-Z)                                         
CMSP  INCLUDE (MAXSIZE)                                                 
      INCLUDE '/labo/qclib/inspidas/common/maxsize'
CMSP  INCLUDE (SIZE)                                                    
      INCLUDE '/labo/qclib/inspidas/common/size'
CMSP  INCLUDE (UNITNUMS)                                                
      INCLUDE '/labo/qclib/inspidas/common/unitnums'
CMSP  INCLUDE (FMATRIX)                                                 
      INCLUDE '/labo/qclib/inspidas/common/fmatrix'
C     DIMENSION  DF(MAXVAR),G(MXPAIR)                                   
C                                                                       
C  OUTPUT THE FIRST AND SECOND DERIVATIVES.                             
C  THIS OUTPUT CAN BE USED AS AN INPUT DATA OF THE NORMAL MODE          
C  ANALYSIS.                                                            
C                                                                       
      WRITE(IOUT36) NUMVAR,NN2,F0                                       
      WRITE(IOUT36) (DF(I),I=1,NUMVAR)                                  
      WRITE(IOUT36) (G(I),I=1,NN2)                                      
C                                                                       
      WRITE(IOUT06,600) (I,DF(I),I=1,NUMVAR)                            
      WRITE(IOUT02,600) (I,DF(I),I=1,NUMVAR)                            
C                                                                       
  600 FORMAT('0'//'    GRADIENT (KCAL/MOL/RADIAN)'/                     
     &      (' ',7(I5,1PD12.3,:':')))                                   
      RETURN                                                            
      END                                                               
C-----------------------------------------------------------------------
      SUBROUTINE  OUTSTD(ISF,CO,ANGLES,KSSPER,TITLE1,SEQATM,            
     &                   SEQAA,ISEQRS)                                  
C-----------------------------------------------------------------------
      IMPLICIT REAL*8 (A-H,O-Z)                                         
      CHARACTER    TITLE1*80,PROTID*72                                  
      CHARACTER*4  SEQATM(NUMATM),SEQAA(NUMATM)                         
CMSP  INCLUDE (SIZE)                                                    
      INCLUDE '/labo/qclib/inspidas/common/size'
CMSP  INCLUDE (UNITNUMS)                                                
      INCLUDE '/labo/qclib/inspidas/common/unitnums'
C     INTEGER OUTFIL                                                    
C     COMMON/NUMBER/  NUMATM,NUMVAR,NN2,NUMINT,NSS,NUMRES               
      DIMENSION  CO(3,NUMATM),ANGLES(10,NUMRES),KSSPER(6,2,NSS)         
      DIMENSION  ISEQRS(NUMATM)                                         
C                                                                       
C   LINKAGE AREA FOR INFORMATION                                        
        COMMON /UNTCHN/ NEWUNT,NEWCHN,OLDUNT,OLDCHN                     
        CHARACTER*8     NEWUNT,NEWCHN,OLDUNT,OLDCHN                     
        CHARACTER*8 IDENT,ATTRIB                                        
        CHARACTER*8 KHI(7),EKHI(7)                                      
        CHARACTER*8 UNTID,CHNID                                         
        CHARACTER   INFORM*24,RECS*1600                                 
C   LINKAGE AREA  FOR CALCULATION                                       
        CHARACTER*4 LAAN,LATN                                           
        CHARACTER*8 CKEY,SKEY,MNCH                                      
C                                                                       
C   CONSTANT  FOR STATUS                                                
        DATA LEV4/4/,LEV5/5/                                            
C   CONSTANT  FOR LINKAGE                                               
        DATA CKEY/'COODT   '/                                           
        DATA SKEY/'SSBCNN3 '/                                           
        DATA MNCH/'DIHDMNCH'/                                           
        DATA EKHI/'EKHI1','EKHI2','EKHI3','EKHI4',                      
     &            'EKHI5','EKHI6','EKHI7'/                              
        OLDUNT=' '                                                      
        OLDCHN=' '                                                      
C                                                                       
C  PROCESS                                                              
C                                                                       
C* LEVEL 0 *     <TITLE1>                                               
C* LEVEL 1 *     <PROTEIN>                                              
        PROTID(1:72)=TITLE1(1:72)                                       
        CALL HDLV0 (IOUT34,ISF,PROTID)                                  
C* LEVEL 2 *     <UNIT>                                                 
        UNTID=OLDUNT                                                    
        CALL HDUNIT(IOUT34,UNTID)                                       
C* LEVEL 3 *     <CHAIN>                                                
        CHNID=OLDCHN                                                    
        CALL HDCHN (IOUT34,CHNID)                                       
C                                                                       
      DO 120 L=1,7                                                      
  120   KHI(L)=EKHI(L)                                                  
      IR0=0                                                             
      N=0                                                               
C                                                                       
  150 N=N+1                                                             
      IF(N.GT.NUMATM) GO TO 300                                         
      IR=ISEQRS(N)                                                      
      IF(IR.EQ.0) GO TO 150                                             
      IF(IR.GT.NUMRES) GO TO 300                                        
      IF(IR.EQ.IR0) GO TO 200                                           
      IR0=IR                                                            
      IF(ISF.LE.0 .OR. ISF.GT.3) GO TO 300                              
C                                                                       
C* LEVEL 4 *                                                            
C     <RESIDUE>  AMINO ACID NAME, RESIDUE NUMBER, DIHEDRAL ANGLE        
C                                                                       
        LEVEL=LEV4                                                      
        NR=0                                                            
        WRITE(IDENT,'(I4.4)') IR                                        
       LAAN=SEQAA(N)                                                    
C                                                                       
      CALL SETLMX(LMAX,LAAN)                                            
C                                                                       
       ATTRIB=' '                                                       
       RECS(1:1600)=' '                                                 
       ATTRIB(1:4)=LAAN(1:4)                                            
       IF(ISF.EQ.3) GO TO 190                                           
            WRITE(INFORM,'(3F8.3)') (ANGLES(L,IR+1),L=1,3)              
            CALL ADINFO(MNCH, 24,INFORM,NR,RECS)                        
        IF(LMAX.GT.0) THEN                                              
          DO 400 L=1,LMAX                                               
            WRITE(INFORM,'(F8.3)')  ANGLES(3+L,IR+1)                    
            CALL ADINFO(KHI(L),8,INFORM,NR,RECS)                        
  400     CONTINUE                                                      
        END IF                                                          
  190 CONTINUE                                                          
        CALL WRSTD(IOUT34,LEVEL,IDENT,ATTRIB,NR,RECS)                   
  200 CONTINUE                                                          
C                                                                       
C* LEVEL5 *                                                             
C     <ATOM>  ATOM NAME, COORDINATE, S-S BOND                           
C                                                                       
      LEVEL=LEV5                                                        
        NR=0                                                            
        IDENT=' '                                                       
       LATN=SEQATM(N)                                                   
       IDENT(1:4)=LATN(1:4)                                             
       ATTRIB=' '                                                       
       ATTRIB(1:1)=LATN(1:1)                                            
       IF(ISF.NE.1) THEN                                                
            WRITE(INFORM,'(3F8.3)') (CO(J,N),J=1,3)                     
            CALL ADINFO(CKEY,24,INFORM,NR,RECS)                         
       ENDIF                                                            
C                                                                       
C * S-S BOND *                                                          
      NSGO=0                                                            
C                                                                       
       IF(NSS.GE.1)  THEN                                               
       IF(LAAN(1:3).EQ.'CYS' .AND. LATN(1:2).EQ.'SG') THEN              
         DO 160 LSSB=1,NSS                                              
           IF(NSGO.NE.0) GO TO 170                                      
           KSS1=KSSPER(1,1,LSSB)                                        
           KSS2=KSSPER(1,2,LSSB)                                        
           IF(N.EQ.KSS1) THEN                                           
             NSGO=KSS2                                                  
           ELSE IF(N.EQ.KSS2) THEN                                      
             NSGO=KSS1                                                  
           END IF                                                       
  160    CONTINUE                                                       
         IF(NSGO.EQ.0) GO TO 180                                        
  170    CONTINUE                                                       
         WRITE(INFORM,'(A4,4X,I4.4,12X)') SEQATM(NSGO),ISEQRS(NSGO)     
         CALL ADINFO(SKEY,24,INFORM,NR,RECS)                            
       END IF                                                           
       END IF                                                           
C                                                                       
  180  CONTINUE                                                         
C                                                                       
       IF(.NOT.(ISF.EQ.1 .AND. NSGO.EQ.0))                              
     &        CALL WRSTD(IOUT34,LEVEL,IDENT,ATTRIB,NR,RECS)             
C                                                                       
           GO TO 150                                                    
C                                                                       
  300  CALL OTSEND(IOUT34)                                              
C                                                                       
      RETURN                                                            
      END                                                               
      SUBROUTINE SETLMX(KMAX,MAAN)                                      
      CHARACTER   MAAN*4,LAAN*3                                         
      CHARACTER*3 IGLY,IALA,IVAL,ILEU,IILE,IMET,ISER,ITHR,IASN,IGLN     
      CHARACTER*3 IPHE,ITRP,IPRO,IASP,IGLU,ILYS,IHIS,IARG,ITYR,ICYS     
      DATA IGLY/'GLY'/,IALA/'ALA'/,IVAL/'VAL'/,ILEU/'LEU'/              
      DATA IILE/'ILE'/,IMET/'MET'/                                      
      DATA ISER/'SER'/,ITHR/'THR'/,IASN/'ASN'/,IGLN/'GLN'/              
      DATA IPHE/'PHE'/,ITRP/'TRP'/,IPRO/'PRO'/                          
      DATA IASP/'ASP'/,IGLU/'GLU'/,ILYS/'LYS'/,IHIS/'HIS'/              
      DATA IARG/'ARG'/,ITYR/'TYR'/,ICYS/'CYS'/                          
C                                                                       
        KMAX=0                                                          
        LAAN(1:3)=MAAN(1:3)                                             
C                                                                       
        IF(LAAN.EQ.IGLY) THEN                                           
          KMAX=0                                                        
        ELSE IF(LAAN.EQ.IALA) THEN                                      
          KMAX=1                                                        
        ELSE IF(LAAN.EQ.IVAL) THEN                                      
          KMAX=3                                                        
        ELSE IF(LAAN.EQ.ILEU) THEN                                      
          KMAX=4                                                        
        ELSE IF(LAAN.EQ.IILE) THEN                                      
          KMAX=4                                                        
        ELSE IF(LAAN.EQ.ISER) THEN                                      
          KMAX=2                                                        
        ELSE IF(LAAN.EQ.ITHR) THEN                                      
          KMAX=3                                                        
        ELSE IF(LAAN.EQ.IASN) THEN                                      
          KMAX=3                                                        
        ELSE IF(LAAN.EQ.IGLN) THEN                                      
          KMAX=4                                                        
        ELSE IF(LAAN.EQ.IMET) THEN                                      
          KMAX=4                                                        
        ELSE IF(LAAN.EQ.IPHE) THEN                                      
          KMAX=2                                                        
        ELSE IF(LAAN.EQ.ITRP) THEN                                      
          KMAX=2                                                        
        ELSE IF(LAAN.EQ.IPRO) THEN                                      
          KMAX=0                                                        
        ELSE IF(LAAN.EQ.IASP) THEN                                      
          KMAX=3                                                        
        ELSE IF(LAAN.EQ.IGLU) THEN                                      
          KMAX=4                                                        
        ELSE IF(LAAN.EQ.ILYS) THEN                                      
          KMAX=5                                                        
        ELSE IF(LAAN.EQ.IARG) THEN                                      
          KMAX=7                                                        
        ELSE IF(LAAN.EQ.IHIS) THEN                                      
          KMAX=2                                                        
        ELSE IF(LAAN.EQ.ITYR) THEN                                      
          KMAX=3                                                        
        ELSE IF(LAAN.EQ.ICYS) THEN                                      
          KMAX=1                                                        
        END IF                                                          
      RETURN                                                            
      END                                                               
C                                                                       
      SUBROUTINE OTSEND(OUTFIL)                                         
      INTEGER OUTFIL                                                    
C                                                                       
C  CONSTANT  FOR SUBCMD                                                 
      CHARACTER IDENT*8/' '/,ATTRIB*8/' '/                              
      CHARACTER RECS*800                                                
C                                                                       
C  PROCESS                                                              
C                                                                       
      LEVEL=-1                                                          
        CALL WRSTD(OUTFIL,LEVEL,IDENT,ATTRIB,NR,RECS)                   
      RETURN                                                            
      END                                                               
C                                                                       
C                                                                       
      SUBROUTINE HDUNIT(OUTFIL,UNTID)                                   
      INTEGER*4 OUTFIL                                                  
      CHARACTER UNTID*8,IDENT*8,ATTRIB*8,RECS*800                       
      DATA LEV2/2/                                                      
      NR=0                                                              
      RECS=' '                                                          
      LEVEL  = LEV2                                                     
      IDENT  = UNTID                                                    
      ATTRIB=' '                                                        
        CALL WRSTD(OUTFIL,LEVEL,IDENT,ATTRIB,NR,RECS)                   
      RETURN                                                            
      END                                                               
C                                                                       
C                                                                       
      SUBROUTINE  HDCHN(OUTFIL,CHNID)                                   
      INTEGER*4 OUTFIL                                                  
      CHARACTER*8 IDENT,ATTRIB,CHNID                                    
      CHARACTER*80 RECS                                                 
      DATA  LEV3/3/                                                     
      LEVEL = LEV3                                                      
      NR=0                                                              
      RECS=' '                                                          
      IDENT=CHNID                                                       
      ATTRIB = ' '                                                      
      RECS=' '                                                          
        CALL WRSTD(OUTFIL,LEVEL,IDENT,ATTRIB,NR,RECS)                   
      RETURN                                                            
      END                                                               
C                                                                       
      SUBROUTINE HDLV0(OUTFIL,ISF,PROTID)                               
        INTEGER*4 OUTFIL,KM,ISF                                         
        CHARACTER IDENT*8,ATTRIB*8,RECS*1600                            
        CHARACTER*8 EKHI,KEYKEY                                         
C       CHARACTER*8 CKEY,MNCH,KEYKHI                                    
        CHARACTER INFORM*32                                             
        CHARACTER IDATE*6,MDATE*8,IKM*1                                 
        CHARACTER*8 METHOD,ECEPP/'ECEPP'/                               
        CHARACTER*8 MODIFY/'MODIFIED'/                                  
        CHARACTER*72 PROTID                                             
        CHARACTER KHI*4,KHIS*5                                          
C     CONSTANT  FOR STATUS                                              
        DATA LEV0/0/,LEV1/1/                                            
C     CONSTANT  FOR LINKAGE                                             
        DATA KEYKEY/'KEY     '/                                         
        DATA EKHI/'EKHI'/                                               
C                                                                       
C  PROCESS                                                              
C                                                                       
      IDENT='FEDEROUT'                                                  
      CALL DATE(MDATE)                                                  
      IDATE(1:6)=MDATE(1:2)//MDATE(4:5)//MDATE(7:8)                     
C                                                                       
      LEVEL = LEV0                                                      
      RECS(1:1600)=' '                                                  
      ATTRIB = ' '                                                      
      NR=0                                                              
C                                                                       
      INFORM=' '//IDATE//' FEDER '                                      
      CALL ADINFO(MODIFY,24,INFORM,NR,RECS)                             
C                                                                       
      RECS(NR*80+1:NR*80+8)=' ***    '                                  
      RECS(NR*80+9:NR*80+80)=PROTID                                     
      NR=NR+1                                                           
C                                                                       
      IF(ISF.EQ.3) GO TO 9000                                           
      INFORM='DIHDMNCH4 PHI,PSI,OMEGA 3F8.3'                            
      CALL ADINFO(KEYKEY,32,INFORM,NR,RECS)                             
C                                                                       
      RECS(NR*80+1:NR*80+80)=' ***    DIHEDRAL ANGLES OF MAIN CHAIN'    
      NR=NR+1                                                           
C                                                                       
        KHI=EKHI                                                        
        METHOD=ECEPP                                                    
C                                                                       
      DO 50 KM=1,7                                                      
        WRITE(IKM,'(I1)') KM                                            
        KHIS=KHI//IKM                                                   
        INFORM=' '                                                      
        INFORM(1:8)=KHIS                                                
        INFORM(9:10)='4 '                                               
        INFORM(11:16)=KHIS(2:5)                                         
        INFORM(17:24)=METHOD                                            
        INFORM(25:32)='F8.3'                                            
        CALL ADINFO(KEYKEY,32,INFORM,NR,RECS)                           
   50 CONTINUE                                                          
C                                                                       
        RECS(NR*80+1:NR*80+80)=' ***    DIHEDRAL ANGLES OF SIDE CHAIN ' 
     &                         //'  BY '//METHOD//' FORMAT'             
        NR=NR+1                                                         
C                                                                       
 9000 CONTINUE                                                          
      IF(ISF.NE.1) THEN                                                 
        INFORM='COODT   5 ATOM CO-ORDTS 3F8.3'                          
        CALL ADINFO(KEYKEY,32,INFORM,NR,RECS)                           
C                                                                       
        RECS(NR*80+1:NR*80+80)=' ***    CARTESIAN CO-ORDINATES OF ATOMS'
        NR=NR+1                                                         
      END IF                                                            
C                                                                       
        INFORM='SSBCNN3 5 S-S BOND      2A8,8X'                         
        CALL ADINFO(KEYKEY,32,INFORM,NR,RECS)                           
C                                                                       
        RECS(NR*80+1:NR*80+80)=' ***    DISULPHIDE BOND INSIDE A CHAIN' 
        NR=NR+1                                                         
C                                                                       
C                                                                       
 9900 CONTINUE                                                          
        CALL WRSTD(OUTFIL,LEV0,IDENT,ATTRIB,NR,RECS)                    
C                                                                       
        LEVEL = LEV1                                                    
        IDENT=' '                                                       
        NR=0                                                            
        ATTRIB=' '                                                      
        RECS=' '                                                        
          CALL WRSTD(OUTFIL,LEVEL,IDENT,ATTRIB,NR,RECS)                 
C                                                                       
C                                                                       
      RETURN                                                            
      END                                                               
C                                                                       
C                                                                       
      SUBROUTINE WRSTD(FL,LEVEL,IDENT,ATTRIB,NR,RECS)                   
      CHARACTER IDENT*8, ATTRIB*8, RECS*(*)                             
      INTEGER FL, LEVEL, NR                                             
      CHARACTER*8 LEV0,LEV1,LEV2,LEV3,LEV4,LEV5,ENDL                    
      DATA LEV0 /'0       '/, LEV1 /'1       '/, LEV2 /'2       '/      
      DATA LEV3 /'3       '/, LEV4 /'4       '/, LEV5 /'5       '/      
      DATA ENDL /'END     '/                                            
      IF(NR .EQ. 0)  NR=1                                               
C                                                                       
      IF(LEVEL .LT. 0)  THEN                                            
        RECS = ENDL                                                     
        NR = 1                                                          
      ELSE                                                              
        IF (LEVEL .EQ. 0)  THEN                                         
          RECS(1:8) = LEV0                                              
        ELSE IF (LEVEL .EQ. 1)  THEN                                    
          RECS(1:8) = LEV1                                              
        ELSE IF (LEVEL .EQ. 2)  THEN                                    
          RECS(1:8) = LEV2                                              
        ELSE IF (LEVEL .EQ. 3)  THEN                                    
          RECS(1:8) = LEV3                                              
        ELSE IF (LEVEL .EQ. 4)  THEN                                    
          RECS(1:8) = LEV4                                              
        ELSE IF (LEVEL .EQ. 5)  THEN                                    
          RECS(1:8) = LEV5                                              
        ENDIF                                                           
C                                                                       
        RECS( 9:16) = IDENT                                             
        RECS(17:24) = ATTRIB                                            
        RECS(25:40) = ' '                                               
C                                                                       
      ENDIF                                                             
C                                                                       
      DO  10  I = 1, NR                                                 
  10    WRITE (FL,'(A80)') RECS(80*(I-1)+1:80*I)                        
C                                                                       
      RETURN                                                            
      END                                                               
C                                                                       
C                                                                       
      SUBROUTINE ADINFO(KEY,NI,INFORM,NR,RECS)                          
      CHARACTER KEY*8, INFORM*(*), RECS*(*)                             
      INTEGER NI, NR                                                    
      CHARACTER*8 CONT,SPCE                                             
      DATA CONT/'-       '/, SPCE/'        '/                           
      IF(.NOT.(NR .EQ. 0))  THEN                                        
        IF(.NOT.(NR .EQ. 1))  THEN                                      
          IF((RECS(80*(NR-1)+1 :80*(NR-1)+8)  .EQ. SPCE) .AND.          
     &       (RECS(80*(NR-1)+41:80*(NR-1)+48) .EQ. SPCE)) THEN          
              I=NR                                                      
              GO TO 2                                                   
          ELSE                                                          
              I=NR+1                                                    
              GO TO 1                                                   
          ENDIF                                                         
        ELSE IF(.NOT.(RECS(41:48) .EQ. SPCE))  THEN                     
           I=2                                                          
           GO TO 1                                                      
        ENDIF                                                           
      ENDIF                                                             
           I=1                                                          
           GO TO 2                                                      
C                                                                       
 1    RECS(80*(I-1)+ 1:80*(I-1)+80) = ' '                               
      RECS(80*(I-1)+ 9:80*(I-1)+16) = KEY                               
      RECS(80*(I-1)+17:80*(I-1)+40) = INFORM                            
      NNI = 25                                                          
        GO TO 4                                                         
 2    RECS(80*(I-1)+41:80*(I-1)+48) = KEY                               
      RECS(80*(I-1)+49:80*(I-1)+72) = INFORM                            
      NNI = 25                                                          
      I = I+1                                                           
C                                                                       
 3     IF(NNI .GT. NI)  GOTO  3012                                      
      RECS(80*(I-1)+ 1:80*(I-1)+80) = ' '                               
      RECS(80*(I-1)+ 9:80*(I-1)+16) = CONT                              
      RECS(80*(I-1)+17:80*(I-1)+40) = INFORM(NNI:NI)                    
      NNI = NNI + 24                                                    
 4     IF(.NOT.(NNI .GT. NI))GOTO  3015                                 
          I=I+1                                                         
          GOTO  3012                                                    
C                                                                       
 3015 RECS(80*(I-1)+41:80*(I-1)+48) = CONT                              
      RECS(80*(I-1)+49:80*(I-1)+72) = INFORM(NNI:NI)                    
      NNI = NNI + 24                                                    
      I=I+1                                                             
      IF(I.LE.LEN(RECS)/80) GOTO  3                                     
C                                                                       
 3012 NR = I-1                                                          
      RETURN                                                            
      END                                                               
C                                                                       
      SUBROUTINE  WRIT32 (VAR,CO,DF,G)                                  
      IMPLICIT REAL*8 (A-H,O-Z)                                         
CMSP  INCLUDE (SIZE)                                                    
      INCLUDE '/labo/qclib/inspidas/common/size'
C     COMMON/NUMVAR/  NUMATM,NUMVAR,NN2,NUMINT,NSS,NUMRES               
      DIMENSION  VAR(NUMVAR),CO(3,NUMATM),DF(NUMVAR),G(NN2)             
            WRITE(32)   (VAR(K),K=1,NUMVAR)                             
            WRITE(32)   ((CO(L,K),L=1,3),K=1,NUMATM)                    
            WRITE(32)   (DF(K),K=1,NUMVAR)                              
            WRITE(32)   (G(K),K=1,NN2)                                  
      RETURN                                                            
      END                                                               
      SUBROUTINE  RMSDEV (VAR,CO,COX,COWRK,LFLAG)                       
C                                                                       
C  CALCULATE R.M.S. DEVIATION                                           
C                                                                       
      IMPLICIT REAL*8 (A-H,O-Z)                                         
CMSP  INCLUDE (SIZE)                                                    
      INCLUDE '/labo/qclib/inspidas/common/size'
CMSP  INCLUDE (UNITNUMS)                                                
      INCLUDE '/labo/qclib/inspidas/common/unitnums'
C     COMMON/NUMBER/  NUMATM,NUMVAR,NN2,NUMINT,NSS,NUMRES               
      DIMENSION  VAR(NUMVAR),CO(3,NUMATM)                               
      DIMENSION  COX(3,NUMATM),COWRK(3,NUMATM),LFLAG(NUMATM)            
C                                                                       
        CALL  GENRA (VAR,CO)                                            
        DO  10  L = 1, 3                                                
        DO  10  I = 1, NUMATM                                           
  10      COWRK(L,I) = CO(L,I)                                          
C                                                                       
C ALL ATOMS                                                             
C                                                                       
        CALL  BSTFTX (NUMATM,COX,COWRK,LFLAG,1,RMS)                     
        WRITE(IOUT06,450) RMS                                           
        WRITE(IOUT02,450) RMS                                           
C                                                                       
C BACKBONE ATOMS ONLY                                                   
C                                                                       
        CALL  BSTFTX (NUMATM,COX,COWRK,LFLAG,2,RMS)                     
        WRITE(IOUT06,452) RMS                                           
        WRITE(IOUT02,452) RMS                                           
C                                                                       
  450 FORMAT('0 R.M.S. DEVIATION (ALL ATOMS)     =',F8.3)               
  452 FORMAT('0 R.M.S. DEVIATION (BACKBONE ATOMS)=',F8.3)               
C                                                                       
      RETURN                                                            
      END                                                               
      SUBROUTINE  MINMZ2 (N,NN2,F0,X,DF,G,G0,P,Y,WRK1,WRK2,IPERM,LD,    
     &                 MAXITR,AMBDA,CONV,FUNC,DERVTV,ICONV,CO,CHARGE)   
C                                                                       
C* MINIMIZER *                                                          
C                                                                       
C   DOES NOT USE EXTRA-STORAGE OF SUPERCOMPUTER                         
C                                                                       
      IMPLICIT REAL*8 (A-H,O-Z)                                         
      EXTERNAL  FUNC,DERVTV                                             
      REAL*4 TIME,TLIMIT                                                
CMSP  INCLUDE(MAXSIZE)                                                  
      INCLUDE '/labo/qclib/inspidas/common/maxsize'
CMSP  INCLUDE (UNITNUMS)                                                
      INCLUDE '/labo/qclib/inspidas/common/unitnums'
C                                                                       
C        ***  PARAMETER DESCRIPTION  ***                                
C                                                                       
C   N         INPUT   THE NUMBER OF VARIABLES                           
C   NN2       INPUT   N*(N+1)/2.  THE DIMENSION OF G.                   
C   X(N)      IN/OUT  IN: THE INITIAL GUESS OF THE MINIMIZER.           
C                     OUT: THE LATEST APPROXI. TO THE MINIMIZER.        
C   DF(N)     OUTPUT  THE GRADIENT AT THE LATEST POINT X.               
C   G(NN2)    OUTPUT  THE HESSIAN AT THE LATEST POINT X.  THE (I,J)-TH  
C                     ELEMENT OF THE HESSIAN IS IN THE (I*(I-1)/2+J)-TH 
C                     ELEMENT OF G.                                     
C                                                                       
C   G0(NN2)        WORKING ARRAY.                                       
C   P(N)           WORKING ARRAY.                                       
C   Y(N)           WORKING ARRAY.                                       
C   WRK1(N)        WORKING ARRAY.                                       
C   WRK2(N)        WORKING ARRAY.                                       
C   IPERM(N)       WORKING ARRAY.                                       
C   LD(N)          WORKING ARRAY.                                       
C                                                                       
C   MAXITR    INPUT   MAXIMUM NUMBER OF ITERATION.                      
C   AMBDA     INPUT                                                     
C   CONV      INPUT   TOLERENCE ON THE DIFFERENCE IN THE FUNCTION       
C                     VALUES OF THE TWO CONSECUTIVE ITERATIONS.         
C   FUNC      INPUT   SUBROUTINE NAME THAT CALCULATES THE FUNCTION.     
C   DERVTV    INPUT   SUBROUTINE NAME THET CALCULATES THE GRAD. AND HESS
C   ICONV     OUTPUT  FLAG WHETHER THE CONVERGENCE CRITERION IS         
C                     SATISFIED.  IF SATISFIED, ICONV=1.                
C                                                                       
C                                                                       
      COMMON/CTIME/  ITIME,TLIMIT,LOUT,ITRS,LAMBDA,IREST                
      DIMENSION  X(MAXVAR),DF(MAXVAR),G(MXPAIR),G0(MXPAIR),             
     &           P(MAXVAR),Y(MAXVAR),IPERM(MAXVAR)                      
      DIMENSION  WRK1(MAXVAR),WRK2(MAXVAR),LD(MAXVAR)                   
      DIMENSION  CO(3,*),CHARGE(*)                                      
      DATA  ZERO, ONE, HALF /0.D0, 1.D0, .5D0/                          
      PARAMETER (IGRMAX=100)                                            
      DIMENSION  GX(IGRMAX),GY(IGRMAX)                                  
C                                                                       
      DELTA = 1.0D-3                                                    
      ESTM = 2.D0                                                       
      DO  10  L = 1, N                                                  
  10  LD(L) = L*(L+1)/2                                                 
      ICONV = 0                                                         
      ITIME = 0                                                         
      IGRPH  = ITRS                                                     
      IGRPH0 = ITRS-1                                                   
C                                                                       
  1   CALL  DERVTV (X,F00,DF,G,CO,CHARGE)                               
      CALL  FUNC (X,F0,CO,CHARGE)                                       
      WRITE(IOUT06,200) ITRS, F0                                        
      WRITE(IOUT02,200) ITRS, F0                                        
      GX(IGRPH-IGRPH0)=DBLE(IGRPH)                                      
      GY(IGRPH-IGRPH0)=F0                                               
      IGRPH = IGRPH + 1                                                 
      IF ((IGRPH - IGRPH0).GT.IGRMAX) THEN                              
        CALL FOUTGR(IOUT06, 70,20,IGRPH - IGRPH0 - 1,GX,GY)             
        CALL FOUTGR(IOUT02,100,30,IGRPH - IGRPH0 - 1,GX,GY)             
        IGRPH0 = IGRPH - 1                                              
      END IF                                                            
C                                                                       
C--------- ITERATION BEGINS ------------------------------------------  
C                                                                       
      NITR = MAXITR                                                     
      DO  1000  K = 1, NITR                                             
C                                                                       
        CALL  SVEC2 (N,NN2,DF,G,G0,P,Y,WRK1,WRK2,IPERM,LD,DELTA,AMBDA)  
C                                                                       
C    ------ LINE SEARCH ----------------------------                    
C                                                                       
        STEP = ZERO                                                     
        DO  25  IJ = 1, N                                               
  25      STEP = STEP + P(IJ)*P(IJ)                                     
        STEP = ONE / DSQRT(STEP) * HALF                                 
        IF (STEP.LT.HALF)  THEN                                         
          DO  40  IJ = 1, N                                             
  40        P(IJ) = P(IJ) * STEP                                        
        ENDIF                                                           
C                                                                       
        FPRE = F0                                                       
        CALL  KLINE (FUNC,N,F0,X,Y,P,ESTM,CO,CHARGE)                    
        JTRS = ITRS + K                                                 
        WRITE(IOUT06,200) JTRS,F0                                       
        WRITE(IOUT02,200) JTRS,F0                                       
        GX(IGRPH-IGRPH0)=DBLE(IGRPH)                                    
        GY(IGRPH-IGRPH0)=F0                                             
        IGRPH = IGRPH + 1                                               
        IF ((IGRPH - IGRPH0).GT.IGRMAX) THEN                            
          CALL FOUTGR(IOUT06, 70,20,IGRPH - IGRPH0 - 1,GX,GY)           
          CALL FOUTGR(IOUT02,100,30,IGRPH - IGRPH0 - 1,GX,GY)           
          IGRPH0 = IGRPH - 1                                            
        END IF                                                          
C                                                                       
C    ---- CHECK CONVERGENCE ------------------------                    
C                                                                       
        IF (FPRE-F0.LT.CONV)  THEN                                      
          IF (.NOT.(AMBDA.EQ.ZERO.OR.LAMBDA.EQ.0))  THEN                
            AMBDA = ZERO                                                
            GOTO  1                                                     
          ENDIF                                                         
          IF (IREST.EQ.1) THEN                                          
            CALL  PTANGL (IOUT40,X,JTRS)                                
          END IF                                                        
          ICONV = 1                                                     
          MAXITR = K                                                    
          CALL  DERVTV (X,F00,DF,G,CO,CHARGE)                           
          GOTO 2000                                                     
        ENDIF                                                           
C                                                                       
C    ---- CHECK CPU TIME ---------------------------                    
C                                                                       
        CALL  CLOCK(TIME,5)                                             
        IF (TIME.GE.TLIMIT)  THEN                                       
          IF (IREST.EQ.1) THEN                                          
            CALL  PTANGL (IOUT40,X,JTRS)                                
          END IF                                                        
          ITIME=1                                                       
          GOTO 2000                                                     
        ENDIF                                                           
C                                                                       
C    ---- CHECK OUTPUT OPTION ----------------------                    
C                                                                       
        IF (MOD(JTRS,LOUT).EQ.0.OR.K.EQ.NITR) THEN                      
          IF (IREST.EQ.1) THEN                                          
            CALL  PTANGL (IOUT40,X,JTRS)                                
          END IF                                                        
        END IF                                                          
C                                                                       
C    ---- CALCULATE DERIVATIVES --------------------                    
C                                                                       
        CALL  DERVTV (X,F00,DF,G,CO,CHARGE)                             
C                                                                       
 1000 CONTINUE                                                          
C                                                                       
C--------- ITERATION ENDS --------------------------------------------  
C                                                                       
  200 FORMAT(' ',75X,'ITERATION NO.',I5,',  F0=',1PD20.12/              
     &       ' ',17X,'*******')                                         
C                                                                       
 2000 IF ((IGRPH - IGRPH0 - 1).GT.0) THEN                               
        CALL FOUTGR(IOUT06, 70,20,IGRPH - IGRPH0 - 1,GX,GY)             
        CALL FOUTGR(IOUT02,100,30,IGRPH - IGRPH0 - 1,GX,GY)             
      END IF                                                            
      RETURN                                                            
      END                                                               
      SUBROUTINE  SVEC2 (N,NN2,GRAD,DIA,DIA0,XDEL,DIAGM,WRK1,WRK2,      
     &                  IPERM,LD,DELTA,AMBDA)                           
      IMPLICIT REAL*8 (A-H,O-Z)                                         
CMSP  INCLUDE (UNITNUMS)                                                
      INCLUDE '/labo/qclib/inspidas/common/unitnums'
      DIMENSION  GRAD(N),DIA(NN2),XDEL(N),DIAGM(N)                      
      DIMENSION  WRK1(N),WRK2(N),IPERM(N),LD(N)                         
      DIMENSION  DIA0(NN2)                                              
C                                                                       
        DO  10  I = 1, NN2                                              
  10      DIA0(I) = DIA(I)                                              
C   -----------------------------------------------------------------   
      DO  1000  ML = 1, 99                                              
C                                                                       
        CALL  MODCH (N,NN2,DIA,DIAGM,WRK1,WRK2,IPERM,LD,DELTA,AMBDA)    
C                                                                       
        DMAX = 0.D0                                                     
        DO  20  IL = 1, N                                               
  20    DMAX = DMAX1(DMAX,DIAGM(IL))                                    
C                                                                       
        IF (DMAX.NE.0.D0)  THEN                                         
C         WRITE(IOUT06,2010) 'NEG',ML,DMAX,AMBDA                        
          IF (AMBDA.EQ.0.D0)  GOTO  2000                                
          AMBDA = 4.D0*AMBDA                                            
           DO  12  I = 1, NN2                                           
  12         DIA(I) = DIA0(I)                                           
        ELSE                                                            
C         WRITE(IOUT06,2010) 'POS',ML,DMAX,AMBDA                        
          AMBDA = 0.5D0*AMBDA                                           
          CALL  INV (N,NN2,DIA,GRAD,XDEL,IPERM,LD,WRK1)                 
          RETURN                                                        
        ENDIF                                                           
 1000 CONTINUE                                                          
C   -----------------------------------------------------------------   
      WRITE(IOUT06,2020)                                                
      WRITE(IOUT02,2020)                                                
      STOP                                                              
 2000 WRITE(IOUT06,2030)                                                
      WRITE(IOUT02,2030)                                                
      STOP                                                              
 2010 FORMAT(' SVEC:  SHIFT HESS IS ',A3,' AT TRIAL=',I2,':   DMAX=',   
     &     1PD10.3,',  AMBDA=',D10.3)                                   
 2020 FORMAT('0    ***  SVEC HAS EXHAUSTED ]]]   ***')                  
 2030 FORMAT('0    ***  AMBDA=0.0,  BUT NOT CONVERGED ]]]      ***'/    
     &       '     ***  CHECK THE CALCULATION OF DERIVATIVES   ***')    
      DEBUG SUBCHK                                                      
      END                                                               
      SUBROUTINE  MODCH (N,NN2,AD,DIAGM,TEMP,CDIAG,IPERM,LD,DELTA,AMBDA)
C*******************************************************************    
C                ROUTINE FOR CHOLESKY                                   
C*******************************************************************    
C                                                                       
C                                                                       
C VERSION WITH COLUMN AND ROW EXCHANGE                                  
      IMPLICIT REAL*8 (A-H,O-Z)                                         
      DIMENSION  AD(NN2),DIAGM(N),TEMP(N),CDIAG(N),IPERM(N),LD(N)       
C                                                                       
C ADD AMBDA TO DIAGONAL ELEMENTS AND INITIALIZE IPERM.                  
C                                                                       
*VOPTION VEC                                                            
      DO  2  L = 1, N                                                   
        AD(LD(L)) = AD(LD(L)) + AMBDA                                   
        IPERM(L) = L                                                    
   2  CONTINUE                                                          
C                                                                       
C IPERM(L)=K MEANS L NEW ORDER AND K OLD ORDER                          
C AD IS CHANGED IN PLACE                                                
C                                                                       
C MBOUND CALCULATES THE UPPER BOUND ON THE ELEMENTS OF THE              
C D(K)*L(I,K)**2 < BSQ                                                  
C                                                                       
      CALL  MBOUND (N,NN2,AD,BSQ,CDIAG,JQ,DM)                           
C                                                                       
C EXCHANGE JQ AND 1 IN AD AND CDIAG                                     
C                                                                       
      IF (JQ.EQ.1)  GOTO  10                                            
      IPERM(JQ) = 1                                                     
      IPERM(1) = JQ                                                     
      T = CDIAG(JQ)                                                     
      CDIAG(JQ) = CDIAG(1)                                              
      CDIAG(1) = T                                                      
      INDJQ = JQ*(JQ+1)/2                                               
      T = AD(INDJQ)                                                     
      AD(INDJQ) = AD(1)                                                 
      AD(1) = T                                                         
C                                                                       
      DO  4  I = 2, N                                                   
        IND1 = LD(I-1)+1                                                
        TEMP(I) = AD(IND1)                                              
   4  CONTINUE                                                          
      IF (JQ.EQ.2)  GOTO  7                                             
        IND2 = INDJQ - JQ + 1                                           
*VOPTION VEC                                                            
      DO  5  I = 2, JQ-1                                                
        IND1 = LD(I-1)+1                                                
        IND2 = IND2+1                                                   
        AD(IND1) = AD(IND2)                                             
   5  CONTINUE                                                          
        IND2 = INDJQ - JQ + 1                                           
      DO  6  I = 2, JQ-1                                                
        IND2 = IND2+1                                                   
        AD(IND2) = TEMP(I)                                              
   6  CONTINUE                                                          
   7  IF (JQ.EQ.N)  GOTO  10                                            
*VOPTION VEC                                                            
      DO  8  I = JQ+1, N                                                
        IND1 = LD(I-1)+1                                                
        IND2 = LD(I-1)+JQ                                               
        AD(IND1) = AD(IND2)                                             
   8  CONTINUE                                                          
      DO  9  I = JQ+1, N                                                
        IND2 = LD(I-1)+JQ                                               
        AD(IND2) = TEMP(I)                                              
   9  CONTINUE                                                          
C                                                                       
C CYCLE WITH J=1 EXTRA                                                  
C                                                                       
C                                                                       
C FIND MAX ON C(I,1)                                                    
C                                                                       
  10  THETA = 0.D0                                                      
      DO  12  I = 1, N-1                                                
        TC = DABS(AD(LD(I)+1))                                          
        THETA = DMAX1 (THETA,TC)                                        
  12  CONTINUE                                                          
C                                                                       
C FIND NEW D1                                                           
C                                                                       
      D1 = DMAX1 (DABS(AD(1)), DELTA, THETA*THETA/BSQ)                  
C                                                                       
C DEFINE FIRST DIAGONAL ELEMENT                                         
C                                                                       
      DIAGM(1) = D1-AD(1)                                               
      DINV = 1.D0/D1                                                    
      AD(1) = DINV                                                      
C                                                                       
C UPDATE                                                                
C                                                                       
      DO  20  I = 2, N                                                  
        IND = LD(I-1)+1                                                 
        TC1 = AD(IND)                                                   
        CDIAG(I) = CDIAG(I) - TC1*TC1*DINV                              
  20  CONTINUE                                                          
C                                                                       
C LOOP OVER ALL COLUMNS FROM 2 TO N                                     
C                                                                       
C INDJ IS INDEX OF (J,J)                                                
C                                                                       
      INDJ=1                                                            
      DO  100  J = 2, N                                                 
        INDJ = INDJ+J                                                   
        J1 = J-1                                                        
C                                                                       
C FIND INDEX JQ WITH MAX CDIAG                                          
C                                                                       
      IF (J.EQ.N)  GOTO  112                                            
      JQ=J                                                              
      DM = DABS(CDIAG(J))                                               
      DO  101  I = J+1, N                                               
        TST = DABS(CDIAG(I))                                            
        IF (TST.LE.DM)  GOTO  101                                       
        DM = TST                                                        
        JQ = I                                                          
  101 CONTINUE                                                          
      IF (JQ.EQ.J)  GOTO  112                                           
C                                                                       
C EXCHANGE CDIAG AND AD AT JQ AND DEFINE IPERM                          
C INDJQ IS INDEX OF JQ                                                  
C                                                                       
      INDJQ = JQ*(JQ+1)/2                                               
      T = CDIAG(JQ)                                                     
      CDIAG(JQ) = CDIAG(J)                                              
      CDIAG(J) = T                                                      
      T = AD(INDJQ)                                                     
      AD(INDJQ) = AD(INDJ)                                              
      AD(INDJ) = T                                                      
      IT = IPERM(J)                                                     
      IPERM(J) = IPERM(JQ)                                              
      IPERM(JQ) = IT                                                    
C                                                                       
C EXCHANGE OFFDIAGONAL ELEMENTS OF AD                                   
C                                                                       
      IND1 = INDJ-J                                                     
      DO  102  IS = 1, J-1                                              
        IND1 = IND1 + 1                                                 
        TEMP(IS) = AD(IND1)                                             
  102 CONTINUE                                                          
      DO  103  IS = J, N                                                
        IND1 = LD(IS-1) + J                                             
        TEMP(IS) = AD(IND1)                                             
  103 CONTINUE                                                          
      IND1 = INDJ-J                                                     
      IND2 = INDJQ-JQ                                                   
*VOPTION VEC                                                            
      DO  104  IS = 1, J-1                                              
        IND1 = IND1 + 1                                                 
        IND2 = IND2 + 1                                                 
        AD(IND1) = AD(IND2)                                             
  104 CONTINUE                                                          
      IND2 = INDJQ-JQ                                                   
      DO  105  IS = 1, J-1                                              
        IND2 = IND2 + 1                                                 
        AD(IND2) = TEMP(IS)                                             
  105 CONTINUE                                                          
      IND1 = INDJ+J                                                     
      IND20 = IND2+1                                                    
      IND2 = IND20                                                      
      IF (JQ.EQ.J+1)  GOTO  108                                         
*VOPTION VEC                                                            
      DO  106  IS = J+1, JQ-1                                           
        IND1 = LD(IS-1)+J                                               
        IND2 = IND2+1                                                   
        AD(IND1) = AD(IND2)                                             
  106 CONTINUE                                                          
      IND2 = IND20                                                      
      DO  107  IS = J+1, JQ-1                                           
        IND2 = IND2 + 1                                                 
        AD(IND2) = TEMP(IS)                                             
  107 CONTINUE                                                          
  108 IF (JQ.EQ.N)  GOTO  112                                           
*VOPTION VEC                                                            
      DO  109  IS = JQ+1, N                                             
        IND1 = LD(IS-1) + J                                             
        IND2 = LD(IS-1) + JQ                                            
        AD(IND1) = AD(IND2)                                             
  109 CONTINUE                                                          
      DO  110  IS = JQ+1, N                                             
        IND2 = LD(IS-1) + JQ                                            
        AD(IND2) = TEMP(IS)                                             
  110 CONTINUE                                                          
C                                                                       
C CALCULATE L(J,IS)  IS=1,J-1  SAVE AND STORE                           
C                                                                       
  112 IND1 = INDJ-J                                                     
      DO  113  IS = 1, J1                                               
        IND0 = LD(IS)                                                   
        IND1 = IND1+1                                                   
  113   TEMP(IS) = AD(IND0)*AD(IND1)                                    
      IND1 = INDJ-J                                                     
      DO  114  IS = 1, J1                                               
        IND1 = IND1 + 1                                                 
        AD(IND1) = TEMP(IS)                                             
  114 CONTINUE                                                          
C                                                                       
C CALCULATE NEW C(I,J) AND STORE IN AD(IND0)                            
C                                                                       
C IND0 IS INDEX OF(I,J)                                                 
C IND0 IS INDEX OF(I,IS), IS=1, J1                                      
C FIND MAX OF C(I,J) STORED IN THETA                                    
C                                                                       
      THETA = 0.D0                                                      
      IF (J.EQ.N)  GOTO  200                                            
      IND0 = INDJ                                                       
      DO  120  I = J, N-1                                               
C                                                                       
        IND0 = IND0+I                                                   
        IND1 = IND0-J                                                   
C                                                                       
        TC = AD(IND0)                                                   
        DO  121  IS = 1, J1                                             
          IND1 = IND1+1                                                 
  121     TC = TC - TEMP(IS)*AD(IND1)                                   
        AD(IND0) = TC                                                   
        THETA = DMAX1 (DABS(TC), THETA)                                 
  120 CONTINUE                                                          
C                                                                       
C FIND NEW DJ                                                           
C                                                                       
  200 DJ = DMAX1 (DABS(CDIAG(J)), DELTA, THETA*THETA/BSQ)               
C                                                                       
C DEFINE NEW DIAGONAL ELEMENT                                           
C                                                                       
      DIAGM(J) = DJ-CDIAG(J)                                            
      DINV = 1.D0 /DJ                                                   
      AD(INDJ) = DINV                                                   
      IF (J.EQ.N)  GOTO  100                                            
C                                                                       
C UPDATE NEW DIAG                                                       
C                                                                       
      DO  130  I = J+1, N                                               
        IND0 = LD(I-1) + J                                              
        TC1 = AD(IND0)                                                  
        CDIAG(I) = CDIAG(I) - TC1*TC1*DINV                              
  130 CONTINUE                                                          
  100 CONTINUE                                                          
C     WRITE(IOUT06,9000) BSQ                                            
C9000 FORMAT(' MODCH:   BSQ=',1PD10.3)                                  
      RETURN                                                            
      END                                                               
      SUBROUTINE  MBOUND (N,NN2,AD,BSQ,CDIAG,JQ,GAMMA)                  
      IMPLICIT REAL*8 (A-H,O-Z)                                         
      DIMENSION  AD(NN2),CDIAG(N)                                       
      DATA  EPSLM/1.D-14/                                               
C                                                                       
C FIND MAX OF DIAGONAL ELEMENTS (GAMMA) AND MAX OF                      
C OFFDIAGONAL ELEMENTS (XI).                                            
C                                                                       
      GAMMA = DABS(AD(1))                                               
      XI = 0.D0                                                         
      IND = 1                                                           
      JQ = 1                                                            
      CDIAG(1) = AD(1)                                                  
      DO  100  I = 2, N                                                 
        IND = IND + 1                                                   
        INDE = IND + I - 2                                              
        DO  110  J = IND, INDE                                          
          XI = DMAX1(XI,DABS(AD(IND)))                                  
  110   CONTINUE                                                        
      IND = INDE+1                                                      
      CDIAG(I) = AD(IND)                                                
      TC = DABS(AD(IND))                                                
      IF (TC.LE.GAMMA)  GOTO  100                                       
        JQ = I                                                          
        GAMMA = TC                                                      
  100 CONTINUE                                                          
      BSQ = DMAX1 (XI/N, GAMMA, EPSLM)                                  
      RETURN                                                            
      END                                                               
      SUBROUTINE  KLINE (FUNC,N,VFUNC,VAR,VAR0,XDEL,ESTM0,CO,CHARGE)    
      IMPLICIT REAL*8 (A-H,O-Z)                                         
CMSP  INCLUDE (MAXSIZE)                                                 
      INCLUDE '/labo/qclib/inspidas/common/maxsize'
      DIMENSION  VAR(MAXVAR),VAR0(MAXVAR),XDEL(MAXVAR),                 
     &           CO(3,*),CHARGE(*)                                      
      DATA  ZERO,HALF /0.D0,0.5D0/                                      
      EA=VFUNC                                                          
      ESTM = ESTM0                                                      
      IC1 = 0                                                           
      IC2 = 0                                                           
      IC3 = 0                                                           
      IC4 = 0                                                           
      DO  1  L = 1, N                                                   
   1  VAR0(L) = VAR(L)                                                  
      STEP = ZERO                                                       
      DO  2  L = 1, N                                                   
   2  STEP = STEP + XDEL(L)*XDEL(L)                                     
      STEP = DSQRT(STEP)                                                
      EPSLM = 1.D-7/STEP                                                
      HALFES = HALF*ESTM                                                
      DO  10  L = 1, N                                                  
  10  VAR(L) = VAR0(L) + HALFES*XDEL(L)                                 
      CALL  FUNC (VAR,EB,CO,CHARGE)                                     
      IF (EA.LE.EB)  GOTO  3000                                         
      DO  20  L = 1, N                                                  
  20  VAR(L) = VAR0(L) + ESTM*XDEL(L)                                   
      CALL  FUNC (VAR,EC,CO,CHARGE)                                     
C                                                                       
C*******   SHIFT 1                                                      
C                                                                       
 1500 IF (EA.GE.EB.AND.EB.GE.EC)  THEN                                  
      IC1 = IC1+1                                                       
        EB = EC                                                         
        ESTM = ESTM+ESTM                                                
        DO  30  L = 1, N                                                
  30    VAR(L) = VAR0(L) + ESTM*XDEL(L)                                 
        CALL  FUNC (VAR,EC,CO,CHARGE)                                   
        GOTO  1500                                                      
      ENDIF                                                             
C                                                                       
C*******   SHIFT 2                                                      
C                                                                       
 1800 ESTMP = ESTM*HALF                                                 
 2000 IF (EA.LE.EC)  THEN                                               
      IC2 = IC2+1                                                       
        ESTMP = HALF*ESTMP                                              
        ESTM = ESTM - ESTMP                                             
        IF (ESTMP.LT.EPSLM)  GOTO  5000                                 
        DO  40  L = 1, N                                                
  40    VAR(L) = VAR0(L) + ESTM*XDEL(L)                                 
        CALL  FUNC (VAR,EC,CO,CHARGE)                                   
        GOTO  2000                                                      
      ENDIF                                                             
C                                                                       
C*******   SHIFT 3                                                      
C                                                                       
 2500 IF (EB.GE.EC)  THEN                                               
      IC3 = IC3+1                                                       
        ESTMP = HALF*ESTMP                                              
        ESTM = ESTM + ESTMP                                             
        IF (ESTMP.LT.EPSLM)  GOTO  5000                                 
        DO  50  L = 1, N                                                
  50    VAR(L) = VAR0(L) + ESTM*XDEL(L)                                 
        CALL  FUNC (VAR,EC,CO,CHARGE)                                   
        GOTO  2500                                                      
      ENDIF                                                             
          GOTO  5000                                                    
C                                                                       
C*******   SHIFT 4                                                      
C                                                                       
 3000 IF (EA.LE.EB)  THEN                                               
      IC4 = IC4+1                                                       
        EC=EB                                                           
        ESTM = ESTM*HALF                                                
        ESTMB = ESTM*HALF                                               
        IF (ESTMB.LT.EPSLM)  RETURN                                     
        DO  60  L = 1, N                                                
  60    VAR(L) = VAR0(L) + ESTMB*XDEL(L)                                
        CALL  FUNC (VAR,EB,CO,CHARGE)                                   
        GOTO  3000                                                      
      ENDIF                                                             
      IF (EA.LE.EC)  GOTO  1800                                         
C                                                                       
 5000 A = ZERO                                                          
      B = ESTM*HALF                                                     
      C = ESTM                                                          
C     WRITE(IOUT06,100) IC1,IC2,IC3,IC4                                 
      IF (IC1+IC2+IC3+IC4.EQ.0)  GOTO  6000                             
      DO  70  L = 1, N                                                  
  70  VAR(L) = VAR0(L) + B*XDEL(L)                                      
      CALL  FUNC (VAR,EB,CO,CHARGE)                                     
      IF (EB.GE.EA)  GOTO  3000                                         
 6000 D = 0.5D0*((B*B-C*C)*EA+(C*C-A*A)*EB+(A*A-B*B)*EC)/               
     &    ((B-C)*EA+(C-A)*EB+(A-B)*EC)                                  
      DO  80  L = 1, N                                                  
  80  VAR(L) = VAR0(L) + D*XDEL(L)                                      
      CALL  FUNC (VAR,VFUNC,CO,CHARGE)                                  
      IF (VFUNC.LT.EB)  THEN                                            
C       WRITE(IOUT06,300) 'D',A,D,C                                     
      ELSE                                                              
        VFUNC = EB                                                      
        DO  90  L = 1, N                                                
  90    VAR(L) = VAR0(L) + B*XDEL(L)                                    
C       WRITE(IOUT06,300) 'B',A,B,C                                     
      ENDIF                                                             
C     WRITE(IOUT06,310) EA,VFUNC,EC                                     
      RETURN                                                            
  100 FORMAT(' KLINE:    SHIFT1  SHIFT2  SHIFT3  SHIFT4'/' ',6X,4I8)    
  300 FORMAT(' ',15X,'A',14X,A1,14X,'C'/' ',8X,1P3D15.7)                
  310 FORMAT(' ',8X,1P3D15.7)                                           
      END                                                               
      SUBROUTINE  INV (N,NN2,AD,GRAD,ST,IPERM,LD,STN)                   
C                                                                       
C INV CALCULATES THE NEWTON STEP BY INVERTING AD                        
C AD*STN = -GRAD                                                        
C AD IS THE CHOLESKY DECOMPOSITION STORED IN COMPRESSED WAY             
C THE DIAGONAL ELEMENTS OF AD ARE THE INVERSE OF D                      
C THE OFFDIAGNAL ELEMENTS ARE L                                         
C STORAGE MODE: (1,1),(2,1),(2,2),(3,1),(3,2),...                       
C                                                                       
      IMPLICIT REAL*8 (A-H,O-Z)                                         
      DIMENSION  AD(NN2),GRAD(N),ST(N),IPERM(N),LD(N),STN(N)            
C                                                                       
C FIRST STEP INVERT L                                                   
C                                                                       
      STN(1) = -GRAD(IPERM(1))                                          
      IND = 0                                                           
      DO  20  I = 2, N                                                  
        TC = -GRAD(IPERM(I))                                            
        IND = IND+1                                                     
        DO  10  J = 1, I-1                                              
          IND = IND+1                                                   
  10      TC = TC - AD(IND)*STN(J)                                      
        STN(I) = TC                                                     
  20  CONTINUE                                                          
C                                                                       
C INVERT D                                                              
C                                                                       
      DO  30  I = 1, N                                                  
  30    STN(I) = AD(LD(I))*STN(I)                                       
C                                                                       
C INVERT L TRANSPOSE                                                    
C                                                                       
      DO  50  J = N-1, 1, -1                                            
        TC = STN(J)                                                     
        DO  40  I = J+1, N                                              
          IND = LD(I-1)+J                                               
          TC = TC - AD(IND)*STN(I)                                      
  40    CONTINUE                                                        
        STN(J) = TC                                                     
  50  CONTINUE                                                          
C                                                                       
C PERM TO OLD ORDER                                                     
C                                                                       
      DO  60  I = 1, N                                                  
  60    ST(IPERM(I)) = STN(I)                                           
      RETURN                                                            
      END                                                               
      SUBROUTINE  GENRA (VAR,CO)                                        
C                                                                       
C  THIS SUBROUTINE GENERATES THE ATOMIC COORDINATES.                    
C                                                                       
      IMPLICIT REAL*8 (A-H,O-Z)                                         
C     PARAMETER  (MAXATM=3000,MAXVAR=800,MAXSTC=3)                      
      PARAMETER  (MAXSTC=3)                                             
C     PARAMETER  (MXATM1=MAXATM+1,MVAR1=MAXVAR+1)                       
CMSP  INCLUDE (MAXSIZE)                                                 
      INCLUDE '/labo/qclib/inspidas/common/maxsize'
CMSP  INCLUDE (SIZE)                                                    
      INCLUDE '/labo/qclib/inspidas/common/size'
CMSP  INCLUDE (ATOM)                                                    
      INCLUDE '/labo/qclib/inspidas/common/atom'
CMSP  INCLUDE (BOND)                                                    
      INCLUDE '/labo/qclib/inspidas/common/bond'
CMSP  INCLUDE (REFRNC)                                                  
      INCLUDE '/labo/qclib/inspidas/common/refrnc'
CMSP  INCLUDE (TABLE1)                                                  
      INCLUDE '/labo/qclib/inspidas/common/table1'
C     COMMON/NUMBER/  NUMATM,NUMVAR,NN2,NUMINT,NSS,NUMRES               
C     COMMON/ATOM00/  KUNIT(MAXATM),KATOM(MXATM1),JATOM(MAXATM)         
C     COMMON/ATOM01/  LATOM0(0:MAXVAR),LATOM1(MAXATM)                   
C     COMMON/BOND00/  DIRCOS(3,MAXVAR),IBND1(MAXVAR),IBND2(0:MVAR1)     
C     COMMON/REFRNC/  REFCRD(3,MAXATM),REFANG(MAXVAR)                   
C     COMMON/TABLE1/  IFRONT(MAXVAR),NBACK(0:MAXVAR),IBACK(2,0:MAXVAR)  
      DIMENSION  VAR(NUMVAR),CO(3,NUMATM),LCYCL(3,3)                    
      DIMENSION  R(3,3),WR(3,3),WRR(9),RRST(9,MAXSTC),EMATRX(9)         
      DIMENSION  CS(MAXVAR),SN(MAXVAR),CS1(MAXVAR)                      
      EQUIVALENCE  (WR,WRR)                                             
      DATA  ZERO, ONE /0.D0, 1.D0/                                      
      DATA  LCYCL /1,3,2,2,1,3,3,2,1/                                   
      DATA  EMATRX /1.D0, 3*0.D0, 1.D0, 3*0.D0, 1.D0/                   
C*******************************                                        
C     UNIT 0                                                            
C*******************************                                        
      IMAXST = NBACK(0)                                                 
      DO  12  K = 1, IMAXST                                             
        DO  10  I = 1, 9                                                
  10      RRST(I,K) = EMATRX(I)                                         
  12  CONTINUE                                                          
C*******************************                                        
C     UNITS 1 TO NUMVAR                                                 
C*******************************                                        
C                                                                       
      DO  20  I = 1, NUMVAR                                             
        ANG = VAR(I) - REFANG(I)                                        
        CS(I) = DCOS(ANG)                                               
        SN(I) = DSIN(ANG)                                               
        CS1(I) = ONE - CS(I)                                            
  20  CONTINUE                                                          
C                                                                       
C   ----- DO LOOP 100 BEGINS -----                                      
C                                                                       
      DO  100  I = 1, NUMVAR                                            
        L1 = IBND1(I)                                                   
        L2 = IBND2(I)                                                   
C                                                                       
C  DIRECTION COSINE OF THE I-TH BOND.                                   
C                                                                       
        AB = ZERO                                                       
        DO  30  L = 1, 3                                                
        DIRCOS(L,I) = CO(L,L2) - CO(L,L1)                               
  30    AB = AB + DIRCOS(L,I)*DIRCOS(L,I)                               
          AB = ONE / DSQRT(AB)                                          
        DO  35  L = 1, 3                                                
  35    DIRCOS(L,I) = DIRCOS(L,I)*AB                                    
C                                                                       
C  CONSTRUCT A ROTAIONAL MATRIX.                                        
C                                                                       
*VOPTION VEC                                                            
        DO  40  L = 1, 3                                                
          LC1 = LCYCL(L,1)                                              
          LC2 = LCYCL(L,2)                                              
          U1 = CS1(I) * DIRCOS(LC1,I) * DIRCOS(LC2,I)                   
          U2 = SN(I)  * DIRCOS(LCYCL(L,3),I)                            
          R(LC1,LC2) = U1 - U2                                          
          R(LC2,LC1) = U1 + U2                                          
          R(L,L) = CS(I) + CS1(I)*DIRCOS(L,I)*DIRCOS(L,I)               
  40    CONTINUE                                                        
        DO  50  L = 1, 3                                                
          WR(L,1) = R(L,1)*RRST(1,IMAXST) + R(L,2)*RRST(2,IMAXST)       
     &                 + R(L,3)*RRST(3,IMAXST)                          
          WR(L,2) = R(L,1)*RRST(4,IMAXST) + R(L,2)*RRST(5,IMAXST)       
     &                 + R(L,3)*RRST(6,IMAXST)                          
          WR(L,3) = R(L,1)*RRST(7,IMAXST) + R(L,2)*RRST(8,IMAXST)       
     &                 + R(L,3)*RRST(9,IMAXST)                          
  50    CONTINUE                                                        
C                                                                       
C  ROTATE THE ATOMS JI TO JE AND ATTATCH THEM ON THE END OF THE I-TH    
C  BOND (Q1,Q2,Q3).                                                     
C                                                                       
        Q1 = CO(1,L2)                                                   
        Q2 = CO(2,L2)                                                   
        Q3 = CO(3,L2)                                                   
        JI = LATOM0(I)                                                  
        JE = LATOM0(I-1)-1                                              
*VOPTION VEC                                                            
          DO  55  J = JI, JE                                            
            K = LATOM1(J)                                               
            CO(1,K)=WRR(1)*REFCRD(1,K)+WRR(4)*REFCRD(2,K)               
     &                + WRR(7)*REFCRD(3,K) + Q1                         
            CO(2,K)=WRR(2)*REFCRD(1,K)+WRR(5)*REFCRD(2,K)               
     &                + WRR(8)*REFCRD(3,K) + Q2                         
            CO(3,K)=WRR(3)*REFCRD(1,K)+WRR(6)*REFCRD(2,K)               
     &                + WRR(9)*REFCRD(3,K) + Q3                         
  55      CONTINUE                                                      
C                                                                       
C  UPDATE RRST                                                          
C                                                                       
        IF (NBACK(I)-1)  80, 60, 70                                     
  60      DO  65  L = 1, 9                                              
  65      RRST(L,IMAXST) = WRR(L)                                       
            GOTO  80                                                    
  70      DO  75  L = 1, 9                                              
          RRST(L,IMAXST) = WRR(L)                                       
  75      RRST(L,IMAXST+1) = WRR(L)                                     
  80        IMAXST = IMAXST + NBACK(I) - 1                              
 100  CONTINUE                                                          
C                                                                       
C   ----- DO LOOP 100 ENDS -------                                      
C                                                                       
      RETURN                                                            
      END                                                               
C     SUBROUTINE  ENRGYA (VAR,ETOTAL,NUMVAR,CO,CHARGE)                  
      SUBROUTINE  ENRGYA (VAR,ETOTAL,CO,CHARGE)                         
C                                                                       
C  THIS SUBROUTINE COMPUTES THE CONFORMATIONAL ENERGY.                  
C                                                                       
      IMPLICIT REAL*8 (A-H,O-Z)                                         
C     PARAMETER  (MAXATM=3000,MAXVAR=800,MAXSS =5,MAXLEN=3500)          
C     PARAMETER  (MAXSS2=MAXSS*2)                                       
CMSP  INCLUDE (MAXSIZE)                                                 
      INCLUDE '/labo/qclib/inspidas/common/maxsize'
CMSP  INCLUDE (SIZE)                                                    
      INCLUDE '/labo/qclib/inspidas/common/size'
CMSP  INCLUDE (INTER0)                                                  
      INCLUDE '/labo/qclib/inspidas/common/inter0'
CMSP  INCLUDE (NBTYPE)                                                  
      INCLUDE '/labo/qclib/inspidas/common/nbtype'
CMSP  INCLUDE (TORSN0)                                                  
      INCLUDE '/labo/qclib/inspidas/common/torsn0'
CMSP  INCLUDE (SSPAIR)                                                  
      INCLUDE '/labo/qclib/inspidas/common/sspair'
C     COMMON/NUMBER/  NUMATM,MUMVAR,NN2,NUMINT,NSS,NUMRES               
C     COMMON/INTER0/  INTER(MAXATM),INTATM(3,MAXLEN)                    
C     COMMON/NBTYPE/  NBTYPE(MAXATM)                                    
C     COMMON/TORSN0/  A(MAXVAR),NB(MAXVAR),NS(MAXVAR),IFTOR(MAXVAR)     
C     COMMON/SSPAIR/  KSSPER(6,2,MAXSS),JSS(3,MAXSS),KSS(MAXSS2),       
C    &                LSS(MAXSS2)                                       
      COMMON/ENE000/  ETOR,EES,ENB,ELOOP,ECYSTR                         
      DIMENSION  VAR(MAXVAR),CO(3,*),CHARGE(*)                          
      DIMENSION  WRK1(MAXATM),WRK2(MAXATM)                              
C                                                                       
C  GENERATE THE ATOMIC COORDINATES.                                     
C                                                                       
      CALL  GENRA (VAR,CO)                                              
C                                                                       
C  INITIALIZE THE PARAMETERS.                                           
C                                                                       
      CALL  EZERO                                                       
C                                                                       
C---  COMPUTE THE ENERGIES --------------------------------------       
C                                                                       
C <ENB & EES>                                                           
      CALL  ECALA (INTATM,CO,CHARGE,NBTYPE,WRK1,WRK2)                   
C                                                                       
C <ETOR>                                                                
      CALL  ETORSN (A,NB,NS,IFTOR,VAR)                                  
C                                                                       
C <ELOOP & ECYSTR>                                                      
      IF (NSS.GE.1)  THEN                                               
        DO  160  I = 1, NSS                                             
          CALL  ECALSS (KSSPER(1,1,I),KSSPER(1,2,I),CO)                 
  160   CONTINUE                                                        
      ENDIF                                                             
C                                                                       
C           <ETOTAL>                                                    
C                                                                       
      ETOTAL = ETOR + EES + ENB + ELOOP + ECYSTR                        
C                                                                       
      RETURN                                                            
      END                                                               
      SUBROUTINE  ECALA (INTATM,CO,CHARGE,NBTYPE,ENB00,RI)              
C                                                                       
C  THIS SUBROUTINE COMPUTES THE NONBONDED AND ELECTROSTATIC ENERGIES.   
C                                                                       
      IMPLICIT REAL*8 (A-H,O-Z)                                         
CMSP  INCLUDE (SIZE)                                                    
      INCLUDE '/labo/qclib/inspidas/common/size'
C     COMMON/NUMBER/  NUMATM,NUMVAR,NN2,NUMINT,NSS,NUMRES               
      COMMON/ENE000/  ETOR,EES,ENB,ELOOP,ECYSTR                         
      COMMON/EPARAM/  PNB(28,56)                                        
      DIMENSION   CO(3,NUMATM),CHARGE(NUMATM),NBTYPE(NUMATM)            
      DIMENSION   INTATM(3,NUMINT)                                      
      DIMENSION   ENB00(NUMATM),RI(NUMATM)                              
      DATA  ZERO,HALF,ONE,TWO /0.D0,0.5D0,1.D0,2.D0/                    
C                                                                       
      MA = 1                                                            
C                                                                       
      DO  100  L = 1, NUMINT                                            
        QA  = CHARGE(MA)                                                
        NBA = NBTYPE(MA)                                                
        IATMI = MA + INTATM(1,L)                                        
        NUM4 = INTATM(2,L)                                              
        IATMF = IATMI + NUM4 - 1                                        
        IF (NUM4.EQ.0)  GOTO  20                                        
C                                                                       
C  1-4 INTERACTION                                                      
C                                                                       
        DO  10  MB = IATMI, IATMF                                       
          RI2 = ONE / ((CO(1,MA)-CO(1,MB))**2 + (CO(2,MA)-CO(2,MB))**2  
     &                  + (CO(3,MA)-CO(3,MB))**2)                       
          RI(MB) = DSQRT(RI2)                                           
          K = NBTYPE(MB)*2                                              
          RO2 = PNB(NBA,K)*RI2                                          
          IF (PNB(NBA,K-1).GE.ZERO)  THEN                               
            RO6 = RO2*RO2*RO2                                           
            ENB00(MB) = PNB(NBA,K-1)*RO6*(HALF*RO6 - TWO)               
          ELSE                                                          
            RO4 = RO2*RO2                                               
            RO6 = RO2*RO4                                               
            ENB00(MB) = -PNB(NBA,K-1)*RO6*(RO6 - TWO*RO4)               
          ENDIF                                                         
  10    CONTINUE                                                        
C                                                                       
        DO  12  MB = IATMI, IATMF                                       
            EES = EES + QA*CHARGE(MB)*RI(MB)                            
  12        ENB = ENB + ENB00(MB)                                       
C                                                                       
  20    KEY = INTATM(3,L)                                               
        IF (KEY.EQ.0)  GOTO  40                                         
        IATMI = IATMF + 1                                               
        IATMF = NUMATM                                                  
        IF (KEY.GT.0)  IATMF = IATMI + KEY - 1                          
C                                                                       
C  1-5 INTERACTION                                                      
C                                                                       
        DO  30  MB = IATMI, IATMF                                       
          DUM001 =    ((CO(1,MA)-CO(1,MB))**2 + (CO(2,MA)-CO(2,MB))**2  
     &                     + (CO(3,MA)-CO(3,MB))**2)                    
          IF (DUM001.EQ.0.D0) THEN                                      
          ENDIF                                                         
          RI2 = ONE / ((CO(1,MA)-CO(1,MB))**2 + (CO(2,MA)-CO(2,MB))**2  
     &                     + (CO(3,MA)-CO(3,MB))**2)                    
          RI(MB) = DSQRT(RI2)                                           
          K = NBTYPE(MB)*2                                              
          RO2 = PNB(NBA,K)*RI2                                          
          IF (PNB(NBA,K-1).GE.ZERO)  THEN                               
            RO6 = RO2*RO2*RO2                                           
            ENB00(MB) = PNB(NBA,K-1)*RO6*(RO6 - TWO)                    
          ELSE                                                          
            RO4 = RO2*RO2                                               
            RO6 = RO2*RO4                                               
            ENB00(MB) = - PNB(NBA,K-1)*RO6*(RO6 - TWO*RO4)              
          ENDIF                                                         
  30    CONTINUE                                                        
C                                                                       
        DO  32  MB = IATMI, IATMF                                       
          EES = EES + QA*CHARGE(MB)*RI(MB)                              
  32      ENB = ENB + ENB00(MB)                                         
C                                                                       
  40    IF (NUM4.EQ.0.AND.KEY.EQ.0)  MA = MA + 1                        
        IF (KEY.LT.0)  MA = MA + 1                                      
  100 CONTINUE                                                          
      RETURN                                                            
      END                                                               
C     SUBROUTINE  ENRGYZ (VAR,ETOTAL,NUMVAR,CO,CHARGE)                  
      SUBROUTINE  ENRGYZ (VAR,ETOTAL,CO,CHARGE)                         
C                                                                       
C  THIS SUBROUTINE COMPUTES THE CONFORMATIONAL ENERGY & PENALTY FUNCTION
C                                                                       
      IMPLICIT REAL*8 (A-H,O-Z)                                         
C     PARAMETER  (MAXATM=3000,MAXVAR=800,MAXINT=60000,MAXSS =5)         
C     PARAMETER  (MAXPER=10000,MAXCNS=900)                              
C     PARAMETER  (MXATM1=MAXATM+1,MVAR1=MAXVAR+1)                       
C     PARAMETER  (MXPAIR=MAXVAR*(MAXVAR+1)/2)                           
C     PARAMETER  (MXPAR1=(MAXVAR+1)*(MAXVAR+2)/2)                       
C     PARAMETER  (MAXJ=2*MAXVAR,MAXSS2=MAXSS*2)                         
C     PARAMETER  (MAXI1=MAXINT/2,MAXI2=MAXINT-MAXI1)                    
CMSP  INCLUDE (MAXSIZE)                                                 
      INCLUDE '/labo/qclib/inspidas/common/maxsize'
CMSP  INCLUDE (SIZE)                                                    
      INCLUDE '/labo/qclib/inspidas/common/size'
CMSP  INCLUDE (ATOM)                                                    
      INCLUDE '/labo/qclib/inspidas/common/atom'
CMSP  INCLUDE (BOND)                                                    
      INCLUDE '/labo/qclib/inspidas/common/bond'
CMSP  INCLUDE (TABLE1)                                                  
      INCLUDE '/labo/qclib/inspidas/common/table1'
CMSP  INCLUDE (TORSN0)                                                  
      INCLUDE '/labo/qclib/inspidas/common/torsn0'
CMSP  INCLUDE (SSPAIR)                                                  
      INCLUDE '/labo/qclib/inspidas/common/sspair'
CMSP  INCLUDE (NBTYPE)                                                  
      INCLUDE '/labo/qclib/inspidas/common/nbtype'
CMSP  INCLUDE (WKENRG)                                                  
      INCLUDE '/labo/qclib/inspidas/common/wkenrg'
C     COMMON/NUMBER/  NUMATM,JUMVAR,NN2,NUMINT,NSS,NUMRES               
C     COMMON/ATOM00/  KUNIT(MAXATM),KATOM(MXATM1),JATOM(MAXATM)         
C     COMMON/BOND00/  DIRCOS(3,MAXVAR),IBND1(MAXVAR),IBND2(0:MVAR1)     
      COMMON/INTR14/  NO14(-1:MAXVAR),LIST14(100),                      
     &                NO12(-1:MAXVAR),LIST12(100)                       
C     COMMON/TABLE1/  IFRONT(MAXVAR),NBACK(0:MAXVAR),IBACK(2,0:MAXVAR)  
      COMMON/TABLE3/  NINT,IPAIR1(MAXI1),IPAIR2(MAXI2),LINT(-1:MAXVAR)  
      COMMON/TABLE4/  KMAX,LISTK(-1:MAXVAR),JANGLE(MXPAIR),             
     &                 KANGLE(0:MXPAR1)                                 
C     COMMON/TORSN0/  A(MAXVAR),NB(MAXVAR),NS(MAXVAR),IFTOR(MAXVAR)     
C     COMMON/SSPAIR/  KSSPER(6,2,MAXSS),JSS(3,MAXSS),KSS(MAXSS2),       
C    &                LSS(MAXSS2)                                       
      COMMON/ENE000/  ETOR,EES,ENB,ELOOP,ECYSTR                         
      COMMON/ENE001/  ERRR,WVLTN                                        
      COMMON/ENE002/  COX(3,MAXATM),NFLAG(MAXATM)                       
      COMMON/RANGE/   KRANGE                                            
C     COMMON/NBTYPE/  NBTYPE(MAXATM)                                    
      DIMENSION  VAR(MAXVAR),CO(3,*),CHARGE(*)                          
C     DIMENSION  JPAIR1(MAXPER),JPAIR2(MAXPER)                          
C     DIMENSION  JAA(MAXJ),JBB(MAXJ),JBF(MAXJ)                          
C                                                                       
C  GENERATES THE ATOMIC COORDINATES.                                    
C                                                                       
      CALL  GENRA (VAR,CO)                                              
C                                                                       
C  INITIALIZE THE PARAMETERS.                                           
C                                                                       
      CALL  EZERO                                                       
      MSS = 1                                                           
C                                                                       
C------ COMPUTE THE ENERGIES AND PENALTY FUNCTION ------------          
C                                                                       
      DO  100  K = KRANGE, 0, -1                                        
C                                                                       
        CALL  ENRSET (K,JK,JFIN,LI,LFIN,LISTK,KANGLE,IFRONT,LINT,       
     &                JAA,JBB,JBF)                                      
C                                                                       
        IF (LFIN.EQ.0)  GOTO  100                                       
C                                                                       
        IF (K.LE.2)  THEN                                               
          LI = LINT(K) - LINT(2) + 1                                    
          CALL  ECALZ (K,LFIN,IPAIR1(LI),IPAIR2(LI),CO,CHARGE,NBTYPE,   
     &                 COX,NFLAG)                                       
C                                                                       
          IF (NSS.EQ.0)  GOTO  100                                      
          IF (MSS.LT.0)  GOTO  100                                      
  20      IF (KSS(LSS(MSS)).NE.K)  GOTO  100                            
            LS = (LSS(MSS)+1)/2                                         
            CALL  ECALSD (KSSPER(1,1,LS),KSSPER(1,2,LS),CO,             
     &                                            MOD(LSS(MSS)+1,2)+1)  
            MSS = MSS+1                                                 
            IF (MSS.LE.2*NSS)  GOTO  20                                 
            MSS = -MSS                                                  
C                                                                       
        ELSE                                                            
          MFLAG = -1                                                    
          LI14 = NO14(K)                                                
          LF14 = NO14(K-1)-1                                            
          MI12 = NO12(K)                                                
          MF12 = NO12(K-1)-1                                            
C                                                                       
          IF (NSS.EQ.0)  GOTO   40                                      
          IF (MSS.LT.0)  GOTO   40                                      
   30     IF (KSS(LSS(MSS)).NE.K)  GOTO   40                            
            LS = (LSS(MSS)+1)/2                                         
            CALL  ECALSD (KSSPER(1,1,LS),KSSPER(1,2,LS),CO,             
     &                                            MOD(LSS(MSS)+1,2)+1)  
            MSS = MSS + 1                                               
            MFLAG = K                                                   
            IF (MSS.LE.2*NSS)  GOTO   30                                
              MSS = - MSS                                               
C                                                                       
   40     CALL  PAIR15 (JPAIR1,JPAIR2,JAA,JBF,JFIN,KATOM,JATOM,         
     &             IBND2,LI14,LF14,LIST14,MI12,MF12,LIST12,MFLAG)       
          CALL  ECALZ (MFLAG,LFIN,JPAIR1,JPAIR2,CO,CHARGE,NBTYPE,       
     &                 COX,NFLAG)                                       
        ENDIF                                                           
C                                                                       
  100 CONTINUE                                                          
C                                                                       
C-- TORSIONAL ENERGY  ---------------------------                       
C                                                                       
          CALL  ETORSN (A,NB,NS,IFTOR,VAR)                              
C                                                                       
C-- TOTAL ---------------------------------------                       
C                                                                       
      ETTL   = ETOR + EES + ENB + ELOOP + ECYSTR                        
      ETOTAL = ETTL + ERRR*WVLTN                                        
C                                                                       
      RETURN                                                            
      END                                                               
      SUBROUTINE  ECALZ (KFLAG,LFIN,IPAIR1,IPAIR2,                      
     &                   CO,CHARGE,NBTYPE,COX,NFLAG)                    
      IMPLICIT REAL*8 (A-H,O-Z)                                         
C     PARAMETER  (MAXPER=10000)                                         
CMSP  INCLUDE (MAXSIZE)                                                 
      INCLUDE '/labo/qclib/inspidas/common/maxsize'
CMSP  INCLUDE (SIZE)                                                    
      INCLUDE '/labo/qclib/inspidas/common/size'
CMSP  INCLUDE (WKCAL1)                                                  
      INCLUDE '/labo/qclib/inspidas/common/wkcal1'
CMSP  INCLUDE (WKCAL2)                                                  
      INCLUDE '/labo/qclib/inspidas/common/wkcal2'
C     COMMON/NUMBER/  NUMATM,NUMVAR,NN2,NUMINT,NSS,NUMRES               
      COMMON/EPARAM/  PNB(1568)                                         
      COMMON/ENE000/  ETOR,EES,ENB,ELOOP,ECYSTR                         
      COMMON/ENE001/  ERRR,WVLTN                                        
      DIMENSION  IPAIR1(LFIN),IPAIR2(LFIN)                              
      DIMENSION  CO(3,NUMATM),CHARGE(NUMATM),NBTYPE(NUMATM)             
      DIMENSION  COX(3,NUMATM),NFLAG(NUMATM)                            
C     DIMENSION  IPB(MAXPER),MFLAGX(MAXPER)                             
C     DIMENSION  RO2(MAXPER),R(MAXPER),R2X(MAXPER),ENB00(MAXPER)        
      DIMENSION  RO2(MAXPER),ENB00(MAXPER)                              
      EQUIVALENCE (R,ENB00)                                             
      DATA  HALF,ONE,TWO /0.5D0,1.D0,2.D0/                              
C                                                                       
      II = 0                                                            
      DO  10  L = 1, LFIN                                               
        JPA = IABS(IPAIR1(L))                                           
        JPB = IPAIR2(L)                                                 
        R2 = (CO(1,JPA)-CO(1,JPB))**2 + (CO(2,JPA)-CO(2,JPB))**2        
     &            + (CO(3,JPA)-CO(3,JPB))**2                            
        RI2 = ONE / R2                                                  
        EES = EES + CHARGE(JPA)*CHARGE(JPB)*DSQRT(RI2)                  
        IPB(L) = (NBTYPE(JPB)-1)*56 + NBTYPE(JPA)                       
        RO2(L) = PNB(IPB(L)+28)*RI2                                     
        R(L) = DSQRT(R2)                                                
        IF (NFLAG(JPA).EQ.1.AND.NFLAG(JPB).EQ.1) THEN                   
          II = II+1                                                     
          MFLAGX(II) = L                                                
          R2X(II) = (COX(1,JPA)-COX(1,JPB))**2                          
     &      + (COX(2,JPA)-COX(2,JPB))**2 + (COX(3,JPA)-COX(3,JPB))**2   
        ENDIF                                                           
  10  CONTINUE                                                          
C                                                                       
      DO  12  I = 1, II                                                 
        ERRR = ERRR + (R(MFLAGX(I)) - DSQRT(R2X(I)))**2/R2X(I)          
  12  CONTINUE                                                          
C                                                                       
      IF (KFLAG.GE.0)  THEN                                             
        DO  20  L = 1, LFIN                                             
          IF (PNB(IPB(L)).GE.0)  THEN                                   
            IF (IPAIR1(L).LT.0)  THEN                                   
              RO6 = RO2(L)*RO2(L)*RO2(L)                                
              ENB00(L) = PNB(IPB(L))*RO6*(HALF*RO6 - TWO)               
            ELSE                                                        
              RO6 = RO2(L)*RO2(L)*RO2(L)                                
              ENB00(L) = PNB(IPB(L))*RO6*(RO6 - TWO)                    
            ENDIF                                                       
          ELSE                                                          
              RO4 = RO2(L)*RO2(L)                                       
              RO6 = RO2(L)*RO4                                          
              ENB00(L) = - PNB(IPB(L))*RO6*(RO6 - TWO*RO4)              
          ENDIF                                                         
  20    CONTINUE                                                        
      ELSE                                                              
        DO  22  L = 1, LFIN                                             
          IF (PNB(IPB(L)).GE.0)  THEN                                   
              RO6 = RO2(L)*RO2(L)*RO2(L)                                
              ENB00(L) = PNB(IPB(L))*RO6*(RO6 - TWO)                    
          ELSE                                                          
              RO4 = RO2(L)*RO2(L)                                       
              RO6 = RO2(L)*RO4                                          
              ENB00(L) = - PNB(IPB(L))*RO6*(RO6 - TWO*RO4)              
          ENDIF                                                         
  22    CONTINUE                                                        
      ENDIF                                                             
C                                                                       
      DO  30  L = 1, LFIN                                               
        ENB = ENB + ENB00(L)                                            
  30  CONTINUE                                                          
C                                                                       
      RETURN                                                            
      END                                                               
C     SUBROUTINE  ENRGYX (VAR,ETOTAL,NUMVAR,CO,CHARGE)                  
      SUBROUTINE  ENRGYX (VAR,ETOTAL,CO,CHARGE)                         
C                                                                       
C  THIS SUBROUTINE COMPUTES THE CONFORMATIONAL ENERGY & PENALTY FUNCTION
C                                                                       
      IMPLICIT REAL*8 (A-H,O-Z)                                         
C     PARAMETER  (MAXATM=3000,MAXVAR=800,MAXINT=60000,MAXSS =5)         
C     PARAMETER  (MAXPER=10000,MAXCNS=900)                              
C     PARAMETER  (MXATM1=MAXATM+1,MVAR1=MAXVAR+1)                       
C     PARAMETER  (MXPAIR=MAXVAR*(MAXVAR+1)/2)                           
C     PARAMETER  (MXPAR1=(MAXVAR+1)*(MAXVAR+2)/2)                       
C     PARAMETER  (MAXJ=2*MAXVAR,MAXSS2=MAXSS*2)                         
C     PARAMETER  (MAXI1=MAXINT/2,MAXI2=MAXINT-MAXI1)                    
CMSP  INCLUDE (MAXSIZE)                                                 
      INCLUDE '/labo/qclib/inspidas/common/maxsize'
CMSP  INCLUDE (SIZE)                                                    
      INCLUDE '/labo/qclib/inspidas/common/size'
CMSP  INCLUDE (ATOM)                                                    
      INCLUDE '/labo/qclib/inspidas/common/atom'
CMSP  INCLUDE (BOND)                                                    
      INCLUDE '/labo/qclib/inspidas/common/bond'
CMSP  INCLUDE (TABLE1)                                                  
      INCLUDE '/labo/qclib/inspidas/common/table1'
CMSP  INCLUDE (TORSN0)                                                  
      INCLUDE '/labo/qclib/inspidas/common/torsn0'
CMSP  INCLUDE (SSPAIR)                                                  
      INCLUDE '/labo/qclib/inspidas/common/sspair'
CMSP  INCLUDE (WKENRG)                                                  
      INCLUDE '/labo/qclib/inspidas/common/wkenrg'
C     COMMON/NUMBER/  NUMATM,JUMVAR,NN2,NUMINT,NSS,NUMRES               
C     COMMON/ATOM00/  KUNIT(MAXATM),KATOM(MXATM1),JATOM(MAXATM)         
C     COMMON/BOND00/  DIRCOS(3,MAXVAR),IBND1(MAXVAR),IBND2(0:MVAR1)     
      COMMON/INTR14/  NO14(-1:MAXVAR),LIST14(100),                      
     &                NO12(-1:MAXVAR),LIST12(100)                       
C     COMMON/TABLE1/  IFRONT(MAXVAR),NBACK(0:MAXVAR),IBACK(2,0:MAXVAR)  
      COMMON/TABLE3/  NINT,IPAIR1(MAXI1),IPAIR2(MAXI2),LINT(-1:MAXVAR)  
      COMMON/TABLE4/  KMAX,LISTK(-1:MAXVAR),JANGLE(MXPAIR),             
     &                 KANGLE(0:MXPAR1)                                 
C     COMMON/TORSN0/  A(MAXVAR),NB(MAXVAR),NS(MAXVAR),IFTOR(MAXVAR)     
C     COMMON/SSPAIR/  KSSPER(6,2,MAXSS),JSS(3,MAXSS),KSS(MAXSS2),       
C    &                LSS(MAXSS2)                                       
      COMMON/ENE000/  ETOR,EES,ENB,ELOOP,ECYSTR                         
      COMMON/ENE001/  ERRR,WVLTN                                        
      COMMON/ENE002/  COX(3,MAXATM),NFLAG(MAXATM)                       
      COMMON/RANGE/   KRANGE                                            
      DIMENSION  VAR(MAXVAR),CO(3,*),CHARGE(*)                          
C     DIMENSION  JPAIR1(MAXPER),JPAIR2(MAXPER)                          
C     DIMENSION  JAA(MAXJ),JBB(MAXJ),JBF(MAXJ)                          
C                                                                       
C  GENERATES THE ATOMIC COORDINATES.                                    
C                                                                       
      CALL  GENRA (VAR,CO)                                              
C                                                                       
C  INITIALIZE THE PARAMETERS.                                           
C                                                                       
      CALL  EZERO                                                       
      MSS = 1                                                           
C                                                                       
C------ COMPUTE THE ENERGIES AND PENALTY FUNCTION ------------          
C                                                                       
      DO  100  K = KRANGE, 0, -1                                        
C                                                                       
        CALL  ENRSET (K,JK,JFIN,LI,LFIN,LISTK,KANGLE,IFRONT,LINT,       
     &                JAA,JBB,JBF)                                      
C                                                                       
        IF (LFIN.EQ.0)  GOTO  100                                       
C                                                                       
        IF (K.LE.2)  THEN                                               
          LI = LINT(K) - LINT(2) + 1                                    
          CALL  ECALX (LFIN,IPAIR1(LI),IPAIR2(LI),CO,COX,NFLAG)         
C                                                                       
          IF (NSS.EQ.0)  GOTO  100                                      
          IF (MSS.LT.0)  GOTO  100                                      
  20      IF (KSS(LSS(MSS)).NE.K)  GOTO  100                            
            LS = (LSS(MSS)+1)/2                                         
            CALL  ECALSD (KSSPER(1,1,LS),KSSPER(1,2,LS),CO,             
     &                                            MOD(LSS(MSS)+1,2)+1)  
            MSS = MSS+1                                                 
            IF (MSS.LE.2*NSS)  GOTO  20                                 
            MSS = -MSS                                                  
C                                                                       
        ELSE                                                            
          MFLAG = -1                                                    
          LI14 = NO14(K)                                                
          LF14 = NO14(K-1)-1                                            
          MI12 = NO12(K)                                                
          MF12 = NO12(K-1)-1                                            
C                                                                       
          IF (NSS.EQ.0)  GOTO   40                                      
          IF (MSS.LT.0)  GOTO   40                                      
   30     IF (KSS(LSS(MSS)).NE.K)  GOTO   40                            
            LS = (LSS(MSS)+1)/2                                         
            CALL  ECALSD (KSSPER(1,1,LS),KSSPER(1,2,LS),CO,             
     &                                            MOD(LSS(MSS)+1,2)+1)  
            MSS = MSS + 1                                               
            MFLAG = K                                                   
            IF (MSS.LE.2*NSS)  GOTO   30                                
              MSS = - MSS                                               
C                                                                       
   40     CALL  PAIR15 (JPAIR1,JPAIR2,JAA,JBF,JFIN,KATOM,JATOM,         
     &             IBND2,LI14,LF14,LIST14,MI12,MF12,LIST12,MFLAG)       
          CALL  ECALX (LFIN,JPAIR1,JPAIR2,CO,COX,NFLAG)                 
        ENDIF                                                           
C                                                                       
  100 CONTINUE                                                          
C                                                                       
C-- TORSIONAL ENERGY  ---------------------------                       
C                                                                       
          CALL  ETORSN (A,NB,NS,IFTOR,VAR)                              
C                                                                       
C-- TOTAL ---------------------------------------                       
C                                                                       
      ETTL   = ETOR + ELOOP + ECYSTR                                    
      ETOTAL = ETTL + ERRR*WVLTN                                        
C                                                                       
      RETURN                                                            
      END                                                               
      SUBROUTINE  ECALX (LFIN,IPAIR1,IPAIR2,CO,COX,NFLAG)               
      IMPLICIT REAL*8 (A-H,O-Z)                                         
C     PARAMETER  (MAXPER=10000)                                         
CMSP  INCLUDE (MAXSIZE)                                                 
      INCLUDE '/labo/qclib/inspidas/common/maxsize'
CMSP  INCLUDE (SIZE)                                                    
      INCLUDE '/labo/qclib/inspidas/common/size'
CMSP  INCLUDE (WKCAL1)                                                  
      INCLUDE '/labo/qclib/inspidas/common/wkcal1'
CMSP  INCLUDE (WKCAL2)                                                  
      INCLUDE '/labo/qclib/inspidas/common/wkcal2'
C     COMMON/NUMBER/  NUMATM,NUMVAR,NN2,NUMINT,NSS,NUMRES               
      COMMON/ENE000/  ETOR,EES,ENB,ELOOP,ECYSTR                         
      COMMON/ENE001/  ERRR,WVLTN                                        
      DIMENSION  IPAIR1(LFIN),IPAIR2(LFIN)                              
      DIMENSION  CO(3,NUMATM)                                           
C     DIMENSION  COX(3,NUMATM),NFLAG(NUMATM),MFLAGX(MAXPER)             
      DIMENSION  COX(3,NUMATM),NFLAG(NUMATM)                            
C     DIMENSION  R(MAXPER),R2X(MAXPER)                                  
C                                                                       
      II = 0                                                            
      DO  10  L = 1, LFIN                                               
        JPA = IABS(IPAIR1(L))                                           
        JPB = IPAIR2(L)                                                 
        R2 = (CO(1,JPA)-CO(1,JPB))**2 + (CO(2,JPA)-CO(2,JPB))**2        
     &            + (CO(3,JPA)-CO(3,JPB))**2                            
        R(L) = DSQRT(R2)                                                
        IF (NFLAG(JPA).EQ.1.AND.NFLAG(JPB).EQ.1) THEN                   
          II = II+1                                                     
          MFLAGX(II) = L                                                
          R2X(II) = (COX(1,JPA)-COX(1,JPB))**2                          
     &      + (COX(2,JPA)-COX(2,JPB))**2 + (COX(3,JPA)-COX(3,JPB))**2   
        ENDIF                                                           
  10  CONTINUE                                                          
C                                                                       
      DO  12  I = 1, II                                                 
        ERRR = ERRR + (R(MFLAGX(I)) - DSQRT(R2X(I)))**2/R2X(I)          
  12  CONTINUE                                                          
C                                                                       
      RETURN                                                            
      END                                                               
      SUBROUTINE  ENRSET (K,JK,JFIN,LI,LFIN,LISTK,KANGLE,IFRONT,LINT,   
     &                    JAA,JBB,JBF)                                  
      IMPLICIT REAL*8 (A-H,O-Z)                                         
CMSP  INCLUDE (SIZE)                                                    
      INCLUDE '/labo/qclib/inspidas/common/size'
C     COMMON/NUMBR1/  NATM1,NVAR1,NPAIR1                                
C     COMMON/NUMBER/  NUMATM,NUMVAR,NN2,NUMINT,NSS,NUMRES               
      DIMENSION  LISTK(-1:NUMVAR),KANGLE(0:NPAIR1),IFRONT(NUMVAR)       
      DIMENSION  LINT(-1:NUMVAR),JAA(*),JBB(*),JBF(*)                   
C                                                                       
        JK   = LISTK(K)                                                 
        JFIN = LISTK(K-1) - LISTK(K)                                    
C                                                                       
        DO  10  J = JK, JK+JFIN-1                                       
          I = J-JK+1                                                    
          KA = IABS(KANGLE(J))                                          
          JAA(I) = KA/10000                                             
          JBB(I) = KA - JAA(I)*10000                                    
          JBF(I) = JBB(I)                                               
          IF (KANGLE(J).LT.0)  JBF(I) = IFRONT(JBB(I))                  
   10   CONTINUE                                                        
C                                                                       
        LI = LINT(K)                                                    
        LFIN = LINT(K-1) - LINT(K)                                      
C                                                                       
        RETURN                                                          
        END                                                             
      SUBROUTINE  ETORSN (A,NB,NS,IFTOR,VAR)                            
C                                                                       
C  THIS SUBROUTINE COMPUTES THE TORSIONAL POTENTIAL.                    
C                                                                       
      IMPLICIT REAL*8 (A-H,O-Z)                                         
CMSP  INCLUDE (SIZE)                                                    
      INCLUDE '/labo/qclib/inspidas/common/size'
      COMMON/ENE000/  ETOR,EES,ENB,ELOOP,ECYSTR                         
C     COMMON/NUMBER/  NUMATM,NUMVAR,NN2,NUMINT,NSS,NUMRES               
      DIMENSION  A(NUMVAR),NB(NUMVAR),NS(NUMVAR),IFTOR(NUMVAR)          
      DIMENSION  VAR(NUMVAR)                                            
      DATA  ONE /1.D0/                                                  
C                                                                       
      DO  10  I = 1, NUMVAR                                             
        IF (IFTOR(I).EQ.1)                                              
     &          ETOR = ETOR + A(I)*(ONE+NS(I)*DCOS(NB(I)*VAR(I)))       
  10  CONTINUE                                                          
C                                                                       
      RETURN                                                            
      END                                                               
      SUBROUTINE  EZERO                                                 
      IMPLICIT REAL*8 (A-H,O-Z)                                         
      COMMON/ENE000/  ETOR,EES,ENB,ELOOP,ECYSTR                         
      COMMON/ENE001/  ERRR,WVLTN                                        
      DATA  ZERO /0.D0/                                                 
C                                                                       
C  INITIALIZE THE FOLLOWING PARAMETERS.                                 
C                                                                       
      ETOR   = ZERO                                                     
      EES    = ZERO                                                     
      ENB    = ZERO                                                     
      ELOOP  = ZERO                                                     
      ECYSTR = ZERO                                                     
C                                                                       
      ERRR   = ZERO                                                     
C                                                                       
      RETURN                                                            
      END                                                               
      SUBROUTINE  ECALSS (IPAIR1,IPAIR2,CO)                             
C                                                                       
C  THIS SUBROUTINE COMPUTES THE ENERGIES OF DISULFIDE BRIDGES           
C                                                                       
      IMPLICIT REAL*8 (A-H,O-Z)                                         
      COMMON/ENE000/  ETOR,EES,ENB,ELOOP,ECYSTR                         
      COMMON/DISULF/  RSS(4),ASS(4),BSS(9)                              
      DIMENSION  CO(3,*),IPAIR1(6),IPAIR2(6),RMAG(6),RI1(6)             
C                                                                       
      DO  10  L = 1, 6                                                  
        JPA = IPAIR1(L)                                                 
        JPB = IPAIR2(L)                                                 
        RMAG(L) = (CO(1,JPA)-CO(1,JPB))**2 + (CO(2,JPA)-CO(2,JPB))**2   
     &               + (CO(3,JPA)-CO(3,JPB))**2                         
        RI1(L) = DSQRT(RMAG(L))                                         
  10  CONTINUE                                                          
C                                                                       
        DO  20  L = 1, 3                                                
          ELOOP = ELOOP + ASS(L)*(RI1(L)-RSS(L))**2                     
  20    CONTINUE                                                        
C                                                                       
        ECYSTR = ECYSTR + ASS(4)*(RI1(4)-RSS(4))**2                     
C                                                                       
C  DOES NOT CARRY OUT THE FOLLOWINGS AT PRESENT                         
C                                                                       
C 21    DO  22  L = 5, 6                                                
C         IF (RI1(L).LT.BSS(8))  THEN                                   
C         ECYSTR = ECYSTR + ((BSS(1)*RMAG(L) + BSS(3))*RMAG(L) + BSS(5))
C    &           *RMAG(L) + ((BSS(2)*RMAG(L) + BSS(4))*RMAG(L) + BSS(6))
C    &            *RI1(L) + BSS(7)                                      
C         ELSE                                                          
C         ECYSTR = ECYSTR + BSS(9)*(RI1(L)-BSS(8))**2                   
C         ENDIF                                                         
C 22    CONTINUE                                                        
C                                                                       
      RETURN                                                            
      END                                                               
      SUBROUTINE  ECALSD (IPAIR1,IPAIR2,CO,IFLAG)                       
C                                                                       
C  THIS SUBROUTINE COMPUTES THE ENERGIES OF DISULFIDE BRIDGES           
C                                                                       
      IMPLICIT REAL*8 (A-H,O-Z)                                         
      COMMON/ENE000/  ETOR,EES,ENB,ELOOP,ECYSTR                         
      COMMON/DISULF/  RSS(4),ASS(4),BSS(9)                              
      DIMENSION  IPAIR1(6),IPAIR2(6),CO(3,*)                            
      DIMENSION  RMAG(6),RI1(6)                                         
      DIMENSION  LSTRT(2),LFIN(2)                                       
      DATA  LSTRT/1,5/                                                  
      DATA  LFIN /4,6/                                                  
C                                                                       
       IF (IFLAG.EQ.2)  RETURN                                          
C                                                                       
      DO  10  L = LSTRT(IFLAG), LFIN(IFLAG)                             
        JPA = IPAIR1(L)                                                 
        JPB = IPAIR2(L)                                                 
        RMAG(L) = (CO(1,JPA)-CO(1,JPB))**2 + (CO(2,JPA)-CO(2,JPB))**2   
     &              + (CO(3,JPA)-CO(3,JPB))**2                          
        RI1(L) = DSQRT(RMAG(L))                                         
  10  CONTINUE                                                          
C                                                                       
C     IF (IFLAG.EQ.1)  THEN                                             
        DO  20  L = 1, 3                                                
          ELOOP = ELOOP + ASS(L)*(RI1(L)-RSS(L))**2                     
  20    CONTINUE                                                        
        ECYSTR = ECYSTR + ASS(4)*(RI1(4)-RSS(4))**2                     
C                                                                       
C  NOT CARRY OUT THE FOLLOWINGS AT PRESENT.                             
C                                                                       
C     ELSE                                                              
C       DO  22  L = LSTRT(IFLAG), LFIN(IFLAG)                           
C         IF (RI1(L).LT.BSS(8))  THEN                                   
C         ECYSTR = ECYSTR + ((BSS(1)*RMAG(L) + BSS(3))*RMAG(L) + BSS(5))
C    &           *RMAG(L) + ((BSS(2)*RMAG(L) + BSS(4))*RMAG(L) + BSS(6))
C    &            *RI1(L) + BSS(7)                                      
C          ELSE                                                         
C          ECYSTR = ECYSTR + BSS(9)*(RI1(L)-BSS(8))**2                  
C          ENDIF                                                        
C 22    CONTINUE                                                        
C     ENDIF                                                             
C                                                                       
      RETURN                                                            
      END                                                               
C     SUBROUTINE  DRVTVA(NUMVAR,NN2,VAR,ETOTAL,F,G,CO,CHARGE)           
      SUBROUTINE  DRVTVA(VAR,ETOTAL,F,G,CO,CHARGE)                      
      IMPLICIT REAL*8 (A-H,O-Z)                                         
C     PARAMETER  (MAXATM=3000,MAXVAR=800,MAXINT=60000)                  
C     PARAMETER  (MXATM1=MAXATM+1,MVAR1=MAXVAR+1)                       
C     PARAMETER  (MXPAIR=MAXVAR*(MAXVAR+1)/2)                           
C     PARAMETER  (MXPAR1=(MAXVAR+1)*(MAXVAR+2)/2)                       
C     PARAMETER  (MAXJ=2*MAXVAR)                                        
C     PARAMETER  (MAXSS =5,MAXSS2=MAXSS*2)                              
C     PARAMETER  (MAXI1=MAXINT/2,MAXI2=MAXINT-MAXI1)                    
CMSP  INCLUDE (MAXSIZE)                                                 
      INCLUDE '/labo/qclib/inspidas/common/maxsize'
CMSP  INCLUDE (SIZE)                                                    
      INCLUDE '/labo/qclib/inspidas/common/size'
CMSP  INCLUDE (ATOM)                                                    
      INCLUDE '/labo/qclib/inspidas/common/atom'
CMSP  INCLUDE (BOND)                                                    
      INCLUDE '/labo/qclib/inspidas/common/bond'
CMSP  INCLUDE (NBTYPE)                                                  
      INCLUDE '/labo/qclib/inspidas/common/nbtype'
CMSP  INCLUDE (TABLE1)                                                  
      INCLUDE '/labo/qclib/inspidas/common/table1'
CMSP  INCLUDE (TORSN0)                                                  
      INCLUDE '/labo/qclib/inspidas/common/torsn0'
CMSP  INCLUDE (SSPAIR)                                                  
      INCLUDE '/labo/qclib/inspidas/common/sspair'
CMSP  INCLUDE (WKENRG)                                                  
      INCLUDE '/labo/qclib/inspidas/common/wkenrg'
CMSP  INCLUDE (WKDRVTV)                                                 
      INCLUDE '/labo/qclib/inspidas/common/wkdrvtv'
C     COMMON/NUMBER/  NUMATM,JUMVAR,MM2,NUMINT,NSS,NUMRES               
C     COMMON/ATOM00/  KUNIT(MAXATM),KATOM(MXATM1),JATOM(MAXATM)         
C     COMMON/BOND00/  DIRCOS(3,MAXVAR),IBND1(MAXVAR),IBND2(0:MVAR1)     
      COMMON/ENE000/  ETOR,EES,ENB,ELOOP,ECYSTR                         
      COMMON/INTR14/  NO14(-1:MAXVAR),LIST14(100),                      
     &                NO12(-1:MAXVAR),LIST12(100)                       
C     COMMON/NBTYPE/  NBTYPE(MAXATM)                                    
C     COMMON/TABLE1/  IFRONT(MAXVAR),NBACK(0:MAXVAR),IBACK(2,0:MAXVAR)  
      COMMON/TABLE3/  NINT,IPAIR1(MAXI1),IPAIR2(MAXI2),LINT(-1:MAXVAR)  
      COMMON/TABLE4/  KMAX,LISTK(-1:MAXVAR),JANGLE(MXPAIR),             
     &                 KANGLE(0:MXPAR1)                                 
C     COMMON/TORSN0/  A(MAXVAR),NB(MAXVAR),NS(MAXVAR),IFTOR(MAXVAR)     
C     COMMON/SSPAIR/  KSSPER(6,2,MAXSS),JSS(3,MAXSS),KSS(MAXSS2),       
C    &                LSS(MAXSS2)                                       
      COMMON/RAB/     R(30*MAXJ,3)                                      
C     DIMENSION  VAR(MAXVAR),F(MAXVAR),G(MXPAIR),EF(6*MAXVAR)           
      DIMENSION  VAR(MAXVAR),F(MAXVAR),G(MXPAIR)                        
C     DIMENSION  CO(3,*),CHARGE(*),VECPRD(3,MAXVAR)                     
      DIMENSION  CO(3,*),CHARGE(*)                                      
C     DIMENSION  JAA(MAXJ),JBB(MAXJ),JBF(MAXJ),LAB(MAXJ)                
C                                                                       
C     PARAMETER  (MAXPER=10000)                                         
C     DIMENSION  JPAIR1(MAXPER),JPAIR2(MAXPER)                          
C                                                                       
C                                                                       
C  GENERATE THE ATOMIC COORDINATES.                                     
C                                                                       
      CALL  GENRA (VAR,CO)                                              
C                                                                       
C  INITIALIZE THE PARAMETERS.                                           
C                                                                       
      CALL  DRVINI (CO,DIRCOS,VECPRD,IBND2,KADD1,KADD2,KADD3,EF,G)      
      MSS = 1                                                           
C                                                                       
C************************************************************           
C  THIS SECTION CALCULATES THE FIRST AND SECOND DERIVATIVES.            
C************************************************************           
C                                                                       
      DO  100  K = KMAX, 0, -1                                          
C                                                                       
        CALL  DRVSET (K,JK,JFIN,LI,LFIN,LISTK,KANGLE,IFRONT,LINT,       
     &                JAA,JBB,JBF,LAB,R(1,KADD1))                       
C                                                                       
        IF (LFIN.EQ.0)  GOTO  5                                         
C                                                                       
        IF (K.LE.2)  THEN                                               
          LI = LINT(K) - LINT(2) + 1                                    
          CALL  DCALA (K,LFIN,JFIN,IPAIR1(LI),IPAIR2(LI),R(1,KADD1),    
     &                 JANGLE(JK),JAA,JBF,EF,CO,CHARGE,NBTYPE)          
C                                                                       
          IF (NSS.EQ.0)  GOTO  5                                        
          IF (MSS.LT.0)  GOTO  5                                        
C                                                                       
  20      IF (KSS(LSS(MSS)).NE.K)  GOTO  5                              
            LS = (LSS(MSS)+1)/2                                         
            CALL  DCALSS (KSSPER(1,1,LS),KSSPER(1,2,LS),R(1,KADD1),     
     &          JSS(1,LS),KANGLE(JK),EF,MOD(LSS(MSS)+1,2)+1,IFRONT,CO)  
            MSS = MSS+1                                                 
            IF (MSS.LE.2*NSS)  GOTO  20                                 
C                                                                       
            MSS = -MSS                                                  
C                                                                       
        ELSE                                                            
          MFLAG = -K                                                    
          LI14 = NO14(K)                                                
          LF14 = NO14(K-1)-1                                            
          MI12 = NO12(K)                                                
          MF12 = NO12(K-1)-1                                            
C                                                                       
          IF (NSS.EQ.0)  GOTO  40                                       
          IF (MSS.LT.0)  GOTO  40                                       
C                                                                       
  30      IF (KSS(LSS(MSS)).NE.K)  GOTO  40                             
            LS = (LSS(MSS)+1)/2                                         
            CALL  DCALSS (KSSPER(1,1,LS),KSSPER(1,2,LS),R(1,KADD1),     
     &          JSS(1,LS),KANGLE(JK),EF,MOD(LSS(MSS)+1,2)+1,IFRONT,CO)  
            MSS = MSS+1                                                 
            MFLAG = K                                                   
            IF (MSS.LE.2*NSS)  GOTO  30                                 
C                                                                       
            MSS = -MSS                                                  
C                                                                       
  40        CALL  PAIR15 (JPAIR1,JPAIR2,JAA,JBF,JFIN,KATOM,JATOM,       
     &              IBND2,LI14,LF14,LIST14,MI12,MF12,LIST12,MFLAG)      
            CALL  DCALA (MFLAG,LFIN,JFIN,JPAIR1,JPAIR2,R(1,KADD1),      
     &                   JANGLE(JK),JAA,JBF,EF,CO,CHARGE,NBTYPE)        
        ENDIF                                                           
C                                                                       
   5    CALL  DRCRNT (K,JK,JFIN,JAA,JBB,LAB,KADD1,KADD2,KADD3,          
     &                DIRCOS,VECPRD,G)                                  
C                                                                       
        KA1 = KADD1                                                     
        KADD1 = KADD3                                                   
        KADD3 = KADD2                                                   
        KADD2 = KA1                                                     
C                                                                       
  100 CONTINUE                                                          
C                                                                       
C-------------------------------------------------------------------    
C                                                                       
      CALL  DFRCRT (NBACK,IBACK,EF,F,DIRCOS,VECPRD)                     
C                                                                       
      CALL  DTORSN (A,NB,NS,IFTOR,VAR,F,G)                              
C                                                                       
      ETOTAL = ETOR + EES + ENB + ELOOP + ECYSTR                        
C                                                                       
      CALL  OUT002                                                      
C                                                                       
      RETURN                                                            
      END                                                               
      SUBROUTINE  DCALA (KFLAG,LFIN,JFIN,IPAIR1,IPAIR2,EL,NOPAIR,       
     &                   JAA,JBF,EF,CO,CHARGE,NBTYPE)                   
      IMPLICIT REAL*8 (A-H,O-Z)                                         
C     PARAMETER  (MAXPER=10000)                                         
CMSP  INCLUDE (MAXSIZE)                                                 
      INCLUDE '/labo/qclib/inspidas/common/maxsize'
CMSP  INCLUDE (SIZE)                                                    
      INCLUDE '/labo/qclib/inspidas/common/size'
CMSP  INCLUDE (WKCAL1)                                                  
      INCLUDE '/labo/qclib/inspidas/common/wkcal1'
CMSP  INCLUDE (WKCAL2)                                                  
      INCLUDE '/labo/qclib/inspidas/common/wkcal2'
CMSP  INCLUDE (WKCAL3)                                                  
      INCLUDE '/labo/qclib/inspidas/common/wkcal3'
C     COMMON/NUMBER/  NUMATM,NUMVAR,NN2,NUMINT,NSS,NUMRES               
      COMMON/EPARAM/  PNB(1568)                                         
      COMMON/ENE000/  ETOR,EES,ENB,ELOOP,ECYSTR                         
      DIMENSION  IPAIR1(LFIN),IPAIR2(LFIN)                              
      DIMENSION  EL(30,JFIN),NOPAIR(JFIN),JAA(JFIN),JBF(JFIN)           
      DIMENSION  EF(6,NUMVAR),CO(3,*),CHARGE(*),NBTYPE(NUMATM)          
C     DIMENSION  IPA(MAXPER),IPB(MAXPER)                                
C     DIMENSION  CAB(MAXPER),DAB(MAXPER)                                
C     DIMENSION  XA(MAXPER)  ,YA(MAXPER)  ,ZA(MAXPER)                   
C     DIMENSION  XB(MAXPER)  ,YB(MAXPER)  ,ZB(MAXPER)                   
C     DIMENSION  XAB(MAXPER) ,YAB(MAXPER) ,ZAB(MAXPER)                  
C     DIMENSION  XAXB(MAXPER),YAXB(MAXPER),ZAXB(MAXPER)                 
      DIMENSION  ENB00(MAXPER),RO2(MAXPER),RI2(MAXPER)                  
      EQUIVALENCE  (ENB00,XAXB),(RO2,YAXB),(RI2,ZAXB)                   
      DATA  HALF,ONE,TWO,THREE /0.5D0,1.D0,2.D0,3.D0/                   
      DATA  C6,C12,C20,C84,C96 /6.D0,12.D0,20.D0,84.D0,96.D0/           
      DATA  C168,C240 /168.D0,240.D0/                                   
C                                                                       
      DO  10  L = 1, LFIN                                               
        JPA = IABS(IPAIR1(L))                                           
        JPB = IPAIR2(L)                                                 
        XA(L) = CO(1,JPA)                                               
        YA(L) = CO(2,JPA)                                               
        ZA(L) = CO(3,JPA)                                               
        XB(L) = CO(1,JPB)                                               
        YB(L) = CO(2,JPB)                                               
        ZB(L) = CO(3,JPB)                                               
        XAB(L) = XA(L)-XB(L)                                            
        YAB(L) = YA(L)-YB(L)                                            
        ZAB(L) = ZA(L)-ZB(L)                                            
        RI2(L) = ONE / (XAB(L)*XAB(L)+YAB(L)*YAB(L)+ZAB(L)*ZAB(L))      
        Q = CHARGE(JPA)*CHARGE(JPB)*DSQRT(RI2(L))                       
        EES = EES + Q                                                   
        CAB(L) = - Q*RI2(L)                                             
        DAB(L) = THREE*(Q*RI2(L)*RI2(L))                                
        IPB(L) = (NBTYPE(JPB)-1)*56 + NBTYPE(JPA)                       
        RO2(L) = PNB(IPB(L)+28)*RI2(L)                                  
  10  CONTINUE                                                          
C                                                                       
      IF (KFLAG.GE.0)  THEN                                             
        DO  20  L = 1, LFIN                                             
          IF (PNB(IPB(L)).GE.0)  THEN                                   
            IF (IPAIR1(L).LT.0)  THEN                                   
              RO6 = RO2(L)*RO2(L)*RO2(L)                                
              U1 = PNB(IPB(L))*RO6                                      
              U2 = U1*RI2(L)                                            
              ENB00(L) = U1*(HALF*RO6 - TWO)                            
              CAB(L) = CAB(L) - U2*(C6*RO6 - C12)                       
              DAB(L) = DAB(L) + U2*RI2(L)*(C84*RO6 - C96)               
            ELSE                                                        
              RO6 = RO2(L)*RO2(L)*RO2(L)                                
              U1 = PNB(IPB(L))*RO6                                      
              U2 = U1*RI2(L)                                            
              ENB00(L) = U1*(RO6 - TWO)                                 
              CAB(L) = CAB(L) - U2*(C12*RO6 - C12)                      
              DAB(L) = DAB(L) + U2*RI2(L)*(C168*RO6 - C96)              
            ENDIF                                                       
          ELSE                                                          
              RO4 = RO2(L)*RO2(L)                                       
              RO6 = RO2(L)*RO4                                          
              U1 = PNB(IPB(L))*RO6                                      
              U2 = U1*RI2(L)                                            
              ENB00(L) = - U1*(RO6 - TWO*RO4)                           
              CAB(L) = CAB(L) + U2*(C12*RO6 - C20*RO4)                  
              DAB(L) = DAB(L) - U2*RI2(L)*(C168*RO6 - C240*RO4)         
          ENDIF                                                         
  20    CONTINUE                                                        
      ELSE                                                              
        DO  22  L = 1, LFIN                                             
          IF (PNB(IPB(L)).GE.0)  THEN                                   
            RO6 = RO2(L)*RO2(L)*RO2(L)                                  
            U1 = PNB(IPB(L))*RO6                                        
            U2 = U1*RI2(L)                                              
            ENB00(L) = U1*(RO6 - TWO)                                   
            CAB(L) = CAB(L) - U2*(C12*RO6 - C12)                        
            DAB(L) = DAB(L) + U2*RI2(L)*(C168*RO6 - C96)                
          ELSE                                                          
            RO4 = RO2(L)*RO2(L)                                         
            RO6 = RO2(L)*RO4                                            
            U1 = PNB(IPB(L))*RO6                                        
            U2 = U1*RI2(L)                                              
            ENB00(L) = - U1*(RO6 - TWO*RO4)                             
            CAB(L) = CAB(L) + U2*(C12*RO6 - C20*RO4)                    
            DAB(L) = DAB(L) - U2*RI2(L)*(C168*RO6 - C240*RO4)           
          ENDIF                                                         
  22    CONTINUE                                                        
      ENDIF                                                             
C                                                                       
      DO  30  L = 1, LFIN                                               
  30    ENB = ENB + ENB00(L)                                            
C                                                                       
      CALL  DRMTRX (LFIN,JFIN,IPA,IPB,EL,EF,NOPAIR,JAA,JBF,CAB,DAB,     
     &              XAXB,YAXB,ZAXB,XAB,YAB,ZAB,XA,YA,ZA,XB,YB,ZB)       
C                                                                       
      RETURN                                                            
      END                                                               
C     SUBROUTINE  DRVTVZ (NUMVAR,NN2,VAR,ETOTAL,F,G,CO,CHARGE)          
      SUBROUTINE  DRVTVZ (VAR,ETOTAL,F,G,CO,CHARGE)                     
      IMPLICIT REAL*8 (A-H,O-Z)                                         
C     PARAMETER  (MAXATM=3000,MAXVAR=800,MAXINT=60000)                  
C     PARAMETER  (MAXCNS=900,MAXPER=10000)                              
C     PARAMETER  (MXATM1=MAXATM+1,MVAR1=MAXVAR+1)                       
C     PARAMETER  (MXPAIR=MAXVAR*(MAXVAR+1)/2)                           
C     PARAMETER  (MXPAR1=(MAXVAR+1)*(MAXVAR+2)/2)                       
C     PARAMETER  (MAXJ=2*MAXVAR)                                        
C     PARAMETER  (MAXSS =5,MAXSS2=MAXSS*2)                              
C     PARAMETER  (MAXI1=MAXINT/2,MAXI2=MAXINT-MAXI1)                    
CMSP  INCLUDE (MAXSIZE)                                                 
      INCLUDE '/labo/qclib/inspidas/common/maxsize'
CMSP  INCLUDE (SIZE)                                                    
      INCLUDE '/labo/qclib/inspidas/common/size'
CMSP  INCLUDE (ATOM)                                                    
      INCLUDE '/labo/qclib/inspidas/common/atom'
CMSP  INCLUDE (BOND)                                                    
      INCLUDE '/labo/qclib/inspidas/common/bond'
CMSP  INCLUDE (NBTYPE)                                                  
      INCLUDE '/labo/qclib/inspidas/common/nbtype'
CMSP  INCLUDE (TABLE1)                                                  
      INCLUDE '/labo/qclib/inspidas/common/table1'
CMSP  INCLUDE (TORSN0)                                                  
      INCLUDE '/labo/qclib/inspidas/common/torsn0'
CMSP  INCLUDE (SSPAIR)                                                  
      INCLUDE '/labo/qclib/inspidas/common/sspair'
CMSP  INCLUDE (WKENRG)                                                  
      INCLUDE '/labo/qclib/inspidas/common/wkenrg'
CMSP  INCLUDE (WKDRVTV)                                                 
      INCLUDE '/labo/qclib/inspidas/common/wkdrvtv'
C     COMMON/NUMBER/  NUMATM,JUMVAR,MM2,NUMINT,NSS,NUMRES               
C     COMMON/ATOM00/  KUNIT(MAXATM),KATOM(MXATM1),JATOM(MAXATM)         
C     COMMON/BOND00/  DIRCOS(3,MAXVAR),IBND1(MAXVAR),IBND2(0:MVAR1)     
      COMMON/ENE000/  ETOR,EES,ENB,ELOOP,ECYSTR                         
      COMMON/ENE001/  ERRR,WVLTN                                        
      COMMON/ENE002/  COX(3,MAXATM),NFLAG(MAXATM)                       
      COMMON/RANGE/   KRANGE                                            
      COMMON/INTR14/  NO14(-1:MAXVAR),LIST14(100),                      
     &                NO12(-1:MAXVAR),LIST12(100)                       
C     COMMON/NBTYPE/  NBTYPE(MAXATM)                                    
C     COMMON/TABLE1/  IFRONT(MAXVAR),NBACK(0:MAXVAR),IBACK(2,0:MAXVAR)  
      COMMON/TABLE3/  NINT,IPAIR1(MAXI1),IPAIR2(MAXI2),LINT(-1:MAXVAR)  
      COMMON/TABLE4/  KMAX,LISTK(-1:MAXVAR),JANGLE(MXPAIR),             
     &                 KANGLE(0:MXPAR1)                                 
C     COMMON/TORSN0/  A(MAXVAR),NB(MAXVAR),NS(MAXVAR),IFTOR(MAXVAR)     
C     COMMON/SSPAIR/  KSSPER(6,2,MAXSS),JSS(3,MAXSS),KSS(MAXSS2),       
C    &                LSS(MAXSS2)                                       
      COMMON/RAB/     R(30*MAXJ,3)                                      
C     DIMENSION  VAR(MAXVAR),F(MAXVAR),G(MXPAIR),EF(6*MAXVAR)           
C     DIMENSION  CO(3,*),CHARGE(*),VECPRD(3,MAXVAR)                     
      DIMENSION  VAR(MAXVAR),F(MAXVAR),G(MXPAIR)                        
      DIMENSION  CO(3,*),CHARGE(*)                                      
C     DIMENSION  JAA(MAXJ),JBB(MAXJ),JBF(MAXJ),LAB(MAXJ)                
C     DIMENSION  JPAIR1(MAXPER),JPAIR2(MAXPER)                          
C                                                                       
      DATA  ZERO /0.D0/                                                 
C                                                                       
C  GENERATE THE ATOMIC COORDINATES.                                     
C                                                                       
      CALL  GENRA (VAR,CO)                                              
C                                                                       
C  INITIALIZE THE PARAMETERS.                                           
C                                                                       
      CALL  DRVINI (CO,DIRCOS,VECPRD,IBND2,KADD1,KADD2,KADD3,EF,G)      
      MSS = 1                                                           
      DO  2  KADD = 1, 3                                                
      DO  2  J01  = 1, 30*MAXJ                                          
  2     R(J01,KADD) = ZERO                                              
C                                                                       
C************************************************************           
C  THIS SECTION CALCULATES THE FIRST AND SECOND DERIVATIVES.            
C************************************************************           
C----------- START OF DO LOOP 100 ------------------------------------  
C                                                                       
      DO  100  K = KRANGE, 0, -1                                        
C                                                                       
        CALL  DRVSET (K,JK,JFIN,LI,LFIN,LISTK,KANGLE,IFRONT,LINT,       
     &                JAA,JBB,JBF,LAB,R(1,KADD1))                       
C                                                                       
        IF (LFIN.EQ.0)  GOTO  5                                         
C                                                                       
        IF (K.LE.2)  THEN                                               
          LI = LINT(K) - LINT(2) + 1                                    
          CALL  DCALZ (K,LFIN,JFIN,IPAIR1(LI),IPAIR2(LI),R(1,KADD1),    
     &               JANGLE(JK),JAA,JBF,EF,CO,CHARGE,NBTYPE,COX,NFLAG)  
C                                                                       
          IF (NSS.EQ.0)  GOTO  5                                        
          IF (MSS.LT.0)  GOTO  5                                        
C                                                                       
  20      IF (KSS(LSS(MSS)).NE.K)  GOTO  5                              
            LS = (LSS(MSS)+1)/2                                         
            CALL  DCALSS (KSSPER(1,1,LS),KSSPER(1,2,LS),R(1,KADD1),     
     &          JSS(1,LS),KANGLE(JK),EF,MOD(LSS(MSS)+1,2)+1,IFRONT,CO)  
            MSS = MSS+1                                                 
            IF (MSS.LE.2*NSS)  GOTO  20                                 
C                                                                       
            MSS = -MSS                                                  
C                                                                       
        ELSE                                                            
          MFLAG = -1                                                    
          LI14 = NO14(K)                                                
          LF14 = NO14(K-1)-1                                            
          MI12 = NO12(K)                                                
          MF12 = NO12(K-1)-1                                            
C                                                                       
          IF (NSS.EQ.0)  GOTO  40                                       
          IF (MSS.LT.0)  GOTO  40                                       
C                                                                       
  30      IF (KSS(LSS(MSS)).NE.K)  GOTO  40                             
            LS = (LSS(MSS)+1)/2                                         
            CALL  DCALSS (KSSPER(1,1,LS),KSSPER(1,2,LS),R(1,KADD1),     
     &          JSS(1,LS),KANGLE(JK),EF,MOD(LSS(MSS)+1,2)+1,IFRONT,CO)  
            MSS = MSS+1                                                 
            MFLAG = K                                                   
            IF (MSS.LE.2*NSS)  GOTO  30                                 
C                                                                       
            MSS = -MSS                                                  
C                                                                       
  40        CALL  PAIR15 (JPAIR1,JPAIR2,JAA,JBF,JFIN,KATOM,JATOM,       
     &              IBND2,LI14,LF14,LIST14,MI12,MF12,LIST12,MFLAG)      
            CALL  DCALZ (MFLAG,LFIN,JFIN,JPAIR1,JPAIR2,R(1,KADD1),      
     &                 JANGLE(JK),JAA,JBF,EF,CO,CHARGE,NBTYPE,COX,NFLAG)
        ENDIF                                                           
C                                                                       
   5    CALL  DRCRNT (K,JK,JFIN,JAA,JBB,LAB,KADD1,KADD2,KADD3,          
     &                DIRCOS,VECPRD,G)                                  
C                                                                       
        KA1 = KADD1                                                     
        KADD1 = KADD3                                                   
        KADD3 = KADD2                                                   
        KADD2 = KA1                                                     
C                                                                       
  100 CONTINUE                                                          
C                                                                       
C---------- END OF DO LOOP 100 -------------------------------------    
C                                                                       
      CALL  DFRCRT (NBACK,IBACK,EF,F,DIRCOS,VECPRD)                     
C                                                                       
      CALL  DTORSN (A,NB,NS,IFTOR,VAR,F,G)                              
C                                                                       
      ETTL = ETOR + EES + ENB + ELOOP + ECYSTR                          
      ETOTAL = ETTL + ERRR*WVLTN                                        
C                                                                       
      CALL  OUT002                                                      
C                                                                       
      RETURN                                                            
      END                                                               
      SUBROUTINE  DCALZ (KFLAG,LFIN,JFIN,IPAIR1,IPAIR2,EL,NOPAIR,       
     &                  JAA,JBF,EF,CO,CHARGE,NBTYPE,COX,NFLAG)          
      IMPLICIT REAL*8 (A-H,O-Z)                                         
C     PARAMETER  (MAXPER=10000)                                         
CMSP  INCLUDE (MAXSIZE)                                                 
      INCLUDE '/labo/qclib/inspidas/common/maxsize'
CMSP  INCLUDE (SIZE)                                                    
      INCLUDE '/labo/qclib/inspidas/common/size'
CMSP  INCLUDE (WKCAL1)                                                  
      INCLUDE '/labo/qclib/inspidas/common/wkcal1'
CMSP  INCLUDE (WKCAL2)                                                  
      INCLUDE '/labo/qclib/inspidas/common/wkcal2'
CMSP  INCLUDE (WKCAL3)                                                  
      INCLUDE '/labo/qclib/inspidas/common/wkcal3'
C     COMMON/NUMBER/  NUMATM,NUMVAR,NN2,NUMINT,NSS,NUMRES               
      COMMON/EPARAM/  PNB(1568)                                         
      COMMON/ENE000/  ETOR,EES,ENB,ELOOP,ECYSTR                         
      COMMON/ENE001/  ERRR,WVLTN                                        
      DIMENSION  EL(30,JFIN),NOPAIR(JFIN),JAA(JFIN),JBF(JFIN)           
      DIMENSION  EF(6,NUMVAR),CO(3,*),CHARGE(*),NBTYPE(NUMATM)          
      DIMENSION  IPAIR1(LFIN),IPAIR2(LFIN)                              
      DIMENSION  COX(3,NUMATM),NFLAG(NUMATM)                            
C     DIMENSION  CAB(MAXPER),DAB(MAXPER)                                
C     DIMENSION  IPA(MAXPER),IPB(MAXPER)  ,MFLAGX(MAXPER)               
C     DIMENSION  XA(MAXPER)  ,YA(MAXPER)  ,ZA(MAXPER)                   
C     DIMENSION  XB(MAXPER)  ,YB(MAXPER)  ,ZB(MAXPER)                   
C     DIMENSION  XAB(MAXPER) ,YAB(MAXPER) ,ZAB(MAXPER)                  
C     DIMENSION  XAXB(MAXPER),YAXB(MAXPER),ZAXB(MAXPER)                 
      DIMENSION  ENB00(MAXPER),RO2(MAXPER),RI2(MAXPER)                  
C     DIMENSION  R(MAXPER),RX(MAXPER),WGHT(MAXPER)                      
      DIMENSION  RX(MAXPER),WGHT(MAXPER)                                
      EQUIVALENCE  (ENB00,XAXB),(RO2,YAXB),(RI2,ZAXB),(WGHT,XAXB)       
      DATA  HALF,ONE,TWO,THREE /0.5D0,1.D0,2.D0,3.D0/                   
      DATA  C6,C12,C20,C84,C96 /6.D0,12.D0,20.D0,84.D0,96.D0/           
      DATA  C168,C240 /168.D0,240.D0/                                   
C                                                                       
      II = 0                                                            
      DO  10  L = 1, LFIN                                               
        JPA = IABS(IPAIR1(L))                                           
        JPB = IPAIR2(L)                                                 
        XA(L) = CO(1,JPA)                                               
        YA(L) = CO(2,JPA)                                               
        ZA(L) = CO(3,JPA)                                               
        XB(L) = CO(1,JPB)                                               
        YB(L) = CO(2,JPB)                                               
        ZB(L) = CO(3,JPB)                                               
        XAB(L) = XA(L)-XB(L)                                            
        YAB(L) = YA(L)-YB(L)                                            
        ZAB(L) = ZA(L)-ZB(L)                                            
        R2 = XAB(L)*XAB(L)+YAB(L)*YAB(L)+ZAB(L)*ZAB(L)                  
        R(L) = DSQRT(R2)                                                
        RI2(L) = ONE / R2                                               
        Q = CHARGE(JPA)*CHARGE(JPB)/R(L)                                
        EES = EES + Q                                                   
        CAB(L) = - Q*RI2(L)                                             
        DAB(L) = THREE*(Q*RI2(L)*RI2(L))                                
        IPB(L) = (NBTYPE(JPB)-1)*56 + NBTYPE(JPA)                       
        RO2(L) = PNB(IPB(L)+28)*RI2(L)                                  
        IF (NFLAG(JPA).EQ.1 .AND. NFLAG(JPB).EQ.1)  THEN                
          II = II+1                                                     
          MFLAGX(II) = L                                                
          R2XXX = (COX(1,JPA)-COX(1,JPB))**2 +                          
     &       (COX(2,JPA)-COX(2,JPB))**2 + (COX(3,JPA)-COX(3,JPB))**2    
          RX(II) = DSQRT(R2XXX)                                         
          WGHT(II) = ONE / R2XXX * WVLTN                                
        ENDIF                                                           
  10  CONTINUE                                                          
C                                                                       
      DO  12  I = 1, II                                                 
        L = MFLAGX(I)                                                   
        ERRR = ERRR + WGHT(I)*(R(L) - RX(I))**2                         
        AR = RX(I)/R(L)                                                 
        CAB(L) = CAB(L) + TWO*WGHT(I)*(ONE-AR)                          
        DAB(L) = DAB(L) + TWO*WGHT(I)*AR*RI2(L)                         
  12  CONTINUE                                                          
C                                                                       
      IF (KFLAG.GE.0)  THEN                                             
        DO  20  L = 1, LFIN                                             
          IF (PNB(IPB(L)).GE.0)  THEN                                   
            IF (IPAIR1(L).LT.0)  THEN                                   
              RO6 = RO2(L)*RO2(L)*RO2(L)                                
              U1 = PNB(IPB(L))*RO6                                      
              U2 = U1*RI2(L)                                            
              ENB00(L) = U1*(HALF*RO6 - TWO)                            
              CAB(L) = CAB(L) - U2*(C6*RO6 - C12)                       
              DAB(L) = DAB(L) + U2*RI2(L)*(C84*RO6 - C96)               
            ELSE                                                        
              RO6 = RO2(L)*RO2(L)*RO2(L)                                
              U1 = PNB(IPB(L))*RO6                                      
              U2 = U1*RI2(L)                                            
              ENB00(L) = U1*(RO6-TWO)                                   
              CAB(L) = CAB(L) - U2*(C12*RO6 - C12)                      
              DAB(L) = DAB(L) + U2*RI2(L)*(C168*RO6 - C96)              
            ENDIF                                                       
          ELSE                                                          
              RO4 = RO2(L)*RO2(L)                                       
              RO6 = RO2(L)*RO4                                          
              U1 = PNB(IPB(L))*RO6                                      
              U2 = U1*RI2(L)                                            
              ENB00(L) = - U1*(RO6 - TWO*RO4)                           
              CAB(L) = CAB(L) + U2*(C12*RO6 - C20*RO4)                  
              DAB(L) = DAB(L) - U2*RI2(L)*(C168*RO6 - C240*RO4)         
          ENDIF                                                         
  20    CONTINUE                                                        
      ELSE                                                              
        DO  22  L = 1, LFIN                                             
          IF (PNB(IPB(L)).GE.0)  THEN                                   
              RO6 = RO2(L)*RO2(L)*RO2(L)                                
              U1 = PNB(IPB(L))*RO6                                      
              U2 = U1*RI2(L)                                            
              ENB00(L) = U1*(RO6-TWO)                                   
              CAB(L) = CAB(L) - U2*(C12*RO6 - C12)                      
              DAB(L) = DAB(L) + U2*RI2(L)*(C168*RO6 - C96)              
          ELSE                                                          
              RO4 = RO2(L)*RO2(L)                                       
              RO6 = RO2(L)*RO4                                          
              U1 = PNB(IPB(L))*RO6                                      
              U2 = U1*RI2(L)                                            
              ENB00(L) = - U1*(RO6 - TWO*RO4)                           
              CAB(L) = CAB(L) + U2*(C12*RO6 - C20*RO4)                  
              DAB(L) = DAB(L) - U2*RI2(L)*(C168*RO6 - C240*RO4)         
          ENDIF                                                         
  22    CONTINUE                                                        
      ENDIF                                                             
C                                                                       
      DO  30  L = 1, LFIN                                               
  30    ENB = ENB + ENB00(L)                                            
C                                                                       
      CALL  DRMTRX (LFIN,JFIN,IPA,IPB,EL,EF,NOPAIR,JAA,JBF,CAB,DAB,     
     &              XAXB,YAXB,ZAXB,XAB,YAB,ZAB,XA,YA,ZA,XB,YB,ZB)       
C                                                                       
      RETURN                                                            
      END                                                               
C     SUBROUTINE  DRVTVX (NUMVAR,NN2,VAR,ETOTAL,F,G,CO,CHARGE)          
      SUBROUTINE  DRVTVX (VAR,ETOTAL,F,G,CO,CHARGE)                     
      IMPLICIT REAL*8 (A-H,O-Z)                                         
C     PARAMETER  (MAXATM=3000,MAXVAR=800,MAXINT=60000)                  
C     PARAMETER  (MAXCNS=900,MAXPER=10000)                              
C     PARAMETER  (MXATM1=MAXATM+1,MVAR1=MAXVAR+1)                       
C     PARAMETER  (MXPAIR=MAXVAR*(MAXVAR+1)/2)                           
C     PARAMETER  (MXPAR1=(MAXVAR+1)*(MAXVAR+2)/2)                       
C     PARAMETER  (MAXJ=2*MAXVAR)                                        
C     PARAMETER  (MAXSS =5,MAXSS2=MAXSS*2)                              
C     PARAMETER  (MAXI1=MAXINT/2,MAXI2=MAXINT-MAXI1)                    
CMSP  INCLUDE (MAXSIZE)                                                 
      INCLUDE '/labo/qclib/inspidas/common/maxsize'
CMSP  INCLUDE (SIZE)                                                    
      INCLUDE '/labo/qclib/inspidas/common/size'
CMSP  INCLUDE (ATOM)                                                    
      INCLUDE '/labo/qclib/inspidas/common/atom'
CMSP  INCLUDE (BOND)                                                    
      INCLUDE '/labo/qclib/inspidas/common/bond'
CMSP  INCLUDE (NBTYPE)                                                  
      INCLUDE '/labo/qclib/inspidas/common/nbtype'
CMSP  INCLUDE (TABLE1)                                                  
      INCLUDE '/labo/qclib/inspidas/common/table1'
CMSP  INCLUDE (TORSN0)                                                  
      INCLUDE '/labo/qclib/inspidas/common/torsn0'
CMSP  INCLUDE (SSPAIR)                                                  
      INCLUDE '/labo/qclib/inspidas/common/sspair'
CMSP  INCLUDE (WKENRG)                                                  
      INCLUDE '/labo/qclib/inspidas/common/wkenrg'
CMSP  INCLUDE (WKDRVTV)                                                 
      INCLUDE '/labo/qclib/inspidas/common/wkdrvtv'
C     COMMON/NUMBER/  NUMATM,JUMVAR,MM2,NUMINT,NSS,NUMRES               
C     COMMON/ATOM00/  KUNIT(MAXATM),KATOM(MXATM1),JATOM(MAXATM)         
C     COMMON/BOND00/  DIRCOS(3,MAXVAR),IBND1(MAXVAR),IBND2(0:MVAR1)     
      COMMON/ENE000/  ETOR,EES,ENB,ELOOP,ECYSTR                         
      COMMON/ENE001/  ERRR,WVLTN                                        
      COMMON/ENE002/  COX(3,MAXATM),NFLAG(MAXATM)                       
      COMMON/RANGE/   KRANGE                                            
      COMMON/INTR14/  NO14(-1:MAXVAR),LIST14(100),                      
     &                NO12(-1:MAXVAR),LIST12(100)                       
C     COMMON/NBTYPE/  NBTYPE(MAXATM)                                    
C     COMMON/TABLE1/  IFRONT(MAXVAR),NBACK(0:MAXVAR),IBACK(2,0:MAXVAR)  
      COMMON/TABLE3/  NINT,IPAIR1(MAXI1),IPAIR2(MAXI2),LINT(-1:MAXVAR)  
      COMMON/TABLE4/  KMAX,LISTK(-1:MAXVAR),JANGLE(MXPAIR),             
     &                 KANGLE(0:MXPAR1)                                 
C     COMMON/TORSN0/  A(MAXVAR),NB(MAXVAR),NS(MAXVAR),IFTOR(MAXVAR)     
C     COMMON/SSPAIR/  KSSPER(6,2,MAXSS),JSS(3,MAXSS),KSS(MAXSS2),       
C    &                LSS(MAXSS2)                                       
      COMMON/RAB/     R(30*MAXJ,3)                                      
C     DIMENSION  VAR(MAXVAR),F(MAXVAR),G(MXPAIR),EF(6*MAXVAR)           
      DIMENSION  VAR(MAXVAR),F(MAXVAR),G(MXPAIR)                        
C     DIMENSION  CO(3,*),CHARGE(*),VECPRD(3,MAXVAR)                     
      DIMENSION  CO(3,*),CHARGE(*)                                      
C     DIMENSION  JAA(MAXJ),JBB(MAXJ),JBF(MAXJ),LAB(MAXJ)                
C     DIMENSION  JPAIR1(MAXPER),JPAIR2(MAXPER)                          
C                                                                       
      DATA  ZERO /0.D0/                                                 
C                                                                       
C  GENERATE THE ATOMIC COORDINATES.                                     
C                                                                       
      CALL  GENRA (VAR,CO)                                              
C                                                                       
C  INITIALIZE THE PARAMETERS.                                           
C                                                                       
      CALL  DRVINI (CO,DIRCOS,VECPRD,IBND2,KADD1,KADD2,KADD3,EF,G)      
      MSS = 1                                                           
      DO  2  KADD = 1, 3                                                
      DO  2  J01  = 1, 30*MAXJ                                          
  2     R(J01,KADD) = ZERO                                              
C                                                                       
C************************************************************           
C  THIS SECTION CALCULATES THE FIRST AND SECOND DERIVATIVES.            
C************************************************************           
C----------- START OF DO LOOP 100 ------------------------------------  
C                                                                       
      DO  100  K = KRANGE, 0, -1                                        
C                                                                       
        CALL  DRVSET (K,JK,JFIN,LI,LFIN,LISTK,KANGLE,IFRONT,LINT,       
     &                JAA,JBB,JBF,LAB,R(1,KADD1))                       
C                                                                       
        IF (LFIN.EQ.0)  GOTO  5                                         
C                                                                       
        IF (K.LE.2)  THEN                                               
          LI = LINT(K) - LINT(2) + 1                                    
          CALL  DCALX (LFIN,JFIN,IPAIR1(LI),IPAIR2(LI),R(1,KADD1),      
     &                 JANGLE(JK),JAA,JBF,EF,CO,COX,NFLAG)              
C                                                                       
          IF (NSS.EQ.0)  GOTO  5                                        
          IF (MSS.LT.0)  GOTO  5                                        
C                                                                       
  20      IF (KSS(LSS(MSS)).NE.K)  GOTO  5                              
            LS = (LSS(MSS)+1)/2                                         
            CALL  DCALSS (KSSPER(1,1,LS),KSSPER(1,2,LS),R(1,KADD1),     
     &          JSS(1,LS),KANGLE(JK),EF,MOD(LSS(MSS)+1,2)+1,IFRONT,CO)  
            MSS = MSS+1                                                 
            IF (MSS.LE.2*NSS)  GOTO  20                                 
C                                                                       
            MSS = -MSS                                                  
C                                                                       
        ELSE                                                            
          MFLAG = -1                                                    
          LI14 = NO14(K)                                                
          LF14 = NO14(K-1)-1                                            
          MI12 = NO12(K)                                                
          MF12 = NO12(K-1)-1                                            
C                                                                       
          IF (NSS.EQ.0)  GOTO  40                                       
          IF (MSS.LT.0)  GOTO  40                                       
C                                                                       
  30      IF (KSS(LSS(MSS)).NE.K)  GOTO  40                             
            LS = (LSS(MSS)+1)/2                                         
            CALL  DCALSS (KSSPER(1,1,LS),KSSPER(1,2,LS),R(1,KADD1),     
     &          JSS(1,LS),KANGLE(JK),EF,MOD(LSS(MSS)+1,2)+1,IFRONT,CO)  
            MSS = MSS+1                                                 
            MFLAG = K                                                   
            IF (MSS.LE.2*NSS)  GOTO  30                                 
C                                                                       
            MSS = -MSS                                                  
C                                                                       
  40        CALL  PAIR15 (JPAIR1,JPAIR2,JAA,JBF,JFIN,KATOM,JATOM,       
     &              IBND2,LI14,LF14,LIST14,MI12,MF12,LIST12,MFLAG)      
            CALL  DCALX (LFIN,JFIN,JPAIR1,JPAIR2,R(1,KADD1),            
     &                 JANGLE(JK),JAA,JBF,EF,CO,COX,NFLAG)              
        ENDIF                                                           
C                                                                       
   5    CALL  DRCRNT (K,JK,JFIN,JAA,JBB,LAB,KADD1,KADD2,KADD3,          
     &                DIRCOS,VECPRD,G)                                  
C                                                                       
        KA1 = KADD1                                                     
        KADD1 = KADD3                                                   
        KADD3 = KADD2                                                   
        KADD2 = KA1                                                     
C                                                                       
  100 CONTINUE                                                          
C                                                                       
C---------- END OF DO LOOP 100 -------------------------------------    
C                                                                       
      CALL  DFRCRT (NBACK,IBACK,EF,F,DIRCOS,VECPRD)                     
C                                                                       
      CALL  DTORSN (A,NB,NS,IFTOR,VAR,F,G)                              
C                                                                       
      ETTL = ETOR + ELOOP + ECYSTR                                      
      ETOTAL = ETTL + ERRR*WVLTN                                        
C                                                                       
      CALL  OUT002                                                      
C                                                                       
      RETURN                                                            
      END                                                               
      SUBROUTINE  DCALX (LFIN,JFIN,IPAIR1,IPAIR2,EL,NOPAIR,             
     &                  JAA,JBF,EF,CO,COX,NFLAG)                        
      IMPLICIT REAL*8 (A-H,O-Z)                                         
C     PARAMETER  (MAXPER=10000)                                         
CMSP  INCLUDE (MAXSIZE)                                                 
      INCLUDE '/labo/qclib/inspidas/common/maxsize'
CMSP  INCLUDE (SIZE)                                                    
      INCLUDE '/labo/qclib/inspidas/common/size'
CMSP  INCLUDE (WKCAL1)                                                  
      INCLUDE '/labo/qclib/inspidas/common/wkcal1'
CMSP  INCLUDE (WKCAL2)                                                  
      INCLUDE '/labo/qclib/inspidas/common/wkcal2'
CMSP  INCLUDE (WKCAL3)                                                  
      INCLUDE '/labo/qclib/inspidas/common/wkcal3'
C     COMMON/NUMBER/  NUMATM,NUMVAR,NN2,NUMINT,NSS,NUMRES               
      COMMON/ENE000/  ETOR,EES,ENB,ELOOP,ECYSTR                         
      COMMON/ENE001/  ERRR,WVLTN                                        
      DIMENSION  EL(30,JFIN),NOPAIR(JFIN),JAA(JFIN),JBF(JFIN)           
      DIMENSION  EF(6,NUMVAR),CO(3,*),COX(3,NUMATM),NFLAG(NUMATM)       
C     INCLUDE (COORD)                                                   
      DIMENSION  IPAIR1(LFIN),IPAIR2(LFIN)                              
C     DIMENSION  CAB(MAXPER),DAB(MAXPER)                                
C     DIMENSION  MFLAGX(MAXPER)                                         
C     DIMENSION  IWRKA(MAXPER),IWRKB(MAXPER)                            
C     DIMENSION  XA(MAXPER)  ,YA(MAXPER)  ,ZA(MAXPER)                   
C     DIMENSION  XB(MAXPER)  ,YB(MAXPER)  ,ZB(MAXPER)                   
C     DIMENSION  XAB(MAXPER) ,YAB(MAXPER) ,ZAB(MAXPER)                  
C     DIMENSION  XAXB(MAXPER),YAXB(MAXPER),ZAXB(MAXPER)                 
C     DIMENSION  R(MAXPER),RI2(MAXPER),RX(MAXPER),WGHT(MAXPER)          
      DIMENSION  RI2(MAXPER),RX(MAXPER),WGHT(MAXPER)                    
      EQUIVALENCE  (RI2,XAXB),(RX,YAXB),(WGHT,ZAXB)                     
      DATA  ZERO,ONE,TWO /0.D0,1.D0,2.D0/                               
C                                                                       
      II = 0                                                            
      DO  10  L = 1, LFIN                                               
        JPA = IABS(IPAIR1(L))                                           
        JPB = IPAIR2(L)                                                 
        XA(L) = CO(1,JPA)                                               
        YA(L) = CO(2,JPA)                                               
        ZA(L) = CO(3,JPA)                                               
        XB(L) = CO(1,JPB)                                               
        YB(L) = CO(2,JPB)                                               
        ZB(L) = CO(3,JPB)                                               
        XAB(L) = XA(L)-XB(L)                                            
        YAB(L) = YA(L)-YB(L)                                            
        ZAB(L) = ZA(L)-ZB(L)                                            
        R2 = XAB(L)*XAB(L)+YAB(L)*YAB(L)+ZAB(L)*ZAB(L)                  
        R(L) = DSQRT(R2)                                                
        RI2(L) = ONE / R2                                               
        CAB(L) = ZERO                                                   
        DAB(L) = ZERO                                                   
        IF (NFLAG(JPA).EQ.1.AND.NFLAG(JPB).EQ.1)  THEN                  
          II = II+1                                                     
          MFLAGX(II) = L                                                
          R2XXX = (COX(1,JPA)-COX(1,JPB))**2 +                          
     &       (COX(2,JPA)-COX(2,JPB))**2 + (COX(3,JPA)-COX(3,JPB))**2    
          RX(II) = DSQRT(R2XXX)                                         
          WGHT(II) = ONE/R2XXX*WVLTN                                    
        ENDIF                                                           
  10  CONTINUE                                                          
C                                                                       
      DO  12  I = 1, II                                                 
          L = MFLAGX(I)                                                 
          ERRR = ERRR + WGHT(I)*(R(L) - RX(I))**2                       
          AR = RX(I)/R(L)                                               
          CAB(L) = CAB(L) + TWO*WGHT(I)*(ONE-AR)                        
          DAB(L) = DAB(L) + TWO*WGHT(I)*AR*RI2(L)                       
  12  CONTINUE                                                          
C                                                                       
      CALL  DRMTRX (LFIN,JFIN,IWRKA,IWRKB,EL,EF,NOPAIR,JAA,JBF,CAB,DAB, 
     &              XAXB,YAXB,ZAXB,XAB,YAB,ZAB,XA,YA,ZA,XB,YB,ZB)       
C                                                                       
      RETURN                                                            
      END                                                               
      SUBROUTINE  DRVINI(CO,DIRCOS,VECPRD,IBND2,KADD1,KADD2,KADD3,EF,G) 
      IMPLICIT REAL*8 (A-H,O-Z)                                         
CMSP  INCLUDE (SIZE)                                                    
      INCLUDE '/labo/qclib/inspidas/common/size'
C     COMMON/NUMBER/  NUMATM,NUMVAR,NN2,NUMINT,NSS,NUMRES               
C     COMMON/NUMBR1/  NATM1,NVAR1,NPAIR1                                
      DIMENSION  CO(3,*),DIRCOS(3,NUMVAR),VECPRD(3,NUMVAR)              
      DIMENSION  IBND2(0:NVAR1),G(NN2),EF(6*NUMVAR)                     
C                                                                       
      DATA  ZERO /0.D0/                                                 
C                                                                       
C  INITIALIZE THE FOLLOWING PARAMETERS.                                 
C                                                                       
      DO  10  I = 1, NUMVAR                                             
        JBND2 = IBND2(I)                                                
        VECPRD(1,I) = DIRCOS(2,I)*CO(3,JBND2)-DIRCOS(3,I)*CO(2,JBND2)   
        VECPRD(2,I) = DIRCOS(3,I)*CO(1,JBND2)-DIRCOS(1,I)*CO(3,JBND2)   
        VECPRD(3,I) = DIRCOS(1,I)*CO(2,JBND2)-DIRCOS(2,I)*CO(1,JBND2)   
 10   CONTINUE                                                          
C                                                                       
        KADD1 = 1                                                       
        KADD2 = 2                                                       
        KADD3 = 3                                                       
C                                                                       
        CALL  EZERO                                                     
C                                                                       
      DO  20  J = 1, 6*NUMVAR                                           
  20    EF(J) = ZERO                                                    
C                                                                       
      DO  30  I = 1, NN2                                                
  30    G(I) = ZERO                                                     
C                                                                       
      RETURN                                                            
      END                                                               
C                                                                       
      SUBROUTINE  DRVSET (K,JK,JFIN,LI,LFIN,LISTK,KANGLE,IFRONT,LINT,   
     &                    JAA,JBB,JBF,LAB,R)                            
      IMPLICIT REAL*8 (A-H,O-Z)                                         
CMSP  INCLUDE (SIZE)                                                    
      INCLUDE '/labo/qclib/inspidas/common/size'
C     COMMON/NUMBER/  NUMATM,NUMVAR,NN2,NUMINT,NSS,NUMRES               
C     COMMON/NUMBR1/  NATM1,NVAR1,NPAIR1                                
      DIMENSION  LISTK(-1:NUMVAR),KANGLE(0:NPAIR1),IFRONT(NUMVAR)       
      DIMENSION  LINT(-1:NUMVAR),JAA(*),JBB(*),JBF(*),LAB(*),R(*)       
      DATA  ZERO /0.D0/                                                 
C                                                                       
        JK   = LISTK(K)                                                 
        JFIN = LISTK(K-1) - LISTK(K)                                    
C                                                                       
        DO  10  J = JK, JK+JFIN-1                                       
          I = J-JK+1                                                    
          KA = IABS(KANGLE(J))                                          
          JAA(I) = KA/10000                                             
          JBB(I) = KA - JAA(I)*10000                                    
          JBF(I) = JBB(I)                                               
          IF (KANGLE(J).LT.0)  JBF(I) = IFRONT(JBB(I))                  
          LAB(I) = JAA(I)*(JAA(I)-1)/2 + JBB(I)                         
  10    CONTINUE                                                        
C                                                                       
        DO  20  J = 1, 30*JFIN                                          
  20      R(J) = ZERO                                                   
C                                                                       
        LI = LINT(K)                                                    
        LFIN = LINT(K-1) - LINT(K)                                      
C                                                                       
        RETURN                                                          
        END                                                             
      SUBROUTINE  DRMTRX (LFIN,JFIN,IPA,IPB,EL,EF,NOPAIR,JAA,JBF,       
     &            CAB,DAB,XAXB,YAXB,ZAXB,XAB,YAB,ZAB,XA,YA,ZA,XB,YB,ZB) 
      IMPLICIT REAL*8 (A-H,O-Z)                                         
CMSP  INCLUDE (SIZE)                                                    
      INCLUDE '/labo/qclib/inspidas/common/size'
C     COMMON/NUMBER/  NUMATM,NUMVAR,NN2,NUMINT,NSS,NUMRES               
      DIMENSION  EL(30,JFIN),NOPAIR(JFIN),JAA(JFIN),JBF(JFIN)           
      DIMENSION  EF(6,NUMVAR)                                           
      DIMENSION  CAB(LFIN),DAB(LFIN),IPA(LFIN),IPB(LFIN)                
      DIMENSION  XA(LFIN)  ,YA(LFIN)  ,ZA(LFIN)                         
      DIMENSION  XB(LFIN)  ,YB(LFIN)  ,ZB(LFIN)                         
      DIMENSION  XAB(LFIN) ,YAB(LFIN) ,ZAB(LFIN)                        
      DIMENSION  XAXB(LFIN),YAXB(LFIN),ZAXB(LFIN)                       
C                                                                       
      DO  10  L = 1, LFIN                                               
        XAXB(L) = YA(L)*ZB(L) - ZA(L)*YB(L)                             
        YAXB(L) = ZA(L)*XB(L) - XA(L)*ZB(L)                             
        ZAXB(L) = XA(L)*YB(L) - YA(L)*XB(L)                             
  10  CONTINUE                                                          
C                                                                       
      DO  20  L = 1, LFIN                                               
        XA(L) = XA(L)*CAB(L)                                            
        YA(L) = YA(L)*CAB(L)                                            
        ZA(L) = ZA(L)*CAB(L)                                            
  20  CONTINUE                                                          
C                                                                       
      LMAX = NOPAIR(JFIN)/10000                                         
      IPB(JFIN) = LMAX                                                  
      IPA(1) = 0                                                        
      IF (JFIN.GT.1)  THEN                                              
        DO  30  J = 1, JFIN-1                                           
          IPB(J) = NOPAIR(J)/10000                                      
          IPA(J+1) = IPA(J) + IPB(J)                                    
  30      LMAX = MAX(LMAX,IPB(J))                                       
      ENDIF                                                             
      LMIN = MIN(LMAX,6)                                                
C                                                                       
C CALCULATIONS ARE DIVIDED INTO TWO PARTS (DO LOOPS 50 AND 70),         
C BECAUSE OF SPEED-UP IN SUPERCOMPUTER.                                 
C                                                                       
      DO  50  I = 1, LMIN                                               
      I10000=10000*I                                                    
      DO  40  JST = 1, JFIN, 500                                        
        JFN = MIN (JST+499, JFIN)                                       
C                                                                       
*VOPTION LOOP(500)                                                      
      DO  42  J = JST, JFN                                              
      IF (NOPAIR(J).LT.I10000)  GOTO  42                                
      L = IPA(J) + I                                                    
      TX = DAB(L)*XAXB(L)                                               
       EL(1,J) = EL(1,J) + YA(L)*YB(L)+ZA(L)*ZB(L)+TX*XAXB(L)           
       EL(2,J) = EL(2,J) - XA(L)*YB(L)            +TX*YAXB(L)           
       EL(3,J) = EL(3,J) - XA(L)*ZB(L)            +TX*ZAXB(L)           
       EL(4,J) = EL(4,J)                          +TX*XAB(L)            
       EL(5,J) = EL(5,J) + CAB(L)*ZB(L)           +TX*YAB(L)            
       EL(6,J) = EL(6,J) - CAB(L)*YB(L)           +TX*ZAB(L)            
      TY = DAB(L)*YAXB(L)                                               
       EL(7,J) = EL(7,J) - YA(L)*XB(L)            +TY*XAXB(L)           
       EL(8,J) = EL(8,J) + XA(L)*XB(L)+ZA(L)*ZB(L)+TY*YAXB(L)           
       EL(9,J) = EL(9,J) - YA(L)*ZB(L)            +TY*ZAXB(L)           
       EL(10,J)= EL(10,J)- CAB(L)*ZB(L)           +TY*XAB(L)            
       EL(11,J)= EL(11,J)                         +TY*YAB(L)            
       EL(12,J)= EL(12,J)+ CAB(L)*XB(L)           +TY*ZAB(L)            
      TZ = DAB(L)*ZAXB(L)                                               
       EL(13,J)= EL(13,J)- ZA(L)*XB(L)            +TZ*XAXB(L)           
       EL(14,J)= EL(14,J)- ZA(L)*YB(L)            +TZ*YAXB(L)           
       EL(15,J)= EL(15,J)+ XA(L)*XB(L)+YA(L)*YB(L)+TZ*ZAXB(L)           
       EL(16,J)= EL(16,J)+ CAB(L)*YB(L)           +TZ*XAB(L)            
       EL(17,J)= EL(17,J)- CAB(L)*XB(L)           +TZ*YAB(L)            
       EL(18,J)= EL(18,J)                         +TZ*ZAB(L)            
  42  CONTINUE                                                          
C                                                                       
*VOPTION LOOP(500)                                                      
      DO  43  J = JST, JFN                                              
      IF (NOPAIR(J).LT.I10000)  GOTO  43                                
      L = IPA(J) + I                                                    
      TX = DAB(L)*XAB(L)                                                
       EL(19,J)= EL(19,J)- ZA(L)                +TX*YAXB(L)             
       EL(20,J)= EL(20,J)+ YA(L)                +TX*ZAXB(L)             
       EL(21,J)= EL(21,J)+ CAB(L)               +TX*XAB(L)              
       EL(22,J)= EL(22,J)                       +TX*YAB(L)              
       EL(23,J)= EL(23,J)                       +TX*ZAB(L)              
      TY = DAB(L)*YAB(L)                                                
       EL(24,J)= EL(24,J)+ ZA(L)                +TY*XAXB(L)             
       EL(25,J)= EL(25,J)- XA(L)                +TY*ZAXB(L)             
       EL(26,J)= EL(26,J)+ CAB(L)               +TY*YAB(L)              
       EL(27,J)= EL(27,J)                       +TY*ZAB(L)              
      TZ = DAB(L)*ZAB(L)                                                
       EL(28,J)= EL(28,J)- YA(L)                +TZ*XAXB(L)             
       EL(29,J)= EL(29,J)+ XA(L)                +TZ*YAXB(L)             
       EL(30,J)= EL(30,J)+ CAB(L)               +TZ*ZAB(L)              
  43  CONTINUE                                                          
C                                                                       
 40   CONTINUE                                                          
 50   CONTINUE                                                          
C                                                                       
      IF (LMAX.EQ.LMIN)  GOTO  80                                       
      IFIN=0                                                            
      DO  70  J = 1, JFIN                                               
      ISTRT = IFIN + 7                                                  
      IFIN = IFIN + IPB(J)                                              
      IF(ISTRT.GT.IFIN)  GOTO  70                                       
C                                                                       
      DO  60  L = ISTRT, IFIN                                           
      TX = DAB(L)*XAXB(L)                                               
       EL(1,J) = EL(1,J) + YA(L)*YB(L)+ZA(L)*ZB(L)+TX*XAXB(L)           
       EL(2,J) = EL(2,J) - XA(L)*YB(L)            +TX*YAXB(L)           
       EL(3,J) = EL(3,J) - XA(L)*ZB(L)            +TX*ZAXB(L)           
       EL(4,J) = EL(4,J)                          +TX*XAB(L)            
       EL(5,J) = EL(5,J) + CAB(L)*ZB(L)           +TX*YAB(L)            
       EL(6,J) = EL(6,J) - CAB(L)*YB(L)           +TX*ZAB(L)            
      TY = DAB(L)*YAXB(L)                                               
       EL(7,J) = EL(7,J) - YA(L)*XB(L)            +TY*XAXB(L)           
       EL(8,J) = EL(8,J) + XA(L)*XB(L)+ZA(L)*ZB(L)+TY*YAXB(L)           
       EL(9,J) = EL(9,J) - YA(L)*ZB(L)            +TY*ZAXB(L)           
       EL(10,J)= EL(10,J)- CAB(L)*ZB(L)           +TY*XAB(L)            
       EL(11,J)= EL(11,J)                         +TY*YAB(L)            
       EL(12,J)= EL(12,J)+ CAB(L)*XB(L)           +TY*ZAB(L)            
      TZ = DAB(L)*ZAXB(L)                                               
       EL(13,J)= EL(13,J)- ZA(L)*XB(L)            +TZ*XAXB(L)           
       EL(14,J)= EL(14,J)- ZA(L)*YB(L)            +TZ*YAXB(L)           
       EL(15,J)= EL(15,J)+ XA(L)*XB(L)+YA(L)*YB(L)+TZ*ZAXB(L)           
       EL(16,J)= EL(16,J)+ CAB(L)*YB(L)           +TZ*XAB(L)            
       EL(17,J)= EL(17,J)- CAB(L)*XB(L)           +TZ*YAB(L)            
       EL(18,J)= EL(18,J)                         +TZ*ZAB(L)            
      TX = DAB(L)*XAB(L)                                                
       EL(19,J)= EL(19,J)- ZA(L)                  +TX*YAXB(L)           
       EL(20,J)= EL(20,J)+ YA(L)                  +TX*ZAXB(L)           
       EL(21,J)= EL(21,J)+ CAB(L)                 +TX*XAB(L)            
       EL(22,J)= EL(22,J)                         +TX*YAB(L)            
       EL(23,J)= EL(23,J)                         +TX*ZAB(L)            
      TY = DAB(L)*YAB(L)                                                
       EL(24,J)= EL(24,J)+ ZA(L)                  +TY*XAXB(L)           
       EL(25,J)= EL(25,J)- XA(L)                  +TY*ZAXB(L)           
       EL(26,J)= EL(26,J)+ CAB(L)                 +TY*YAB(L)            
       EL(27,J)= EL(27,J)                         +TY*ZAB(L)            
      TZ = DAB(L)*ZAB(L)                                                
       EL(28,J)= EL(28,J)- YA(L)                 +TZ*XAXB(L)            
       EL(29,J)= EL(29,J)+ XA(L)                  +TZ*YAXB(L)           
       EL(30,J)= EL(30,J)+ CAB(L)                 +TZ*ZAB(L)            
  60  CONTINUE                                                          
C                                                                       
  70  CONTINUE                                                          
C                                                                       
  80  IFIN = 0                                                          
      DO  82  L = 1, LFIN                                               
        XAXB(L) = CAB(L)*XAXB(L)                                        
        YAXB(L) = CAB(L)*YAXB(L)                                        
        ZAXB(L) = CAB(L)*ZAXB(L)                                        
        XAB(L) = CAB(L)*XAB(L)                                          
        YAB(L) = CAB(L)*YAB(L)                                          
        ZAB(L) = CAB(L)*ZAB(L)                                          
  82  CONTINUE                                                          
C                                                                       
      DO  90  J = 1, JFIN                                               
      IF (IPB(J).LE.0)  GOTO  90                                        
      ISTRT = IFIN + 1                                                  
      IFIN = IFIN + IPB(J)                                              
      IA = JAA(J)                                                       
        DO  84  L = ISTRT, IFIN                                         
          EF(1,IA) = EF(1,IA) + XAXB(L)                                 
          EF(2,IA) = EF(2,IA) + YAXB(L)                                 
          EF(3,IA) = EF(3,IA) + ZAXB(L)                                 
          EF(4,IA) = EF(4,IA) + XAB(L)                                  
          EF(5,IA) = EF(5,IA) + YAB(L)                                  
          EF(6,IA) = EF(6,IA) + ZAB(L)                                  
  84    CONTINUE                                                        
C                                                                       
      IB = JBF(J)                                                       
      IF (IB.EQ.0)  GOTO  90                                            
        DO  86  L = ISTRT, IFIN                                         
          EF(1,IB) = EF(1,IB) - XAXB(L)                                 
          EF(2,IB) = EF(2,IB) - YAXB(L)                                 
          EF(3,IB) = EF(3,IB) - ZAXB(L)                                 
          EF(4,IB) = EF(4,IB) - XAB(L)                                  
          EF(5,IB) = EF(5,IB) - YAB(L)                                  
          EF(6,IB) = EF(6,IB) - ZAB(L)                                  
  86    CONTINUE                                                        
  90  CONTINUE                                                          
      RETURN                                                            
      END                                                               
      SUBROUTINE  DRCRNT(K,JK,JFIN,JAA,JBB,LAB,KADD1,KADD2,KADD3,       
     &                   DIRCOS,VECPRD,G)                               
C                                                                       
C  CALCULATE RECURRENT EQUATION OF MATRIX R AND SECOND DERIVATIVES G.   
C                                                                       
      IMPLICIT REAL*8 (A-H,O-Z)                                         
C     PARAMETER  (MAXVAR=800)                                           
C     PARAMETER  (MXPAIR=MAXVAR*(MAXVAR+1)/2)                           
C     PARAMETER  (MXPAR1=(MAXVAR+1)*(MAXVAR+2)/2)                       
C     PARAMETER  (MAXJ=2*MAXVAR)                                        
CMSP  INCLUDE (MAXSIZE)                                                 
      INCLUDE '/labo/qclib/inspidas/common/maxsize'
CMSP  INCLUDE (SIZE)                                                    
      INCLUDE '/labo/qclib/inspidas/common/size'
CMSP  INCLUDE (TABLE1)                                                  
      INCLUDE '/labo/qclib/inspidas/common/table1'
C     COMMON/NUMBER/  NUMATM,NUMVAR,NN2,NUMINT,NSS,NUMRES               
C     COMMON/TABLE1/  IFRONT(MAXVAR),NBACK(0:MAXVAR),IBACK(2,0:MAXVAR)  
      COMMON/TABLE4/  KMAX,LISTK(-1:MAXVAR),JANGLE(MXPAIR),             
     &                 KANGLE(0:MXPAR1)                                 
      COMMON/RAB/     R(30,MAXJ,3)                                      
      DIMENSION  DIRCOS(3,NUMVAR),VECPRD(3,NUMVAR),G(NN2)               
      DIMENSION  JAA(JFIN),JBB(JFIN),LAB(JFIN)                          
C                                                                       
      DIMENSION  LIST(30)                                               
      DATA  LIST /1,7,13,4,24,28,2,8,14,19,11,29,3,9,15,20,25,18,10,    
     &            16,21,22,23,5,17,26,27,6,12,30/                       
C                                                                       
        IF (K.EQ.KMAX)  GOTO  60                                        
C                                                                       
      DO  600  J = JK, JK+JFIN-1                                        
        JJ = J-JK+1                                                     
        IA = JAA(JJ)                                                    
        IB = JBB(JJ)                                                    
        IFLAG = NBACK(IA)-1                                             
C                                                                       
        IF (KANGLE(J))  300, 600, 200                                   
C                                                                       
C --- KANGLE(J) > 0  ---                                                
C                                                                       
  200     IF (NBACK(IB)-1)  210, 220, 230                               
C                                                                       
C** NBACK(IB)=0 **                                                      
C                                                                       
  210       IF(IFLAG)  600, 212, 214                                    
C                                                                       
C  NBACK(IB)=0, NBACK(IA)=1                                             
C                                                                       
  212         IA1 = IBACK(1,IA)                                         
              MA = (IA1*(IA1-1))/2                                      
              J1 = MOD(JANGLE(MA+IB),10000)                             
                  GOTO  410                                             
C                                                                       
C  NBACK(IB)=0, NBACK(IA)=2                                             
C                                                                       
  214         IA1 = IBACK(1,IA)                                         
              MA = (IA1*(IA1-1))/2                                      
              J1 = MOD(JANGLE(MA+IB),10000)                             
              IA2 = IBACK(2,IA)                                         
              MA = (IA2*(IA2-1))/2                                      
              J2 = MOD(JANGLE(MA+IB),10000)                             
                  GOTO  420                                             
C                                                                       
C** NBACK(IB)=1 **                                                      
C                                                                       
  220     IB1 = IBACK(1,IB)                                             
  222     MA = (IA*(IA-1))/2                                            
          J1 = MOD(JANGLE(MA+IB1),10000)                                
          IF(IFLAG)  410, 224, 226                                      
C                                                                       
C  NBACK(IB)=1, NBACK(IA)=1                                             
C                                                                       
  224       IA1 = IBACK(1,IA)                                           
            MA = (IA1*(IA1-1))/2                                        
            J2 = MOD(JANGLE(MA+IB),10000)                               
            J5 = MOD(JANGLE(MA+IB1),10000)                              
                GOTO  430                                               
C                                                                       
C  NBACK(IB)=1, NBACK(IA)=2                                             
C                                                                       
  226       IA1 = IBACK(1,IA)                                           
            MA = (IA1*(IA1-1))/2                                        
            J2 = MOD(JANGLE(MA+IB),10000)                               
            J5 = MOD(JANGLE(MA+IB1),10000)                              
            IA2 = IBACK(2,IA)                                           
            MA = (IA2*(IA2-1))/2                                        
            J3 = MOD(JANGLE(MA+IB),10000)                               
            J6 = MOD(JANGLE(MA+IB1),10000)                              
                GOTO  440                                               
C                                                                       
C** NBACK(IB)=2 **                                                      
C                                                                       
  230     IB1 = IBACK(1,IB)                                             
          IB2 = IBACK(2,IB)                                             
  232     MA = (IA*(IA-1))/2                                            
          J1 = MOD(JANGLE(MA+IB1),10000)                                
          J2 = MOD(JANGLE(MA+IB2),10000)                                
          IF(IFLAG)  420, 234, 236                                      
C                                                                       
C  NBACK(IB)=2, NBACK(IA)=1                                             
C                                                                       
  234       IA1 = IBACK(1,IA)                                           
            MA = (IA1*(IA1-1))/2                                        
            J3 = MOD(JANGLE(MA+IB),10000)                               
            J5 = MOD(JANGLE(MA+IB1),10000)                              
            J6 = MOD(JANGLE(MA+IB2),10000)                              
                GOTO  440                                               
C                                                                       
C  NBACK(IB)=2, NBACK(IA)=2                                             
C                                                                       
  236       IA1 = IBACK(1,IA)                                           
            MA = (IA1*(IA1-1))/2                                        
            J3 = MOD(JANGLE(MA+IB),10000)                               
            J5 = MOD(JANGLE(MA+IB1),10000)                              
            J6 = MOD(JANGLE(MA+IB2),10000)                              
            IA2 = IBACK(2,IA)                                           
            MA = (IA2*(IA2-1))/2                                        
            J4 = MOD(JANGLE(MA+IB),10000)                               
            J7 = MOD(JANGLE(MA+IB1),10000)                              
            J8 = MOD(JANGLE(MA+IB2),10000)                              
                GOTO  450                                               
C                                                                       
C --- KANGLE(J) < 0  ---                                                
C                                                                       
  300   IFRB = IFRONT(IB)                                               
        IF(IFRB)  600, 310, 330                                         
C                                                                       
C** IFRONT(IB)=1 **                                                     
C                                                                       
  310     IF(NBACK(IFRB)-1)  600, 210, 320                              
C                                                                       
C**** CONSIDER THE CASE OF NBACK(IFRONT(IB))=2 ONLY **                  
C                                                                       
  320       IB1 = IBACK(1,IFRB)                                         
            IF(IB1.EQ.IB)  IB1 = IBACK(2,IFRB)                          
            IF(IB1.LT.IA)  GOTO  222                                    
            MB = (IB1*(IB1-1))/2                                        
            J2 = MOD(JANGLE(MB+IA),10000)                               
            IF(IFLAG)  460, 322, 324                                    
C                                                                       
C  NBACK(IFRONT(IB))=2, NBACK(IA)=1                                     
C                                                                       
  322         IA1 = IBACK(1,IA)                                         
              MA = (IA1*(IA1-1))/2                                      
              J1 = MOD(JANGLE(MA+IB),10000)                             
              J5 = MOD(JANGLE(MB+IA1),10000)                            
                  GOTO  480                                             
C                                                                       
C  NBACK(IFRONT(IB))=2, NBACK(IA)=2                                     
C                                                                       
  324         IA1 = IBACK(1,IA)                                         
              MA = (IA1*(IA1-1))/2                                      
              J1 = MOD(JANGLE(MA+IB),10000)                             
              J5 = MOD(JANGLE(MB+IA1),10000)                            
              IA2 = IBACK(2,IA)                                         
              MA = (IA2*(IA2-1))/2                                      
              J3 = MOD(JANGLE(MA+IB),10000)                             
              J6 = MOD(JANGLE(MB+IA2),10000)                            
                  GOTO  490                                             
C                                                                       
C** IFRONT(IB)=2 **                                                     
C                                                                       
  330     IB1 = IFRB                                                    
          IF(NBACK(IFRB)-1)  600, 222, 332                              
C                                                                       
C**** CONSIDER THE CASE OF NBACK(IFRONT(IB))=2 ONLY **                  
C                                                                       
  332       IB2 = IBACK(1,IFRB)                                         
            IF(IB2.EQ.IB)  IB2 = IBACK(2,IFRB)                          
            IF(IB2.LT.IA)  GOTO  232                                    
            MA = (IA*(IA-1))/2                                          
            J1 = MOD(JANGLE(MA+IB1),10000)                              
            MB = (IB2*(IB2-1))/2                                        
            J2 = MOD(JANGLE(MB+IA),10000)                               
            IF(IFLAG)  470, 334, 336                                    
C                                                                       
C  NBACK(IFRONT(IB))=2, NBACK(IA)=1                                     
C                                                                       
  334         IA1 = IBACK(1,IA)                                         
              MA = (IA1*(IA1-1))/2                                      
              J3 = MOD(JANGLE(MA+IB),10000)                             
              J5 = MOD(JANGLE(MA+IB1),10000)                            
              J6 = MOD(JANGLE(MB+IA1),10000)                            
                  GOTO  500                                             
C                                                                       
C  NBACK(IFRONT(IB))=2, NBACK(IA)=2                                     
C                                                                       
  336         IA1 = IBACK(1,IA)                                         
              MA = (IA1*(IA1-1))/2                                      
              J3 = MOD(JANGLE(MA+IB),10000)                             
              J5 = MOD(JANGLE(MA+IB1),10000)                            
              J6 = MOD(JANGLE(MB+IA1),10000)                            
              IA2 = IBACK(2,IA)                                         
              MA = (IA2*(IA2-1))/2                                      
              J4 = MOD(JANGLE(MA+IB),10000)                             
              J7 = MOD(JANGLE(MA+IB1),10000)                            
              J8 = MOD(JANGLE(MB+IA2),10000)                            
                  GOTO  510                                             
C                                                                       
C-------- RECURRENT EQUATION OF R ------------------------------------- 
C                                                                       
  410 DO  412  I = 1, 30                                                
  412 R(I,JJ,KADD1)=R(I,JJ,KADD1) + R(I,J1,KADD2)                       
        GOTO  600                                                       
C                                                                       
  420 DO  422  I = 1, 30                                                
  422 R(I,JJ,KADD1)=R(I,JJ,KADD1) + R(I,J1,KADD2) + R(I,J2,KADD2)       
        GOTO  600                                                       
C                                                                       
  430 DO  432  I = 1, 30                                                
  432 R(I,JJ,KADD1)=R(I,JJ,KADD1) + R(I,J1,KADD2) + R(I,J2,KADD2)       
     &              - R(I,J5,KADD3)                                     
        GOTO  600                                                       
C                                                                       
  440 DO  442  I = 1, 30                                                
  442 R(I,JJ,KADD1)=R(I,JJ,KADD1) + R(I,J1,KADD2) + R(I,J2,KADD2)       
     &            + R(I,J3,KADD2) - R(I,J5,KADD3) - R(I,J6,KADD3)       
        GOTO  600                                                       
C                                                                       
  450 DO  452  I = 1, 30                                                
  452 R(I,JJ,KADD1)=R(I,JJ,KADD1) + R(I,J1,KADD2) + R(I,J2,KADD2)       
     &            + R(I,J3,KADD2) + R(I,J4,KADD2) - R(I,J5,KADD3)       
     &            - R(I,J6,KADD3) - R(I,J7,KADD3) - R(I,J8,KADD3)       
        GOTO  600                                                       
C                                                                       
*VOPTION VEC                                                            
  460 DO  462  I = 1, 30                                                
  462 R(I,JJ,KADD1)=R(I,JJ,KADD1) + R(LIST(I),J2,KADD2)                 
        GOTO  600                                                       
C                                                                       
*VOPTION VEC                                                            
  470 DO  472  I = 1, 30                                                
  472 R(I,JJ,KADD1)=R(I,JJ,KADD1) + R(I,J1,KADD2) + R(LIST(I),J2,KADD2) 
        GOTO  600                                                       
C                                                                       
*VOPTION VEC                                                            
  480 DO  482  I = 1, 30                                                
  482 R(I,JJ,KADD1)=R(I,JJ,KADD1) + R(I,J1,KADD2) + R(LIST(I),J2,KADD2) 
     &            - R(LIST(I),J5,KADD3)                                 
        GOTO  600                                                       
C                                                                       
*VOPTION VEC                                                            
  490 DO  492  I = 1, 30                                                
  492 R(I,JJ,KADD1)=R(I,JJ,KADD1) + R(I,J1,KADD2) + R(LIST(I),J2,KADD2) 
     &     + R(I,J3,KADD2) - R(LIST(I),J5,KADD3) - R(LIST(I),J6,KADD3)  
        GOTO  600                                                       
C                                                                       
*VOPTION VEC                                                            
  500 DO  502  I = 1, 30                                                
  502 R(I,JJ,KADD1)=R(I,JJ,KADD1) + R(I,J1,KADD2) + R(LIST(I),J2,KADD2) 
     &            + R(I,J3,KADD2) - R(I,J5,KADD3) - R(LIST(I),J6,KADD3) 
        GOTO  600                                                       
C                                                                       
*VOPTION VEC                                                            
  510 DO  512  I = 1, 30                                                
  512 R(I,JJ,KADD1)=R(I,JJ,KADD1) + R(I,J1,KADD2) + R(LIST(I),J2,KADD2) 
     &              + R(I,J3,KADD2) + R(I,J4,KADD2) - R(I,J5,KADD3)     
     &      - R(LIST(I),J6,KADD3) - R(I,J7,KADD3) - R(LIST(I),J8,KADD3) 
C                                                                       
C---------------------------------------------------------------------- 
C                                                                       
  600 CONTINUE                                                          
C                                                                       
C << SECOND DERIVATIVES >>                                              
C                                                                       
*VOPTION VEC,NOFVAL                                                     
  60  DO  70  I = 1, JFIN                                               
        IA = JAA(I)                                                     
        IB = JBB(I)                                                     
      G(LAB(I)) =                                                       
     &        + DIRCOS(1,IA)*(R(1,I,KADD1)*DIRCOS(1,IB)+R(7,I,KADD1)*   
     &DIRCOS(2,IB)+R(13,I,KADD1)*DIRCOS(3,IB)+R(4,I,KADD1)*VECPRD(1,IB) 
     &+R(24,I,KADD1)*VECPRD(2,IB)+R(28,I,KADD1)*VECPRD(3,IB))           
     &        + DIRCOS(2,IA)*(R(2,I,KADD1)*DIRCOS(1,IB)+R(8,I,KADD1)*   
     &DIRCOS(2,IB)+R(14,I,KADD1)*DIRCOS(3,IB)+R(19,I,KADD1)*VECPRD(1,IB)
     &+R(11,I,KADD1)*VECPRD(2,IB)+R(29,I,KADD1)*VECPRD(3,IB))           
     &        + DIRCOS(3,IA)*(R(3,I,KADD1)*DIRCOS(1,IB)+R(9,I,KADD1)*   
     &DIRCOS(2,IB)+R(15,I,KADD1)*DIRCOS(3,IB)+R(20,I,KADD1)*VECPRD(1,IB)
     &+R(25,I,KADD1)*VECPRD(2,IB)+R(18,I,KADD1)*VECPRD(3,IB))           
     &        + VECPRD(1,IA)*(R(4,I,KADD1)*DIRCOS(1,IB)+R(10,I,KADD1)*  
     &DIRCOS(2,IB)+R(16,I,KADD1)*DIRCOS(3,IB)+R(21,I,KADD1)*VECPRD(1,IB)
     &+R(22,I,KADD1)*VECPRD(2,IB)+R(23,I,KADD1)*VECPRD(3,IB))           
     &        + VECPRD(2,IA)*(R(5,I,KADD1)*DIRCOS(1,IB)+R(11,I,KADD1)*  
     &DIRCOS(2,IB)+R(17,I,KADD1)*DIRCOS(3,IB)+R(22,I,KADD1)*VECPRD(1,IB)
     &+R(26,I,KADD1)*VECPRD(2,IB)+R(27,I,KADD1)*VECPRD(3,IB))           
     &        + VECPRD(3,IA)*(R(6,I,KADD1)*DIRCOS(1,IB)+R(12,I,KADD1)*  
     &DIRCOS(2,IB)+R(18,I,KADD1)*DIRCOS(3,IB)+R(23,I,KADD1)*VECPRD(1,IB)
     &+R(27,I,KADD1)*VECPRD(2,IB)+R(30,I,KADD1)*VECPRD(3,IB))           
  70  CONTINUE                                                          
C                                                                       
*VOPTION VEC,NOFVAL                                                     
      DO  80  J = JK, JK+JFIN-1                                         
        NADD = LAB(J-JK+1)                                              
        IF (KANGLE(J).GT.0)  G(NADD) = -G(NADD)                         
  80  CONTINUE                                                          
C                                                                       
      RETURN                                                            
      END                                                               
      SUBROUTINE  DFRCRT (NBACK,IBACK,EF,F,DIRCOS,VECPRD)               
C                                                                       
C  CALCULATE THE GRADIENT F(I)                                          
C                                                                       
      IMPLICIT REAL*8 (A-H,O-Z)                                         
CMSP  INCLUDE (SIZE)                                                    
      INCLUDE '/labo/qclib/inspidas/common/size'
C     COMMON/NUMBER/  NUMATM,NUMVAR,NN2,NUMINT,NSS,NUMRES               
      DIMENSION  NBACK(0:NUMVAR),IBACK(2,0:NUMVAR),EF(6,NUMVAR)         
      DIMENSION  F(NUMVAR),DIRCOS(3,NUMVAR),VECPRD(3,NUMVAR)            
C                                                                       
C <RECURRENT EQUATION>                                                  
C                                                                       
      DO  130  I = NUMVAR-1, 1, -1                                      
C                                                                       
        IF (NBACK(I)-1)  130, 110, 120                                  
C                                                                       
C    NBACK(I)=1                                                         
C                                                                       
*VOPTION VEC                                                            
  110     DO  112  J = 1, 6                                             
  112       EF(J,I) = EF(J,I) + EF(J,IBACK(1,I))                        
              GOTO  130                                                 
C                                                                       
C    NBACK(I)=2                                                         
C                                                                       
*VOPTION VEC                                                            
  120     DO  122  J = 1, 6                                             
  122       EF(J,I) = EF(J,I) + EF(J,IBACK(1,I)) + EF(J,IBACK(2,I))     
C                                                                       
  130 CONTINUE                                                          
C                                                                       
C <GRADIENT>                                                            
C                                                                       
      DO  140  I = 1, NUMVAR                                            
      F(I)=-DIRCOS(1,I)*EF(1,I)-DIRCOS(2,I)*EF(2,I)-DIRCOS(3,I)*EF(3,I) 
     &     -VECPRD(1,I)*EF(4,I)-VECPRD(2,I)*EF(5,I)-VECPRD(3,I)*EF(6,I) 
  140 CONTINUE                                                          
C                                                                       
      RETURN                                                            
      END                                                               
      SUBROUTINE  DTORSN (A,NB,NS,IFTOR,VAR,F,G)                        
      IMPLICIT REAL*8 (A-H,O-Z)                                         
CMSP  INCLUDE (SIZE)                                                    
      INCLUDE '/labo/qclib/inspidas/common/size'
C     COMMON/NUMBER/  NUMATM,NUMVAR,NN2,NUMINT,NSS,NUMRES               
      COMMON/ENE000/  ETOR,EES,ENB,ELOOP,ECYSTR                         
      DIMENSION  A(NUMVAR),NB(NUMVAR),NS(NUMVAR),IFTOR(NUMVAR)          
      DIMENSION  VAR(NUMVAR),F(NUMVAR),G(NN2)                           
C                                                                       
*VOPTION VEC                                                            
      DO  10  I = 1, NUMVAR                                             
        IF (IFTOR(I).EQ.1)  THEN                                        
          COSV = A(I)*NS(I)*DCOS(NB(I)*VAR(I))                          
          ETOR = ETOR + A(I) + COSV                                     
          F(I) = F(I) - A(I)*NS(I)*NB(I)*DSIN(NB(I)*VAR(I))             
          NADD = I*(I+1)/2                                              
          G(NADD) = G(NADD) - NB(I)*NB(I)*COSV                          
        ENDIF                                                           
  10  CONTINUE                                                          
C                                                                       
      RETURN                                                            
      END                                                               
      SUBROUTINE  DCALSS (IPAIR1,IPAIR2,EL,JJ,KANGLE,EF,IFLAG,IFRONT,CO)
      IMPLICIT REAL*8 (A-H,O-Z)                                         
CMSP  INCLUDE (SIZE)                                                    
      INCLUDE '/labo/qclib/inspidas/common/size'
C     COMMON/NUMBER/  NUMATM,NUMVAR,NN2,NUMINT,NSS,NUMRES               
      COMMON/ENE000/  ETOR,EES,ENB,ELOOP,ECYSTR                         
      COMMON/DISULF/  RSS(4),ASS(4),BSS(9)                              
      DIMENSION  EF(6,NUMVAR),EL(30,*),KANGLE(*),IFRONT(NUMVAR),CO(3,*) 
      DIMENSION  IPAIR1(6),IPAIR2(6),CAB(6),DAB(6)                      
      DIMENSION  XA(6),YA(6),ZA(6),XB(6),YB(6),ZB(6)                    
      DIMENSION  XAB(6) ,YAB(6) ,ZAB(6)                                 
      DIMENSION  XAXB(6),YAXB(6),ZAXB(6)                                
      DIMENSION  RMAG(6),RI1(6),RI2(6)                                  
      DIMENSION  KSTRT(2),KFIN(2),LSTRT(2),LFIN(2),MSTRT(3),MFIN(3)     
      DIMENSION  JJ(3)                                                  
      DATA  KSTRT /1,2/, LSTRT/1,5/, MSTRT/1,5,6/                       
      DATA  KFIN  /1,3/, LFIN /4,6/, MFIN /4,5,6/                       
      DATA  ONE,TWO /1.D0,2.D0/                                         
C                                                                       
       IF (IFLAG.EQ.2)  RETURN                                          
C                                                                       
      DO  10  L = LSTRT(IFLAG), LFIN(IFLAG)                             
        JPA = IPAIR1(L)                                                 
        JPB = IPAIR2(L)                                                 
        XA(L) = CO(1,JPA)                                               
        YA(L) = CO(2,JPA)                                               
        ZA(L) = CO(3,JPA)                                               
        XB(L) = CO(1,JPB)                                               
        YB(L) = CO(2,JPB)                                               
        ZB(L) = CO(3,JPB)                                               
        XAB(L) = XA(L)-XB(L)                                            
        YAB(L) = YA(L)-YB(L)                                            
        ZAB(L) = ZA(L)-ZB(L)                                            
        XAXB(L) = YA(L)*ZB(L) - ZA(L)*YB(L)                             
        YAXB(L) = ZA(L)*XB(L) - XA(L)*ZB(L)                             
        ZAXB(L) = XA(L)*YB(L) - YA(L)*XB(L)                             
        RMAG(L) = XAB(L)*XAB(L) + YAB(L)*YAB(L) + ZAB(L)*ZAB(L)         
        RI2(L) = ONE / RMAG(L)                                          
        RI1(L) = DSQRT(RMAG(L))                                         
  10  CONTINUE                                                          
C                                                                       
C     IF (IFLAG.EQ.1)  THEN                                             
C                                                                       
        DO  20  L = 1, 4                                                
          IF(L.LE.3) ELOOP = ELOOP + ASS(L)*(RI1(L)-RSS(L))**2          
          RI = RSS(L)/RI1(L)                                            
          CAB(L) = TWO*ASS(L)*(ONE-RI)                                  
          DAB(L) = TWO*ASS(L)*RI*RI2(L)                                 
  20    CONTINUE                                                        
        ECYSTR = ECYSTR + ASS(4)*(RI1(4)-RSS(4))**2                     
C                                                                       
C* DOES NOT CARRY OUT THE FOLLOWINGS AT PRESENT. **                     
C                                                                       
C     ELSE                                                              
C       DO  22  L = LSTRT(IFLAG), LFIN(IFLAG)                           
C         IF (RI1(L).LT.BSS(8))  THEN                                   
C         ECYSTR = ECYSTR + ((BSS(1)*RMAG(L) + BSS(3))*RMAG(L) + BSS(5))
C    &           *RMAG(L) + ((BSS(2)*RMAG(L) + BSS(4))*RMAG(L) + BSS(6))
C    &            *RI1(L) + BSS(7)                                      
C         CAB(L) = (6*BSS(1)*RMAG(L) + 4*BSS(3))*RMAG(L)                
C    &           + (5*BSS(2)*RMAG(L) + 3*BSS(4))*RI1(L)                 
C    &           + 2*BSS(5) + BSS(6)/RI1(L)                             
C         DAB(L) = 24*BSS(1)*RMAG(L) + 15*BSS(2)*RI1(L) + 8*BSS(3)      
C    &           + 3*BSS(4)/RI1(L) - BSS(6)*RI2(L)/RI1(L)               
C          ELSE                                                         
C          ECYSTR = ECYSTR + BSS(9)*(RI1(L)-BSS(8))**2                  
C          RI = BSS(8)/RI1(L)                                           
C          CAB(L) = TWO*BSS(9)*(ONE-RI)                                 
C          DAB(L) = TWO*BSS(9)*RI*RI2(L)                                
C          ENDIF                                                        
C 22    CONTINUE                                                        
C     ENDIF                                                             
C*                                                                      
C                                                                       
      DO  40  K = KSTRT(IFLAG), KFIN(IFLAG)                             
        J = JJ(K)                                                       
        KA = IABS(KANGLE(J))                                            
        IA = KA/10000                                                   
C                                                                       
      DO  30  L = MSTRT(K), MFIN(K)                                     
C                                                                       
        EF(1,IA) = EF(1,IA) + CAB(L)*XAXB(L)                            
        EF(2,IA) = EF(2,IA) + CAB(L)*YAXB(L)                            
        EF(3,IA) = EF(3,IA) + CAB(L)*ZAXB(L)                            
        EF(4,IA) = EF(4,IA) + CAB(L)*XAB(L)                             
        EF(5,IA) = EF(5,IA) + CAB(L)*YAB(L)                             
        EF(6,IA) = EF(6,IA) + CAB(L)*ZAB(L)                             
C                                                                       
      TX = DAB(L)*XAXB(L)                                               
       EL(1,J) = EL(1,J) + CAB(L)*(YA(L)*YB(L)+ZA(L)*ZB(L))             
     &                                          +TX*XAXB(L)             
       EL(2,J) = EL(2,J) + CAB(L)*(-XA(L)*YB(L))+TX*YAXB(L)             
       EL(3,J) = EL(3,J) + CAB(L)*(-XA(L)*ZB(L))+TX*ZAXB(L)             
       EL(4,J) = EL(4,J)                        +TX*XAB(L)              
       EL(5,J) = EL(5,J) + CAB(L)*ZB(L)         +TX*YAB(L)              
       EL(6,J) = EL(6,J) + CAB(L)*(-YB(L))      +TX*ZAB(L)              
      TY = DAB(L)*YAXB(L)                                               
       EL(7,J) = EL(7,J) + CAB(L)*(-YA(L)*XB(L))+TY*XAXB(L)             
       EL(8,J) = EL(8,J) + CAB(L)*(XA(L)*XB(L)+ZA(L)*ZB(L))             
     &                                          +TY*YAXB(L)             
       EL(9,J) = EL(9,J) + CAB(L)*(-YA(L)*ZB(L))+TY*ZAXB(L)             
       EL(10,J)= EL(10,J)+ CAB(L)*(-ZB(L))      +TY*XAB(L)              
       EL(11,J)= EL(11,J)                       +TY*YAB(L)              
       EL(12,J)= EL(12,J)+ CAB(L)*XB(L)         +TY*ZAB(L)              
      TZ = DAB(L)*ZAXB(L)                                               
       EL(13,J)= EL(13,J)+ CAB(L)*(-ZA(L)*XB(L))+TZ*XAXB(L)             
       EL(14,J)= EL(14,J)+ CAB(L)*(-ZA(L)*YB(L))+TZ*YAXB(L)             
       EL(15,J)= EL(15,J)+ CAB(L)*(XA(L)*XB(L)+YA(L)*YB(L))             
     &                                          +TZ*ZAXB(L)             
       EL(16,J)= EL(16,J)+ CAB(L)*YB(L)         +TZ*XAB(L)              
       EL(17,J)= EL(17,J)+ CAB(L)*(-XB(L))      +TZ*YAB(L)              
       EL(18,J)= EL(18,J)                       +TZ*ZAB(L)              
      TX = DAB(L)*XAB(L)                                                
       EL(19,J)= EL(19,J)+ CAB(L)*(-ZA(L))      +TX*YAXB(L)             
       EL(20,J)= EL(20,J)+ CAB(L)*YA(L)         +TX*ZAXB(L)             
       EL(21,J)= EL(21,J)+ CAB(L)               +TX*XAB(L)              
       EL(22,J)= EL(22,J)                       +TX*YAB(L)              
       EL(23,J)= EL(23,J)                       +TX*ZAB(L)              
      TY = DAB(L)*YAB(L)                                                
       EL(24,J)= EL(24,J)+ CAB(L)*ZA(L)         +TY*XAXB(L)             
       EL(25,J)= EL(25,J)+ CAB(L)*(-XA(L))      +TY*ZAXB(L)             
       EL(26,J)= EL(26,J)+ CAB(L)               +TY*YAB(L)              
       EL(27,J)= EL(27,J)                       +TY*ZAB(L)              
      TZ = DAB(L)*ZAB(L)                                                
       EL(28,J)= EL(28,J)+ CAB(L)*(-YA(L))      +TZ*XAXB(L)             
       EL(29,J)= EL(29,J)+ CAB(L)*XA(L)         +TZ*YAXB(L)             
       EL(30,J)= EL(30,J)+ CAB(L)               +TZ*ZAB(L)              
  30  CONTINUE                                                          
C                                                                       
        IB = MOD(KA,10000)                                              
        IF (KANGLE(J).LT.0)  IB = IFRONT(IB)                            
        IF (IB.EQ.0)  GOTO  40                                          
C                                                                       
      DO  34  L = MSTRT(K), MFIN(K)                                     
        EF(1,IB) = EF(1,IB) - CAB(L)*XAXB(L)                            
        EF(2,IB) = EF(2,IB) - CAB(L)*YAXB(L)                            
        EF(3,IB) = EF(3,IB) - CAB(L)*ZAXB(L)                            
        EF(4,IB) = EF(4,IB) - CAB(L)*XAB(L)                             
        EF(5,IB) = EF(5,IB) - CAB(L)*YAB(L)                             
        EF(6,IB) = EF(6,IB) - CAB(L)*ZAB(L)                             
  34  CONTINUE                                                          
C                                                                       
  40  CONTINUE                                                          
      RETURN                                                            
      END                                                               
      SUBROUTINE CLOCK(TIME,ID)                                         
      CALL CLOCKM(ITIME)                                                
      TIME=ITIME*0.001                                                  
      RETURN                                                            
      END                                                               
C                                                                       
      SUBROUTINE FOUTGR(IOUT,COLMS,LINES,NDATA,GX,GY)                   
C                                                                       
      INTEGER IOUT,LINES,COLMS,NDATA                                    
      PARAMETER (IGRMAX=128)                                            
      REAL*8 GX(IGRMAX),GY(IGRMAX)                                      
      CALL GRAPH(IOUT,'SCAT','CONFORMATIONAL ENERGY F0',COLMS,LINES     
     &           ,NDATA                                                 
     &           ,GX,5,'ITERATIONS'                                     
     &           ,GY,3,'ENERGY')                                        
      RETURN                                                            
      END                                                               
./ ADD NAME=NMA
./ NUMBER NEW1=10,INCR=10
C***********************************************************************
      SUBROUTINE NMA                                                    
C***********************************************************************
C        MAIN SUBROUTINE FOR NORMAL MODE ANALYSIS                       
C***********************************************************************
C     THIS PROGRAM IS A CALC OF HMAT AND KMAT                           
C     IN ECEPP(WAKO-ORDER)                                              
C                                                                       
C  IN THE FOLLOWING DIMENSION STATEMENT,                                
C  NUMATM AND NUMVAR ARE THE NUMBERS OF                                 
C  VARIABLE DIHEDRAL ANGLES AND ATOMS IN                                
C  THE MOLECULES, RESPECTINGLY, THESE                                   
C  NUMBERS MUST BE CHANGED TO TREAT                                     
C  A MOLECLES WHICH YOU WONT TO STADY.                                  
C                                                                       
C                                                                       
C       EXAMPLES OF DIMENSION                                           
C                                                                       
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC                                  
C                                                                       
      IMPLICIT REAL*8 (A-H,O-Z)                                         
C                                                                       
C  PARAMETER GIVING                                                     
C                                                                       
CMSP  INCLUDE (MAXSIZE)                                                 
      INCLUDE '/labo/qclib/inspidas/common/maxsize'
CMSP  INCLUDE (COMMAND)                                                 
      INCLUDE '/labo/qclib/inspidas/common/command'
CMSP  INCLUDE (UNITNUMS)                                                
      INCLUDE '/labo/qclib/inspidas/common/unitnums'
CMSP  INCLUDE (FILEIO)                                                  
      INCLUDE '/labo/qclib/inspidas/common/fileio'
CMSP  INCLUDE (COORD)                                                   
      INCLUDE '/labo/qclib/inspidas/common/coord'
CMSP  INCLUDE (SIZE)                                                    
      INCLUDE '/labo/qclib/inspidas/common/size'
CMSP  INCLUDE (BOND)                                                    
      INCLUDE '/labo/qclib/inspidas/common/bond'
CMSP  INCLUDE (ATOM)                                                    
      INCLUDE '/labo/qclib/inspidas/common/atom'
      CHARACTER*4 SUBTAS,NXTWD                                          
      CHARACTER*20 FORMA                                                
      CHARACTER*80 NAME                                                 
C                                                                       
C*********************************************                          
C                                                                       
C OUTPUT OF CHWAKO                                                      
C ATTENTION IIBND2 DOESNOT HAVE THE SAME ARRAY SIZE AS IBND2            
      DIMENSION IIBND1(MAXVAR),IIBND2(MAXVAR)                           
      DIMENSION LUNIT(MAXATM),JBTYPE(MAXATM),COWAKO(MAXATM,3)           
C OUTPUT OF INPUT                                                       
C     DIMENSION IBND1(MAXVAR),IBND2(MAXVAR)                             
C     DIMENSION IBCHAR(3,MAXVAR),COWAKO(MAXATM,3)                       
C     DIMENSION KUNIT(MAXATM),NBTYPE(MAXATM)                            
C WORKING DIMENSION OF INPUT                                            
C     DIMENSION KATOM(MAXATM)                                           
C OUTPUT OF BOND                                                        
      DIMENSION X(MAXATM),Y(MAXATM),Z(MAXATM)                           
      DIMENSION AMASS1(MAXVAR),AMASS2(MAXVAR)                           
      DIMENSION TIXX1(MAXVAR),TIXY1(MAXVAR),TIXZ1(MAXVAR)               
     *         ,TIYY1(MAXVAR),TIYZ1(MAXVAR),TIZZ1(MAXVAR)               
      DIMENSION TIXX2(MAXVAR),TIXY2(MAXVAR),TIXZ2(MAXVAR)               
     *         ,TIYY2(MAXVAR),TIYZ2(MAXVAR),TIZZ2(MAXVAR)               
      DIMENSION CMSX1(MAXVAR),CMSY1(MAXVAR),CMSZ1(MAXVAR)               
      DIMENSION CMSX2(MAXVAR),CMSY2(MAXVAR),CMSZ2(MAXVAR)               
      DIMENSION UVX(MAXVAR),UVY(MAXVAR),UVZ(MAXVAR)                     
      DIMENSION BVX1(MAXVAR),BVY1(MAXVAR),BVZ1(MAXVAR)                  
      DIMENSION BVX2(MAXVAR),BVY2(MAXVAR),BVZ2(MAXVAR)                  
C WORKING DIMENSION OF BOND                                             
      DIMENSION AMS(MAXATM)                                             
      DIMENSION AMOMX2(MAXVAR),AMOMY2(MAXVAR),AMOMZ2(MAXVAR)            
C THESE VARIABLES (AH AKX AKY AKZ) MUST BE COMMON VARIABLES             
CC OUTPUT OF HMAT                                                       
C     DIMENSION AH(MAXVAR,MAXVAR)                                       
CC OUTPUT OF KMAT                                                       
C     DIMENSION AKX(MAXATM,MAXVAR)                                      
C     *         ,AKY(MAXATM,MAXVAR),AKZ(MAXATM,MAXVAR)                  
C WORKING DIMENSION OF HMAT                                             
      DIMENSION AOBX1(MAXVAR),AOBY1(MAXVAR),AOBZ1(MAXVAR)               
      DIMENSION AOBX2(MAXVAR),AOBY2(MAXVAR),AOBZ2(MAXVAR)               
      DIMENSION APBX1(MAXVAR),APBY1(MAXVAR),APBZ1(MAXVAR)               
      DIMENSION APBX2(MAXVAR),APBY2(MAXVAR),APBZ2(MAXVAR)               
C  WORKING DIMENSION IN KMAT                                            
      DIMENSION FRNTX1(MAXVAR),FRNTY1(MAXVAR),FRNTZ1(MAXVAR)            
      DIMENSION FRNTX2(MAXVAR),FRNTY2(MAXVAR),FRNTZ2(MAXVAR)            
      DIMENSION BACKX1(MAXVAR),BACKY1(MAXVAR),BACKZ1(MAXVAR)            
      DIMENSION BACKX2(MAXVAR),BACKY2(MAXVAR),BACKZ2(MAXVAR)            
C                                                                       
C     *** GET SUBTASK                                                   
C                                                                       
  999 CONTINUE                                                          
      CALL NXTCMN(SUBTAS)                                               
      WRITE(IOUT02,5) SUBTAS                                            
      WRITE(IOUT06,5) SUBTAS                                            
    5 FORMAT(/5X,' NEXT SUBTASK : ',A4,/)                               
      IF (SUBTAS.EQ.'QUIT') GOTO 990                                    
C-----------C A L C U L A T E   H - M A T R I X ------------------------
C           ( ELEMENTS OF H-MATRIX ARE STORED IN A COMMON ARRAY AH )    
C                                                                       
      IF (SUBTAS.EQ.'HMAT') THEN                                        
        CALL CHWAKO (IIBND1,IIBND2,LUNIT                                
     *                  ,JBTYPE,COWAKO)                                 
CCCCC                                                                   
C     DO 5 I=1,749                                                      
C5    PRINT*,'COWAKO(I,J)=',I,(COWAKO(I,J),J=1,3)                       
        CALL BOND(NUMATM,NUMVAR,IIBND1,IIBND2                           
     *           ,IBCHAR,JBTYPE,COWAKO                                  
     *           ,X,Y,Z                                                 
     *           ,AMASS1,AMASS2                                         
     *           ,TIXX1,TIXY1,TIXZ1                                     
     *           ,TIYY1,TIYZ1,TIZZ1                                     
     *           ,TIXX2,TIXY2,TIXZ2                                     
     *           ,TIYY2,TIYZ2,TIZZ2                                     
     *           ,CMSX1,CMSY1,CMSZ1                                     
     *           ,CMSX2,CMSY2,CMSZ2                                     
     *           ,UVX,UVY,UVZ                                           
     *           ,BVX1,BVY1,BVZ1                                        
     *           ,BVX2,BVY2,BVZ2                                        
     *           ,AMS                                                   
     *           ,AMASS                                                 
     *           ,TIXX,TIYY,TIZZ                                        
     *           ,TIXY,TIYZ,TIXZ                                        
     *           ,ATIXX,ATIYY,ATIZZ                                     
     *           ,ATIXY,ATIYZ,ATIXZ                                     
     *           ,AMOMX2,AMOMY2,AMOMZ2)                                 
C                                                                       
C__________________________                                             
CC   SAMPLING OF OUTPUT OF K-MATRIX                                     
C        WRITE(30) NUMVAR,NUMATM                                        
C        WRITE(30) AKX                                                  
C        WRITE(30) AKY                                                  
C        WRITE(30) AKZ                                                  
C                                                                       
C__________________________                                             
C                                                                       
        CALL HMAT(IBCHAR                                                
     *           ,AMASS1,AMASS2,AMASS                                   
     *           ,TIXX1,TIXY1,TIXZ1,TIYY1,TIYZ1,TIZZ1                   
     *           ,TIXX2,TIXY2,TIXZ2,TIYY2,TIYZ2,TIZZ2                   
     *           ,CMSX1,CMSY1,CMSZ1,CMSX2,CMSY2,CMSZ2                   
     *           ,UVX,UVY,UVZ                                           
     *           ,BVX1,BVY1,BVZ1,BVX2,BVY2,BVZ2                         
     *           ,ATIXX,ATIYY,ATIZZ,ATIXY,ATIYZ,ATIXZ                   
     *           ,AOBX1,AOBY1,AOBZ1,AOBX2,AOBY2,AOBZ2                   
     *           ,APBX1,APBY1,APBZ1,APBX2,APBY2,APBZ2)                  
C                                                                       
C                                                                       
CC   SAMPLING OF OUTPUT OF H-MATRIX                                     
C        WRITE(35) NUMVAR                                               
CCC      WRITE(35) ((AH(II,JJ),II=1,JJ),JJ=1,NUMVAR)                    
C        WRITE(35) AH                                                   
C                                                                       
C                                                                       
        GOTO 999                                                        
      END IF                                                            
C-----------C A L C U L A T E   K - M A T R I X ------------------------
C                                                                       
C           ( ELEMENTS OF KV-MATRIX ARE DUMPED TO A FILE )              
C                                                                       
      IF (SUBTAS.EQ.'KMAT') THEN                                        
        CALL GTFLNM(NAME)                                               
        CALL NXTWRD(COMLY2,COMLEN,NXTWD,4)                              
        FORMA='UNFORMATTED'                                             
        IF (NXTWD.EQ.'OVER') FORMA='OVERWRITE  '                        
        CALL OPENWT(IOUT46,FORMA,NAME,IOUT06)                           
        WRITE(IOUT06,8400) NAME                                         
 8400   FORMAT(5X,' WRITTEN TO ',A60)                                   
        WRITE (IOUT02,8500) NAME                                        
 8500   FORMAT(5X,'ELEMENTS OF KV-MATRIX ARE WRITTEN TO FILE:',         
     &         A60)                                                     
        CALL CHWAKO (IIBND1,IIBND2,LUNIT                                
     *                ,JBTYPE,COWAKO)                                   
        CALL BOND(NUMATM,NUMVAR,IIBND1,IIBND2                           
     *           ,IBCHAR,JBTYPE,COWAKO                                  
     *           ,X,Y,Z                                                 
     *           ,AMASS1,AMASS2                                         
     *           ,TIXX1,TIXY1,TIXZ1                                     
     *           ,TIYY1,TIYZ1,TIZZ1                                     
     *           ,TIXX2,TIXY2,TIXZ2                                     
     *           ,TIYY2,TIYZ2,TIZZ2                                     
     *           ,CMSX1,CMSY1,CMSZ1                                     
     *           ,CMSX2,CMSY2,CMSZ2                                     
     *           ,UVX,UVY,UVZ                                           
     *           ,BVX1,BVY1,BVZ1                                        
     *           ,BVX2,BVY2,BVZ2                                        
     *           ,AMS                                                   
     *           ,AMASS                                                 
     *           ,TIXX,TIYY,TIZZ                                        
     *           ,TIXY,TIYZ,TIXZ                                        
     *           ,ATIXX,ATIYY,ATIZZ                                     
     *           ,ATIXY,ATIYZ,ATIXZ                                     
     *           ,AMOMX2,AMOMY2,AMOMZ2)                                 
        CALL KMAT(IBCHAR,LUNIT                                          
     *           ,X,Y,Z,AMASS1,AMASS2,AMASS                             
     *           ,TIXX1,TIXY1,TIXZ1,TIYY1,TIYZ1,TIZZ1                   
     *           ,TIXX2,TIXY2,TIXZ2,TIYY2,TIYZ2,TIZZ2                   
     *           ,CMSX1,CMSY1,CMSZ1,CMSX2,CMSY2,CMSZ2                   
     *           ,UVX,UVY,UVZ                                           
     *           ,BVX1,BVY1,BVZ1                                        
     *           ,ATIXX,ATIYY,ATIZZ,ATIXY,ATIYZ,ATIXZ                   
     *           ,FRNTX1,FRNTY1,FRNTZ1,FRNTX2,FRNTY2,FRNTZ2             
     *           ,BACKX1,BACKY1,BACKZ1,BACKX2,BACKY2,BACKZ2)            
        CLOSE (IOUT46)                                                  
        GOTO 999                                                        
      END IF                                                            
C---------D I A G O N A L I Z A T I O N --------------------------------
C                                                                       
      IF (SUBTAS.EQ.'DIAG') THEN                                        
        CALL DIAG                                                       
        GOTO 999                                                        
      END IF                                                            
C---------P R I N T   O U T   E I G E N   V A L U E S ------------------
C                       (FORMATTED,TO UNIT 42)                          
      IF (SUBTAS.EQ.'WRIT') THEN                                        
        CALL GTFLNM(NAME)                                               
        CALL OPENWT(IOUT42,'FORMATTED',NAME,IOUT06)                     
        WRITE(IOUT06,8000) NAME                                         
 8000   FORMAT(5X,' WRITTEN TO ',A60)                                   
        CALL WTEIG(IOUT42)                                              
        CLOSE (IOUT42)                                                  
        WRITE (IOUT02,8100) NAME                                        
 8100   FORMAT(5X,'EIGEN VALUES AND EIGEN VECTORS ARE WRITTEN TO FILE:',
     &         A60)                                                     
        GOTO 999                                                        
      END IF                                                            
C---------P R I N T   O U T   E I G E N   V A L U E S ------------------
C                       (UNFORMATTED,TO UNIT 44)                        
      IF (SUBTAS.EQ.'PUT ') THEN                                        
        CALL GTFLNM(NAME)                                               
        CALL NXTWRD(COMLY2,COMLEN,NXTWD,4)                              
        FORMA='UNFORMATTED'                                             
        IF (NXTWD.EQ.'OVER') FORMA='OVERWRITE  '                        
        CALL OPENWT(IOUT44,FORMA,NAME,IOUT06)                           
        WRITE(IOUT06,8200) NAME                                         
 8200   FORMAT(5X,' WRITTEN TO ',A60)                                   
        CALL PTEIG(IOUT44)                                              
        CLOSE (IOUT44)                                                  
        WRITE (IOUT02,8300) NAME                                        
 8300   FORMAT(5X,'EIGEN VALUES AND EIGEN VECTORS ARE WRITTEN TO FILE:',
     &         A60)                                                     
        GOTO 999                                                        
      END IF                                                            
C---------PRINT OUT EIGEN VALUE HISTOGRAM             ------------------
C                                                                       
      IF (SUBTAS.EQ.'GRPH') THEN                                        
        CALL OUTGR(IOUT06,60)                                           
        CALL OUTGR(IOUT02,100)                                          
        GOTO 999                                                        
      END IF                                                            
C---------A N A L Y S I S ----------------------------------------------
C                                                                       
      IF (SUBTAS.EQ.'ANAL') THEN                                        
        CALL ANALYS                                                     
        GOTO 999                                                        
      END IF                                                            
      GOTO 999                                                          
  990 RETURN                                                            
      END                                                               
C                                                                       
C-----------------------------------------------------------------------
C     SUBROUTINE BOND                                                   
      SUBROUTINE BOND(NUMATM,NUMVAR,IBND1,IBND2                         
     *         ,IBCHAR,NBTYPE,COWAKO                                    
     *         ,X,Y,Z                                                   
     *         ,AMASS1,AMASS2                                           
     *         ,TIXX1,TIXY1,TIXZ1                                       
     *         ,TIYY1,TIYZ1,TIZZ1                                       
     *         ,TIXX2,TIXY2,TIXZ2                                       
     *         ,TIYY2,TIYZ2,TIZZ2                                       
     *         ,CMSX1,CMSY1,CMSZ1                                       
     *         ,CMSX2,CMSY2,CMSZ2                                       
     *         ,UVX,UVY,UVZ                                             
     *         ,BVX1,BVY1,BVZ1                                          
     *         ,BVX2,BVY2,BVZ2                                          
     *         ,AMS                                                     
     *         ,AMASS                                                   
     *         ,TIXX,TIYY,TIZZ                                          
     *         ,TIXY,TIYZ,TIXZ                                          
     *         ,ATIXX,ATIYY,ATIZZ                                       
     *         ,ATIXY,ATIYZ,ATIXZ                                       
     *         ,AMOMX2,AMOMY2,AMOMZ2)                                   
C-----------------------------------------------------------------------
      IMPLICIT REAL*8 (A-H,O-Z)                                         
CMSP  INCLUDE (MAXSIZE)                                                 
      INCLUDE '/labo/qclib/inspidas/common/maxsize'
C                                                                       
C  OUTPUT FROM INPUT                                                    
      DIMENSION IBND1(MAXVAR),IBND2(MAXVAR)                             
      DIMENSION IBCHAR(3,MAXVAR)                                        
      DIMENSION NBTYPE(MAXATM)                                          
      DIMENSION COWAKO(MAXATM,3)                                        
C  MASS OF ATOMS WITH RESPECT TO TYPE                                   
      DIMENSION AMAST(21)                                               
C  OUTPUT OF BOND                                                       
      DIMENSION X(MAXATM),Y(MAXATM),Z(MAXATM)                           
      DIMENSION AMASS1(MAXVAR),AMASS2(MAXVAR)                           
C                                                                       
C         IN THE FOLLOWING DIMENSION STATEMENT, ARRAY MAMES             
C         1 AT THE END REFER TO QUANTITIES PERTAINING TO                
C         RIGID BODY-1, AND THOSE WITH NUMBER 2 TO RIGID BODY-2.        
C                                                                       
      DIMENSION TIXX1(MAXVAR),TIXY1(MAXVAR),TIXZ1(MAXVAR)               
     *,         TIYY1(MAXVAR),TIYZ1(MAXVAR),TIZZ1(MAXVAR)               
      DIMENSION TIXX2(MAXVAR),TIXY2(MAXVAR),TIXZ2(MAXVAR)               
     *,         TIYY2(MAXVAR),TIYZ2(MAXVAR),TIZZ2(MAXVAR)               
      DIMENSION CMSX1(MAXVAR),CMSY1(MAXVAR),CMSZ1(MAXVAR)               
      DIMENSION CMSX2(MAXVAR),CMSY2(MAXVAR),CMSZ2(MAXVAR)               
      DIMENSION UVX(MAXVAR),UVY(MAXVAR),UVZ(MAXVAR)                     
      DIMENSION BVX1(MAXVAR),BVY1(MAXVAR),BVZ1(MAXVAR)                  
      DIMENSION BVX2(MAXVAR),BVY2(MAXVAR),BVZ2(MAXVAR)                  
C WORKING DIMENSION OF BOND                                             
      DIMENSION AMS(MAXATM)                                             
      DIMENSION AMOMX2(MAXVAR),AMOMY2(MAXVAR),AMOMZ2(MAXVAR)            
C  DATA      MASS OF ATOM                                               
      DATA AMAST/4*1.D0, 0.0, 5*12.D0, 3*0.0                            
     *          ,14.D0, 2*0.0, 2*16.D0, 0.0, 2*32.D0/                   
C                                                                       
C  TOTAL MASS(AMASS),TOTAL MOMENT(AMOM),                                
C  TOTAL CENTRE OF MASS(ACEN)                                           
C                                                                       
      AMASS=0.0                                                         
      AMOMX=0.0                                                         
      AMOMY=0.0                                                         
      AMOMZ=0.0                                                         
      DO 1000 JJ=1,NUMATM                                               
      IMS=NBTYPE(JJ)                                                    
      AMS(JJ)=AMAST(IMS)                                                
      AMASS=AMASS+AMS(JJ)                                               
      AMOMX=AMOMX+AMS(JJ)*COWAKO(JJ,1)                                  
      AMOMY=AMOMY+AMS(JJ)*COWAKO(JJ,2)                                  
      AMOMZ=AMOMZ+AMS(JJ)*COWAKO(JJ,3)                                  
 1000 CONTINUE                                                          
      ACENX=AMOMX/AMASS                                                 
      ACENY=AMOMY/AMASS                                                 
      ACENZ=AMOMZ/AMASS                                                 
C                                                                       
C  COORDINATE SYSTEM OF CENTER OF MASS                                  
C  TOTAL TENSOR OF INERTIA                                              
C                                                                       
      TIXX=0.0                                                          
      TIYY=0.0                                                          
      TIZZ=0.0                                                          
      TIXY=0.0                                                          
      TIXZ=0.0                                                          
      TIYZ=0.0                                                          
C                                                                       
      DO 1100 JJ=1,NUMATM                                               
      X(JJ)=COWAKO(JJ,1)-ACENX                                          
      Y(JJ)=COWAKO(JJ,2)-ACENY                                          
      Z(JJ)=COWAKO(JJ,3)-ACENZ                                          
      BTIXX=AMS(JJ)*(Y(JJ)**2+Z(JJ)**2)                                 
      BTIYY=AMS(JJ)*(X(JJ)**2+Z(JJ)**2)                                 
      BTIZZ=AMS(JJ)*(X(JJ)**2+Y(JJ)**2)                                 
      BTIXY=-AMS(JJ)*X(JJ)*Y(JJ)                                        
      BTIXZ=-AMS(JJ)*X(JJ)*Z(JJ)                                        
      BTIYZ=-AMS(JJ)*Y(JJ)*Z(JJ)                                        
C                                                                       
      TIXX=BTIXX+TIXX                                                   
      TIYY=BTIYY+TIYY                                                   
      TIZZ=BTIZZ+TIZZ                                                   
      TIXY=BTIXY+TIXY                                                   
      TIXZ=BTIXZ+TIXZ                                                   
      TIYZ=BTIYZ+TIYZ                                                   
 1100 CONTINUE                                                          
C                                                                       
C THE INVERSE MATRIX OF TENSOR OF INERTIA,                              
C WHOSE ELEMENT AER DESIGNATE AS ATIXX,....                             
C                                                                       
      ATIXX=0.0                                                         
      ATIYY=0.0                                                         
      ATIZZ=0.0                                                         
      ATIXY=0.0                                                         
      ATIYZ=0.0                                                         
      ATIXZ=0.0                                                         
      ADAT=0.0                                                          
      ADAT=TIXX*TIYY*TIZZ                                               
     *   +2.*TIXY*TIYZ*TIXZ                                             
     *   -TIXZ*TIXZ*TIYY                                                
     *   -TIXY*TIXY*TIZZ                                                
     *   -TIYZ*TIYZ*TIXX                                                
C                                                                       
      ATIXX=(TIYY*TIZZ-TIYZ*TIYZ)/ADAT                                  
      ATIYY=(TIXX*TIZZ-TIXZ*TIXZ)/ADAT                                  
      ATIZZ=(TIXX*TIYY-TIXY*TIXY)/ADAT                                  
      ATIXY=(TIYZ*TIXZ-TIXY*TIZZ)/ADAT                                  
      ATIYZ=(TIXZ*TIXY-TIYZ*TIXX)/ADAT                                  
      ATIXZ=(TIXY*TIYZ-TIXZ*TIYY)/ADAT                                  
C                                                                       
C CALC OF AMOUNTS OF BONDS                                              
C        ABOUT OF RIGID BODY-1 OR -2,                                   
C        MASS, TENSOR-OF-INERTIA AND CENTER-OF-MASS.                    
C                                                                       
      DO 8 MM=1,NUMVAR                                                  
   8  CONTINUE                                                          
      AML1=0.0                                                          
      AILX1=0.0                                                         
      AILY1=0.0                                                         
      AILZ1=0.0                                                         
      ATLXX1=0.0                                                        
      ATLYY1=0.0                                                        
      ATLZZ1=0.0                                                        
      ATLXY1=0.0                                                        
      ATLYZ1=0.0                                                        
      ATLXZ1=0.0                                                        
      AML2=0.0                                                          
      AILX2=0.0                                                         
      AILY2=0.0                                                         
      AILZ2=0.0                                                         
      ATLXX2=0.0                                                        
      ATLYY2=0.0                                                        
      ATLZZ2=0.0                                                        
      ATLXY2=0.0                                                        
      ATLYZ2=0.0                                                        
      ATLXZ2=0.0                                                        
      AML3=0.0                                                          
      AILX3=0.0                                                         
      AILY3=0.0                                                         
      AILZ3=0.0                                                         
      ATLXX3=0.0                                                        
      ATLYY3=0.0                                                        
      ATLZZ3=0.0                                                        
      ATLXY3=0.0                                                        
      ATLYZ3=0.0                                                        
      ATLXZ3=0.0                                                        
C                                                                       
      DO 2000 II=NUMVAR,1,-1                                            
C                                                                       
C MASS,MOMENT AND INERTIA-TENSOR                                        
C ARE FIRST SUMMED OVER ATOMS BELONGING TO A UNIT.                      
C                                                                       
        UMASS=0.0                                                       
        UMOMX=0.0                                                       
        UMOMY=0.0                                                       
        UMOMZ=0.0                                                       
C                                                                       
        UTIXX=0.0                                                       
        UTIYY=0.0                                                       
        UTIZZ=0.0                                                       
        UTIXY=0.0                                                       
        UTIXZ=0.0                                                       
        UTIYZ=0.0                                                       
C                                                                       
      IF(II.EQ.NUMVAR) THEN                                             
         IU2=NUMATM                                                     
      ELSE                                                              
         IU2=IBND2(II+1)-1                                              
      ENDIF                                                             
      IU1=IBND2(II)                                                     
C                                                                       
      DO 2100 KK=IU1,IU2                                                
C                                                                       
      UMASS=UMASS+AMS(KK)                                               
      UMOMX=UMOMX+AMS(KK)*X(KK)                                         
      UMOMY=UMOMY+AMS(KK)*Y(KK)                                         
      UMOMZ=UMOMZ+AMS(KK)*Z(KK)                                         
C                                                                       
      UTIXX=UTIXX+AMS(KK)*(Y(KK)**2+Z(KK)**2)                           
      UTIYY=UTIYY+AMS(KK)*(X(KK)**2+Z(KK)**2)                           
      UTIZZ=UTIZZ+AMS(KK)*(X(KK)**2+Y(KK)**2)                           
      UTIXY=UTIXY-AMS(KK)*X(KK)*Y(KK)                                   
      UTIXZ=UTIXZ-AMS(KK)*X(KK)*Z(KK)                                   
      UTIYZ=UTIYZ-AMS(KK)*Y(KK)*Z(KK)                                   
 2100 CONTINUE                                                          
C                                                                       
C  SELECTION OF LEVEL FROM THE TYPE OF THE BOND                         
C                                                                       
      IF(IBCHAR(3,II).NE.0) THEN                                        
C                                                                       
C         NOW ON BRANCH OF LEVEL-3                                      
C                                                                       
          AML3=AML3+UMASS                                               
          AILX3=AILX3+UMOMX                                             
          AILY3=AILY3+UMOMY                                             
          AILZ3=AILZ3+UMOMZ                                             
          ATLXX3=ATLXX3+UTIXX                                           
          ATLYY3=ATLYY3+UTIYY                                           
          ATLZZ3=ATLZZ3+UTIZZ                                           
          ATLXY3=ATLXY3+UTIXY                                           
          ATLXZ3=ATLXZ3+UTIXZ                                           
          ATLYZ3=ATLYZ3+UTIYZ                                           
C                                                                       
          AMASS2(II)=AML3                                               
          AMOMX2(II)=AILX3                                              
          AMOMY2(II)=AILY3                                              
          AMOMZ2(II)=AILZ3                                              
          TIXX2(II)=ATLXX3                                              
          TIYY2(II)=ATLYY3                                              
          TIZZ2(II)=ATLZZ3                                              
          TIXY2(II)=ATLXY3                                              
          TIXZ2(II)=ATLXZ3                                              
          TIYZ2(II)=ATLYZ3                                              
C                                                                       
        IF(IBCHAR(3,II).EQ.1) THEN                                      
C                                                                       
C           NOW ON THE FIRST UNIT OF THE BRANCH OF LEVEL-3              
C                                                                       
            AML2=AML2+AML3                                              
            AILX2=AILX2+AILX3                                           
            AILY2=AILY2+AILY3                                           
            AILZ2=AILZ2+AILZ3                                           
            ATLXX2=ATLXX2+ATLXX3                                        
            ATLYY2=ATLYY2+ATLYY3                                        
            ATLZZ2=ATLZZ2+ATLZZ3                                        
            ATLXY2=ATLXY2+ATLXY3                                        
            ATLXZ2=ATLXZ2+ATLXZ3                                        
            ATLYZ2=ATLYZ2+ATLYZ3                                        
C                                                                       
            AML3=0.0                                                    
            AILX3=0.0                                                   
            AILY3=0.0                                                   
            AILZ3=0.0                                                   
            ATLXX3=0.0                                                  
            ATLYY3=0.0                                                  
            ATLZZ3=0.0                                                  
            ATLXY3=0.0                                                  
            ATLXZ3=0.0                                                  
            ATLYZ3=0.0                                                  
        ENDIF                                                           
      ELSE                                                              
C                                                                       
C        NOW ON LEVEL-1 OR -2                                           
C                                                                       
        IF(IBCHAR(2,II).NE.0)THEN                                       
C                                                                       
C        NOW ON A BRANCH OF LEVEL2                                      
C                                                                       
            AML2=AML2+UMASS                                             
            AILX2=AILX2+UMOMX                                           
            AILY2=AILY2+UMOMY                                           
            AILZ2=AILZ2+UMOMZ                                           
            ATLXX2=ATLXX2+UTIXX                                         
            ATLYY2=ATLYY2+UTIYY                                         
            ATLZZ2=ATLZZ2+UTIZZ                                         
            ATLXY2=ATLXY2+UTIXY                                         
            ATLXZ2=ATLXZ2+UTIXZ                                         
            ATLYZ2=ATLYZ2+UTIYZ                                         
C                                                                       
            AMASS2(II)=AML2                                             
            AMOMX2(II)=AILX2                                            
            AMOMY2(II)=AILY2                                            
            AMOMZ2(II)=AILZ2                                            
            TIXX2(II)=ATLXX2                                            
            TIYY2(II)=ATLYY2                                            
            TIZZ2(II)=ATLZZ2                                            
            TIXY2(II)=ATLXY2                                            
            TIXZ2(II)=ATLXZ2                                            
            TIYZ2(II)=ATLYZ2                                            
C                                                                       
          IF(IBCHAR(2,II).EQ.1) THEN                                    
C                                                                       
C           NOW ON THE FIRST UNIT OF THE BRANCH                         
C           OF LEVEL-2                                                  
C                                                                       
              AML1=AML2+AML1                                            
              AILX1=AILX2+AILX1                                         
              AILY1=AILY2+AILY1                                         
              AILZ1=AILZ2+AILZ1                                         
              ATLXX1=ATLXX2+ATLXX1                                      
              ATLYY1=ATLYY2+ATLYY1                                      
              ATLZZ1=ATLZZ2+ATLZZ1                                      
              ATLXY1=ATLXY2+ATLXY1                                      
              ATLXZ1=ATLXZ2+ATLXZ1                                      
              ATLYZ1=ATLYZ2+ATLYZ1                                      
C                                                                       
              AML2=0.0                                                  
              AILX2=0.0                                                 
              AILY2=0.0                                                 
              AILZ2=0.0                                                 
              ATLXX2=0.0                                                
              ATLYY2=0.0                                                
              ATLZZ2=0.0                                                
              ATLXY2=0.0                                                
              ATLXZ2=0.0                                                
              ATLYZ2=0.0                                                
          ENDIF                                                         
        ELSE                                                            
C                                                                       
C         NOW ON A BRANCH OF LEVEL-1                                    
C                                                                       
          IF(IBCHAR(1,II).NE.0) THEN                                    
              AML1=AML1+UMASS                                           
              AILX1=AILX1+UMOMX                                         
              AILY1=AILY1+UMOMY                                         
              AILZ1=AILZ1+UMOMZ                                         
              ATLXX1=ATLXX1+UTIXX                                       
              ATLYY1=ATLYY1+UTIYY                                       
              ATLZZ1=ATLZZ1+UTIZZ                                       
              ATLXY1=ATLXY1+UTIXY                                       
              ATLXZ1=ATLXZ1+UTIXZ                                       
              ATLYZ1=ATLYZ1+UTIYZ                                       
C                                                                       
              AMASS2(II)=AML1                                           
              AMOMX2(II)=AILX1                                          
              AMOMY2(II)=AILY1                                          
              AMOMZ2(II)=AILZ1                                          
              TIXX2(II)=ATLXX1                                          
              TIYY2(II)=ATLYY1                                          
              TIZZ2(II)=ATLZZ1                                          
              TIXY2(II)=ATLXY1                                          
              TIXZ2(II)=ATLXZ1                                          
              TIYZ2(II)=ATLYZ1                                          
C                                                                       
          ENDIF                                                         
        ENDIF                                                           
      ENDIF                                                             
C                                                                       
C CALC OF CENTER OF MASS                                                
C OF RIGID BODY-2                                                       
C                                                                       
      CMSX2(II)=AMOMX2(II)/AMASS2(II)                                   
      CMSY2(II)=AMOMY2(II)/AMASS2(II)                                   
      CMSZ2(II)=AMOMZ2(II)/AMASS2(II)                                   
C                                                                       
C CALC OF AMOUNTS OF BONDS                                              
C OF RIGID BODY-2                                                       
C      AMASS1,CENTRE-OF-MASS AND TENSOR-OF-INRETIA                      
C                                                                       
       AMASS1(II)=AMASS-AMASS2(II)                                      
       CMSX1(II)=-CMSX2(II)*AMASS2(II)/AMASS1(II)                       
       CMSY1(II)=-CMSY2(II)*AMASS2(II)/AMASS1(II)                       
       CMSZ1(II)=-CMSZ2(II)*AMASS2(II)/AMASS1(II)                       
       TIXX1(II)=TIXX-TIXX2(II)                                         
       TIYY1(II)=TIYY-TIYY2(II)                                         
       TIZZ1(II)=TIZZ-TIZZ2(II)                                         
       TIXY1(II)=TIXY-TIXY2(II)                                         
       TIXZ1(II)=TIXZ-TIXZ2(II)                                         
       TIYZ1(II)=TIYZ-TIYZ2(II)                                         
C                                                                       
C     UNIT VECTOR OF BONDS;UV                                           
C     BOND VECTOR;BV                                                    
C                                                                       
C       VECTOR IN THE RIGID BODY-1                                      
C                                                                       
      BVX1(II)=X(IBND1(II))                                             
      BVY1(II)=Y(IBND1(II))                                             
      BVZ1(II)=Z(IBND1(II))                                             
C                                                                       
C       VECTOR IN THE RIGID BODY-2                                      
C                                                                       
      BVX2(II)=X(IBND2(II))                                             
      BVY2(II)=Y(IBND2(II))                                             
      BVZ2(II)=Z(IBND2(II))                                             
C                                                                       
C       UNIT VECTOR OF THE BOND                                         
C                                                                       
           ANORM=(BVX2(II)-BVX1(II))**2                                 
     *          +(BVY2(II)-BVY1(II))**2                                 
     *          +(BVZ2(II)-BVZ1(II))**2                                 
           ANORM=DSQRT(ANORM)                                           
      UVX(II)=(BVX2(II)-BVX1(II))/ANORM                                 
      UVY(II)=(BVY2(II)-BVY1(II))/ANORM                                 
      UVZ(II)=(BVZ2(II)-BVZ1(II))/ANORM                                 
C                                                                       
 2000 CONTINUE                                                          
      RETURN                                                            
             END                                                        
C-----------------------------------------------------------------------
      SUBROUTINE HMAT(IBCHAR                                            
     *         ,AMASS1,AMASS2,AMASS                                     
     *         ,TIXX1,TIXY1,TIXZ1,TIYY1,TIYZ1,TIZZ1                     
     *         ,TIXX2,TIXY2,TIXZ2,TIYY2,TIYZ2,TIZZ2                     
     *         ,CMSX1,CMSY1,CMSZ1,CMSX2,CMSY2,CMSZ2                     
     *         ,UVX,UVY,UVZ                                             
     *         ,BVX1,BVY1,BVZ1,BVX2,BVY2,BVZ2                           
     *         ,ATIXX,ATIYY,ATIZZ,ATIXY,ATIYZ,ATIXZ                     
     *         ,AOBX1,AOBY1,AOBZ1,AOBX2,AOBY2,AOBZ2                     
     *         ,APBX1,APBY1,APBZ1,APBX2,APBY2,APBZ2)                    
C-----------------------------------------------------------------------
      IMPLICIT REAL*8 (A-H,O-Z)                                         
CMSP  INCLUDE (MAXSIZE)                                                 
      INCLUDE '/labo/qclib/inspidas/common/maxsize'
CMSP  INCLUDE (SIZE)                                                    
      INCLUDE '/labo/qclib/inspidas/common/size'
CMSP  INCLUDE (HMATRIX)                                                 
      INCLUDE '/labo/qclib/inspidas/common/hmatrix'
C                                                                       
C   FROM MAIN                                                           
      DIMENSION IBCHAR(3,MAXVAR)                                        
C                                                                       
C   FROM OUTPUT OF BOND                                                 
C                                                                       
      DIMENSION AMASS1(MAXVAR),AMASS2(MAXVAR)                           
      DIMENSION TIXX1(MAXVAR),TIXY1(MAXVAR),TIXZ1(MAXVAR)               
     *,         TIYY1(MAXVAR),TIYZ1(MAXVAR),TIZZ1(MAXVAR)               
      DIMENSION TIXX2(MAXVAR),TIXY2(MAXVAR),TIXZ2(MAXVAR)               
     *,         TIYY2(MAXVAR),TIYZ2(MAXVAR),TIZZ2(MAXVAR)               
      DIMENSION CMSX1(MAXVAR),CMSY1(MAXVAR),CMSZ1(MAXVAR)               
      DIMENSION CMSX2(MAXVAR),CMSY2(MAXVAR),CMSZ2(MAXVAR)               
      DIMENSION UVX(MAXVAR),UVY(MAXVAR),UVZ(MAXVAR)                     
      DIMENSION BVX1(MAXVAR),BVY1(MAXVAR),BVZ1(MAXVAR)                  
      DIMENSION BVX2(MAXVAR),BVY2(MAXVAR),BVZ2(MAXVAR)                  
C                                                                       
C  OUTPUT OF HMAT                                                       
C                                                                       
C  THIS ARRAY AH MUST BE COMMON VARIABLE                                
C     DIMENSION AH(MAXVAR,MAXVAR)                                       
C WORKING DIMENSION OF HMAT                                             
      DIMENSION AOBX1(MAXVAR),AOBY1(MAXVAR),AOBZ1(MAXVAR)               
      DIMENSION AOBX2(MAXVAR),AOBY2(MAXVAR),AOBZ2(MAXVAR)               
      DIMENSION APBX1(MAXVAR),APBY1(MAXVAR),APBZ1(MAXVAR)               
      DIMENSION APBX2(MAXVAR),APBY2(MAXVAR),APBZ2(MAXVAR)               
C                                                                       
C  CALC OF QUANTITIES PERTAINING TO A BOND                              
C                                                                       
      DO 1000 II=1,NUMVAR                                               
C                                                                       
C       QUANTITIES APPEARING IN THE FIRST TERM                          
C       IN THE RHS OF EQ(26)                                            
C                                                                       
C  1) RIGID BODY-1                                                      
C                                                                       
      POSX1=BVX1(II)-CMSX1(II)                                          
      POSY1=BVY1(II)-CMSY1(II)                                          
      POSZ1=BVZ1(II)-CMSZ1(II)                                          
C                                                                       
      BDX1=UVY(II)*POSZ1-UVZ(II)*POSY1                                  
      BDY1=UVZ(II)*POSX1-UVX(II)*POSZ1                                  
      BDZ1=UVX(II)*POSY1-UVY(II)*POSX1                                  
C                                                                       
C  2) RIGID BODY-2                                                      
C                                                                       
      POSX2=BVX2(II)-CMSX2(II)                                          
      POSY2=BVY2(II)-CMSY2(II)                                          
      POSZ2=BVZ2(II)-CMSZ2(II)                                          
C                                                                       
      BDX2=UVY(II)*POSZ2-UVZ(II)*POSY2                                  
      BDY2=UVZ(II)*POSX2-UVX(II)*POSZ2                                  
      BDZ2=UVX(II)*POSY2-UVY(II)*POSX2                                  
C                                                                       
C  3) CALC OF AMOUNTS OF BONDS                                          
C                                                                       
C   RIGID BODY-1                                                        
      AOBX1(II)=AMASS1(II)*BDX1                                         
      AOBY1(II)=AMASS1(II)*BDY1                                         
      AOBZ1(II)=AMASS1(II)*BDZ1                                         
C                                                                       
C   RIGID BODY-2                                                        
      AOBX2(II)=AMASS2(II)*BDX2                                         
      AOBY2(II)=AMASS2(II)*BDY2                                         
      AOBZ2(II)=AMASS2(II)*BDZ2                                         
C                                                                       
C   QUANTITIES APPEARING IN THE SECOND                                  
C   TERM IN THE RHS OF EQ(26)                                           
C                                                                       
C      TENSOR * UNIT VECTOR                                             
C         RIGID BODY-1                                                  
C                                                                       
      AIUX1=TIXX1(II)*UVX(II)                                           
     *     +TIXY1(II)*UVY(II)                                           
     *     +TIXZ1(II)*UVZ(II)                                           
      AIUY1=TIXY1(II)*UVX(II)                                           
     *     +TIYY1(II)*UVY(II)                                           
     *     +TIYZ1(II)*UVZ(II)                                           
      AIUZ1=TIXZ1(II)*UVX(II)                                           
     *     +TIYZ1(II)*UVY(II)                                           
     *     +TIZZ1(II)*UVZ(II)                                           
C                                                                       
C         RIGID BODY-2                                                  
C                                                                       
      AIUX2=TIXX2(II)*UVX(II)                                           
     *     +TIXY2(II)*UVY(II)                                           
     *     +TIXZ2(II)*UVZ(II)                                           
      AIUY2=TIXY2(II)*UVX(II)                                           
     *     +TIYY2(II)*UVY(II)                                           
     *     +TIYZ2(II)*UVZ(II)                                           
      AIUZ2=TIXZ2(II)*UVX(II)                                           
     *     +TIYZ2(II)*UVY(II)                                           
     *     +TIZZ2(II)*UVZ(II)                                           
C                                                                       
C      UNIT VECTOR * BOND VECTOR                                        
C         RIGID BODY-1                                                  
      AUBX1=UVY(II)*BVZ1(II)-UVZ(II)*BVY1(II)                           
      AUBY1=UVZ(II)*BVX1(II)-UVX(II)*BVZ1(II)                           
      AUBZ1=UVX(II)*BVY1(II)-UVY(II)*BVX1(II)                           
C         RIGID BODY-2                                                  
      AUBX2=UVY(II)*BVZ2(II)-UVZ(II)*BVY2(II)                           
      AUBY2=UVZ(II)*BVX2(II)-UVX(II)*BVZ2(II)                           
      AUBZ2=UVX(II)*BVY2(II)-UVY(II)*BVX2(II)                           
C                                                                       
C         MASS * CENTER * UNIT * BOND                                   
C                                                                       
C         RIGID BODY-1                                                  
      AMYBX1=(CMSY1(II)*AUBZ1-CMSZ1(II)*AUBY1)*AMASS1(II)               
      AMYBY1=(CMSZ1(II)*AUBX1-CMSX1(II)*AUBZ1)*AMASS1(II)               
      AMYBZ1=(CMSX1(II)*AUBY1-CMSY1(II)*AUBX1)*AMASS1(II)               
C         RIGID BODY-2                                                  
      AMYBX2=(CMSY2(II)*AUBZ2-CMSZ2(II)*AUBY2)*AMASS2(II)               
      AMYBY2=(CMSZ2(II)*AUBX2-CMSX2(II)*AUBZ2)*AMASS2(II)               
      AMYBZ2=(CMSX2(II)*AUBY2-CMSY2(II)*AUBX2)*AMASS2(II)               
C                                                                       
C                                                                       
C         RIGID BODY-1                                                  
      APBX1(II)=AMYBX1-AIUX1                                            
      APBY1(II)=AMYBY1-AIUY1                                            
      APBZ1(II)=AMYBZ1-AIUZ1                                            
C         RIGID BODY-2                                                  
      APBX2(II)=AMYBX2-AIUX2                                            
      APBY2(II)=AMYBY2-AIUY2                                            
      APBZ2(II)=AMYBZ2-AIUZ2                                            
 1000 CONTINUE                                                          
C                                                                       
C CALC OF THE HMAT                                                      
C                                                                       
      DO 2000 II=1,NUMVAR                                               
C                                                                       
      DO 2100 JJ=II,NUMVAR                                              
C                                                                       
C   SELECTION OF RIGID BODY                                             
C                                                                       
      IF(IBCHAR(2,II).EQ.0) THEN                                        
C                         BOND-II IS ON A MAIN CHAIN                    
                     ICASE=1                                            
      ELSE                                                              
          IF(IBCHAR(1,II).NE.IBCHAR(1,JJ)) THEN                         
C                         BOND-II AND -JJ ARE NOT ON THE SAME BRANCH    
                     ICASE=2                                            
          ELSE                                                          
              IF(IBCHAR(3,II).EQ.0) THEN                                
C                         BOND-II IS ON A MAIN BRANCH                   
                     ICASE=1                                            
              ELSE                                                      
                  IF(IBCHAR(2,II).EQ.IBCHAR(2,JJ)) THEN                 
                     ICASE=1                                            
                  ELSE                                                  
                     ICASE=2                                            
                  ENDIF                                                 
              ENDIF                                                     
          ENDIF                                                         
      ENDIF                                                             
C                                                                       
C IN THE CASE OF 1;ICASE=1                                              
C                                                                       
      IF(ICASE.EQ.1) THEN                                               
          AMX=AOBX1(II)*AOBX2(JJ)                                       
          AMY=AOBY1(II)*AOBY2(JJ)                                       
          AMZ=AOBZ1(II)*AOBZ2(JJ)                                       
C                                                                       
C IN THE CASE OF 1;ICASE=2                                              
C                                                                       
      ELSE                                                              
          AMX=AOBX2(II)*AOBX2(JJ)                                       
          AMY=AOBY2(II)*AOBY2(JJ)                                       
          AMZ=AOBZ2(II)*AOBZ2(JJ)                                       
      ENDIF                                                             
        AM=(AMX+AMY+AMZ)/AMASS                                          
C                                                                       
        ARAX=ATIXX*APBX2(JJ)                                            
     *      +ATIXY*APBY2(JJ)                                            
     *      +ATIXZ*APBZ2(JJ)                                            
        ARAY=ATIXY*APBX2(JJ)                                            
     *      +ATIYY*APBY2(JJ)                                            
     *      +ATIYZ*APBZ2(JJ)                                            
        ARAZ=ATIXZ*APBX2(JJ)                                            
     *      +ATIYZ*APBY2(JJ)                                            
     *      +ATIZZ*APBZ2(JJ)                                            
C                                                                       
C        THE SECOND TERM                                                
      IF(ICASE.EQ.1) THEN                                               
        ARA=APBX1(II)*ARAX+APBY1(II)*ARAY+APBZ1(II)*ARAZ                
        AH(II,JJ)=AM+ARA                                                
        AH(JJ,II)=AH(II,JJ)                                             
      ELSE                                                              
C                   IN THIS CASE WE MUST CONSIDER                       
C                   THE DIRECTIONS OF UNITVECTOR                        
C                                                                       
        ARA=APBX2(II)*ARAX+APBY2(II)*ARAY+APBZ2(II)*ARAZ                
        AH(II,JJ)=(AM+ARA)*(-1.D0)                                      
        AH(JJ,II)=AH(II,JJ)                                             
      ENDIF                                                             
C                                                                       
 2100 CONTINUE                                                          
 2000 CONTINUE                                                          
C                                                                       
C                                                                       
      NN=(NUMVAR+1)*NUMVAR                                              
CC    WRITE(21) ((AH(JJ,II),JJ=1,II),II=1,NUMVAR)                       
      RETURN                                                            
      END                                                               
C-----------------------------------------------------------------------
      SUBROUTINE KMAT(IBCHAR,KUNIT                                      
     *         ,X,Y,Z,AMASS1,AMASS2,AMASS                               
     *         ,TIXX1,TIXY1,TIXZ1,TIYY1,TIYZ1,TIZZ1                     
     *         ,TIXX2,TIXY2,TIXZ2,TIYY2,TIYZ2,TIZZ2                     
     *         ,CMSX1,CMSY1,CMSZ1,CMSX2,CMSY2,CMSZ2                     
     *         ,UVX,UVY,UVZ                                             
     *         ,BVX1,BVY1,BVZ1                                          
     *         ,ATIXX,ATIYY,ATIZZ,ATIXY,ATIYZ,ATIXZ                     
     *         ,FRNTX1,FRNTY1,FRNTZ1,FRNTX2,FRNTY2,FRNTZ2               
     *         ,BACKX1,BACKY1,BACKZ1,BACKX2,BACKY2,BACKZ2)              
C-----------------------------------------------------------------------
      IMPLICIT REAL*8 (A-H,O-Z)                                         
CMSP  INCLUDE (MAXSIZE)                                                 
      INCLUDE '/labo/qclib/inspidas/common/maxsize'
CMSP  INCLUDE (SIZE)                                                    
      INCLUDE '/labo/qclib/inspidas/common/size'
CMSP  INCLUDE (UNITNUMS)                                                
      INCLUDE '/labo/qclib/inspidas/common/unitnums'
CMSP  INCLUDE (EIGEN)                                                   
      INCLUDE '/labo/qclib/inspidas/common/eigen'
C                                                                       
C  INPUT FROM MAIN                                                      
      DIMENSION IBCHAR(3,MAXVAR)                                        
      DIMENSION KUNIT(MAXATM)                                           
C  WORKING DIMENSION IN KMAT                                            
      DIMENSION FRNTX1(MAXVAR),FRNTY1(MAXVAR),FRNTZ1(MAXVAR)            
      DIMENSION FRNTX2(MAXVAR),FRNTY2(MAXVAR),FRNTZ2(MAXVAR)            
      DIMENSION BACKX1(MAXVAR),BACKY1(MAXVAR),BACKZ1(MAXVAR)            
      DIMENSION BACKX2(MAXVAR),BACKY2(MAXVAR),BACKZ2(MAXVAR)            
C  OUTPUT OF BOND                                                       
      DIMENSION X(MAXATM),Y(MAXATM),Z(MAXATM)                           
      DIMENSION AMASS1(MAXVAR),AMASS2(MAXVAR)                           
      DIMENSION TIXX1(MAXVAR),TIXY1(MAXVAR),TIXZ1(MAXVAR)               
     *,         TIYY1(MAXVAR),TIYZ1(MAXVAR),TIZZ1(MAXVAR)               
      DIMENSION TIXX2(MAXVAR),TIXY2(MAXVAR),TIXZ2(MAXVAR)               
     *,         TIYY2(MAXVAR),TIYZ2(MAXVAR),TIZZ2(MAXVAR)               
      DIMENSION CMSX1(MAXVAR),CMSY1(MAXVAR),CMSZ1(MAXVAR)               
      DIMENSION CMSX2(MAXVAR),CMSY2(MAXVAR),CMSZ2(MAXVAR)               
      DIMENSION UVX(MAXVAR),UVY(MAXVAR),UVZ(MAXVAR)                     
      DIMENSION BVX1(MAXVAR),BVY1(MAXVAR),BVZ1(MAXVAR)                  
C OUTPUT OF KMAT                                                        
C  THIS ARRAY AH MUST BE COMMON VARIAVLE                                
C     DIMENSION AKX(MAXATM,MAXVAR)                                      
C    *         ,AKY(MAXATM,MAXVAR),AKZ(MAXATM,MAXVAR)                   
      DIMENSION AKX(MAXVAR)                                             
     *         ,AKY(MAXVAR),AKZ(MAXVAR)                                 
      DIMENSION KVX(MAXVAR)                                             
     *         ,KVY(MAXVAR),KVZ(MAXVAR)                                 
C                                                                       
      DO 1000 I=1,MAXVAR                                                
        KVX(I)=0.D0                                                     
        KVY(I)=0.D0                                                     
        KVZ(I)=0.D0                                                     
 1000 CONTINUE                                                          
C                                                                       
      DO 2000 KK=1,NUMATM                                               
        DO 3000 II=1,NUMVAR                                             
C                                                                       
C  AT FIRST WE NEED TWO KINDS OF QUANTITIES,                            
C FRNT AND BACK, PERTAINING TO A BOND                                   
C                                                                       
C  CALC OF FRNT                                                         
C                                                                       
C        CALC OF (1-M1/M)*Y                                             
C                                                                       
C        RIGID BODY-1                                                   
      RCOX1=(1.D0-AMASS1(II)/AMASS)*BVX1(II)                            
      RCOY1=(1.D0-AMASS1(II)/AMASS)*BVY1(II)                            
      RCOZ1=(1.D0-AMASS1(II)/AMASS)*BVZ1(II)                            
C                                                                       
C        RIGID BODY-2                                                   
      RCOX2=(1.D0-AMASS2(II)/AMASS)*BVX1(II)                            
      RCOY2=(1.D0-AMASS2(II)/AMASS)*BVY1(II)                            
      RCOZ2=(1.D0-AMASS2(II)/AMASS)*BVZ1(II)                            
C                                                                       
C       ADDITION M1/M*Y1                                                
C                                                                       
C        RIGID BODY-1                                                   
      RCOX1=RCOX1+AMASS1(II)/AMASS*CMSX1(II)                            
      RCOY1=RCOY1+AMASS1(II)/AMASS*CMSY1(II)                            
      RCOZ1=RCOZ1+AMASS1(II)/AMASS*CMSZ1(II)                            
C                                                                       
C        RIGID BODY-2                                                   
      RCOX2=RCOX2+AMASS2(II)/AMASS*CMSX2(II)                            
      RCOY2=RCOY2+AMASS2(II)/AMASS*CMSY2(II)                            
      RCOZ2=RCOZ2+AMASS2(II)/AMASS*CMSZ2(II)                            
C                                                                       
C      VECTOR PRODUCT OF UNIT VECTOR                                    
C      TO ABOUVE AMOUNT                                                 
C                                                                       
C        RIGID BODY-1                                                   
      FRNTX1(II)=UVY(II)*RCOZ1-UVZ(II)*RCOY1                            
      FRNTY1(II)=UVZ(II)*RCOX1-UVX(II)*RCOZ1                            
      FRNTZ1(II)=UVX(II)*RCOY1-UVY(II)*RCOX1                            
C                                                                       
C        RIGID BODY-2                                                   
      FRNTX2(II)=UVY(II)*RCOZ2-UVZ(II)*RCOY2                            
      FRNTY2(II)=UVZ(II)*RCOX2-UVX(II)*RCOZ2                            
      FRNTZ2(II)=UVX(II)*RCOY2-UVY(II)*RCOX2                            
C                                                                       
C  CALC OF NEXT AMOUNTS OF BOND                                         
C                                                                       
C      UNIT VECTOR * BOND VECTOR                                        
C                                                                       
C        RIGID BODY-1                                                   
      RCPX1=UVY(II)*BVZ1(II)-UVZ(II)*BVY1(II)                           
      RCPY1=UVZ(II)*BVX1(II)-UVX(II)*BVZ1(II)                           
      RCPZ1=UVX(II)*BVY1(II)-UVY(II)*BVX1(II)                           
C                                                                       
C        RIGID BODY-2                                                   
      RCPX2=UVY(II)*BVZ1(II)-UVZ(II)*BVY1(II)                           
      RCPY2=UVZ(II)*BVX1(II)-UVX(II)*BVZ1(II)                           
      RCPZ2=UVX(II)*BVY1(II)-UVY(II)*BVX1(II)                           
C                                                                       
C      ONCE MORE VECTOR PRODUCT OF M1*Y1                                
C         *      *         *     *         *      *                     
C        RIGID BODY-1                                                   
      RCQX1=(CMSY1(II)*RCPZ1-CMSZ1(II)*RCPY1)*AMASS1(II)                
      RCQY1=(CMSZ1(II)*RCPX1-CMSX1(II)*RCPZ1)*AMASS1(II)                
      RCQZ1=(CMSX1(II)*RCPY1-CMSY1(II)*RCPX1)*AMASS1(II)                
C                                                                       
C        RIGID BODY-2                                                   
      RCQX2=(CMSY2(II)*RCPZ2-CMSZ2(II)*RCPY2)*AMASS2(II)                
      RCQY2=(CMSZ2(II)*RCPX2-CMSX2(II)*RCPZ2)*AMASS2(II)                
      RCQZ2=(CMSX2(II)*RCPY2-CMSY2(II)*RCPX2)*AMASS2(II)                
C                                                                       
C      CALC OF I * UNIT VECTOR                                          
C         *     *                                                       
C        RIGID BODY-1                                                   
      RCRX1=TIXX2(II)*UVX(II)                                           
     *     +TIXY2(II)*UVY(II)                                           
     *     +TIXZ2(II)*UVZ(II)                                           
      RCRY1=TIXY2(II)*UVX(II)                                           
     *     +TIYY2(II)*UVY(II)                                           
     *     +TIYZ2(II)*UVZ(II)                                           
      RCRZ1=TIXZ2(II)*UVX(II)                                           
     *     +TIYZ2(II)*UVY(II)                                           
     *     +TIZZ2(II)*UVZ(II)                                           
C         *     *                                                       
C        RIGID BODY-2                                                   
      RCRX2=TIXX1(II)*UVX(II)                                           
     *     +TIXY1(II)*UVY(II)                                           
     *     +TIXZ1(II)*UVZ(II)                                           
      RCRY2=TIXY1(II)*UVX(II)                                           
     *     +TIYY1(II)*UVY(II)                                           
     *     +TIYZ1(II)*UVZ(II)                                           
      RCRZ2=TIXZ1(II)*UVX(II)                                           
     *     +TIYZ1(II)*UVY(II)                                           
     *     +TIZZ1(II)*UVZ(II)                                           
C                                                                       
C      RCQ + RCR                                                        
C         *     *     *                                                 
C        RIGID BODY-1                                                   
      RCQX1=RCQX1+RCRX1                                                 
      RCQY1=RCQY1+RCRY1                                                 
      RCQZ1=RCQZ1+RCRZ1                                                 
C                                                                       
C        RIGID BODY-2                                                   
      RCQX2=RCQX2+RCRX2                                                 
      RCQY2=RCQY2+RCRY2                                                 
      RCQZ2=RCQZ2+RCRZ2                                                 
C                                                                       
C   BACK                                                                
C          *               *                                            
C        RIGID BODY-1                                                   
      BACKX1(II)=ATIXX*RCQX1                                            
     *          +ATIXY*RCQY1                                            
     *          +ATIXZ*RCQZ1                                            
      BACKY1(II)=ATIXY*RCQX1                                            
     *          +ATIYY*RCQY1                                            
     *          +ATIYZ*RCQZ1                                            
      BACKZ1(II)=ATIXZ*RCQX1                                            
     *          +ATIYZ*RCQY1                                            
     *          +ATIZZ*RCQZ1                                            
C          *               *                                            
C        RIGID BODY-2                                                   
      BACKX2(II)=ATIXX*RCQX2                                            
     *          +ATIXY*RCQY2                                            
     *          +ATIXZ*RCQZ2                                            
      BACKY2(II)=ATIXY*RCQX2                                            
     *          +ATIYY*RCQY2                                            
     *          +ATIYZ*RCQZ2                                            
      BACKZ2(II)=ATIXZ*RCQX2                                            
     *          +ATIYZ*RCQY2                                            
     *          +ATIZZ*RCQZ2                                            
C                                                                       
C  CALC OF KMAT                                                         
C                                                                       
      JJ=KUNIT(KK)                                                      
C                                                                       
C  SELECTION OF RIGID BODY                                              
C                                                                       
      IF(IBCHAR(2,II).EQ.0) THEN                                        
C                      THE BOND ON A MAIN CHAIN                         
         IF(II.GT.JJ) THEN                                              
C                      SELECTION = RIGID BODY-1                         
                  ICASE=1                                               
         ELSE                                                           
C                      SELECTION = RIGID BODY-2                         
                  ICASE=2                                               
         ENDIF                                                          
      ELSE                                                              
C                        BOND ON A SIDE CHAIN                           
         IF(IBCHAR(1,JJ).NE.IBCHAR(1,II)) THEN                          
C                        ATOM NOT ON THE SIDE CHAIN OF THE BOND         
C                        SELECTION = RIGID BODY-1                       
                  ICASE=1                                               
         ELSE                                                           
C                        ATOM ON THE SAME SIDE CHAIN OF THE BOND        
           IF(IBCHAR(2,JJ).LT.IBCHAR(2,II)) THEN                        
C                        SELECTION = RIGID BODY-1                       
                  ICASE=1                                               
           ELSE                                                         
C                                                                       
              IF(IBCHAR(3,II).EQ.0) THEN                                
C                        BOND ON MAIN SIDE CHAIN                        
C                        SELECTION = RIGID BODY-2                       
                  ICASE=2                                               
              ELSE                                                      
C                        BOND ON A BRANCH SIDE CHAIN                    
C                        SELECTION = RIGID BODY-1                       
               IF(IBCHAR(3,JJ).GE.IBCHAR(3,II)) ICASE=2                 
               IF(IBCHAR(3,JJ).LT.IBCHAR(3,II)) ICASE=1                 
              ENDIF                                                     
           ENDIF                                                        
        ENDIF                                                           
      ENDIF                                                             
C                                                                       
      IF(ICASE.EQ.1) THEN                                               
C                                                                       
C          SELECTION = RIGID BODY-1                                     
C                                                                       
            DACKX1=BACKY1(II)*Z(KK)-BACKZ1(II)*Y(KK)                    
            DACKY1=BACKZ1(II)*X(KK)-BACKX1(II)*Z(KK)                    
            DACKZ1=BACKX1(II)*Y(KK)-BACKY1(II)*X(KK)                    
C                                                                       
C             ELEMENT OF KMAT                                           
C                                                                       
C           AKX(KK,II)=FRNTX1(II)-DACKX1                                
C           AKY(KK,II)=FRNTY1(II)-DACKY1                                
C           AKZ(KK,II)=FRNTZ1(II)-DACKZ1                                
            AKX(II)=FRNTX1(II)-DACKX1                                   
            AKY(II)=FRNTY1(II)-DACKY1                                   
            AKZ(II)=FRNTZ1(II)-DACKZ1                                   
      ELSE                                                              
C                                                                       
C          SELECTION = RIGID BODY-2                                     
C                                                                       
            DACKX2=BACKY2(II)*Z(KK)-BACKZ2(II)*Y(KK)                    
            DACKY2=BACKZ2(II)*X(KK)-BACKX2(II)*Z(KK)                    
            DACKZ2=BACKX2(II)*Y(KK)-BACKY2(II)*X(KK)                    
C                                                                       
C             ELEMENT OF KMAT                                           
C                                                                       
C           AKX(KK,II)=-FRNTX2(II)+DACKX2                               
C           AKY(KK,II)=-FRNTY2(II)+DACKY2                               
C           AKZ(KK,II)=-FRNTZ2(II)+DACKZ2                               
            AKX(II)=-FRNTX2(II)+DACKX2                                  
            AKY(II)=-FRNTY2(II)+DACKY2                                  
            AKZ(II)=-FRNTZ2(II)+DACKZ2                                  
      ENDIF                                                             
        DO 4000 J=1,NUMVAR                                              
          KVX(J)= KVX(J) + AKX(II) * EIGVEC(II,J)                       
          KVY(J)= KVY(J) + AKY(II) * EIGVEC(II,J)                       
          KVZ(J)= KVZ(J) + AKZ(II) * EIGVEC(II,J)                       
 4000   CONTINUE                                                        
 3000 CONTINUE                                                          
C                                                                       
CKM   WRITE(IOUT46) (KVX(I),I=1,NUMVAR)                                 
CKM   WRITE(IOUT46) (KVY(I),I=1,NUMVAR)                                 
CKM   WRITE(IOUT46) (KVZ(I),I=1,NUMVAR)                                 
      WRITE(IOUT46) (AKX(I),I=1,NUMVAR),(AKY(I),I=1,NUMVAR),            
     &              (AKZ(I),I=1,NUMVAR)                                 
 2000 CONTINUE                                                          
      RETURN                                                            
      END                                                               
C-----------------------------------------------------------------------
      SUBROUTINE CHWAKO (IIBND1,IIBND2,LUNIT                            
     *                ,JBTYPE,COWAKO)                                   
C-----------------------------------------------------------------------
C  READING OF PRECEP                                                    
C                                                                       
      IMPLICIT REAL*8 (A-H,O-Z)                                         
CMSP  INCLUDE (MAXSIZE)                                                 
      INCLUDE '/labo/qclib/inspidas/common/maxsize'
CMSP  INCLUDE (COORD)                                                   
      INCLUDE '/labo/qclib/inspidas/common/coord'
CMSP  INCLUDE (SIZE)                                                    
      INCLUDE '/labo/qclib/inspidas/common/size'
CMSP  INCLUDE (BOND)                                                    
      INCLUDE '/labo/qclib/inspidas/common/bond'
CMSP  INCLUDE (ATOM)                                                    
      INCLUDE '/labo/qclib/inspidas/common/atom'
CMSP  INCLUDE (NBTYPE)                                                  
      INCLUDE '/labo/qclib/inspidas/common/nbtype'
C                                                                       
C OUTPUT OF CHWAKO                                                      
C ATTENTION IIBND2 DOESNOT HAVE THE SAME ARRAY SIZE AS IBND2            
      DIMENSION IIBND1(MAXVAR),IIBND2(MAXVAR)                           
      DIMENSION LUNIT(MAXATM),JBTYPE(MAXATM)                            
      DIMENSION COWAKO(MAXATM,3)                                        
C OUTPUT OF INRUT                                                       
C     DIMENSION IBND1(MAXVAR),IBND2(MAXVAR)                             
C     DIMENSION IBCHAR(3,MAXVAR),COWAKO(MAXATM,3)                       
C     DIMENSION KUNIT(MAXATM),NBTYPE(MAXATM)                            
C WORKING DIMENSION OF INPUT                                            
C     DIMENSION KATOM(MAXATM)                                           
C                                                                       
      DO 1000 II=1,NUMVAR                                               
        NN1=IBND1(II)                                                   
        NN2=IBND2(II)                                                   
        IIBND1(II)=KATOM(NN1)                                           
        IIBND2(II)=KATOM(NN2)                                           
 1000 CONTINUE                                                          
C                                                                       
      DO 2000 JJ=1,NUMATM                                               
C                                                                       
        KK=KATOM(JJ)                                                    
        NA1=KUNIT(JJ)                                                   
        NA2=NBTYPE(JJ)                                                  
        LUNIT(KK)=NA1                                                   
        JBTYPE(KK)=NA2                                                  
 2000 CONTINUE                                                          
C                                                                       
      DO 4000 JJ=1,NUMATM                                               
        KK=KATOM(JJ)                                                    
        DO 4100 LL=1,3                                                  
          COWAKO(KK,LL)=CO(LL,JJ)                                       
 4100   CONTINUE                                                        
 4000 CONTINUE                                                          
      RETURN                                                            
      DEBUG SUBCHK                                                      
      END                                                               
C-----------------------------------------------------------------------
       SUBROUTINE DIAG                                                  
C-----------------------------------------------------------------------
C SOLVE THE GENERALIZED EIGEN VALUE EQUATION                            
C      FV = HVE                                                         
C           F :SECOND-DERIVATIVE MATRIX                                 
C           H :KINETIC ENRGY MATRIX                                     
C           V :EIGEN VECTOR MATRIX                                      
C           E :EIGEN VALUE MATRIX                                       
C BY USEING LIBRARY PROGRAM NICER.                                      
C (REFERENCE)                                                           
C    BEPPU & NINOMIYA,(1981) COMP.PHYS.COM.23,123-126                   
C                                                                       
      IMPLICIT REAL*8(A-H,O-Z)                                          
CMSP  INCLUDE (MAXSIZE)                                                 
      INCLUDE '/labo/qclib/inspidas/common/maxsize'
CMSP  INCLUDE (SIZE)                                                    
      INCLUDE '/labo/qclib/inspidas/common/size'
CMSP  INCLUDE (HMATRIX)                                                 
      INCLUDE '/labo/qclib/inspidas/common/hmatrix'
CMSP  INCLUDE (FMATRIX)                                                 
      INCLUDE '/labo/qclib/inspidas/common/fmatrix'
CMSP  INCLUDE (EIGEN)                                                   
      INCLUDE '/labo/qclib/inspidas/common/eigen'
CMSP  INCLUDE (UNITNUMS)                                                
      INCLUDE '/labo/qclib/inspidas/common/unitnums'
      DIMENSION AB(MAXVAR,MAXVAR),BD(MAXVAR),                           
     &          W1(MAXVAR),W2(MAXVAR),W3(MAXVAR),W4(MAXVAR),            
     &          W5(MAXVAR),W6(MAXVAR),W7(MAXVAR)                        
C                                                                       
C AB : THE RIGHT UPPER HALF ELEMENTS (INCLUDING THE DIAGONAL ELEMENTS ) 
C      ARE THOSE OF F-MATRIX AND                                        
C      THE LEFT LOWER HALF ELEMENTS ARE THOSE OF H-MATRIX               
C BD : BD(I) = H(I,I)                                                   
C                                                                       
      DO 100 I=2,NUMVAR                                                 
        DO 110 J=1,I-1                                                  
          AB(I,J)=AH(I,J)                                               
  110   CONTINUE                                                        
  100 CONTINUE                                                          
      K=0                                                               
      DO 200 J=1,NUMVAR                                                 
        DO 210 I=1,J                                                    
          K=K+1                                                         
          AB(I,J)=G(K)                                                  
  210   CONTINUE                                                        
  200  CONTINUE                                                         
       DO 300 I=1,NUMVAR                                                
         BD(I)=AH(I,I)                                                  
  300  CONTINUE                                                         
C                                                                       
C EIGEN VALUES AND EIGEN VECTORS                                        
C EIGEN VALUES ARE ORDERED FROM THE SMALLEST VALUE (IORD=-1)            
C                                                                       
      ICHO=0                                                            
      IORD=-1                                                           
      EPS=1.E-10                                                        
      CALL NGHOUD(AB,MAXVAR,NUMVAR,NUMVAR,NUMVAR,                       
     &            EPS,IORD,ICHO,BD,EIGVAL,EIGVEC,ILL,                   
     &            W1,W2,W3,W4,W5,W6,W7)                                 
      IF (ILL .NE. 0) THEN                                              
        WRITE(IOUT06,*) ' STOPPED AT NGHOUD BECAUSE ILL=' ,ILL          
        STOP                                                            
      END IF                                                            
C                                                                       
      RETURN                                                            
      END                                                               
C-----------------------------------------------------------------------
      SUBROUTINE OUTGR(IOUT,COLMS)                                      
C-----------------------------------------------------------------------
      IMPLICIT REAL*8(A-H,O-Z)                                          
      INTEGER IOUT, COLMS                                               
C                                                                       
C INITIALIZE                                                            
C ----------                                                            
      PARAMETER(PI = 3.1415926535)                                      
      PARAMETER(C  = 2.9979E10 )                                        
CMSP  INCLUDE (MAXSIZE)                                                 
      INCLUDE '/labo/qclib/inspidas/common/maxsize'
CMSP  INCLUDE (SIZE)                                                    
      INCLUDE '/labo/qclib/inspidas/common/size'
CMSP  INCLUDE (EIGEN)                                                   
      INCLUDE '/labo/qclib/inspidas/common/eigen'
CMSP  INCLUDE (UNITNUMS)                                                
      INCLUDE '/labo/qclib/inspidas/common/unitnums'
C                                                                       
      REAL*8 NWN,XWN                                                    
      DIMENSION NWN(128), XWN(128)                                      
      REAL*8 WN(MAXVAR),MAXWN,MINWN,DWN                                 
      INTEGER OUTRNG                                                    
C                                                                       
C GET MAXIMUM & MINIMUM VALUE OF WN(I)                                  
C ------------------------------------                                  
      WN(1)=SQRT(4.1855E26 * EIGVAL(1))/(2*PI*C)                        
      MAXWN = WN(1)                                                     
      MINWN = WN(1)                                                     
      DO 991 I=2,NUMVAR                                                 
        WN(I)=SQRT(4.1855E26 * EIGVAL(I))/(2*PI*C)                      
        IF (MAXWN.LT.WN(I)) THEN                                        
          MAXWN = WN(I)                                                 
        END IF                                                          
        IF (MINWN.GT.WN(I)) THEN                                        
          MINWN = WN(I)                                                 
        END IF                                                          
  991 CONTINUE                                                          
C                                                                       
C SET MAXIMUM VALUE (SPECIAL)                                           
C ---------------------------                                           
      MAXWN = 1000.0                                                    
C                                                                       
C SET DWN (REMARK : NOT TO LOSE MAXIMUM, DEVIDE (MAX-MIN) BY (COLMS-1).)
C --------                                                              
      DWN = (MAXWN - MINWN) / (COLMS - 1)                               
                                                                        
C                                                                       
C SET MID_VALUE(XWN(I)) & CLEAR COUNTER(NWN(I))                         
C ---------------------------------------------                         
      DO 993 I=1,COLMS                                                  
        XWN(I) = MINWN + (I-0.5) * DWN                                  
        NWN(I) = 0.0                                                    
  993 CONTINUE                                                          
C                                                                       
C COUNTING                                                              
C --------                                                              
      OUTRNG = 0                                                        
      DO 992 I=1,NUMVAR                                                 
        J = INT((WN(I) - MINWN) / DWN) + 1                              
        IF (J.LE.COLMS) THEN                                            
          NWN(J) = NWN(J) + 1                                           
        ELSE                                                            
          OUTRNG = OUTRNG + 1                                           
        END IF                                                          
  992 CONTINUE                                                          
C                                                                       
C OUTPUT HISTGRAM                                                       
C ---------------                                                       
      CALL GRAPH(IOUT,'HIST','WAVE_NUMBER HISTGRAM',COLMS+12,22         
     &           ,COLMS                                                 
     &           ,XWN,5,'WAVE NUMBER'                                   
     &           ,NWN,3,'NUMBER')                                       
      WRITE(IOUT,600) OUTRNG                                            
  600 FORMAT(' ',I5,' DATA ARE OUT OF RANGE.')                          
      END                                                               
./ ADD NAME=NMANAL
./ NUMBER NEW1=10,INCR=10
C////////////////////////////////////////////////////////////////////// 
C ANALYSIS OF THE RESULTS OBTAINED BY SOLVING THE GENERALIZED           
C EIGENVALUE PROBLEM.                                                   
C                                                                       
C  1989 MADE BY J-F.GIBRAT                                              
C  1990 MODIFIED AND INSTALLED BY K.MIZUGUCHI                           
C                                                                       
C INPUT FILES:  41 ==> PRECEP OUTPUT (INFORMATION ABOUT THE MOLECULE)   
C               43 ==> EIGENVECTORS                                     
C               43 ==> EIGENVALUES                                      
C               45 ==> KMATRIX                                          
C                                                                       
C OUTPUT FILES: 48 ==> M.S. FLUCTUATIONS (IN DEGREE) OF THE PHI, PSI,   
C                      OMEGA, KHI ANGLES                                
C               50 ==> PEAK  REQUENCY FOR PHI, PSI AND OMEGA            
C               52 ==> M.S. FLUCTUATIONS OF CA CONTRIBUTED BY FREQ BELOW
C                      A GIVEN THRESHOLD THRSH                          
C               54 ==> CHARACTERISTIC FREQUENCIES FOR THE SECONDARY     
C                      STRUCTURES: H, E, T                              
C               56 ==> M.S. FLUCTUATIONS OF CA ATOMS CONTRIBUTED BY     
C                      LOW FREQUENCY MODES (1ST TO IFRMX-TH).           
C               58 ==> AVERAGE FLUCTUATION OF CA AND BACKBONE ANGLES    
C                      AS A FUNCTION OF THE FREQUENCIES                 
C               60 ==> DISPLACEMENT VECTORS FOR ALL THE ATOMS           
C               62 ==> M.S. FLUCTUATIONS OF PHI, PSI & OMEGA ANGLES     
C                      CONTRIBUTED BY LOW FREQUENCY MODES.              
C               64 ==> M.S. FLUCTUATIONS OF N, CA, CB, C, O ATOMS       
C                      FOR COMPARISON WITH THE TEMPERATURE B FACTOR     
C                                                                       
C FILE 5 CONTAINS SOME CONTROL PARAMETERS                               
C                                                                       
C/////////////////////////////////////////////////////////////////////  
C                                                                       
      SUBROUTINE ANALYS                                                 
C                                                                       
      IMPLICIT REAL*8 (A-H,O-Z)                                         
C                                                                       
CMSP  INCLUDE (MAXSIZE)                                                 
      INCLUDE '/labo/qclib/inspidas/common/maxsize'
CMSP  INCLUDE (SIZE)                                                    
      INCLUDE '/labo/qclib/inspidas/common/size'
CMSP  INCLUDE (COMMAND)                                                 
      INCLUDE '/labo/qclib/inspidas/common/command'
CMSP  INCLUDE (UNITNUMS)                                                
      INCLUDE '/labo/qclib/inspidas/common/unitnums'
      PARAMETER(NBMODE=10)                                              
C                                                                       
C  FOR PRECEP OUTPUT                                                    
C                                                                       
CKM   DIMENSION INDXV(MAXVAR),JBTYPE(MAXATM),LUNIT(MAXATM),KATOM(MAXATM)
CKM   DIMENSION NBTYPE(MAXATM),KUNIT(MAXATM)                            
CMSP  INCLUDE (VARANG)                                                  
      INCLUDE '/labo/qclib/inspidas/common/varang'
CKM        ANGRAD(10,MAXRES),VAR(MAXVAR),INDXV(MAXVAR),ANGLES(10,MAXRES)
CMSP  INCLUDE (ATOM)                                                    
      INCLUDE '/labo/qclib/inspidas/common/atom'
CKM        KUNIT(MAXATM),KATOM(MXATM1)                                  
CMSP  INCLUDE (NBTYPE)                                                  
      INCLUDE '/labo/qclib/inspidas/common/nbtype'
CKM        NBTYPE(MAXATM)                                               
CMSP  INCLUDE (ALPHA)                                                   
      INCLUDE '/labo/qclib/inspidas/common/alpha'
CKM        ATNAME(MAXATM),RENAME(MAXATM),NMBRES(MAXATM),TITLE           
C                                                                       
C EIGEN VALUES AND EIGEN VECTORS                                        
CMSP  INCLUDE (EIGEN)                                                   
      INCLUDE '/labo/qclib/inspidas/common/eigen'
CKM        EIGVAL(MAXVAR),EIGVEC(MAXVAR,MAXVAR)                         
C                                                                       
C K-MATRIX                                                              
C                                                                       
CKM   DIMENSION AKX(MAXATM,MAXVAR),AKY(MAXATM,MAXVAR),AKZ(MAXATM,MAXVAR)
      DIMENSION AKX(MAXVAR),AKY(MAXVAR),AKZ(MAXVAR)                     
C  FOR PARSER                                                           
      CHARACTER*4 SSTAS,NXTWD                                           
      CHARACTER*20 FORMA                                                
      CHARACTER*80 NAME                                                 
C                                                                       
C WORK ARRAYS                                                           
      DIMENSION FLUPHI(MAXRES),FLUPSI(MAXRES),FLUOME(MAXRES)            
      DIMENSION FLUKHI(400)                                             
      DIMENSION NPK1(MAXRES),NPK2(MAXRES),NPK3(MAXRES)                  
      DIMENSION FLUCA(2,MAXRES)                                         
      DIMENSION FLCM(MAXVAR),FLCMH(MAXVAR),FLCME(MAXVAR),FLCMT(MAXVAR)  
      DIMENSION IZONEH(2,20),IZONEE(2,20),IZONET(2,20)                  
      DIMENSION FLFRQ(MAXRES,15)                                        
      DIMENSION ACAFRQ(MAXVAR),AANFRQ(MAXVAR)                           
      DIMENSION DX(MAXATM,NBMODE),DY(MAXATM,NBMODE),DZ(MAXATM,NBMODE)   
      DIMENSION MODSTR(NBMODE)                                          
      DIMENSION PHINM(MAXRES,NBMODE),PSINM(MAXRES,NBMODE),              
     +          OMENM(MAXRES,NBMODE)                                    
      DIMENSION BFACTR(MAXRES)                                          
C                                                                       
      DATA RKB/1.987D-3/                                                
      DATA PI/3.141592653589793D0/                                      
CKM   DATA BFACTR/NUMRES*0.D0/                                          
      DATA BFACTR/MAXRES*0.D0/                                          
C                                                                       
      DEG=180.D0/PI                                                     
      IKMAT=0                                                           
C                                                                       
C-----GET KEYWORD                                                       
C                                                                       
  999 CONTINUE                                                          
      CALL NXTCMN(SSTAS)                                                
      IF(SSTAS.EQ.'END ') GOTO 1090                                     
C                                                                       
C-----R E A D   I N   P R E C E P   O U T P U T   D A T A --------------
C                     (FROM UNIT 41)                                    
      IF (SSTAS.EQ.'READ') THEN                                         
        WRITE(IOUT02,'(/,5X,A,/)') ' NEXT SUBSUBTASK : READ '           
        WRITE(IOUT06,'(/,5X,A,/)') ' NEXT SUBSUBTASK : READ '           
        CALL NXTWRD(COMLY2,COMLEN,NXTWD,4)                              
        IF(NXTWD.EQ.'PREC') THEN                                        
          CALL GTFLNM(NAME)                                             
          CALL OPENRD(IN41,'FORMATTED',NAME,IOUT06)                     
          WRITE(IOUT06,1000) NXTWD,NAME                                 
 1000     FORMAT(5X,A4,' READ FROM ',A60)                               
          CALL RDPREC(IN41)                                             
          CLOSE (IN41)                                                  
          WRITE(IOUT02,1100) NAME                                       
 1100     FORMAT (5X,'PRECEP OUTPUT DATA ARE READ IN FROM FILE: ',A60)  
        END IF                                                          
C-----R E A D   I N   E I G E N   V A L U E S   A N D   E I G E N ------
C     V E C T O R S                                                     
C                     (FROM UNIT43)                                     
        IF(NXTWD.EQ.'EIGE') THEN                                        
          CALL GTFLNM(NAME)                                             
          CALL OPENRD(IN43,'UNFORMATTED',NAME,IOUT06)                   
          WRITE(IOUT06,2000) NXTWD,NAME                                 
 2000     FORMAT(5X,A4,' READ FROM ',A60)                               
          CALL GTEIG(IN43)                                              
          CLOSE (IN43)                                                  
          WRITE(IOUT02,2100) NAME                                       
 2100     FORMAT (5X,'EIGEN VALUES AND EIGEN VECTORS ARE READ IN ',     
     &            'FROM FILE: ',A60)                                    
        END IF                                                          
C-----R E A D   I N   K - M A T R I X ----------------------------------
C                     (FROM UNIT45)                                     
        IF(NXTWD.EQ.'KMAT') THEN                                        
          CALL GTFLNM(NAME)                                             
          CALL OPENRD(IN45,'UNFORMATTED',NAME,IOUT06)                   
          WRITE(IOUT06,3000) NXTWD,NAME                                 
 3000     FORMAT(5X,A4,' READ FROM ',A60)                               
          IKMAT=1                                                       
          WRITE(IOUT02,3100) NAME                                       
 3100     FORMAT (5X,'K-MATRIX IS READ IN FROM FILE: ',A60)             
        END IF                                                          
        GOTO 999                                                        
      END IF                                                            
C                                                                       
C-----R E A D   I N   C O N T R O L   P A R A M E T E R S --------------
C                                                                       
C  TEMP   = TEMPERATURE IN K                                            
C  THRESH = FREQUENCY IN CM-1 ( CONTRIBUTION OF FREQ. BELOW THIS        
C           THRESHOLD TO THE M.S. FLUCT. OF CA ATOMS)                   
C  NZX    = NUMBER OF ELEMENTS OF SEC. STRUCTURE X IN THE PROTEIN       
C  IZONEX = THIS ARRAY CONTAINS THE FIRST AND LAST RESIDUES OF EACH     
C           ELEMENT OF SECONDARY STRUCTURE X IN THE PROTEIN.            
C  IFRMX  = NUMBER OF FREQUENCIES FOR WHICH THE M.S. FLUCTUATIONS OF    
C           THE CA ARE COMPUTED                                         
C  NBMOD  = NUMBER OF FREQUENCIES FOR WHICH THE DEPLACEMENT VECTORS     
C           ARE COMPUTED                                                
C  MODSTR = ARRAY CONTAINING THE NUMBER OF THE FREQUENCIES FOR WHICH    
C           THE DISPLACEMENT VECTORS ARE COMPUTED                       
C                                                                       
      IF (SSTAS.EQ.'INPU') THEN                                         
        WRITE(IOUT02,'(/,5X,A,A,/)') ' NEXT SUBSUBTASK : INPUT '        
        WRITE(IOUT06,'(/,5X,A,A,/)') ' NEXT SUBSUBTASK : INPUT '        
        CALL NXTWRD(COMLY2,COMLEN,NXTWD,4)                              
        IF(NXTWD.EQ.'CNTL') THEN                                        
          CALL GETPAF(COMLY2,COMLEN,'TEMP',4,' ',0,TEMP)                
          WRITE(IOUT06,'(1X,A,F7.2,A)') 'TEMPERATURE: ',TEMP, 'K'       
          WRITE(IOUT02,'(1X,A,F7.2,A)') 'TEMPERATURE: ',TEMP, 'K'       
          RT=TEMP*RKB                                                   
          CALL GETPAF(COMLY2,COMLEN,'THRESH',6,' ',0,THRESH)            
          WRITE(IOUT06,'(1X,A,F7.2,A)') 'THRESHOLD :',THRESH,' CM-1'    
          WRITE(IOUT02,'(1X,A,F7.2,A)') 'THRESHOLD :',THRESH,' CM-1'    
CKM                                                                     
          CALL GETPAI(COMLY2,COMLEN,'NZH',3,' ',0,NZH)                  
          IF(NZH.GT.20) THEN                                            
            PRINT *,'YOU HAVE TO INCREASE THE SIZE OF ARRAY IZONEH'     
          ENDIF                                                         
          DO 503 J=1,NZH                                                
            CALL GETPAI(COMLY2,COMLEN,'HS',2,' ',0,IZONEH(1,J))         
            CALL GETPAI(COMLY2,COMLEN,'HE',2,' ',0,IZONEH(2,J))         
 503      CONTINUE                                                      
          WRITE(IOUT06,'(1X,A,I4)') 'NUMBER OF HELICES: ',NZH           
          WRITE(IOUT06,511) ((IZONEH(I,J),J=1,NZH),I=1,2)               
CKM                                                                     
          CALL GETPAI(COMLY2,COMLEN,'NZE ',4,' ',0,NZE)                 
          IF(NZE.GT.20) THEN                                            
            PRINT *,'YOU HAVE TO INCREASE THE SIZE OF ARRAY IZONEE'     
          ENDIF                                                         
          DO 505 J=1,NZH                                                
            CALL GETPAI(COMLY2,COMLEN,'SS',2,' ',0,IZONEE(1,J))         
            CALL GETPAI(COMLY2,COMLEN,'SE',2,' ',0,IZONEE(2,J))         
 505      CONTINUE                                                      
          WRITE(IOUT06,'(1X,A,I4)') 'NUMBER OF BETA SHEETS: ',NZE       
          WRITE(IOUT06,511) ((IZONEE(I,J),J=1,NZE),I=1,2)               
CKM                                                                     
          CALL GETPAI(COMLY2,COMLEN,'NZT ',4,' ',0,NZT)                 
          IF(NZT.GT.20) THEN                                            
            PRINT *,'YOU HAVE TO INCREASE THE SIZE OF ARRAY IZONET'     
          ENDIF                                                         
          DO 507 J=1,NZT                                                
            CALL GETPAI(COMLY2,COMLEN,'TS',2,' ',0,IZONET(1,J))         
            CALL GETPAI(COMLY2,COMLEN,'TE',2,' ',0,IZONET(2,J))         
 507      CONTINUE                                                      
          WRITE(IOUT06,'(1X,A,I4)') 'NUMBER OF TURNS: ',NZT             
          WRITE(IOUT06,511) ((IZONET(I,J),J=1,NZT),I=1,2)               
 511      FORMAT(1X,20I4)                                               
CKM                                                                     
          CALL GETPAI(COMLY2,COMLEN,'IFRMX',5,' ',0,IFRMX)              
          WRITE(IOUT06,'(1X,A,I5)') 'IFRMX :',IFRMX                     
          WRITE(IOUT02,'(1X,A,I5)') 'IFRMX :',IFRMX                     
          IF(IFRMX.GT.15) THEN                                          
            PRINT *,'YOU HAVE TO INCREASE THE SIZE OF ARRAY FLFRQ'      
            STOP                                                        
          ENDIF                                                         
CKM                                                                     
C         CALL GETPAI(COMLY2,COMLEN,'NBMOD ',6,' ',0,NBMOD)             
C         PRINT *,'NBMOD: ',NBMOD                                       
C         IF(NBMOD.GT.10) THEN                                          
C           PRINT *,'THE MAXIMUM NUMBER OF MODES YOU CAN SELECT IS 10'  
C           STOP                                                        
C         ENDIF                                                         
CKM                                                                     
          CALL GETPAI(COMLY2,COMLEN,'NBMOD ',6,' ',0,NBMOD)             
          DO 509 I=1,NBMOD                                              
            CALL GETPAI(COMLY2,COMLEN,'MODSTR',6,' ',0,MODSTR(I))       
 509      CONTINUE                                                      
          WRITE(IOUT06,'(1X,20I4)') (MODSTR(I),I=1,NBMOD)               
CKM                                                                     
          CALL GETPAI(COMLY2,COMLEN,'NMOD',4,' ',0,NMOD)                
          IF(NMOD.GT.NBMODE) THEN                                       
            PRINT *,'TO MANY MODES SELECTED, THE LIMIT IS: ',NBMODE     
            STOP                                                        
          ENDIF                                                         
          WRITE(IOUT06,'(1X,A,I5)') 'NMOD :',NMOD                       
          WRITE(IOUT02,'(1X,A,I5)') 'NMOD :',NMOD                       
        END IF                                                          
        GOTO 999                                                        
      END IF                                                            
C                                                                       
C-----INPUT OF THE DATA NEEDED                                          
C                                                                       
CKMEIGEN VECTORS                                                        
C     READ(10) EIGVEC                                                   
C  EIGENVALUES                                                          
C     READ(11) EIGVAL                                                   
C     K MATRIX                                                          
C     READ(13) I1,I2                                                    
C     READ(13) AKX                                                      
C     READ(13) AKY                                                      
C     READ(13) AKZ                                                      
C                                                                       
C                                                                       
C-----C O M M A N D   S E C T I O N ------------------------------------
C                                                                       
      IF (SSTAS.EQ.'COM1') THEN                                         
        WRITE(IOUT02,'(/,5X,A,A,/)') ' NEXT SUBSUBTASK :',              
     &        ' FLUCTUATIONS OF PHI, PSI, OMEGA AND KHI'                
        WRITE(IOUT06,'(/,5X,A,A,/)') ' NEXT SUBSUBTASK :',              
     &        ' FLUCTUATIONS OF PHI, PSI, OMEGA AND KHI'                
        CALL GTFLNM(NAME)                                               
        CALL NXTWRD(COMLY2,COMLEN,NXTWD,4)                              
        FORMA='FORMATTED'                                               
CKM     IF (NXTWD.EQ.'OVER') FORMA='OVERWRITE  '                        
        CALL OPENWT(IOUT48,FORMA,NAME,IOUT06)                           
        WRITE(IOUT06,6801) NXTWD,NAME                                   
 6801   FORMAT(5X,A4,' WRITTEN TO ',A60)                                
        WRITE(IOUT02,6901) NAME                                         
 6901   FORMAT (5X,'WRITTEN TO FILE:',A60)                              
C                                                                       
C*****STEP 1: FLUCTUATIONS OF PHI, PSI, OMEGA AND KHI                   
C                                                                       
      IK=0                                                              
      N1=0                                                              
      N2=0                                                              
      N3=0                                                              
C                                                                       
      DO 100 IV=1,NUMVAR                                                
C                                                                       
C  TEST FOR THE ANGLE TYPE: K=1 ==> PHI, K=2 ==> PSI, K=3 ==> OMEGA     
      IR=INDXV(IV)/100                                                  
      K=INDXV(IV)-100*IR                                                
C                                                                       
      IF(K.EQ.1) THEN                                                   
C                                                                       
        N1=N1+1                                                         
        DO 60 NM=1,NUMVAR                                               
          FLUPHI(IR)=FLUPHI(IR)+RT*(EIGVEC(IV,NM)*DEG)**2/EIGVAL(NM)    
 60     CONTINUE                                                        
C                                                                       
      ELSE IF(K.EQ.2) THEN                                              
C                                                                       
        N2=N2+1                                                         
        DO 70 NM=1,NUMVAR                                               
          FLUPSI(IR)=FLUPSI(IR)+RT*(EIGVEC(IV,NM)*DEG)**2/EIGVAL(NM)    
 70     CONTINUE                                                        
C                                                                       
      ELSE IF(K.EQ.3) THEN                                              
C                                                                       
        N3=N3+1                                                         
        DO 80 NM=1,NUMVAR                                               
          FLUOME(IR)=FLUOME(IR)+RT*(EIGVEC(IV,NM)*DEG)**2/EIGVAL(NM)    
 80     CONTINUE                                                        
C                                                                       
      ELSE                                                              
C                                                                       
        IK=IK+1                                                         
        DO 90 NM=1,NUMVAR                                               
          FLUKHI(IK)=FLUKHI(IK)+RT*(EIGVEC(IV,NM)*DEG)**2/EIGVAL(NM)    
 90     CONTINUE                                                        
C                                                                       
      ENDIF                                                             
C                                                                       
 100  CONTINUE                                                          
C                                                                       
CKM   WRITE(IOUT48) (FLUPHI(I),I=1,NUMRES),(FLUPSI(I),I=1,NUMRES),      
CKM  &              (FLUOME(I),I=1,NUMRES),IK,(FLUKHI(I),I=1,IK)        
C                                                                       
      DO 200 I=1,NUMRES                                                 
        WRITE(IOUT48,'(1X,3F10.3)') FLUPHI(I),FLUPSI(I),FLUOME(I)       
  200 CONTINUE                                                          
      WRITE(IOUT48,'(1X,I5)') IK                                        
      WRITE(IOUT48,'(10F8.3)') (FLUKHI(I),I=1,IK)                       
C                                                                       
C-----AVERAGED FLUCTUATIONS                                             
C                                                                       
      PHIFL=0.0                                                         
      PSIFL=0.0                                                         
      OMEFL=0.0                                                         
      CHIFL=0.0                                                         
      DO 210 IR=2,NUMRES-1                                              
        PHIFL=PHIFL+FLUPHI(IR)                                          
        PSIFL=PSIFL+FLUPSI(IR)                                          
        OMEFL=OMEFL+FLUOME(IR)                                          
 210  CONTINUE                                                          
      PHIFL=PHIFL/FLOAT(N1)                                             
      PSIFL=PSIFL/FLOAT(N2)                                             
      OMEFL=OMEFL/FLOAT(N3)                                             
C                                                                       
      DO 220 K=1,IK                                                     
        CHIFL=CHIFL+FLUKHI(K)                                           
 220  CONTINUE                                                          
      CHIFL=CHIFL/FLOAT(IK)                                             
C                                                                       
      WRITE(IOUT06,211) PHIFL,PSIFL,OMEFL,CHIFL                         
      WRITE(IOUT02,211) PHIFL,PSIFL,OMEFL,CHIFL                         
 211  FORMAT(1X,'AVERAGE MEAN SQUARE FLUCTUATIONS FOR THE PHI:',F6.1/   
     + 1X,'AVERAGE MEAN SQUARE FLUCTUATIONS FOR THE PSI:',F6.1/         
     + 1X,'AVERAGE MEAN SQUARE FLUCTUATIONS FOR THE OMEGA:',F6.1/       
     + 1X,'AVERAGE MEAN SQUARE FLUCTUATIONS FOR THE KHI:',F6.1)         
C                                                                       
        CLOSE (IOUT48)                                                  
        GOTO 999                                                        
      END IF                                                            
C                                                                       
C*****STEP 2: PEAK FREQUENCY IN THE FLUCTUATIONS OF THE BACKBONE ANGLES 
C                                                                       
      IF (SSTAS.EQ.'COM2') THEN                                         
        WRITE(IOUT02,'(/,5X,A,A,/)') ' NEXT SUBSUBTASK :',              
     &     ' PEAK FREQUENCY IN THE FLUCTUATIONS OF THE BACKBONE ANGLES' 
        WRITE(IOUT06,'(/,5X,A,A,/)') ' NEXT SUBSUBTASK :',              
     &     ' PEAK FREQUENCY IN THE FLUCTUATIONS OF THE BACKBONE ANGLES' 
        CALL GTFLNM(NAME)                                               
        CALL NXTWRD(COMLY2,COMLEN,NXTWD,4)                              
        FORMA='FORMATTED'                                               
CKM     IF (NXTWD.EQ.'OVER') FORMA='OVERWRITE  '                        
        CALL OPENWT(IOUT50,FORMA,NAME,IOUT06)                           
        WRITE(IOUT06,7001) NXTWD,NAME                                   
 7001   FORMAT(5X,A4,' WRITTEN TO ',A60)                                
        WRITE(IOUT02,7101) NAME                                         
 7101   FORMAT (5X,'WRITTEN TO FILE:',A60)                              
C                                                                       
      DO 400 IV=1,NUMVAR                                                
C                                                                       
C  TEST FOR THE ANGLE TYPE: K=1 ==> PHI, K=2 ==> PSI, K=3 ==> OMEGA     
      IR=INDXV(IV)/100                                                  
      K=INDXV(IV)-100*IR                                                
C                                                                       
      IF(K.EQ.1) THEN                                                   
C                                                                       
        FLMAX=0.                                                        
        DO 360 NM=1,NUMVAR                                              
          FL=RT*(EIGVEC(IV,NM)*DEG)**2/EIGVAL(NM)                       
          IF(FL.GT.FLMAX) THEN                                          
             FLMAX=FL                                                   
             NPK1(IR)=NM                                                
          ENDIF                                                         
 360    CONTINUE                                                        
C                                                                       
      ELSE IF(K.EQ.2) THEN                                              
C                                                                       
        FLMAX=0.                                                        
        DO 370 NM=1,NUMVAR                                              
          FL=RT*(EIGVEC(IV,NM)*DEG)**2/EIGVAL(NM)                       
          IF(FL.GT.FLMAX) THEN                                          
             FLMAX=FL                                                   
             NPK2(IR)=NM                                                
          ENDIF                                                         
 370    CONTINUE                                                        
C                                                                       
      ELSE IF(K.EQ.3) THEN                                              
C                                                                       
        FLMAX=0.                                                        
        DO 380 NM=1,NUMVAR                                              
          FL=RT*(EIGVEC(IV,NM)*DEG)**2/EIGVAL(NM)                       
          IF(FL.GT.FLMAX) THEN                                          
             FLMAX=FL                                                   
             NPK3(IR)=NM                                                
          ENDIF                                                         
 380    CONTINUE                                                        
C                                                                       
      ENDIF                                                             
C                                                                       
 400  CONTINUE                                                          
C                                                                       
      DO 420 I=1,NUMRES                                                 
        WRITE(IOUT50,'(1X,3I8)') NPK1(I),NPK2(I),NPK3(I)                
 420  CONTINUE                                                          
CKM   WRITE(IOUT50) (NPK1(I),I=1,NUMRES),(NPK2(I),I=1,NUMRES),          
CKM  &              (NPK3(I),I=1,NUMRES)                                
CKM   WRITE(IOUT50) NPK1,NPK2,NPK3                                      
C                                                                       
        CLOSE (IOUT50)                                                  
        GOTO 999                                                        
      END IF                                                            
C                                                                       
C*****STEP 3: CONTRIBUTION OF FREQUENCIES BELOW A GIVEN THRESHOLD TO    
C     THE MEAN SQUARE FLUCTUATIONS OF CA                                
C                                                                       
      IF (SSTAS.EQ.'COM3') THEN                                         
        WRITE(IOUT02,'(/,5X,A,A,/)') ' NEXT SUBSUBTASK :',              
     &     ' M.S. FLUCTUATIONS OF CA BY FREQ. BELOW A THRESHOLD VALUE'  
        WRITE(IOUT06,'(/,5X,A,A,/)') ' NEXT SUBSUBTASK :',              
     &     ' M.S. FLUCTUATIONS OF CA BY FREQ. BELOW A THRESHOLD VALUE'  
        CALL GTFLNM(NAME)                                               
        CALL NXTWRD(COMLY2,COMLEN,NXTWD,4)                              
        FORMA='FORMATTED'                                               
CKM     IF (NXTWD.EQ.'OVER') FORMA='OVERWRITE  '                        
        CALL OPENWT(IOUT52,FORMA,NAME,IOUT06)                           
        WRITE(IOUT06,7002) NXTWD,NAME                                   
 7002   FORMAT(5X,A4,' WRITTEN TO ',A60)                                
        WRITE(IOUT02,7102) NAME                                         
 7102   FORMAT (5X,'WRITTEN TO FILE:',A60)                              
C                                                                       
      WRITE(IOUT06,'(1X,A,F7.2,A)') 'THRESHOLD :',THRESH,' CM-1'        
      WRITE(IOUT02,'(1X,A,F7.2,A)') 'THRESHOLD :',THRESH,' CM-1'        
C                                                                       
      IR=1                                                              
      FACT=DSQRT(4.184D0)/(2.997925D0*PI*2.D0)*1.D+3                    
C                                                                       
      DO 500 IAT=1,NUMATM                                               
CKM                                                                     
C READ IN K-MATRIX                                                      
C                                                                       
      READ(IN45) (AKX(I),I=1,NUMVAR),(AKY(I),I=1,NUMVAR),               
     &           (AKZ(I),I=1,NUMVAR)                                    
C                                                                       
      IF(ATNAME(IAT).EQ.'CA') THEN                                      
         IR=IR+1                                                        
C  LOOP ON THE MODES                                                    
         DO 490 NM=1,NUMVAR                                             
           ETMP=FACT*DSQRT(EIGVAL(NM))                                  
           IF(ETMP.LT.THRESH) THEN                                      
              IND1=1                                                    
           ELSE                                                         
              IND1=2                                                    
           ENDIF                                                        
C  FIRST LOOP ON THE GENERALIZED VARIABLES (I.E. THE ANGLES)            
           DO 480 I=1,NUMVAR                                            
C  SECOND LOOP ON THE GENERALIZED VARIABLES                             
             DO 470 J=1,NUMVAR                                          
CKM            SCAL=AKX(IAT,I)*AKX(IAT,J)+AKY(IAT,I)*AKY(IAT,J)         
CKM  +             +AKZ(IAT,I)*AKZ(IAT,J)                               
               SCAL=AKX(I)*AKX(J)+AKY(I)*AKY(J)                         
     +             +AKZ(I)*AKZ(J)                                       
               FLTERM=SCAL*EIGVEC(I,NM)*EIGVEC(J,NM)/EIGVAL(NM)*RT      
               FLUCA(IND1,IR)=FLUCA(IND1,IR)+FLTERM                     
 470         CONTINUE                                                   
 480       CONTINUE                                                     
 490     CONTINUE                                                       
      ENDIF                                                             
C                                                                       
 500  CONTINUE                                                          
C                                                                       
      DO 510 I=1,NUMRES                                                 
        WRITE(IOUT52,'(1X,2F10.4)') FLUCA(1,I),FLUCA(2,I)               
 510  CONTINUE                                                          
CKM   WRITE(IOUT52) FLUCA                                               
CKM   WRITE(IOUT52) ((FLUCA(J,I),J=1,2),I=1,NUMRES)                     
C                                                                       
      CAFL=0.                                                           
      DO 497 IR=2,NUMRES-1                                              
CKM   DO 497 IR=1,NUMRES-2                                              
        DO 496 IND1=1,2                                                 
          CAFL=CAFL+FLUCA(IND1,IR)                                      
 496    CONTINUE                                                        
 497  CONTINUE                                                          
C                                                                       
      CAFL=CAFL/FLOAT(NUMRES-2)                                         
      WRITE(IOUT06,499) CAFL                                            
      WRITE(IOUT02,499) CAFL                                            
 499  FORMAT(1X,'AVERAGE MEAN SQUARE FLUCTUATIONS FOR THE CA:',F5.2)    
C                                                                       
        REWIND IN45                                                     
        CLOSE (IOUT52)                                                  
        GOTO 999                                                        
      END IF                                                            
C                                                                       
C*****STEP 4: CHARACTERISTIC NORMAL MODES OF SECONDARY STRUCTURES       
C                                                                       
      IF (SSTAS.EQ.'COM4') THEN                                         
        WRITE(IOUT02,'(/,5X,A,A,/)') ' NEXT SUBSUBTASK :',              
     &     ' CHARACTERISTIC NORMAL MODES OF SECONDARY STRUCTURES '      
        WRITE(IOUT06,'(/,5X,A,A,/)') ' NEXT SUBSUBTASK :',              
     &     ' CHARACTERISTIC NORMAL MODES OF SECONDARY STRUCTURES '      
        CALL GTFLNM(NAME)                                               
        CALL NXTWRD(COMLY2,COMLEN,NXTWD,4)                              
        FORMA='FORMATTED'                                               
CKM     IF (NXTWD.EQ.'OVER') FORMA='OVERWRITE  '                        
        CALL OPENWT(IOUT54,FORMA,NAME,IOUT06)                           
        WRITE(IOUT06,7003) NXTWD,NAME                                   
 7003   FORMAT(5X,A4,' WRITTEN TO ',A60)                                
        WRITE(IOUT02,7103) NAME                                         
 7103   FORMAT (5X,'WRITTEN TO FILE:',A60)                              
CKM   READ(5,*) NZH                                                     
C     IF(NZH.GT.20) THEN                                                
C        PRINT *,'YOU HAVE TO INCREASE THE SIZE OF ARRAY IZONEH'        
C     ENDIF                                                             
C     DO 503 I=1,2                                                      
C503  READ(5,'(20I4)') (IZONEH(I,J),J=1,NZH)                            
C     PRINT *,'NUMBER OF HELICES: ',NZH                                 
C     WRITE(IOUT06,511) ((IZONEH(I,J),J=1,NZH),I=1,2)                   
C     READ(5,*) NZE                                                     
C     IF(NZE.GT.20) THEN                                                
C        PRINT *,'YOU HAVE TO INCREASE THE SIZE OF ARRAY IZONEE'        
C     ENDIF                                                             
C     DO 505 I=1,2                                                      
C505  READ(5,'(20I4)') (IZONEE(I,J),J=1,NZE)                            
C     PRINT *,'NUMBER OF BETA SHEETS: ',NZE                             
C     WRITE(IOUT06,511) ((IZONEE(I,J),J=1,NZE),I=1,2)                   
C     READ(5,*) NZT                                                     
C     IF(NZT.GT.20) THEN                                                
C        PRINT *,'YOU HAVE TO INCREASE THE SIZE OF ARRAY IZONET'        
C     ENDIF                                                             
C     DO 507 I=1,2                                                      
C507  READ(5,'(20I4)') (IZONET(I,J),J=1,NZT)                            
C     PRINT *,'NUMBER OF TURNS: ',NZT                                   
C     WRITE(IOUT06,511) ((IZONET(I,J),J=1,NZT),I=1,2)                   
C511  FORMAT(1X,20I4)                                                   
C                                                                       
      DO 600 IV=1,NUMVAR                                                
C                                                                       
C  TEST FOR THE ANGLE TYPE: K=1 ==> PHI, K=2 ==> PSI, K=3 ==> OMEGA     
      IR=INDXV(IV)/100                                                  
      K=INDXV(IV)-100*IR                                                
C                                                                       
      IF(K.EQ.1.OR.K.EQ.2.OR.K.EQ.3) THEN                               
         DO 550 NM=1,NUMVAR                                             
           FLCM(NM)=FLCM(NM)+RT*(EIGVEC(IV,NM)*DEG)**2/EIGVAL(NM)       
 550     CONTINUE                                                       
C                                                                       
         DO 560 LH=1,NZH                                                
           I1=IZONEH(1,LH)                                              
           I2=IZONEH(2,LH)                                              
           IF(IR.GE.I1.AND.IR.LE.I2) THEN                               
             DO 555 NM=1,NUMVAR                                         
             FLCMH(NM)=FLCMH(NM)+RT*(EIGVEC(IV,NM)*DEG)**2/EIGVAL(NM)   
 555         CONTINUE                                                   
           ENDIF                                                        
 560     CONTINUE                                                       
C                                                                       
         DO 570 LH=1,NZE                                                
           I1=IZONEE(1,LH)                                              
           I2=IZONEE(2,LH)                                              
           IF(IR.GE.I1.AND.IR.LE.I2) THEN                               
             DO 565 NM=1,NUMVAR                                         
             FLCME(NM)=FLCME(NM)+RT*(EIGVEC(IV,NM)*DEG)**2/EIGVAL(NM)   
 565         CONTINUE                                                   
           ENDIF                                                        
 570     CONTINUE                                                       
C                                                                       
         DO 580 LH=1,NZT                                                
           I1=IZONET(1,LH)                                              
           I2=IZONET(2,LH)                                              
           IF(IR.GE.I1.AND.IR.LE.I2) THEN                               
             DO 575 NM=1,NUMVAR                                         
             FLCMT(NM)=FLCMT(NM)+RT*(EIGVEC(IV,NM)*DEG)**2/EIGVAL(NM)   
 575         CONTINUE                                                   
           ENDIF                                                        
 580     CONTINUE                                                       
C                                                                       
      ENDIF                                                             
C                                                                       
 600  CONTINUE                                                          
C                                                                       
      DO 610 NM=1,NUMVAR                                                
        FLCMH(NM)=FLCMH(NM)/FLCM(NM)                                    
        FLCME(NM)=FLCME(NM)/FLCM(NM)                                    
        FLCMT(NM)=FLCMT(NM)/FLCM(NM)                                    
 610  CONTINUE                                                          
C                                                                       
      DO 620 I=1,NUMVAR                                                 
        WRITE(IOUT54,'(3F10.3)') FLCM(I),FLCMH(I),FLCME(I),FLCMT(I)     
 620  CONTINUE                                                          
CKM   WRITE(IOUT54) (FLCM(I),I=1,NUMVAR),(FLCMH(I),I=1,NUMVAR),         
CKM  &              (FLCME(I),I=1,NUMVAR),(FLCMT(I),I=1,NUMVAR)         
CKM   WRITE(IOUT54) FLCM,FLCMH,FLCME,FLCMT                              
C                                                                       
        CLOSE (IOUT54)                                                  
        GOTO 999                                                        
      END IF                                                            
C                                                                       
C*****STEP 5: INFLUENCE OF THE LOW FREQUENCIES ABOUT THE MSD OF CA      
C                                                                       
      IF (SSTAS.EQ.'COM5') THEN                                         
        WRITE(IOUT02,'(/,5X,A,A,/)') ' NEXT SUBSUBTASK :',              
     &     ' M.S. FLUCTUATIONS OF CA BY LOW FREQUENCY MODES '           
        WRITE(IOUT06,'(/,5X,A,A,/)') ' NEXT SUBSUBTASK :',              
     &     ' M.S. FLUCTUATIONS OF CA BY LOW FREQUENCY MODES '           
        CALL GTFLNM(NAME)                                               
        CALL NXTWRD(COMLY2,COMLEN,NXTWD,4)                              
        FORMA='FORMATTED'                                               
CKM     IF (NXTWD.EQ.'OVER') FORMA='OVERWRITE  '                        
        CALL OPENWT(IOUT56,FORMA,NAME,IOUT06)                           
        WRITE(IOUT06,7004) NXTWD,NAME                                   
 7004   FORMAT(5X,A4,' WRITTEN TO ',A60)                                
        WRITE(IOUT02,7104) NAME                                         
 7104   FORMAT (5X,'WRITTEN TO FILE:',A60)                              
CKM   READ(5,*) IFRMX                                                   
C     PRINT *,'IFRMX: ',IFRMX                                           
C     IF(IFRMX.GT.15) THEN                                              
C        PRINT *,'YOU HAVE TO INCREASE THE SIZE OF ARRAY FLFRQ'         
C        STOP                                                           
C     ENDIF                                                             
      IR=1                                                              
C                                                                       
      DO 700 IAT=1,NUMATM                                               
CKM                                                                     
C READ IN K-MATRIX                                                      
C                                                                       
      READ(IN45) (AKX(I),I=1,NUMVAR),(AKY(I),I=1,NUMVAR),               
     &           (AKZ(I),I=1,NUMVAR)                                    
C                                                                       
      IF(ATNAME(IAT).EQ.'CA') THEN                                      
         IR=IR+1                                                        
C                                                                       
C  LOOP ON THE FIRST IFRMX MODES                                        
         DO 690 NM=1,IFRMX                                              
C  FIRST LOOP ON THE GENERALIZED VARIABLES (I.E. THE ANGLES)            
              DO 680 I=1,NUMVAR                                         
C  SECOND LOOP ON THE GENERALIZED VARIABLES                             
                DO 670 J=1,NUMVAR                                       
CKM               SCAL=AKX(IAT,I)*AKX(IAT,J)+AKY(IAT,I)*AKY(IAT,J)      
CKM  +                +AKZ(IAT,I)*AKZ(IAT,J)                            
                  SCAL=AKX(I)*AKX(J)+AKY(I)*AKY(J)                      
     +                +AKZ(I)*AKZ(J)                                    
                  FLTERM=SCAL*EIGVEC(I,NM)*EIGVEC(J,NM)/EIGVAL(NM)*RT   
                  FLFRQ(IR,NM)=FLFRQ(IR,NM)+FLTERM                      
 670            CONTINUE                                                
 680          CONTINUE                                                  
 690     CONTINUE                                                       
C                                                                       
      ENDIF                                                             
C                                                                       
 700  CONTINUE                                                          
C                                                                       
      WRITE(IOUT56,*) IFRMX                                             
      DO 710 I=1,NUMRES                                                 
        WRITE(IOUT56,'(10F8.4)') (FLFRQ(I,J),J=1,IFRMX)                 
 710  CONTINUE                                                          
CKM   WRITE(IOUT56) IFRMX,FLFRQ                                         
CKM   WRITE(IOUT56) IFRMX,((FLFRQ(I,J),I=1,NUMRES),J=1,15)              
C                                                                       
        REWIND IN45                                                     
        CLOSE (IOUT56)                                                  
        GOTO 999                                                        
      END IF                                                            
C                                                                       
C*****STEP 6: AVERAGE M.S. FLUCT. FOR CA AND SINGLE BOND TORSION ANGLES 
C             AS A FUNCTION OF NORMAL MODE FREQUENCIES.                 
      IF (SSTAS.EQ.'COM6') THEN                                         
        WRITE(IOUT02,'(/,5X,A,A,/)') ' NEXT SUBSUBTASK :',              
     &     ' M.S. FLUCTUATIONS AS A FUNCTION OF NORMAL MODES '          
        WRITE(IOUT06,'(/,5X,A,A,/)') ' NEXT SUBSUBTASK :',              
     &     ' M.S. FLUCTUATIONS AS A FUNCTION OF NORMAL MODES '          
        CALL GTFLNM(NAME)                                               
        CALL NXTWRD(COMLY2,COMLEN,NXTWD,4)                              
        FORMA='FORMATTED'                                               
CKM     IF (NXTWD.EQ.'OVER') FORMA='OVERWRITE  '                        
        CALL OPENWT(IOUT58,FORMA,NAME,IOUT06)                           
        WRITE(IOUT06,7005) NXTWD,NAME                                   
 7005   FORMAT(5X,A4,' WRITTEN TO ',A60)                                
        WRITE(IOUT02,7105) NAME                                         
 7105   FORMAT (5X,'WRITTEN TO FILE:',A60)                              
C                                                                       
C  LOOP ON ATOMS                                                        
      DO 790 IAT=1,NUMATM                                               
CKM                                                                     
C READ IN K-MATRIX                                                      
C                                                                       
        READ(IN45) (AKX(I),I=1,NUMVAR),(AKY(I),I=1,NUMVAR),             
     &             (AKZ(I),I=1,NUMVAR)                                  
        IF(ATNAME(IAT).EQ.'CA') THEN                                    
C  LOOP ON THE MODES                                                    
          DO 800 NM=1,NUMVAR                                            
C                                                                       
C  FIRST LOOP ON THE GENERALIZED VARIABLES (I.E. THE ANGLES)            
           DO 780 I=1,NUMVAR                                            
C  SECOND LOOP ON THE GENERALIZED VARIABLES                             
             DO 770 J=1,NUMVAR                                          
CKM            SCAL=AKX(IAT,I)*AKX(IAT,J)+AKY(IAT,I)*AKY(IAT,J)         
CKM  +             +AKZ(IAT,I)*AKZ(IAT,J)                               
               SCAL=AKX(I)*AKX(J)+AKY(I)*AKY(J)                         
     +             +AKZ(I)*AKZ(J)                                       
               FLTERM=SCAL*EIGVEC(I,NM)*EIGVEC(J,NM)/EIGVAL(NM)*RT      
               ACAFRQ(NM)=ACAFRQ(NM)+FLTERM                             
 770         CONTINUE                                                   
 780       CONTINUE                                                     
C                                                                       
 800      CONTINUE                                                      
        ENDIF                                                           
C                                                                       
 790  CONTINUE                                                          
C                                                                       
      FLIR=FLOAT(NUMRES-2)                                              
      DO 801 NM=1,NUMVAR                                                
        ACAFRQ(NM)=ACAFRQ(NM)/FLIR                                      
 801  CONTINUE                                                          
C                                                                       
      DO 810 NM=1,NUMVAR                                                
        DO 805 IV=1,NUMVAR                                              
          AANFRQ(NM)=AANFRQ(NM)+RT*(EIGVEC(IV,NM)*DEG)**2/EIGVAL(NM)    
 805    CONTINUE                                                        
 810  CONTINUE                                                          
C                                                                       
      FLNVAR=FLOAT(NUMVAR)                                              
      DO 811 NM=1,NUMVAR                                                
        AANFRQ(NM)=AANFRQ(NM)/FLNVAR                                    
 811  CONTINUE                                                          
C                                                                       
      DO 820 I=1,NUMVAR                                                 
        WRITE(IOUT58,'(F10.4,F10.3)') ACAFRQ(I),AANFRQ(I)               
 820  CONTINUE                                                          
CKM   WRITE(IOUT58) ACAFRQ,AANFRQ                                       
CKM   WRITE(IOUT58) (ACAFRQ(I),I=1,NUMVAR),(AANFRQ(I),I=1,NUMVAR)       
C                                                                       
        REWIND IN45                                                     
        CLOSE (IOUT58)                                                  
        GOTO 999                                                        
      END IF                                                            
C                                                                       
C****STEP 7: DISPLACEMENT VECTORS OF ATOMS                              
C                                                                       
      IF (SSTAS.EQ.'COM7') THEN                                         
        WRITE(IOUT02,'(/,5X,A,A,/)') ' NEXT SUBSUBTASK :',              
     &     ' DISPLACEMENT VECTORS OF AOTMS '                            
        WRITE(IOUT06,'(/,5X,A,A,/)') ' NEXT SUBSUBTASK :',              
     &     ' DISPLACEMENT VECTORS OF AOTMS '                            
        CALL GTFLNM(NAME)                                               
        CALL NXTWRD(COMLY2,COMLEN,NXTWD,4)                              
        FORMA='UNFORMATTED'                                             
        IF (NXTWD.EQ.'OVER') FORMA='OVERWRITE  '                        
        CALL OPENWT(IOUT60,FORMA,NAME,IOUT06)                           
        WRITE(IOUT06,7006) NXTWD,NAME                                   
 7006   FORMAT(5X,A4,' WRITTEN TO ',A60)                                
        WRITE(IOUT02,7106) NAME                                         
 7106   FORMAT (5X,'WRITTEN TO FILE:',A60)                              
CKM   READ(5,*) NBMOD                                                   
C     PRINT *,'NBMOD: ',NBMOD                                           
C     IF(NBMOD.GT.10) THEN                                              
C        PRINT *,'THE MAXIMUM NUMBER OF MODES YOU CAN SELECT IS 10'     
C        STOP                                                           
C     ENDIF                                                             
C     READ(5,*) (MODSTR(I),I=1,NBMOD)                                   
C     WRITE(IOUT06,'(1X,20I4)') (MODSTR(I),I=1,NBMOD)                   
C                                                                       
      DO 900 IT=1,NBMOD                                                 
      NM=MODSTR(IT)                                                     
      FCT=DSQRT(RT/EIGVAL(NM))                                          
C                                                                       
      DO 890 IAT=1,NUMATM                                               
CKM                                                                     
C READ IN K-MATRIX                                                      
C                                                                       
         READ(IN45) (AKX(I),I=1,NUMVAR),(AKY(I),I=1,NUMVAR),            
     &              (AKZ(I),I=1,NUMVAR)                                 
C                                                                       
           DO 880 J=1,NUMVAR                                            
CKM          DX(IAT,IT)=DX(IAT,IT)+AKX(IAT,J)*EIGVEC(J,NM)              
C            DY(IAT,IT)=DY(IAT,IT)+AKY(IAT,J)*EIGVEC(J,NM)              
C            DZ(IAT,IT)=DZ(IAT,IT)+AKZ(IAT,J)*EIGVEC(J,NM)              
             DX(IAT,IT)=DX(IAT,IT)+AKX(J)*EIGVEC(J,NM)                  
             DY(IAT,IT)=DY(IAT,IT)+AKY(J)*EIGVEC(J,NM)                  
             DZ(IAT,IT)=DZ(IAT,IT)+AKZ(J)*EIGVEC(J,NM)                  
 880       CONTINUE                                                     
C                                                                       
           DX(IAT,IT)=DX(IAT,IT)*FCT                                    
           DY(IAT,IT)=DY(IAT,IT)*FCT                                    
           DZ(IAT,IT)=DZ(IAT,IT)*FCT                                    
C                                                                       
 890  CONTINUE                                                          
C                                                                       
 900  CONTINUE                                                          
C                                                                       
CKM   WRITE(IOUT60) DX,DY,DZ                                            
      WRITE(IOUT60) ((DX(I,J),I=1,NUMATM),J=1,NBMOD),                   
     &              ((DY(I,J),I=1,NUMATM),J=1,NBMOD),                   
     &              ((DY(I,J),I=1,NUMATM),J=1,NBMOD)                    
        REWIND IN45                                                     
        CLOSE (IOUT60)                                                  
        GOTO 999                                                        
      END IF                                                            
C                                                                       
C****STEP 8: CONTRIBUTIONS OF THE LOW FREQUENCY MODES TO M. S. FLUCT.   
C            OF PHI, PSI AND OMEGA ANGLES                               
C                                                                       
      IF (SSTAS.EQ.'COM8') THEN                                         
        WRITE(IOUT02,'(/,5X,A,A,/)') ' NEXT SUBSUBTASK :',              
     &     ' M.S. FLUCTUATIONS OF D.A. BY LOW FREQUENCY MODES '         
        WRITE(IOUT06,'(/,5X,A,A,/)') ' NEXT SUBSUBTASK :',              
     &     ' M.S. FLUCTUATIONS OF D.A. BY LOW FREQUENCY MODES '         
        CALL GTFLNM(NAME)                                               
        CALL NXTWRD(COMLY2,COMLEN,NXTWD,4)                              
        FORMA='FORMATTED'                                               
CKM     IF (NXTWD.EQ.'OVER') FORMA='OVERWRITE  '                        
        CALL OPENWT(IOUT62,FORMA,NAME,IOUT06)                           
        WRITE(IOUT06,7007) NXTWD,NAME                                   
 7007   FORMAT(5X,A4,' WRITTEN TO ',A60)                                
        WRITE(IOUT02,7107) NAME                                         
 7107   FORMAT (5X,'WRITTEN TO FILE:',A60)                              
CKM   READ(5,*) NMOD                                                    
C     IF(NMOD.GT.NBMODE) THEN                                           
C         PRINT *,'TO MANY MODES SELECTED, THE LIMIT IS: ',NBMODE       
C         STOP                                                          
C     ENDIF                                                             
      DO 990 IV=1,NUMVAR                                                
        IR=INDXV(IV)/100                                                
        K=INDXV(IV)-100*IR                                              
C                                                                       
        IF(K.EQ.1)THEN                                                  
           DO 920 NM=1,NMOD                                             
           PHINM(IR,NM)=RT*(EIGVEC(IV,NM)*DEG)**2/EIGVAL(NM)            
 920       CONTINUE                                                     
        ELSE IF(K.EQ.2) THEN                                            
           DO 930 NM=1,NMOD                                             
           PSINM(IR,NM)=RT*(EIGVEC(IV,NM)*DEG)**2/EIGVAL(NM)            
 930       CONTINUE                                                     
        ELSE IF(K.EQ.3) THEN                                            
           DO 940 NM=1,NMOD                                             
           OMENM(IR,NM)=RT*(EIGVEC(IV,NM)*DEG)**2/EIGVAL(NM)            
 940       CONTINUE                                                     
        ENDIF                                                           
C                                                                       
 990  CONTINUE                                                          
C                                                                       
      DO 1004 I=1,NMOD                                                  
        DO 1005 J=1,NUMRES                                              
          WRITE(IOUT62,'(1X,3F10.3)') PHINM(J,I),PSINM(J,I),OMENM(J,I)  
 1005   CONTINUE                                                        
        WRITE(IOUT62,'(/)')                                             
 1004 CONTINUE                                                          
CKM   WRITE(IOUT62) ((PHINM(J,I),J=1,NUMRES),I=1,NBMOD)                 
CKM   WRITE(IOUT62) ((PSINM(J,I),J=1,NUMRES),I=1,NBMOD)                 
CKM   WRITE(IOUT62) ((OMENM(J,I),J=1,NUMRES),I=1,NBMOD)                 
CKM   WRITE(IOUT62) PHINM,PSINM,OMENM                                   
C                                                                       
        CLOSE (IOUT62)                                                  
        GOTO 999                                                        
      END IF                                                            
C                                                                       
C*****STEP 9: M.S. FLUCTUATIONS OF N, CA, CB, C, O ATOMS FOR COMPARISON 
C             WITH TEMPERATURE B FACTORS (STERNBERG ET AL.)             
C                                                                       
      IF (SSTAS.EQ.'COM9') THEN                                         
        WRITE(IOUT02,'(/,5X,A,A,/)') ' NEXT SUBSUBTASK :',              
     &        ' M.S. FLUCTUATIONS OF N, CA, CB, C, O ATOMS '            
        WRITE(IOUT06,'(/,5X,A,A,/)') ' NEXT SUBSUBTASK :',              
     &        ' M.S. FLUCTUATIONS OF N, CA, CB, C, O ATOMS '            
        CALL GTFLNM(NAME)                                               
        CALL NXTWRD(COMLY2,COMLEN,NXTWD,4)                              
        FORMA='FORMATTED'                                               
CKM     IF (NXTWD.EQ.'OVER') FORMA='OVERWRITE  '                        
        CALL OPENWT(IOUT64,FORMA,NAME,IOUT06)                           
        WRITE(IOUT06,7008) NXTWD,NAME                                   
 7008   FORMAT(5X,A4,' WRITTEN TO ',A60)                                
        WRITE(IOUT02,7108) NAME                                         
 7108   FORMAT (5X,'WRITTEN TO FILE:',A60)                              
C                                                                       
      IR=1                                                              
CKM   IR=0                                                              
      DO 1080 IAT=1,NUMATM                                              
CKM                                                                     
C READ IN K-MATRIX                                                      
C                                                                       
        READ(IN45) (AKX(I),I=1,NUMVAR),(AKY(I),I=1,NUMVAR),             
     &             (AKZ(I),I=1,NUMVAR)                                  
        IF(ATNAME(IAT).EQ.'N ') IR=IR+1                                 
        IF(ATNAME(IAT).EQ.'N '.OR.ATNAME(IAT).EQ.'CA'.OR.               
     +     ATNAME(IAT).EQ.'CB'.OR.ATNAME(IAT).EQ.'C '.OR.               
     +     ATNAME(IAT).EQ.'O ') THEN                                    
CKM     IF(ATOM(IAT).EQ.'N '.OR.ATOM(IAT).EQ.'CA'.OR.ATOM(IAT).EQ.'CB'  
C    +     .OR.ATOM(IAT).EQ.'C '.OR.ATOM(IAT).EQ.'O ') THEN             
C  LOOP ON THE MODES                                                    
           DO 1070 NM=1,NUMVAR                                          
C  FIRST LOOP ON THE GENERALIZED VARIABLES (I.E. THE ANGLES)            
             DO 1060 I=1,NUMVAR                                         
C  SECOND LOOP ON THE GENERALIZED VARIABLES                             
               DO 1050 J=1,NUMVAR                                       
CKM              SCAL=AKX(IAT,I)*AKX(IAT,J)+AKY(IAT,I)*AKY(IAT,J)       
CKM  +               +AKZ(IAT,I)*AKZ(IAT,J)                             
                 SCAL=AKX(I)*AKX(J)+AKY(I)*AKY(J)                       
     +               +AKZ(I)*AKZ(J)                                     
                 FLTERM=SCAL*EIGVEC(I,NM)*EIGVEC(J,NM)/EIGVAL(NM)*RT    
                 BFACTR(IR)=BFACTR(IR)+FLTERM                           
 1050          CONTINUE                                                 
 1060        CONTINUE                                                   
 1070      CONTINUE                                                     
        ENDIF                                                           
 1080 CONTINUE                                                          
C                                                                       
      DO 1085 IR=1,NUMRES                                               
        BFACTR(IR)=BFACTR(IR)/5.D0                                      
 1085 CONTINUE                                                          
C                                                                       
      DO 1200 I=1,NUMRES                                                
        WRITE(IOUT64,'(1X,F10.4)') BFACTR(I)                            
 1200 CONTINUE                                                          
CKM   WRITE(IOUT64) BFACTR                                              
CKM   WRITE(IOUT64) (BFACTR(I),I=1,NUMRES)                              
C                                                                       
        REWIND IN45                                                     
        CLOSE (IOUT64)                                                  
        GOTO 999                                                        
      END IF                                                            
C                                                                       
 1090 IF (IKMAT.EQ.1) THEN                                              
        CLOSE (IN45)                                                    
      END IF                                                            
      RETURN                                                            
      END                                                               
C-----------------------------------------------------------------------
      SUBROUTINE RDPREC(IIN)                                            
C-----------------------------------------------------------------------
C  INFORMATION ABOUT THE MOLECULE                                       
      IMPLICIT REAL*8(A-H,O-Z)                                          
CMSP  INCLUDE (MAXSIZE)                                                 
      INCLUDE '/labo/qclib/inspidas/common/maxsize'
CMSP  INCLUDE (SIZE)                                                    
      INCLUDE '/labo/qclib/inspidas/common/size'
CMSP  INCLUDE (ATOM)                                                    
      INCLUDE '/labo/qclib/inspidas/common/atom'
CKM        KUNIT(MAXATM),KATOM(MXATM1)                                  
CMSP  INCLUDE (NBTYPE)                                                  
      INCLUDE '/labo/qclib/inspidas/common/nbtype'
CKM        NBTYPE(MAXATM)                                               
CMSP  INCLUDE (VARANG)                                                  
      INCLUDE '/labo/qclib/inspidas/common/varang'
CKM        ANGRAD(10,MAXRES),VAR(MAXVAR),INDXV(MAXVAR),ANGLES(10,MAXRES)
CMSP  INCLUDE (ALPHA)                                                   
      INCLUDE '/labo/qclib/inspidas/common/alpha'
CKM        ATNAME(MAXATM),RENAME(MAXATM),NMBRES(MAXATM),TITLE           
C     DIMENSION INDXV(MAXVAR),JBTYPE(MAXATM),LUNIT(MAXATM),KATOM(MAXATM)
C     DIMENSION NBTYPE(MAXATM),KUNIT(MAXATM)                            
      DIMENSION JBTYPE(MAXATM),LUNIT(MAXATM)                            
C     CHARACTER TITLE*80,DUMMY*80,ATOM(MAXATM)*2,ATWK(MAXATM)*2         
      CHARACTER DUMMY*80,ATWK(MAXATM)*2                                 
C                                                                       
      READ(IIN,'(A80)') TITLE                                           
      READ(IIN,'(5I5)') NUMATM,NUMVAR,NUMRES,NUMINT,NSS                 
C                                                                       
      DO 10 I=1,NUMRES                                                  
        READ(IIN,'(A80)') DUMMY                                         
 10   CONTINUE                                                          
C                                                                       
      READ(IIN,'(A80)') DUMMY                                           
C                                                                       
      DO 20 I=1,NUMVAR                                                  
        READ(IIN,'(I4,I2)') INDXV1,INDXV2                               
        INDXV(I)=100*INDXV1+INDXV2                                      
 20   CONTINUE                                                          
CKM   DO 20 I=1,NUMVAR                                                  
C       READ(IIN,'(I6)') INDXV(I)                                       
C20   CONTINUE                                                          
C                                                                       
      DO 30 I=1,NUMATM                                                  
        READ(IIN,'(44X,3I5,7X,A2)') JBTYPE(I),LUNIT(I),KATOM(I),ATWK(I) 
 30   CONTINUE                                                          
C                                                                       
C  REARRANGEMENT OF THE ATOMS ORDER                                     
C                                                                       
      DO 31 I=1,NUMATM                                                  
       J=KATOM(I)                                                       
        KUNIT(J)=LUNIT(I)                                               
        NBTYPE(J)=JBTYPE(I)                                             
        ATNAME(J)=ATWK(I)                                               
 31   CONTINUE                                                          
C                                                                       
      RETURN                                                            
      END                                                               
./ ADD NAME=NMANAL1
./ NUMBER NEW1=10,INCR=10
C////////////////////////////////////////////////////////////////////// 
C THIS PROGRAM IS THE CONTINUATION OF ANALYS BUT IT NEEDS LESS STORAGE  
C                                                                       
C INPUT FILES:  10 ==> EIGENVECTORS                                     
C               11 ==> EIGENVALUES                                      
C               14 ==> PRECEP OUTPUT (INFORMATION ABOUT THE MOLECULE)   
C                                                                       
C OUTPUT FILES: 34 ==> AVERAGE FLUCTUATION BACKBONE ANGLES AS A FUNCT.  
C                      OF THE FREQUENCIES                               
C               36 ==> CONTRIBUTIONS OF THE VARIOUS VARIABLES.          
C               38 ==> MAJOR CONTRIBUTION TO THE NORMAL MODES AFTER 600 
C               40 ==> HISTOGRAM OF THE NUMBER OF VARIABLES NEEDED TO   
C                      AMOUNT 95% OF THE M.S. FLUCT. OF A NORMAL MODE.  
C                                                                       
C FILE 5 CONTAINS SOME CONTROL PARAMETERS                               
C                                                                       
C/////////////////////////////////////////////////////////////////////  
C                                                                       
      PROGRAM ANABIS                                                    
C                                                                       
      IMPLICIT REAL*8 (A-H,O-Z)                                         
C                                                                       
      PARAMETER(NUMVAR=771,NUMATM=2013,NUMRES=132)                      
C                                                                       
      CHARACTER TITLE*80,DUMMY*80                                       
      CHARACTER COMAND*10,KOMAND(10)*10                                 
      CHARACTER ANGLE(10)*5,TAG(NUMATM)*3,SEQ(NUMRES)*3                 
C                                                                       
      DIMENSION EVECT(NUMVAR,NUMVAR),EVAL(NUMVAR)                       
      DIMENSION AANFRQ(NUMVAR),CFL(NUMVAR)                              
      DIMENSION KFREQ(30),INDXV(NUMVAR),LRES(NUMATM)                    
      DIMENSION KEEP(0:10),RKEEP(0:10)                                  
      DIMENSION CQ(2,NUMVAR),KNM(2)                                     
      DIMENSION KLASS(NUMVAR),ISTO(NUMVAR),ITYPE(10)                    
C                                                                       
      DATA RKB/1.987D-3/                                                
      DATA PI/3.141592653589793D0/                                      
      DATA NBCMD/4/                                                     
      DATA KOMAND/'STEP 1    ','STEP 2    ','STEP 3    ','END       ',  
     +          6*'          '/                                         
      DATA AANFRQ/NUMVAR*0.0/                                           
      DATA KEEP/11*0/                                                   
      DATA RKEEP/1000000.,10*0./                                        
      DATA KNM/669,723/                                                 
      DATA ANGLE/'PHI  ','PSI  ','OMEGA','KHI1 ','KHI2 ','KHI3 ',       
     + 'KHI4 ','KHI5 ','KHI6 ','KHI7 '/                                 
C                                                                       
      DEG=180.D0/PI                                                     
C                                                                       
      DO 2 I=1,NUMVAR                                                   
        CQ(1,I)=-1.                                                     
        CQ(2,I)=-1.                                                     
 2    CONTINUE                                                          
C                                                                       
C-----INPUT OF THE DATA NEEDED                                          
C                                                                       
C  EIGEN VECTORS                                                        
      READ(10) EVECT                                                    
C  EIGENVALUES                                                          
      READ(11) EVAL                                                     
C  INFORMATION ABOUT THE MOLECULE                                       
      READ(14,'(A80)') TITLE                                            
      READ(14,'(5I5)') NATM,NVAR,NRES,NUMUNT,NSS                        
      IF(NATM.NE.NUMATM) THEN                                           
         PRINT *,'NUMATM=',NUMATM,' NATM=',NATM                         
         STOP                                                           
      ENDIF                                                             
      IF(NVAR.NE.NUMVAR) THEN                                           
         PRINT *,'NUMVAR=',NUMVAR,' NVAR=',NVAR                         
         STOP                                                           
      ENDIF                                                             
      IF(NRES.NE.NUMRES) THEN                                           
         PRINT *,'NUMRES=',NUMRES,' NRES=',NRES                         
         STOP                                                           
      ENDIF                                                             
C                                                                       
      DO 10 I=1,NUMRES                                                  
      READ(14,'(A80)') DUMMY                                            
 10   CONTINUE                                                          
C                                                                       
      READ(14,'(A80)') DUMMY                                            
C                                                                       
      DO 20 I=1,NUMVAR                                                  
      READ(14,'(I6)') INDXV(I)                                          
 20   CONTINUE                                                          
C                                                                       
      DO 30 I=1,NUMATM                                                  
      READ(14,'(71X,A3,2X,I4)') TAG(I),LRES(I)                          
 30   CONTINUE                                                          
C                                                                       
      IQ=0                                                              
      LKEEP=0                                                           
      DO 40 I=1,NUMATM                                                  
        IF(LRES(I).NE.LKEEP) THEN                                       
           LKEEP=LRES(I)                                                
           IQ=IQ+1                                                      
           IF(IQ.GT.NUMRES) THEN                                        
              PRINT *,'IQ=',IQ                                          
              STOP                                                      
           ENDIF                                                        
           SEQ(IQ)=TAG(I)                                               
        ENDIF                                                           
 40   CONTINUE                                                          
C                                                                       
C                                                                       
C                                                                       
C--------------- PARAMETERS ON FILE 5 --------------------------------- 
C                                                                       
C  TEMP   = TEMPERATURE IN K                                            
C  NFR    = NUMBER OF FREQUENCIES IN THE FOLLOWING ARRAY                
C  KFRQ   = ARRAY CONTAINING THE NUMBER OF THE FREQUENCIES FOR WHICH    
C           THE THE MEAN SQUARE DEVIATION ARE COMPUTED                  
C                                                                       
C---------------------------------------------------------------------  
C                                                                       
      READ(5,*) TEMP                                                    
      PRINT *,'TEMPERATURE: ',TEMP, 'K'                                 
      RT=TEMP*RKB                                                       
C                                                                       
 50   READ(5,'(A10)') COMAND                                            
      DO 55 KMD=1,NBCMD                                                 
      IF(COMAND.EQ.KOMAND(KMD)) GOTO 56                                 
 55   CONTINUE                                                          
      PRINT *,'UNKNOWN COMMAND: ',COMAND                                
      STOP                                                              
 56   GOTO (100,200,300,400),KMD                                        
C                                                                       
C---------------------------------------------------------------------  
C                    END OF COMMANDS INPUT SECTION                      
C---------------------------------------------------------------------  
C                                                                       
C                                                                       
C*****STEP 1: AVERAGE M.S. FLUCT. BACKBONE TORSION ANGLES               
C             AS A FUNCTION OF NORMAL MODE FREQUENCIES.                 
C                                                                       
 100  READ(5,*) NFRQ                                                    
      IF(NFRQ.GT.30) THEN                                               
        PRINT *,'YOU MUST CHANGE THE DIMENSION OF KFREQ'                
        STOP                                                            
      ENDIF                                                             
      READ(5,*) (KFREQ(I),I=1,NFRQ)                                     
C                                                                       
      IBB=0                                                             
C                                                                       
      DO 120 IV=1,NUMVAR                                                
C                                                                       
C  TEST FOR THE ANGLE TYPE: K=1 ==> PHI, K=2 ==> PSI, K=3 ==> OMEGA     
      IR=INDXV(IV)/100                                                  
      K=INDXV(IV)-100*IR                                                
C                                                                       
      IF(K.EQ.1.OR.K.EQ.2.OR.K.EQ.3) THEN                               
      IBB=IBB+1                                                         
      DO 110 NM=1,NUMVAR                                                
          CFM=RT*(EVECT(IV,NM)*DEG)**2/EVAL(NM)                         
          AANFRQ(NM)=AANFRQ(NM)+CFM                                     
          IF(NM.EQ.669)THEN                                             
             CQ(1,IV)=CFM                                               
          ELSE IF(NM.EQ.723) THEN                                       
             CQ(2,IV)=CFM                                               
          ENDIF                                                         
 110  CONTINUE                                                          
      ENDIF                                                             
C                                                                       
 120  CONTINUE                                                          
C                                                                       
C-----KEEP THE TEN HIGHEST CONTRIBUTIONS                                
C                                                                       
      DO 160 IZ=1,2                                                     
        DO 141 J=1,10                                                   
          KEEP(J)=0.                                                    
          RKEEP(J)=-1.                                                  
 141    CONTINUE                                                        
        DO 150 IV=1,NUMVAR                                              
          DO 146 KP=0,9                                                 
            IF(CQ(IZ,IV).LT.RKEEP(KP).AND.CQ(IZ,IV).GT.RKEEP(KP+1))THEN 
               DO 144 KP1=9,KP+1,-1                                     
                 RKEEP(KP1+1)=RKEEP(KP1)                                
                 KEEP(KP1+1)=KEEP(KP1)                                  
 144           CONTINUE                                                 
               RKEEP(KP+1)=CQ(IZ,IV)                                    
               KEEP(KP+1)=IV                                            
            ENDIF                                                       
 146      CONTINUE                                                      
 150    CONTINUE                                                        
        NM=KNM(IZ)                                                      
        WRITE(6,908) NM,AANFRQ(NM)                                      
        WRITE(6,910) (KEEP(J),RKEEP(J),J=1,10)                          
 160  CONTINUE                                                          
C                                                                       
      PRINT *,'IBB=',IBB                                                
      FLNVAR=FLOAT(IBB)                                                 
      DO 161 NM=1,NUMVAR                                                
        AANFRQ(NM)=AANFRQ(NM)/FLNVAR                                    
 161  CONTINUE                                                          
C                                                                       
      WRITE(34) AANFRQ                                                  
C                                                                       
      DO 190 IF=1,NFRQ                                                  
        CFLT=0.                                                         
        NM=KFREQ(IF)                                                    
        DO 168 J=1,10                                                   
          KEEP(J)=0.                                                    
          RKEEP(J)=-1.                                                  
 168    CONTINUE                                                        
C                                                                       
        DO 170 IV=1,NUMVAR                                              
          CFL(IV)=RT*(EVECT(IV,NM)*DEG)**2/EVAL(NM)                     
          CFLT=CFLT+CFL(IV)                                             
 170    CONTINUE                                                        
        WRITE(36,900) NM,CFLT                                           
        WRITE(36,901) (I,CFL(I),I=1,NUMVAR)                             
C                                                                       
C-----KEEP THE TEN HIGHEST CONTRIBUTIONS                                
C                                                                       
        DO 180 IV=1,NUMVAR                                              
          DO 176 KP=0,9                                                 
            IF(CFL(IV).LT.RKEEP(KP).AND.CFL(IV).GT.RKEEP(KP+1)) THEN    
               DO 174 KP1=9,KP+1,-1                                     
                 RKEEP(KP1+1)=RKEEP(KP1)                                
                 KEEP(KP1+1)=KEEP(KP1)                                  
 174           CONTINUE                                                 
               RKEEP(KP+1)=CFL(IV)                                      
               KEEP(KP+1)=IV                                            
            ENDIF                                                       
 176      CONTINUE                                                      
 180    CONTINUE                                                        
        WRITE(6,909) NM,CFLT                                            
        WRITE(6,910) (KEEP(J),RKEEP(J),J=1,10)                          
C                                                                       
 190  CONTINUE                                                          
C                                                                       
 900  FORMAT(//'NORMAL MODE NUMBER:',I4,1X,'CFLT=',F9.3)                
 901  FORMAT(4(I3,F9.4,1X))                                             
 908  FORMAT(1X,'NORMAL MODE:',I4,1X,'AANFRQ=',F10.3)                   
 909  FORMAT(1X,'NORMAL MODE:',I4,1X,'CFLT=',F10.3)                     
 910  FORMAT(1X,I4,2X,F10.4)                                            
C                                                                       
      GOTO 50                                                           
C---------------------------------------------------------------------  
C                                                                       
C*****STEP 2: LOOK FOR ANGLES WHICH CONTRIBUTE MOST TO THE AVERAGE      
C             MEAN SQUARE FLUCTUATIONS FOR THE NORMAL MODES AFTER 600.  
C                                                                       
 200  READ(5,*) ISTART                                                  
      NSING=0                                                           
      NDOUB=0                                                           
C                                                                       
      DO 280 NM=ISTART,NUMVAR                                           
C                                                                       
      TOTFL=0.                                                          
      DO 201 I=1,10                                                     
        RKEEP(I)=0.                                                     
        KEEP(I)=0                                                       
 201  CONTINUE                                                          
C                                                                       
      DO 210 IV=1,NUMVAR                                                
          CFL(IV)=RT*(EVECT(IV,NM)*DEG)**2/EVAL(NM)                     
          TOTFL=TOTFL+CFL(IV)                                           
 210  CONTINUE                                                          
C                                                                       
C-----KEEP THE TEN HIGHEST CONTRIBUTIONS                                
C                                                                       
        DO 240 IV=1,NUMVAR                                              
          DO 236 KP=0,9                                                 
            IF(CFL(IV).LT.RKEEP(KP).AND.CFL(IV).GT.RKEEP(KP+1)) THEN    
               DO 234 KP1=9,KP+1,-1                                     
                 RKEEP(KP1+1)=RKEEP(KP1)                                
                 KEEP(KP1+1)=KEEP(KP1)                                  
 234           CONTINUE                                                 
               RKEEP(KP+1)=CFL(IV)                                      
               KEEP(KP+1)=IV                                            
            ENDIF                                                       
 236      CONTINUE                                                      
 240    CONTINUE                                                        
C                                                                       
        WRITE(38,940) NM,TOTFL                                          
        WRITE(38,941) (KEEP(I),RKEEP(I),I=1,10)                         
C                                                                       
        RATIO1=RKEEP(1)/TOTFL                                           
        RATIO2=(RKEEP(1)+RKEEP(2))/TOTFL                                
        IF(RATIO1.GT.0.9) THEN                                          
           NSING=NSING+1                                                
           WRITE(6,970) NM,TOTFL                                        
           IA=KEEP(1)                                                   
           IR=INDXV(IA)/100                                             
           K=INDXV(IA)-100*IR                                           
           WRITE(6,975) SEQ(IR-1),IR-1,ANGLE(K),KEEP(1),                
     +                  RKEEP(1)/TOTFL*100.                             
        ELSE IF(RATIO2.GT.0.9) THEN                                     
           NDOUB=NDOUB+1                                                
           WRITE(6,972) NM,TOTFL                                        
           DO 272 IW=1,2                                                
             IB=KEEP(IW)                                                
             IRB=INDXV(IB)/100                                          
             KB=INDXV(IB)-100*IRB                                       
             WRITE(6,975) SEQ(IRB-1),IRB-1,ANGLE(KB),KEEP(IW),          
     +                    RKEEP(IW)/TOTFL*100.                          
 272       CONTINUE                                                     
        ELSE                                                            
           WRITE(6,974) NM,TOTFL                                        
           DO 276 IW=1,10                                               
             IB=KEEP(IW)                                                
             IRB=INDXV(IB)/100                                          
             KB=INDXV(IB)-100*IRB                                       
             WRITE(6,975) SEQ(IRB-1),IRB-1,ANGLE(KB),KEEP(IW),          
     +                    RKEEP(IW)/TOTFL*100.                          
 276       CONTINUE                                                     
        ENDIF                                                           
C                                                                       
 280  CONTINUE                                                          
C                                                                       
      WRITE(6,945) NSING,NDOUB                                          
C                                                                       
 940  FORMAT('NORMAL MODE:',I4,1X,'TOTFL:',F10.3)                       
 941  FORMAT(5(I3,1X,F10.3,2X))                                         
 945  FORMAT(/1X,'THERE ARE:',I4,1X,'NORMAL MODES FOR WHICH ONLY ONE ', 
     +          'ANGLE CONTRIBUTES MORE THAN 90% OF THE M.S. FLUCT.'/   
     +        1X,'THERE ARE:',I3,1X,'NORMAL MODES FOR WHICH TWO ',      
     +          'ANGLES CONTRIBUTE MORE THAN 90% OF THE M.S. FLUCT.')   
 970  FORMAT(1X,'ONE ANGLE CONTRIBUTION TO NORMAL MODE:',I4,1X,F10.3)   
 972  FORMAT(1X,'TWO ANGLES CONTRIBUTION TO NORMAL MODE:',I4,1X,F10.3)  
 974  FORMAT(1X,'MULTI CONTRIBUTIONS TO NORMAL MODE:',I4,1X,F10.3)      
 975  FORMAT(9X,A3,1X,I3,5X,A5,1X,I3,5X,F6.0,1X,'%')                    
C                                                                       
      GOTO 50                                                           
C                                                                       
C---------------------------------------------------------------------  
C                                                                       
C*****STEP 3: LOOK FOR THE NUMBER OF ANGLES NECESSARY FOR AMOUNTING TO  
C             95% OF THE MEAN SQUARE FLUCTUATIONS OF A GIVEN NORMAL MODE
C                                                                       
 300  DO 380 NM=1,NUMVAR                                                
C                                                                       
      TOTFL=0.                                                          
      DO 310 IV=1,NUMVAR                                                
          CFL(IV)=RT*(EVECT(IV,NM)*DEG)**2/EVAL(NM)                     
          TOTFL=TOTFL+CFL(IV)                                           
 310  CONTINUE                                                          
C                                                                       
C-----SORT THE CONTRIBUTIONS OF ALL THE ANGLES                          
C                                                                       
        CALL SORT(CFL,KLASS)                                            
C                                                                       
C-----LOOK FOR THE NUMBER OF VARIABLES NECESSARY FOR AMOUNTING 95%      
C     OF THE M.S. FLUCTUATIONS DUE TO THIS MODE                         
C                                                                       
        SUBTOT=0.                                                       
        DO 340 IV=1,NUMVAR                                              
          SUBTOT=SUBTOT+CFL(KLASS(IV))                                  
          FRACT=SUBTOT/TOTFL                                            
          IF(FRACT.GT.0.95) GOTO 341                                    
 340    CONTINUE                                                        
        PRINT *,'THE PROGRAM SHOULD NOT PASS HERE - CHECK WHY IT DOES'  
        STOP                                                            
 341    ISTO(NM)=IV                                                     
C                                                                       
C-----CHECK FOR THE TYPE OF ANGLES INVOLVED.                            
C                                                                       
        DO 345 I=1,10                                                   
          ITYPE(I)=0                                                    
 345    CONTINUE                                                        
C                                                                       
        DO 350 IV=1,ISTO(NM)                                            
          IB=KLASS(IV)                                                  
          IRB=INDXV(IB)/100                                             
          KB=INDXV(IB)-100*IRB                                          
          ITYPE(KB)=ITYPE(KB)+1                                         
 350    CONTINUE                                                        
C                                                                       
        FLT=FLOAT(ISTO(NM))                                             
        FL1=FLOAT(ITYPE(1))/FLT*100.                                    
        FL2=FLOAT(ITYPE(2))/FLT*100.                                    
        FL3=FLOAT(ITYPE(3))/FLT*100.                                    
        FL4=0.                                                          
        DO 352 K=4,10                                                   
          FL4=FL4+FLOAT(ITYPE(K))                                       
 352    CONTINUE                                                        
        FL4=FL4/FLT*100.                                                
C                                                                       
        WRITE(6,991) NM,ISTO(NM),FL1,FL2,FL3,FL4                        
C                                                                       
 380  CONTINUE                                                          
C                                                                       
      WRITE(40,'(20I4)') (ISTO(I),I=1,NUMVAR)                           
C                                                                       
 991  FORMAT(1X,'NORMAL MODE #:',I4,1X,'# OF VARIABLES:',I4,2X,         
     +'% PHI=',F5.0,1X,'%PSI=',F5.0,1X,'%OMEGA=',F5.0,1X,'%KHI=',F5.0)  
C                                                                       
      GOTO 50                                                           
C                                                                       
 400  STOP                                                              
      END                                                               
C                                                                       
C/////////////////////////////////////////////////////////////////////  
C                                                                       
C THIS SUBROUTINE SORTS THE CONTRIBUTIONS OF THE VARIOUS ANGLES IN      
C DECREASING ORDER.                                                     
C                                                                       
C////////////////////////////////////////////////////////////////////   
C                                                                       
      SUBROUTINE SORT(CFL,KLASS)                                        
C                                                                       
      PARAMETER (NUMVAR=771)                                            
C                                                                       
      REAL*8 CFL(NUMVAR),RKEEP(0:NUMVAR)                                
C                                                                       
      DIMENSION KLASS(NUMVAR)                                           
C                                                                       
      DO 10 I=1,NUMVAR                                                  
        KLASS(I)=0                                                      
        RKEEP(I)=-1.                                                    
 10   CONTINUE                                                          
      RKEEP(0)=1.D+6                                                    
C                                                                       
        DO 240 IV=1,NUMVAR                                              
          DO 236 KP=0,NUMVAR                                            
            IF(CFL(IV).LT.RKEEP(KP).AND.CFL(IV).GT.RKEEP(KP+1)) THEN    
               DO 234 KP1=NUMVAR-1,KP+1,-1                              
                 RKEEP(KP1+1)=RKEEP(KP1)                                
                 KLASS(KP1+1)=KLASS(KP1)                                
 234           CONTINUE                                                 
               RKEEP(KP+1)=CFL(IV)                                      
               KLASS(KP+1)=IV                                           
            ENDIF                                                       
 236      CONTINUE                                                      
 240    CONTINUE                                                        
C                                                                       
      RETURN                                                            
      END                                                               
./ ADD NAME=PRECEP
./ NUMBER NEW1=10,INCR=10
C*************************************************************          
C*    PRECEP                                                 *          
C*               VERSION  1.0         ( 27  APRIL    1985)   *          
C*               VERSION  2.0         (     DEC      1985)   *          
C*                                                           *          
C*               BY H. WAKO, ASAHI CHEM. CO. AND H. NAKAMURA *          
C*                                                           *          
C*************************************************************          
C                                                                       
C        INPUT FILES                                                    
C                    23:   SDATX (RESIDUAL DATA FOR 36 KINDS A.A. RES.) 
C                    25:   UNITX (UNIT     DATA FOR 36 KINDS A.A. RES.) 
C                    21:   MAIN INPUT DATA                              
C                                                                       
C        OUTPUT FILES                                                   
C                    22:   PRECEP OUTPUT  (IOUT22)                      
C                    06:   PRINT  LISTING (IOUT06)                      
C                                                                       
C                                                                       
      SUBROUTINE PRECEP                                                 
      IMPLICIT REAL*8(A-H,O-Z)                                          
C                                                                       
CMSP  INCLUDE (MAXSIZE)                                                 
      INCLUDE '/labo/qclib/inspidas/common/maxsize'
CMSP  INCLUDE (COMMAND)                                                 
      INCLUDE '/labo/qclib/inspidas/common/command'
CMSP  INCLUDE (FILEIO)                                                  
      INCLUDE '/labo/qclib/inspidas/common/fileio'
CMSP  INCLUDE (SIZE)                                                    
      INCLUDE '/labo/qclib/inspidas/common/size'
CMSP  INCLUDE (ALPHA)                                                   
      INCLUDE '/labo/qclib/inspidas/common/alpha'
CMSP  INCLUDE (VARANG)                                                  
      INCLUDE '/labo/qclib/inspidas/common/varang'
CMSP  INCLUDE (REFRNC)                                                  
      INCLUDE '/labo/qclib/inspidas/common/refrnc'
CMSP  INCLUDE (UNITNUMS)                                                
      INCLUDE '/labo/qclib/inspidas/common/unitnums'
CMSP  INCLUDE (CNTL)                                                    
      INCLUDE '/labo/qclib/inspidas/common/cntl'
CMSP  INCLUDE (SSPAIR)                                                  
      INCLUDE '/labo/qclib/inspidas/common/sspair'
CMSP  INCLUDE (PRIMRY)                                                  
      INCLUDE '/labo/qclib/inspidas/common/primry'
      CHARACTER*60 NAME                                                 
      CHARACTER*11 FORMA                                                
      CHARACTER*4  SUBTAS,NXTWD                                         
      COMMON/BONDS/UTOR(10,MAXRES),NDXARR(10,MAXRES),                   
     &              NV(MAXRES)                                          
C     COMMON/CYS001/ KCYS,NCYS                                          
      COMMON/CYS001/ KCYS                                               
C     COMMON/GEN100/ INUMRS,LIST(MAXRES),NPRE(MXRS1)                    
      COMMON/GEN100/ NPRE(MXRS1)                                        
C     COMMON/IOUNIT/ JREAD                                              
C     COMMON/PRINT/  IPRNT                                              
C     COMMON/PREPAR/ LNUM,JMLAST,KMLAST,LNUMS,LEN,NUMATM                
      COMMON/PREPAR/ LNUM,JMLAST,KMLAST,LNUMS,LEN                       
C     COMMON/TOR2/LAMIN,KAMIN,LCARB,KCARB,NUMVAR                        
      COMMON/TOR2/LAMIN,KAMIN,LCARB,KCARB                               
C     DIMENSION  VAR(MAXVAR)                                            
      CHARACTER*4  AANAME(36) /'ALA','ASP','CYS','GLU','PHE','GLY',     
     &  'HIS','ILE','LYS','LEU','MET','ASN','PRO','GLN','ARG','SER',    
     &  'THR','VAL','TRP','TYR','CYS','HPR','NLE','ORN','ORN+','HIS2',  
     &  'HIS+','LYS+','ARG+','ASB','ASP-','GLU-',                       
     &  'PROU','PROF','HPRU','HPRF'/                                    
      EXTERNAL   ABLOCK                                                 
C     CHARACTER  TITLE*80                                               
C                                                                       
C ****** GET SUBTASK *****                                              
C                                                                       
 2000 CONTINUE                                                          
      CALL NXTCMN(SUBTAS)                                               
      WRITE(IOUT02,5000) SUBTAS                                         
 5000 FORMAT(/5X,' NEXT SUBTASK * ', A4,/)                              
C                                                                       
C ***** SUBTASK QUIT *****                                              
C                                                                       
      IF(SUBTAS .EQ. 'QUIT') GOTO 3000                                  
C                                                                       
C ***** SUBTASK READ *****                                              
C                                                                       
      IF(SUBTAS .EQ. 'READ') THEN                                       
        CALL NXTWRD(COMLY2, COMLEN, NXTWD, 4)                           
        IF(NXTWD .EQ. 'PARM') THEN                                      
          CALL NXTWRD(COMLY2, COMLEN, NXTWD, 4)                         
          IF(NXTWD .EQ. 'STAN') THEN                                    
C        *** READ STANDARD RESIDUE DATA ***                             
              CALL GTFLNM(NAME)                                         
              FORMA = 'FORMATTED'                                       
              CALL OPENRD(IN23,FORMA,NAME,IOUT06)                       
              CALL  INPUTT                                              
              CLOSE(IN23)                                               
          ELSE IF(NXTWD .EQ. 'UNIT') THEN                               
C         *** READ UNIT DATA ***                                        
              CALL GTFLNM(NAME)                                         
              FORMA = 'FORMATTED'                                       
              CALL OPENRD(IN25,FORMA,NAME,IOUT06)                       
              CALL  INPUT                                               
              CLOSE(IN25)                                               
          END IF                                                        
        ELSE IF(NXTWD .EQ. 'ANGL') THEN                                 
C       *** READ ANGLES ***                                             
            WRITE(IOUT02,*) '  NOT SUPPORTTED IN THIS VERSION}}'        
        ELSE IF(NXTWD .EQ. 'PREI') THEN                                 
C       *** READ OUTPUT FROM PREIN ***                                  
            CALL GTFLNM(NAME)                                           
            FORMA = 'FORMATTED'                                         
            CALL OPENRD(IN21,FORMA,NAME,IOUT06)                         
            CALL FMPRIN                                                 
            CLOSE(IN21)                                                 
        END IF                                                          
      END IF                                                            
C                                                                       
C ***** SUBTASK RUN *****                                               
C                                                                       
      IF(SUBTAS .EQ. 'RUN') THEN                                        
      WRITE(IOUT06,100)                                                 
C     IN21 = 21                                                         
      WRITE(IOUT06,913)  TITLE                                          
C       IF (INUMRS.GT.MAXRES) THEN                                      
        IF (NUMRES.GT.MAXRES) THEN                                      
C         WRITE(6,800)  MAXRES,INUMRS                                   
          WRITE(6,800)  MAXRES,NUMRES                                   
          STOP                                                          
        ENDIF                                                           
      WRITE(IOUT06,903)                                                 
C     WRITE(IOUT06,916)  (LIST(I),I=2,INUMRS-1)                         
      WRITE(IOUT06,916)  (LIST(I),I=2,NUMRES-1)                         
      WRITE(IOUT06,914)                                                 
C     WRITE(IOUT06,916)  LIST(1),LIST(INUMRS)                           
      WRITE(IOUT06,916)  LIST(1),LIST(NUMRES)                           
      WRITE(IOUT06,914)                                                 
C     WRITE(IOUT06,915)  (AANAME(LIST(I)),I=2,INUMRS-1)                 
      WRITE(IOUT06,915)  (AANAME(LIST(I)),I=2,NUMRES-1)                 
C                                                                       
      CALL  PARAM(SUM)                                                  
C     NUMATM = NPRE(INUMRS+1)                                           
      NUMATM = NPRE(NUMRES+1)                                           
        IF (NUMATM.GT.MAXATM) THEN                                      
          WRITE(6,810)  MAXATM,NUMATM                                   
          STOP                                                          
        ENDIF                                                           
      CALL  PARAMT                                                      
      WRITE(IOUT06,120)  SUM*0.07761505                                 
C                                                                       
C     CALL  RDCYS                                                       
C       IF (NCYS.GT.MAXSS)  THEN                                        
        IF (NSS.GT.MAXSS)   THEN                                        
C         WRITE(6,820)  MAXSS,NCYS                                      
          WRITE(6,820)  MAXSS,NSS                                       
          STOP                                                          
        ENDIF                                                           
C     IF (NCYS.EQ.0)  GOTO  3                                           
      IF (NSS.EQ.0)   GOTO  3                                           
      WRITE(IOUT06,130)                                                 
C     WRITE(IOUT06,140)  ((NPAIR(K,J),J=1,2),K=1,NCYS)                  
      WRITE(IOUT06,140)  ((NPAIR(K,J),J=1,2),K=1,NSS)                   
C                                                                       
   3  RAD = 0.01745329                                                  
C     READ(IN21,150)  ((ANGRAD(J,I),J=1,10),I=1,INUMRS)                 
C     READ(IN21,150)  ((ANGRAD(J,I),J=1,10),I=1,NUMRES)                 
C     DO  4  I = 1, INUMRS                                              
C     DO  4  I = 1, NUMRES                                              
C     DO  4  J = 1, 10                                                  
C  4  ANGRAD(J,I) = ANGRAD(J,I)*RAD                                     
C                                                                       
      JMLAST=0                                                          
      LNUMS = 0                                                         
C                                                                       
      CALL  SPECV                                                       
C     CALL  INITOR(VAR)                                                 
      CALL  INITOR                                                      
        IF (NUMVAR.GT.MAXVAR) THEN                                      
          WRITE(6,830)  MAXVAR,NUMVAR                                   
          STOP                                                          
        ENDIF                                                           
      LEN = 1                                                           
C     CALL  ENERGY (VAR)                                                
      CALL  ENERGY                                                      
      LNUM = 4                                                          
      CALL  PREP                                                        
      CALL RUN1 (LEN)                                                   
      CALL OUTMAX                                                       
      END IF                                                            
C                                                                       
C ***** SUBTASK WRITE *****                                             
C                                                                       
      IF(SUBTAS .EQ. 'WRIT') THEN                                       
        CALL NXTWRD(COMLY2, COMLEN, NXTWD, 4)                           
        IF(NXTWD .EQ. 'ANGL') THEN                                      
C       *** WRITE ANGLE DATA ***                                        
            WRITE(IOUT02,*) '  NOT SUPPORTED IN THIS VERSION}}'         
        ELSE IF(NXTWD .EQ. 'PREO') THEN                                 
C       *** WRITE PREOUT ***                                            
            CALL GTFLNM(NAME)                                           
            FORMA = 'FORMATTED'                                         
            CALL OPENWT(IOUT22,FORMA,NAME,IOUT06)                       
            CALL  OUT1                                                  
            CLOSE(IOUT22)                                               
        END IF                                                          
      END IF                                                            
C                                                                       
C ***** RETURN TO THE TOP OF THE LOOP                                   
C                                                                       
      GOTO 2000                                                         
 3000 RETURN                                                            
  100 FORMAT('1',20X,'***   PRECEPP OUTPUT   ***')                      
  110 FORMAT(16I5)                                                      
  120 FORMAT(/,' NET CHARGE ON PEPTIDE =',F8.3,                         
     & ' ELECTRONIC CHARGE UNITS')                                      
  130 FORMAT(/,' DISULFIDE BONDS CONNECT THE FOLLOWING RESIDUE PAIRS')  
  140 FORMAT((/,4(8X,I3,1X,I3)))                                        
  150 FORMAT(10F8.3)                                                    
  903 FORMAT('0***  AMINO ACID SEQUENCE  ***'/)                         
  904 FORMAT(20I3)                                                      
  905 FORMAT(A80)                                                       
  913 FORMAT('0    PROTEIN:  ',A80)                                     
  914 FORMAT(' ')                                                       
  915 FORMAT(' ',20A4)                                                  
  916 FORMAT(6X,20I3)                                                   
  800 FORMAT('0 ***ERROR MESSAGE FROM MAIN.'/                           
     &  '    * MAXRES.LT.INUMRS *    CORRECT MAXRES IN PARAMETER'/      
     &  '        MAXRES=',I4,',   INUMRS=',I4)                          
  810 FORMAT('0 ***ERROR MESSAGE FROM MAIN.'/                           
     &  '    * MAXATM.LT.NUMATM *    CORRECT MAXATM IN PARAMETER'/      
     &  '        MAXATM=',I5,',   NUMATM=',I5)                          
  820 FORMAT('0 ***ERROR MESSAGE FROM MAIN.'/                           
     &  '    * MAXSS.LT.NCYS *    CORRECT MAXSS IN PARAMETER'/          
     &  '        MAXSS=',I3,',   NCYS=',I3)                             
  830 FORMAT('0 ***ERROR MESSAGE FROM MAIN.'/                           
     &  '    * MAXVAR.LT.NUMVAR *    CORRECT MAXVAR IN PARAMETER'/      
     &  '        MAXVAR=',I4,',   NUMVAR=',I4)                          
      END                                                               
C*********************************************************************  
C                                                                    *  
C            ECEPP                                                   *  
C                                                                    *  
C*********************************************************************  
      BLOCK DATA ABLOCK                                                 
      IMPLICIT REAL*8(A-H,O-Z)                                          
C                                                                       
C THIS SUBPROGRAM INITIALIZES SOME DATA PASSED BY COMMON BLOCKS         
C IPRNT CONTROLS SOME PRINT STATEMENTS                                  
C                                                                       
      REAL*8  IDENT, PROANG(3)                                          
CMSP  INCLUDE (UNITNUMS)                                                
      INCLUDE '/labo/qclib/inspidas/common/unitnums'
CMSP  INCLUDE (CNTL)                                                    
      INCLUDE '/labo/qclib/inspidas/common/cntl'
      COMMON/GEN005/  IDENT(9)                                          
      COMMON/GEN006/  PROANG                                            
      COMMON/GEN007/  LBG(3),LEN(3)                                     
C     COMMON/IOUNIT/  JREAD                                             
      COMMON/PRAM/  NREG,NEND,LR(6,20),LRT1(7,36)                       
C     COMMON/PRINT/ IPRNT                                               
      DATA  IDENT /1.D0,3*0.D0,1.D0,3*0.D0,1.D0/                        
      DATA  IPRNT /0/                                                   
      DATA  IN23,IOUT06,IOUT22 /23,06,22/                               
      DATA  PROANG/2.1366663D0, 1.9620810D0, 1.8325949D0/               
C     PROANG(1) = 122.422 * 0.0174532925                                
C     PROANG(2) = 112.419 * 0.0174532925                                
C     PROANG(3) = 105.000 * 0.0174532925                                
      DATA  LBG /3,8,5/                                                 
      DATA  LEN /10,10,7/                                               
      DATA  NREG /36/                                                   
      DATA  NEND /20/                                                   
      END                                                               
      SUBROUTINE FMPRIN                                                 
      IMPLICIT REAL*8(A-H,O-Z)                                          
C                                                                       
C THIS SUBROUTINE READS OUTPUT FROM PREIN                               
C                                                                       
      EXTERNAL   ABLOCK                                                 
CMSP  INCLUDE (MAXSIZE)                                                 
      INCLUDE '/labo/qclib/inspidas/common/maxsize'
CMSP  INCLUDE (SIZE)                                                    
      INCLUDE '/labo/qclib/inspidas/common/size'
CMSP  INCLUDE (ALPHA)                                                   
      INCLUDE '/labo/qclib/inspidas/common/alpha'
CMSP  INCLUDE (VARANG)                                                  
      INCLUDE '/labo/qclib/inspidas/common/varang'
CMSP  INCLUDE (REFRNC)                                                  
      INCLUDE '/labo/qclib/inspidas/common/refrnc'
CMSP  INCLUDE (UNITNUMS)                                                
      INCLUDE '/labo/qclib/inspidas/common/unitnums'
CMSP  INCLUDE (CNTL)                                                    
      INCLUDE '/labo/qclib/inspidas/common/cntl'
CMSP  INCLUDE (SSPAIR)                                                  
      INCLUDE '/labo/qclib/inspidas/common/sspair'
CMSP  INCLUDE (PRIMRY)                                                  
      INCLUDE '/labo/qclib/inspidas/common/primry'
      COMMON/BONDS/UTOR(10,MAXRES),NDXARR(10,MAXRES),                   
     &              NV(MAXRES)                                          
C     COMMON/CYS001/ KCYS,NCYS                                          
      COMMON/CYS001/ KCYS                                               
C     COMMON/GEN100/ INUMRS,LIST(MAXRES),NPRE(MXRS1)                    
      COMMON/GEN100/ NPRE(MXRS1)                                        
C     COMMON/IOUNIT/ JREAD                                              
C     COMMON/PRINT/  IPRNT                                              
C     COMMON/PREPAR/ LNUM,JMLAST,KMLAST,LNUMS,LEN,NUMATM                
      COMMON/PREPAR/ LNUM,JMLAST,KMLAST,LNUMS,LEN                       
C     COMMON/TOR2/LAMIN,KAMIN,LCARB,KCARB,NUMVAR                        
      COMMON/TOR2/LAMIN,KAMIN,LCARB,KCARB                               
C     DIMENSION  VAR(MAXVAR)                                            
      CHARACTER*4  AANAME(36) /'ALA','ASP','CYS','GLU','PHE','GLY',     
     &  'HIS','ILE','LYS','LEU','MET','ASN','PRO','GLN','ARG','SER',    
     &  'THR','VAL','TRP','TYR','CYS','HPR','NLE','ORN','ORN+','HIS2',  
     &  'HIS+','LYS+','ARG+','ASB','ASP-','GLU-',                       
     &  'PROU','PROF','HPRU','HPRF'/                                    
C     CHARACTER  TITLE*80                                               
C                                                                       
      IN21 = 21                                                         
      READ(IN21,905)  TITLE                                             
C     WRITE(IOUT06,913)  TITLE                                          
C     READ(IN21,110)  INUMRS,NUMCON,IPRNT,I1,I2                         
      READ(IN21,110)  NUMRES,NUMCON,IPRNT,I1,I2                         
C       IF (INUMRS.GT.MAXRES) THEN                                      
C       IF (NUMRES.GT.MAXRES) THEN                                      
C         WRITE(6,800)  MAXRES,INUMRS                                   
C         WRITE(6,800)  MAXRES,NUMRES                                   
C         STOP                                                          
C       ENDIF                                                           
C     READ(IN21,904)  (LIST(I),I=2,INUMRS-1)                            
      READ(IN21,904)  (LIST(I),I=2,NUMRES-1)                            
C     READ(IN21,904)   LIST(1),LIST(INUMRS)                             
      READ(IN21,904)   LIST(1),LIST(NUMRES)                             
C     WRITE(IOUT06,903)                                                 
C     WRITE(IOUT06,916)  (LIST(I),I=2,INUMRS-1)                         
C     WRITE(IOUT06,916)  (LIST(I),I=2,NUMRES-1)                         
C     WRITE(IOUT06,914)                                                 
C     WRITE(IOUT06,916)  LIST(1),LIST(INUMRS)                           
C     WRITE(IOUT06,916)  LIST(1),LIST(NUMRES)                           
C     WRITE(IOUT06,914)                                                 
C     WRITE(IOUT06,915)  (AANAME(LIST(I)),I=2,INUMRS-1)                 
C     WRITE(IOUT06,915)  (AANAME(LIST(I)),I=2,NUMRES-1)                 
C                                                                       
C     CALL  PARAM(SUM)                                                  
C     NUMATM = NPRE(INUMRS+1)                                           
C     NUMATM = NPRE(NUMRES+1)                                           
C       IF (NUMATM.GT.MAXATM) THEN                                      
C         WRITE(6,810)  MAXATM,NUMATM                                   
C         STOP                                                          
C       ENDIF                                                           
C     CALL  PARAMT                                                      
C     WRITE(IOUT06,120)  SUM*0.07761505                                 
C                                                                       
      CALL  RDCYS                                                       
C       IF (NCYS.GT.MAXSS)  THEN                                        
C       IF (NSS.GT.MAXSS)   THEN                                        
C         WRITE(6,820)  MAXSS,NCYS                                      
C         WRITE(6,820)  MAXSS,NSS                                       
C         STOP                                                          
C       ENDIF                                                           
C     IF (NCYS.EQ.0)  GOTO  3                                           
C     IF (NSS.EQ.0)   GOTO  3                                           
C     WRITE(IOUT06,130)                                                 
C     WRITE(IOUT06,140)  ((NPAIR(K,J),J=1,2),K=1,NCYS)                  
C     WRITE(IOUT06,140)  ((NPAIR(K,J),J=1,2),K=1,NSS)                   
C                                                                       
C  3  RAD = 0.01745329                                                  
      RAD = 0.01745329                                                  
C     READ(IN21,150)  ((ANGRAD(J,I),J=1,10),I=1,INUMRS)                 
      READ(IN21,150)  ((ANGRAD(J,I),J=1,10),I=1,NUMRES)                 
C     DO  4  I = 1, INUMRS                                              
      DO  4  I = 1, NUMRES                                              
      DO  4  J = 1, 10                                                  
   4  ANGRAD(J,I) = ANGRAD(J,I)*RAD                                     
C                                                                       
C     JMLAST=0                                                          
C     LNUMS = 0                                                         
C                                                                       
C     CALL  SPECV                                                       
C     CALL  INITOR(VAR)                                                 
C     CALL  INITOR                                                      
C       IF (NUMVAR.GT.MAXVAR) THEN                                      
C         WRITE(6,830)  MAXVAR,NUMVAR                                   
C         STOP                                                          
C       ENDIF                                                           
C     LEN = 1                                                           
C     CALL  ENERGY (VAR)                                                
C     CALL  ENERGY                                                      
C     LNUM = 4                                                          
C     CALL  PREP                                                        
CC+++++++                                                               
C     CALL  RUN1 (LEN)                                                  
C     CALL  OUT1                                                        
CC+++++++                                                               
C     CALL  OUTMAX                                                      
      RETURN                                                            
  100 FORMAT('1',20X,'***   PRECEPP OUTPUT   ***')                      
  110 FORMAT(16I5)                                                      
  120 FORMAT(/,' NET CHARGE ON PEPTIDE =',F8.3,                         
     & ' ELECTRONIC CHARGE UNITS')                                      
  130 FORMAT(/,' DISULFIDE BONDS CONNECT THE FOLLOWING RESIDUE PAIRS')  
  140 FORMAT((/,4(8X,I3,1X,I3)))                                        
  150 FORMAT(10F8.3)                                                    
  903 FORMAT('0***  AMINO ACID SEQUENCE  ***'/)                         
  904 FORMAT(20I3)                                                      
  905 FORMAT(A80)                                                       
  913 FORMAT('0    PROTEIN:  ',A80)                                     
  914 FORMAT(' ')                                                       
  915 FORMAT(' ',20A4)                                                  
  916 FORMAT(6X,20I3)                                                   
  800 FORMAT('0 ***ERROR MESSAGE FROM MAIN.'/                           
     &  '    * MAXRES.LT.INUMRS *    CORRECT MAXRES IN PARAMETER'/      
     &  '        MAXRES=',I4,',   INUMRS=',I4)                          
  810 FORMAT('0 ***ERROR MESSAGE FROM MAIN.'/                           
     &  '    * MAXATM.LT.NUMATM *    CORRECT MAXATM IN PARAMETER'/      
     &  '        MAXATM=',I5,',   NUMATM=',I5)                          
  820 FORMAT('0 ***ERROR MESSAGE FROM MAIN.'/                           
     &  '    * MAXSS.LT.NCYS *    CORRECT MAXSS IN PARAMETER'/          
     &  '        MAXSS=',I3,',   NCYS=',I3)                             
  830 FORMAT('0 ***ERROR MESSAGE FROM MAIN.'/                           
     &  '    * MAXVAR.LT.NUMVAR *    CORRECT MAXVAR IN PARAMETER'/      
     &  '        MAXVAR=',I4,',   NUMVAR=',I4)                          
      END                                                               
      SUBROUTINE DMM(A,B,C)                                             
      IMPLICIT REAL*8(A-H,O-Z)                                          
C                                                                       
C THIS SUBROUTINE MULTIPLIES MATRIX A BY MATRIX B, AND RETURNS THE      
C PRODUCT AS MATRIX C (ALL ARE 3X3 MATRICES).                           
C                                                                       
      DOUBLE PRECISION A,B,C                                            
      DIMENSION A(3,3),B(3,3),C(3,3)                                    
      DO 10 I = 1,3                                                     
      DO 10 J = 1,3                                                     
 10   C(I,J) = A(I,1)*B(1,J) + A(I,2)*B(2,J) + A(I,3)*B(3,J)            
      RETURN                                                            
      END                                                               
      FUNCTION DST(A,B)                                                 
      IMPLICIT REAL*8(A-H,O-Z)                                          
C                                                                       
C THIS FUNCTION SUBPROGRAM COMPUTES THE DISTANCE BETWEEN TWO ATOMS,     
C REPRESENTED BY COORDINATE ARRAYS A AND B.                             
C                                                                       
      DIMENSION A(3),B(3)                                               
      T = A(1) - B(1)                                                   
      X = A(2) - B(2)                                                   
      Y = A(3) - B(3)                                                   
      DST = SQRT(T*T+X*X+Y*Y)                                           
      RETURN                                                            
      END                                                               
      SUBROUTINE GENER                                                  
      IMPLICIT REAL*8(A-H,O-Z)                                          
C                                                                       
C THIS SUBROUTINE GENERATES THE COORDINATES OF THE BACKBONE ATOMS OF    
C THE POLYPEPTIDE, EXCEPT FOR PROLINE AND HYDROXYPROLINE RESIDUES.  IT  
C CALLS GNAMIN AND GNCARB TO GENERATE END GROUP COORDINATES, GNSIDE FOR 
C SIDECHAIN COORDINATES, AND GNPRO FOR PROLINE-TYPE RESIDUES.           
C                                                                       
      DOUBLE PRECISION DABS,DCOS,DSIN                                   
      DOUBLE PRECISION A1(9),B1(9),MATA(3,3),MATB(3,3),MATC(9)          
      DOUBLE PRECISION ROT(9),A(9)                                      
      DOUBLE PRECISION CSTH1,SNTH1,CSANG,SNANG,IDENT(9)                 
      DOUBLE PRECISION CST,SNT,CDELTA,SDELTA,PHI,PSI,OMEGA,CHI,CIS(3)   
      DOUBLE PRECISION ANG,PROANG(3)                                    
CMSP  INCLUDE (MAXSIZE)                                                 
      INCLUDE '/labo/qclib/inspidas/common/maxsize'
CMSP  INCLUDE(SIZE)                                                     
      INCLUDE '/labo/qclib/inspidas/common/size'
CMSP  INCLUDE (VARANG)                                                  
      INCLUDE '/labo/qclib/inspidas/common/varang'
CMSP  INCLUDE (ALPHA)                                                   
      INCLUDE '/labo/qclib/inspidas/common/alpha'
CMSP  INCLUDE (CHARGE)                                                  
      INCLUDE '/labo/qclib/inspidas/common/charge'
CMSP  INCLUDE (COORD)                                                   
      INCLUDE '/labo/qclib/inspidas/common/coord'
CMSP  INCLUDE (NBTYPE)                                                  
      INCLUDE '/labo/qclib/inspidas/common/nbtype'
CMSP  INCLUDE (REFRNC)                                                  
      INCLUDE '/labo/qclib/inspidas/common/refrnc'
CMSP  INCLUDE (UNITNUMS)                                                
      INCLUDE '/labo/qclib/inspidas/common/unitnums'
CMSP  INCLUDE (CNTL)                                                    
      INCLUDE '/labo/qclib/inspidas/common/cntl'
CMSP  INCLUDE (PRIMRY)                                                  
      INCLUDE '/labo/qclib/inspidas/common/primry'
      COMMON/BONDS/UTOR(10,MAXRES),NDXARR(10,MAXRES),                   
     &             NV(MAXRES)                                           
      COMMON/CHECK/KNDRES(36),KNDEND(20)                                
C     COMMON/GEN100/INUMRS,LIST(MAXRES),NPRE(MXRS1)                     
      COMMON/GEN100/NPRE(MXRS1)                                         
      COMMON/GEN001/XOORD(3,26,36),SNTH2(36),CSTH2(36),SDEL(36),        
     1   CDEL(36)                                                       
      COMMON/GEN002/CHIANG(3,7,36),NATOMS(36),NCHI(36),NDPT1(7,36),     
     1  NDPT2(7,36),NUM(7,36)                                           
      COMMON/GEN003/SIGN,N,NT,IFEVEN                                    
      COMMON/GEN004/ENOORD(3,22,20),ECHG(22,20),EALPHA(22,20),          
     1   NDATOM(20),NBOND(20),NNDPT1(6,20),NNDPT2(6,20),NDTYPE(22,20)   
      COMMON/GEN005/IDENT                                               
      COMMON/GNROU/MATA,MATB,ROT,K                                      
C     COMMON/IOUNIT/JREAD                                               
C     COMMON/PRINT/IPRNT                                                
C     CHARACTER*4 ALPH,EALPHA                                           
      CHARACTER*4 EALPHA                                                
      DIMENSION TEMP(3),TEMP2(3)                                        
      EQUIVALENCE (A1(1),MATA(1,1)),(B1(1),MATB(1,1))                   
      DATA PI/ 3.141593 /                                               
      DATA ERROR / .0001 /                                              
C                                                                       
C IFEVEN MUST BE RESET EVERY TIME A MOLECULE IS GENERATED.              
C                                                                       
      IFEVEN = 1                                                        
      CALL GNAMIN                                                       
C     LASTFL = INUMRS - 1                                               
      LASTFL = NUMRES - 1                                               
      DO 110 I=1,9                                                      
      A1(I) = IDENT(I)                                                  
  110 CONTINUE                                                          
      DO 380 N=2,LASTFL                                                 
      IF (N.EQ.LASTFL) GO TO 120                                        
      SNTH1 = FLOAT(IFEVEN)*0.857167                                    
      CSTH1 = 0.515038                                                  
      LNEXT=LIST(N+1)                                                   
      LNEXT=IABS(LNEXT)                                                 
      KNEXT=KNDRES(LNEXT)                                               
      KNEXT = IABS(KNEXT)                                               
      IF (KNEXT.NE.13.AND.KNEXT.NE.22) GO TO 120                        
      IF (COS(ANGRAD(3,N)).LE.0.0) GO TO 120                            
      SNTH1 = FLOAT(IFEVEN)*0.809017                                    
      CSTH1 = 0.587785                                                  
      IF (IPRNT.EQ.1) WRITE(IOUT06,400) N                               
  120 LISTN = LIST(N)                                                   
      NT = IABS(LISTN)                                                  
      KINDN = KNDRES(NT)                                                
      KINDN = IABS(KINDN)                                               
C                                                                       
C SIGN INDICATES WHETHER THE D OR L CONFIGURATION IS REQUESTED.         
C L IS POSITIVE; D IS NEGATIVE                                          
C                                                                       
      SIGN = 1.0                                                        
      IF (NT .NE. LISTN) SIGN = -1.0                                    
C                                                                       
C PHI, PSI, AND OMEGA ARE THE FIRST THREE ANGLES IN THE LIST FOR        
C EACH RESIDUE.  THE REMAINING 7 ANGLES ARE POSSIBLE CHI'S.             
C                                                                       
      PHI = ANGRAD(1,N) - PI                                            
      PSI = ANGRAD(2,N) - PI                                            
      OMEGA = ANGRAD(3,N) - PI                                          
C                                                                       
C PROLINE RESIDUES WILL BE HANDLED IN A SPECIAL SUBROUTINE              
C                                                                       
      IF (KINDN.NE.13.AND.KINDN.NE.22) GO TO 140                        
      CALL GNPRO                                                        
      IF (KINDN.EQ.13) GO TO 250                                        
      DO 130 L=1,9                                                      
      ROT(L)=A1(L)                                                      
  130 CONTINUE                                                          
      GO TO 240                                                         
C                                                                       
C IF RESIDUE IS ISOLEUCINE, CHI2 AND CHI3 MUST BE EXCHANGED             
C                                                                       
  140 IF (KINDN.NE.8) GO TO 150                                         
      T = ANGRAD(5,N)                                                   
      ANGRAD(5,N) = ANGRAD(6,N)                                         
      ANGRAD(6,N) = T                                                   
C                                                                       
C IF THIS IS THE SECOND RESIDUE IN THE LIST (THE FIRST RESIDUE BEING AN 
C END GROUP), DO NOT ATTACH THE H AND C-ALPHA TO THE INITIAL N. THESE   
C ATOMS WERE ATTACHED WITH THE END GROUP.                               
C                                                                       
  150 IF (N.EQ.2) GO TO 170                                             
C                                                                       
C ATTACH THE H AND C-ALPHA TO N.                                        
C                                                                       
      DO 160 J=2,3                                                      
      CALL TRANSF(MATA,J,1)                                             
  160 CONTINUE                                                          
C                                                                       
  170 IF (DABS(PHI) .GT. ERROR) GO TO 190                               
      DO 180 L=1,9                                                      
      B1(L) = A1(L)                                                     
  180 CONTINUE                                                          
      GO TO 210                                                         
C                                                                       
C IF PHI DOES NOT EQUAL ZERO, MODIFY THE ROTATION MATRIX.               
C                                                                       
  190 CSANG=DCOS(PHI)                                                   
      SNANG = DSIN(PHI)                                                 
      DO 200 J=1,3                                                      
      MATB(J,1) = MATA(J,1)                                             
      MATB(J,2) = MATA(J,2)*CSANG + MATA(J,3)*SNANG                     
  200 MATB(J,3) = - MATA(J,2)*SNANG + MATA(J,3)*CSANG                   
C                                                                       
C ATTACH THE H, C-BETA, AND C' TO C-ALPHA.                              
C                                                                       
  210 DO 220 J=4,6                                                      
      CALL TRANSF(MATB,J,3)                                             
  220 CONTINUE                                                          
C                                                                       
C THE FOLLOWING SECTION WILL ATTACH THE SIDECHAIN COORDINATES TO C-BETA.
C                                                                       
      K=8                                                               
      NX = NCHI(NT)                                                     
C                                                                       
C IF THERE ARE NO SIDECHAIN ROTATIONS (IF THE RESIDUE IS PROLINE OR     
C GLYCINE), THE NEXT SECTION IS BYPASSED.                               
C                                                                       
      IF (NX.EQ.0) GO TO 250                                            
      DO 230 L=1,9                                                      
      ROT(L) = B1(L)                                                    
  230 CONTINUE                                                          
  240 CALL GNSIDE                                                       
C                                                                       
C IF IFEVEN EQUALS 1, THEN THE SIGNS OF SNTH2 AND SDEL (AS STORED FOR   
C THE RESIDUE) MUST BE REVERSED.                                        
C                                                                       
  250 SNT = -FLOAT(IFEVEN)*SNTH2(NT)                                    
      SDELTA = -FLOAT(IFEVEN)*SDEL(NT)                                  
      CST = CSTH2(NT)                                                   
      CDELTA = CDEL(NT)                                                 
      IF(DABS(PSI).GT.ERROR) GO TO 270                                  
      DO 260 L=1,9                                                      
      A1(L) = B1(L)                                                     
  260 CONTINUE                                                          
      GO TO 280                                                         
C                                                                       
C IF PSI .NE.0.0, CALCULATE THE ROTATION MATRIX.                        
C                                                                       
  270 CALL MATRIX(CST,SNT,PSI,MATC)                                     
C                                                                       
C MULTIPLY THIS BY THE PREVIOUS BACKBONE ROTATIONS.                     
C                                                                       
      CALL DMM(MATB,MATC,MATA)                                          
C                                                                       
C IF THIS IS THE LAST RESIDUE, THEN SKIP THE OMEGA ROTATIONS. PUT THE   
C CARBOXYL END GROUP ON.                                                
C                                                                       
  280 IF (N.NE.LASTFL) GO TO 300                                        
C                                                                       
      DO 290 L=1,9                                                      
      B1(L) = A1(L)                                                     
  290 CONTINUE                                                          
      CSANG = CST                                                       
      SNANG = SNT                                                       
      GO TO 360                                                         
C                                                                       
C ATTACH THE O TO THE C'.                                               
C                                                                       
  300 CALL TRANSF(MATA,7,6)                                             
C                                                                       
C POSITION THE N FOR THE NEXT RESIDUE.                                  
C                                                                       
      CALL TRANSF(MATA,K,6)                                             
      IF (KNEXT.NE.13.AND.KNEXT.NE.22) GO TO 320                        
      NA = NPRE(N+1) + 1                                                
      NB = NPRE(N) + 6                                                  
C                                                                       
C THIS SECTION LENGTHENS THE AMIDE BOND TO 1.36 ANGSTROMS WHEN THE      
C NEXT RESIDUE IS A PROLINE-TYPE.                                       
C                                                                       
      RAN = .035                                                        
      RAB = DST(REFCRD(1,NA),REFCRD(1,NB))                              
      DO 305 I=1,3                                                      
      TEMP(I) = REFCRD(I,NA) + RAN*(REFCRD(I,NA)-REFCRD(I,NB))/RAB      
  305 CONTINUE                                                          
      DO 310 J = 1,3                                                    
      REFCRD(J,NA) = TEMP(J)                                            
  310 CONTINUE                                                          
  320 IF(DABS(OMEGA).GT.ERROR) GO TO 340                                
      DO 330 L=1,9                                                      
      B1(L) = A1(L)                                                     
  330 CONTINUE                                                          
      GO TO 350                                                         
C                                                                       
C IF OMEGA IS NOT EQUAL TO ZERO, CALCULATE THE ROTATION MATRIX.         
C                                                                       
  340 CALL MATRIX(CDELTA,SDELTA,OMEGA,MATC)                             
C                                                                       
C MULTIPLY BY THE PREVIOUS TRANSFORMATION MATRIX.                       
C                                                                       
      CALL DMM(MATA,MATC,MATB)                                          
C                                                                       
C CSANG IS THE COSINE OF DELTA (DIFFERENCE BETWEEN THETA 2 AND THETA 3) 
C PLUS THETA 1.                                                         
C                                                                       
  350 CSANG=CDELTA*CSTH1-SDELTA*SNTH1                                   
      SNANG = SDELTA*CSTH1 + CDELTA*SNTH1                               
C                                                                       
C MULTIPLY IFEVEN AND SNTH1 BY -1 SO THAT THE COORDINATES OF THE NEXT   
C RESIDUE WILL BE FLIPPED ABOUT THE X-AXIS AND THE EXTENDED             
C CONFORMATION WILL RESULT.                                             
C                                                                       
      IFEVEN = - IFEVEN                                                 
      SNTH1 = - SNTH1                                                   
C                                                                       
C ADJUST THE MATRIX TO LINE UP THE COORDINATES OF THE NEXT RESIDUE IN   
C THE ORIGINAL COORDINATE SYSTEM.                                       
C                                                                       
  360 DO 370 J=1,3                                                      
      MATA(J,1) = MATB(J,1)*CSANG + MATB(J,2)*SNANG                     
      MATA(J,2) = - MATB(J,1)*SNANG + MATB(J,2)*CSANG                   
      MATA(J,3) = MATB(J,3)                                             
  370 CONTINUE                                                          
      IF(KINDN.NE.8) GO TO 380                                          
      T = ANGRAD(5,N)                                                   
      ANGRAD(5,N) = ANGRAD(6,N)                                         
      ANGRAD(6,N) = T                                                   
  380 CONTINUE                                                          
C                                                                       
C ATTACH THE CARBOXYL END GROUP.                                        
C                                                                       
      CALL GNCARB                                                       
C                                                                       
C GENERATION IS COMPLETE.                                               
C                                                                       
      RETURN                                                            
  400 FORMAT (//9H RESIDUE ,I3,46H  HAS CIS OMEGA AND NEXT RESIDUE IS A 
     1PROLINE./66H PROLINE IS ATTACHED SO C-N-CA=126 DEGREES AND C-N-CD=
     2121 DEGREES.)                                                     
      END                                                               
      SUBROUTINE GNAMIN                                                 
      IMPLICIT REAL*8(A-H,O-Z)                                          
C                                                                       
C THIS SUBROUTINE GENERATES THE COORDINATES OF THE AMINO END GROUP.     
C                                                                       
      DOUBLE PRECISION A1(9),B1(9),MATA(3,3),MATB(3,3),MATC(9)          
      DOUBLE PRECISION CST,SNT,CDELTA,SDELTA,PHI,PSI,OMEGA,CHI,CIS(3)   
      DOUBLE PRECISION ANG,A5(3,3),ROT(9),DABS                          
CMSP  INCLUDE (MAXSIZE)                                                 
      INCLUDE '/labo/qclib/inspidas/common/maxsize'
CMSP  INCLUDE(SIZE)                                                     
      INCLUDE '/labo/qclib/inspidas/common/size'
CMSP  INCLUDE (VARANG)                                                  
      INCLUDE '/labo/qclib/inspidas/common/varang'
CMSP  INCLUDE (ALPHA)                                                   
      INCLUDE '/labo/qclib/inspidas/common/alpha'
CMSP  INCLUDE (CHARGE)                                                  
      INCLUDE '/labo/qclib/inspidas/common/charge'
CMSP  INCLUDE (COORD)                                                   
      INCLUDE '/labo/qclib/inspidas/common/coord'
CMSP  INCLUDE (NBTYPE)                                                  
      INCLUDE '/labo/qclib/inspidas/common/nbtype'
CMSP  INCLUDE (REFRNC)                                                  
      INCLUDE '/labo/qclib/inspidas/common/refrnc'
CMSP  INCLUDE (UNITNUMS)                                                
      INCLUDE '/labo/qclib/inspidas/common/unitnums'
CMSP  INCLUDE (CNTL)                                                    
      INCLUDE '/labo/qclib/inspidas/common/cntl'
CMSP  INCLUDE (PRIMRY)                                                  
      INCLUDE '/labo/qclib/inspidas/common/primry'
      COMMON/BONDS/UTOR(10,MAXRES),NDXARR(10,MAXRES),                   
     &             NV(MAXRES)                                           
      COMMON/CHECK/KNDRES(36),KNDEND(20)                                
C     COMMON/GEN100/INUMRS,LIST(MAXRES),NPRE(MXRS1)                     
      COMMON/GEN100/NPRE(MXRS1)                                         
      COMMON/GEN004/ENOORD(3,22,20),ECHG(22,20),EALPHA(22,20),          
     1   NDATOM(20),NBOND(20),NNDPT1(6,20),NNDPT2(6,20),NDTYPE(22,20)   
      COMMON/GNROU/MATA,MATB,ROT,K                                      
C     COMMON/IOUNIT/JREAD                                               
C     COMMON/PRINT/IPRNT                                                
C     CHARACTER*4 ALPH,EALPHA                                           
      CHARACTER*4 EALPHA                                                
      DIMENSION TEMP(3),TEMP2(3)                                        
      EQUIVALENCE (A1(1),MATA(1,1)),(B1(1),MATB(1,1))                   
      DATA PI/ 3.141593 /                                               
      DATA ERROR / .0001 /                                              
      DATA A5/ .99619D0,-.08716D0,.0D0,.08716D0,.99619D0,.0D0,.0D0,.0D0,
     1 1.0D0/                                                           
C                                                                       
      LAMIN = LIST(1)                                                   
      KAMIN = KNDEND(LAMIN)                                             
      KAMIN = IABS(KAMIN)                                               
      LNEXT = LIST(2)                                                   
      LNEXT = IABS(LNEXT)                                               
      KNEXT = KNDRES(LNEXT)                                             
      KNEXT = IABS(KNEXT)                                               
      NATOM=NDATOM(LAMIN)                                               
      NX = NBOND(LAMIN)                                                 
C                                                                       
C STORE THE COORDINATES FOR THE AMINO END GROUP.                        
C                                                                       
      DO 110 M = 1,NATOM                                                
      DO 110 MM = 1,3                                                   
      REFCRD(MM,M)=ENOORD(MM,M,LAMIN)                                   
  110 CONTINUE                                                          
C                                                                       
C THIS SECTION IS FOR A PROLINE-TYPE FIRST FULL RESIDUE.  FOR ALL END   
C GROUPS EXCEPT THE NULL END GROUP 1) LENGTHEN THE C'-N BOND TO 1.36    
C ANGSTROMS AND 2) IN THE CASE OF CIS-PROLINE ROTATE THE END GROUP      
C 5 DEGREES IN THE X,Y PLANE.                                           
C                                                                       
      IF (KNEXT.NE.13.AND.KNEXT.NE.22.OR.KAMIN.EQ.10) GO TO 140         
      NA = NPRE(2)                                                      
      NB = NPRE(2) + 1                                                  
C                                                                       
      RAN = .035                                                        
      RAB = DST(REFCRD(1,NA),REFCRD(1,NB))                              
      DO 115 I=1,3                                                      
      TEMP(I) = REFCRD(I,NA) + RAN*(REFCRD(I,NA)-REFCRD(I,NB))/RAB      
  115 CONTINUE                                                          
C                                                                       
      DO 120 I=1,3                                                      
      TEMP2(I)=TEMP(I)-REFCRD(I,NA)                                     
  120 CONTINUE                                                          
      DO 125 I=1,3                                                      
      REFCRD(I,NA) = TEMP(I)                                            
  125 CONTINUE                                                          
      NN = NATOM-4                                                      
      DO 130 J=1,NN                                                     
      DO 130 I=1,3                                                      
      REFCRD(I,J) = TEMP2(I) + REFCRD(I,J)                              
  130 CONTINUE                                                          
C                                                                       
      IF (COS(ANGRAD(NX,1)).LE.0.0) GO TO 140                           
      N3 = NATOM - 3                                                    
      DO 134 M=1,N3                                                     
      DO 132 JJ=1,3                                                     
      TEMP(JJ)=0.0                                                      
      DO 132 L=1,3                                                      
      TEMP(JJ)=TEMP(JJ)+A5(JJ,L)*REFCRD(L,M)                            
  132 CONTINUE                                                          
      DO 134 JJ=1,3                                                     
      REFCRD(JJ,M)=TEMP(JJ)                                             
  134 CONTINUE                                                          
      IF (IPRNT.EQ.1) WRITE (IOUT06,240)                                
  140 CONTINUE                                                          
C                                                                       
C IF THERE ARE NO ROTATABLE BONDS IN THE END GROUP, RETURN.             
C                                                                       
      IF (NX.EQ.0) RETURN                                               
C                                                                       
C THE REMAINDER OF THE SUBROUTINE PERFORMS ANY SPECIFIED ROTATIONS.     
C                                                                       
      ME=0                                                              
      DO 210 IBOND=1,NX                                                 
      ANG = -ANGRAD(IBOND,1) - PI                                       
      IF(DABS(ANG).LE.ERROR) GO TO 210                                  
      ML=1                                                              
      MM=NNDPT2(IBOND,LAMIN)                                            
      IF (MM .EQ. ME) ML = MB + 1                                       
      ME = MM                                                           
      MB=NNDPT1(IBOND,LAMIN)                                            
C                                                                       
C THIS SECTION CALCULATES THE DIRECTION COSINES OF THE BOND.            
C                                                                       
      D = 0.0                                                           
      DO 150 L = 1,3                                                    
      CIS(L) = REFCRD(L,ME) - REFCRD(L,MB)                              
      D = D + CIS(L)*CIS(L)                                             
  150 CONTINUE                                                          
      D = 1.0/SQRT(D)                                                   
      DO 160 L = 1,3                                                    
      CIS(L) = CIS(L)*D                                                 
  160 CONTINUE                                                          
C                                                                       
      CALL ROTSET(CIS,ANG,A1)                                           
      MN = MB - 1                                                       
      DO 200 J=ML,MN                                                    
      DO 170 JJ=1,3                                                     
      REFCRD(JJ,J)=REFCRD(JJ,J)-REFCRD(JJ,MB)                           
  170 CONTINUE                                                          
      DO 180 JJ=1,3                                                     
      TEMP(JJ)=MATA(JJ,1)*REFCRD(1,J)+MATA(JJ,2)*REFCRD(2,J)+           
     1 MATA(JJ,3)*REFCRD(3,J)                                           
  180 CONTINUE                                                          
      DO 190 JJ=1,3                                                     
      REFCRD(JJ,J)=TEMP(JJ)+REFCRD(JJ,MB)                               
  190 CONTINUE                                                          
  200 CONTINUE                                                          
  210 CONTINUE                                                          
      RETURN                                                            
  240 FORMAT (//65H FIRST FULL RESIDUE IS CIS-PROLINE.  END GROUP MOVED 
     15 DEGREES SO/71H THAT C-N-CA=126 DEGREES AND C-N-CD=121 DEGREES IN
     2STEAD OF THE REVERSE.//)                                          
      END                                                               
      SUBROUTINE GNCARB                                                 
      IMPLICIT REAL*8(A-H,O-Z)                                          
C                                                                       
C THIS SUBROUTINE GENERATES THE COORDINATES OF THE CARBOXYL END GROUP.  
C                                                                       
      DOUBLE PRECISION A1(9),B1(9),MATA(3,3),MATB(3,3),MATC(9)          
      DOUBLE PRECISION CST,SNT,CDELTA,SDELTA,PHI,PSI,OMEGA,CHI,CIS(3)   
      DOUBLE PRECISION ANG,DABS,ROT(9)                                  
CMSP  INCLUDE (MAXSIZE)                                                 
      INCLUDE '/labo/qclib/inspidas/common/maxsize'
CMSP  INCLUDE(SIZE)                                                     
      INCLUDE '/labo/qclib/inspidas/common/size'
CMSP  INCLUDE (VARANG)                                                  
      INCLUDE '/labo/qclib/inspidas/common/varang'
CMSP  INCLUDE (ALPHA)                                                   
      INCLUDE '/labo/qclib/inspidas/common/alpha'
CMSP  INCLUDE (CHARGE)                                                  
      INCLUDE '/labo/qclib/inspidas/common/charge'
CMSP  INCLUDE (COORD)                                                   
      INCLUDE '/labo/qclib/inspidas/common/coord'
CMSP  INCLUDE (NBTYPE)                                                  
      INCLUDE '/labo/qclib/inspidas/common/nbtype'
CMSP  INCLUDE (REFRNC)                                                  
      INCLUDE '/labo/qclib/inspidas/common/refrnc'
CMSP  INCLUDE (UNITNUMS)                                                
      INCLUDE '/labo/qclib/inspidas/common/unitnums'
CMSP  INCLUDE (PRIMRY)                                                  
      INCLUDE '/labo/qclib/inspidas/common/primry'
      COMMON/BONDS/UTOR(10,MAXRES),NDXARR(10,MAXRES),                   
     &             NV(MAXRES)                                           
      COMMON/CHECK/KNDRES(36),KNDEND(20)                                
C     COMMON/GEN100/INUMRS,LIST(MAXRES),NPRE(MXRS1)                     
      COMMON/GEN100/NPRE(MXRS1)                                         
      COMMON/GEN003/SIGN,N,NT,IFEVEN                                    
      COMMON/GEN004/ENOORD(3,22,20),ECHG(22,20),EALPHA(22,20),          
     1   NDATOM(20),NBOND(20),NNDPT1(6,20),NNDPT2(6,20),NDTYPE(22,20)   
      COMMON/GEN007/LBG(3),LEN(3)                                       
      COMMON/GNROU/MATA,MATB,ROT,K                                      
C     COMMON/IOUNIT/JREAD                                               
      DIMENSION TEMP(3)                                                 
C     CHARACTER*4 ALPH,EALPHA                                           
      CHARACTER*4 EALPHA                                                
      EQUIVALENCE (A1(1),MATA(1,1)),(B1(1),MATB(1,1))                   
      DATA ERROR/ .0001 /                                               
      DATA PI/ 3.141593 /                                               
C                                                                       
C     N=INUMRS                                                          
      N=NUMRES                                                          
      NT = LIST(N)                                                      
      KCARB = KNDEND(NT)                                                
      KCARB = IABS(KCARB)                                               
      SIGN = 1.0                                                        
C                                                                       
C ATTACH THE O AND THE FIRST ATOM OF THE END GROUP TO THE C'.           
C                                                                       
      NL = 3                                                            
      IF (KCARB.EQ.20) NL = 2                                           
      DO 110 J=2,NL                                                     
      CALL TRANSF(MATA,J,1)                                             
  110 CONTINUE                                                          
      NL =  NDATOM(NT) + 1                                              
      IF (NL .LT. 4) RETURN                                             
C                                                                       
C ADD ON THE REMAINING ATOMS WITHOUT ANY BOND ROTATIONS.                
C                                                                       
      DO 120 J=4,NL                                                     
      CALL TRANSF(MATA,J,3)                                             
  120 CONTINUE                                                          
      NX=NBOND(NT)                                                      
C     NATOM=NPRE(INUMRS)                                                
      NATOM=NPRE(NUMRES)                                                
C                                                                       
C IF THERE ARE NO ROTATABLE BONDS IN THE END GROUP, RETURN.             
C                                                                       
      IF(NX.EQ.0)RETURN                                                 
C                                                                       
C THE REMAINDER OF THE SUBROUTINE PERFORMS ANY SPECIFIED ROTATIONS.     
C                                                                       
      DO 190 IBOND=1,NX                                                 
      IF (IBOND.NE.1) GO TO 124                                         
C     ANG=ANGRAD(3,INUMRS-1) - PI                                       
      ANG=ANGRAD(3,NUMRES-1) - PI                                       
      IF (KCARB.NE.16) GO TO 125                                        
C     ANGL=ANGRAD(3,INUMRS-1)                                           
      ANGL=ANGRAD(3,NUMRES-1)                                           
      IF (COS(ANGL).LT.(-0.0001)) GO TO 125                             
      ANGL=57.29578*ANGL                                                
      WRITE (IOUT06,200) ANGL                                           
      STOP                                                              
C 124 ANG=ANGRAD(IBOND-1,INUMRS)-PI                                     
  124 ANG=ANGRAD(IBOND-1,NUMRES)-PI                                     
  125 IF (DABS(ANG).LT.ERROR) GO TO 190                                 
C                                                                       
C THE FIRST BOND IS DEFINED BY THE 6TH ATOM IN THE LAST FULL RESIDUE    
C (C') AND THE FIRST ATOM IN THE END GROUP.  ALL OTHER  BONDS ARE       
C DEFINED BY THE STORED NNDPT1 AND NNDPT2.                              
C                                                                       
      MB = NNDPT1(IBOND,NT) + NATOM - 1                                 
C     IF (IBOND.EQ.1)  MB=NPRE(INUMRS-1)+6                              
      IF (IBOND.EQ.1)  MB=NPRE(NUMRES-1)+6                              
      ME = NNDPT2(IBOND,NT) + NATOM - 1                                 
      IF (IBOND.EQ.1) ME=NATOM+1                                        
C                                                                       
C THIS SECTION CALCULATES THE DIRECTION COSINES OF THE BOND.            
C                                                                       
      D = 0.0                                                           
      DO 130 L = 1,3                                                    
      CIS(L) = REFCRD(L,ME) - REFCRD(L,MB)                              
      D = D + CIS(L)*CIS(L)                                             
  130 CONTINUE                                                          
      D = 1.0/SQRT(D)                                                   
      DO 140 L = 1,3                                                    
      CIS(L) = CIS(L)*D                                                 
  140 CONTINUE                                                          
C                                                                       
      CALL ROTSET(CIS,ANG,A1)                                           
C                                                                       
C SPECIAL INDICES LBG AND LEN ARE NEEDED TO DEFINE THE ATOMS AFFECTED BY
C THE BOND ROTATION IN THE CASE OF N,N-DIMETHYLAMIDE.                   
C                                                                       
      LL = ME+1                                                         
      IF (KCARB.EQ.16) LL = LBG(IBOND)+NATOM-1                          
C     MN = NPRE(INUMRS+1)                                               
      MN = NPRE(NUMRES+1)                                               
      IF (KCARB.EQ.16) MN = NATOM+LEN(IBOND)-1                          
      DO 180 J = LL,MN                                                  
      DO 150 JJ=1,3                                                     
      REFCRD(JJ,J)=REFCRD(JJ,J)-REFCRD(JJ,ME)                           
  150 CONTINUE                                                          
      DO 160 JJ=1,3                                                     
      TEMP(JJ)=MATA(JJ,1)*REFCRD(1,J)+MATA(JJ,2)*REFCRD(2,J)+           
     1 MATA(JJ,3)*REFCRD(3,J)                                           
  160 CONTINUE                                                          
      DO 170 JJ=1,3                                                     
      REFCRD(JJ,J)=TEMP(JJ)+REFCRD(JJ,ME)                               
  170 CONTINUE                                                          
  180 CONTINUE                                                          
  190 CONTINUE                                                          
      RETURN                                                            
  200 FORMAT (/1X,54HFOR DIMETHYL AMIDE, THE OMEGA ANGLE MUST BE TRANS, 
     1NOT,F8.3,9H DEGREES,/1X,55HBECAUSE THE TWO METHYLS HAVE NON-EQUIVA
     2LENT GEOMETRIES.)                                                 
      END                                                               
      SUBROUTINE GNPRO                                                  
      IMPLICIT REAL*8(A-H,O-Z)                                          
C                                                                       
C THIS SUBROUTINE GENERATES THE COORDINATES OF THE PROLINE AND          
C HYDROXYPROLINE RESIDUES, EXCEPT FOR THE CARBONYL O, AND THE HD1 OF    
C HYDROXYPROLINE.                                                       
C                                                                       
      DOUBLE PRECISION A1(9),B1(9),MATA(3,3),MATB(3,3),MATC(9)          
      DOUBLE PRECISION ROT(9),A(9)                                      
      DOUBLE PRECISION CSTH1,SNTH1,CSANG,SNANG,IDENT(9)                 
      DOUBLE PRECISION CST,SNT,CDELTA,SDELTA,PHI,PSI,OMEGA,CHI,CIS(3)   
      DOUBLE PRECISION ANG,PROANG(3)                                    
      DOUBLE PRECISION DABS,DCOS,DSIN                                   
CMSP  INCLUDE (MAXSIZE)                                                 
      INCLUDE '/labo/qclib/inspidas/common/maxsize'
CMSP  INCLUDE(SIZE)                                                     
      INCLUDE '/labo/qclib/inspidas/common/size'
CMSP  INCLUDE (VARANG)                                                  
      INCLUDE '/labo/qclib/inspidas/common/varang'
CMSP  INCLUDE (ALPHA)                                                   
      INCLUDE '/labo/qclib/inspidas/common/alpha'
CMSP  INCLUDE (CHARGE)                                                  
      INCLUDE '/labo/qclib/inspidas/common/charge'
CMSP  INCLUDE (COORD)                                                   
      INCLUDE '/labo/qclib/inspidas/common/coord'
CMSP  INCLUDE (NBTYPE)                                                  
      INCLUDE '/labo/qclib/inspidas/common/nbtype'
CMSP  INCLUDE (REFRNC)                                                  
      INCLUDE '/labo/qclib/inspidas/common/refrnc'
CMSP  INCLUDE (PRIMRY)                                                  
      INCLUDE '/labo/qclib/inspidas/common/primry'
      COMMON/BONDS/UTOR(10,MAXRES),NDXARR(10,MAXRES),                   
     &             NV(MAXRES)                                           
C     COMMON/GEN100/INUMRS,LIST(MAXRES),NPRE(MXRS1)                     
      COMMON/GEN100/NPRE(MXRS1)                                         
      COMMON/GEN002/CHIANG(3,7,36),NATOMS(36),NCHI(36),NDPT1(7,36),     
     1   NDPT2(7,36),NUM(7,36)                                          
      COMMON/GEN003/SIGN,N,NT,IFEVEN                                    
      COMMON/GEN006/PROANG                                              
      COMMON/GEN008/NGEOM(36)                                           
      COMMON/GNROU/MATA,MATB,ROT,K                                      
C     CHARACTER*4 ALPH                                                  
      EQUIVALENCE (A1(1),MATA(1,1)),(B1(1),MATB(1,1))                   
      DATA PI/ 3.141593 /                                               
C                                                                       
C     PROANG(1) = 122.422*.0174532925                                   
C     PROANG(2) = 112.419*.0174532925                                   
C     PROANG(3) = 105.000*.0174532925                                   
C                                                                       
      NBT=NGEOM(NT)                                                     
      PHI=PROANG(NBT)                                                   
      ANGRAD(1,N)=PHI-PI                                                
C                                                                       
C ATTACH THE C-DELTA AND C-ALPHA TO N.                                  
C                                                                       
      DO 110 J=2,3                                                      
      CALL TRANSF(MATA,J,1)                                             
  110 CONTINUE                                                          
C                                                                       
C PHI DOES NOT EQUAL ZERO, SO MODIFY THE ROTATION MATRIX.               
C                                                                       
      CSANG=DCOS(PHI)                                                   
      SNANG = DSIN(PHI)                                                 
      DO 120 J=1,3                                                      
      MATB(J,1) = MATA(J,1)                                             
      MATB(J,2) = MATA(J,2)*CSANG + MATA(J,3)*SNANG                     
      MATB(J,3) = - MATA(J,2)*SNANG + MATA(J,3)*CSANG                   
  120 CONTINUE                                                          
C                                                                       
C ATTACH THE C' TO C-ALPHA.                                             
C                                                                       
      CALL TRANSF(MATB,6,3)                                             
C                                                                       
C ATTACH THE REMAINING ATOMS TO THE NITROGEN ATOM, EXCEPT FOR THE       
C CARBONYL O, AND THE HD1 OF HYDROXYPROLINE.                            
C                                                                       
      DO 130 J=4,14                                                     
      IF (J.EQ.6.OR.J.EQ.7) GO TO 130                                   
      CALL TRANSF(MATA,J,1)                                             
  130 CONTINUE                                                          
      K=15                                                              
      RETURN                                                            
      END                                                               
      SUBROUTINE GNSIDE                                                 
      IMPLICIT REAL*8(A-H,O-Z)                                          
C                                                                       
C THIS SUBROUTINE GENERATES THE COORDINATES OF THE SIDECHAIN ATOMS.     
C                                                                       
      DOUBLE PRECISION A1(9),B1(9),MATA(3,3),MATB(3,3),MATC(9)          
      DOUBLE PRECISION ROT(9),A(9),DABS                                 
      DOUBLE PRECISION CST,SNT,CDELTA,SDELTA,PHI,PSI,OMEGA,CHI,CIS(3)   
CMSP  INCLUDE (MAXSIZE)                                                 
      INCLUDE '/labo/qclib/inspidas/common/maxsize'
CMSP  INCLUDE(SIZE)                                                     
      INCLUDE '/labo/qclib/inspidas/common/size'
CMSP  INCLUDE (VARANG)                                                  
      INCLUDE '/labo/qclib/inspidas/common/varang'
CMSP  INCLUDE (ALPHA)                                                   
      INCLUDE '/labo/qclib/inspidas/common/alpha'
CMSP  INCLUDE (CHARGE)                                                  
      INCLUDE '/labo/qclib/inspidas/common/charge'
CMSP  INCLUDE (COORD)                                                   
      INCLUDE '/labo/qclib/inspidas/common/coord'
CMSP  INCLUDE (NBTYPE)                                                  
      INCLUDE '/labo/qclib/inspidas/common/nbtype'
CMSP  INCLUDE (REFRNC)                                                  
      INCLUDE '/labo/qclib/inspidas/common/refrnc'
CMSP  INCLUDE (PRIMRY)                                                  
      INCLUDE '/labo/qclib/inspidas/common/primry'
      COMMON/BONDS/UTOR(10,MAXRES),NDXARR(10,MAXRES),                   
     &             NV(MAXRES)                                           
C     COMMON/GEN100/INUMRS,LIST(MAXRES),NPRE(MXRS1)                     
      COMMON/GEN100/NPRE(MXRS1)                                         
      COMMON/GEN002/CHIANG(3,7,36),NATOMS(36),NCHI(36),NDPT1(7,36),     
     1   NDPT2(7,36),NUM(7,36)                                          
      COMMON/GEN003/SIGN,N,NT,IFEVEN                                    
      COMMON/GNROU/MATA,MATB,ROT,K                                      
C     CHARACTER*4 ALPH                                                  
      EQUIVALENCE (A1(1),MATA(1,1)),(B1(1),MATB(1,1))                   
      DATA PI/ 3.141593 /                                               
      DATA ERROR / .0001 /                                              
C                                                                       
      NX = NCHI(NT)                                                     
      DO 160 IBOND=1,NX                                                 
C                                                                       
C MB IS THE BEGINNING OF THE BOND, LE IS THE END, AND MN INDICATES THE  
C LAST ATOM TO BE AFFECTED BY THE BOND ROTATION.                        
C                                                                       
      MB = NDPT1(IBOND,NT)                                              
      LE = NDPT2(IBOND,NT)                                              
      MN = NUM(IBOND,NT) + K - 1                                        
      CHI = ANGRAD(IBOND + 3,N) - PI                                    
C                                                                       
C IF NO CHI ROTATION IS CALLED FOR, ATTACH THE SIDECHAIN ATOMS.         
C                                                                       
      IF (DABS(CHI) .GT. ERROR) GO TO 120                               
      DO 110 L=K,MN                                                     
      CALL TRANSF(ROT,L,LE)                                             
  110 CONTINUE                                                          
      GO TO 160                                                         
C                                                                       
C STORE THE DIRECTION COSINES FOR THIS BOND IN CIS.                     
C                                                                       
  120 DO 130 I=1,3                                                      
      CIS(I)=CHIANG(I,IBOND,NT)                                         
  130 CONTINUE                                                          
C                                                                       
C IF IFEVEN IS -1, THEN THE COORDINATES AS STORED WILL BE FLIPPED 180   
C DEGREES ABOUT THE C'-N BOND WHEN THEY ARE ATTACHED.  THEREFORE THE    
C DIRECTION COSINES OF THE BOND MUST ALSO BE ADJUSTED.                  
C                                                                       
      CIS(2)=FLOAT(IFEVEN)*CIS(2)                                       
      CIS(3)=FLOAT(IFEVEN)*CIS(3)                                       
C                                                                       
C ADJUST CIS(3) TO ACCOUNT FOR THE DIRECTION COSINE CHANGES IN THE      
C SIDECHAIN WHEN GOING FROM L TO D CONFIGURATION.                       
C                                                                       
      CIS(3) = CIS(3)*SIGN                                              
C                                                                       
C CALCULATE THE MATRIX FOR ROTATING ABOUT THE BOND.                     
C                                                                       
      CALL ROTSET(CIS,CHI,A)                                            
C                                                                       
C UPDATE THE PREVIOUS ROTATION MATRIX TO INCLUDE THE LATEST ROTATION.   
C                                                                       
      CALL DMM(ROT,A,A1)                                                
C                                                                       
C CONNECT AND ROTATE THE ATOMS ATTACHED TO THIS BOND.                   
C                                                                       
      DO 140 L=K,MN                                                     
      CALL TRANSF(A1,L,LE)                                              
  140 CONTINUE                                                          
C                                                                       
C MM IS THE BEGINNING OF THE NEXT BOND. IF MM EQUALS MB, THEN A BRANCH  
C EXISTS AT THIS POINT IN THE SIDECHAIN. DO NOT UPDATE THE PREVIOUS     
C ROTATION MATRIX TO INCLUDE THE LATEST ROTATION.                       
C                                                                       
      IF(IBOND.EQ.NX) GO TO 160                                         
      MM=NDPT1(IBOND+1,NT)                                              
      IF(MM.EQ.MB) GO TO 160                                            
      DO 150 L=1,9                                                      
      ROT(L) = A1(L)                                                    
  150 CONTINUE                                                          
C                                                                       
C   UPDATE K TO INDICATE THE NEXT ATOM TO BE ATTACHED.                  
C                                                                       
  160 K = MN + 1                                                        
C                                                                       
C   THE SIDECHAIN GENERATION IS COMPLETE.                               
C                                                                       
      RETURN                                                            
      END                                                               
      SUBROUTINE INPUTT                                                 
      IMPLICIT REAL*8(A-H,O-Z)                                          
C                                                                       
C THIS SUBROUTINE READS THE STANDARD RESIDUE DATA AND STORES THEM IN    
C APPROPRIATE ARRAYS.                                                   
C                                                                       
CMSP  INCLUDE (UNITNUMS)                                                
      INCLUDE '/labo/qclib/inspidas/common/unitnums'
      COMMON/CHECK/KNDRES(36),KNDEND(20)                                
      COMMON/GEN000/CHG(26,36),ALPHA(26,36),TITLE2(4,56),LTYPE(26,36)   
      COMMON/GEN001/XOORD(3,26,36),SNTH2(36),CSTH2(36),SDEL(36),        
     1   CDEL(36)                                                       
      COMMON/GEN002/CHIANG(3,7,36),NATOMS(36),NCHI(36), NDPT1(7,36),    
     1    NDPT2(7,36),NUM(7,36)                                         
      COMMON/GEN004/ENOORD(3,22,20),ECHG(22,20),EALPHA(22,20),          
     1   NDATOM(20),NBOND(20),NNDPT1(6,20),NNDPT2(6,20),NDTYPE(22,20)   
      COMMON/GEN008/NGEOM(36)                                           
C     COMMON/IOUNIT/JREAD                                               
      COMMON/PRAM/NREG,NEND,LR(6,20),LRT1(7,36)                         
      COMMON/PUT14/NSN14(26,36),NFN14(26,36),MSX14(22,20),MFX14(22,20), 
     1   MSN14(22,20),MFN14(22,20)                                      
      COMMON/PUT15/NSN15(26,36),MSN15(22,20),MSX15(22,20)               
      COMMON/TORP/AR(8,36),NBB(8,36),NSSX(8,36),NANG(8,36),NTOR(36),    
     1  AAN(20),NBBN(20),NSSN(20),NANGN(20)                             
      CHARACTER ADC*1,ADCHAR*4,ALPHA*4                                  
      CHARACTER*4 EALPHA                                                
C                                                                       
C THE FOLLOWING SECTION IS FOR FULL AMINO ACID RESIDUES:                
C                                                                       
      DO 160 I=1,NREG                                                   
      READ(IN23,210) (TITLE2(L,I),L=1,4)                                
      READ(IN23,220) NATOMS(I),NCHI(I),SNTH2(I),CSTH2(I),SDEL(I),       
     1  CDEL(I)                                                         
      READ(IN23,280) KNDRES(I),NTOR(I),NGEOM(I)                         
      IF(NTOR(I).EQ.0)GO TO 120                                         
      NT=NTOR(I)                                                        
      DO 110 J=1,NT                                                     
      READ(IN23,290) AR(J,I),NBB(J,I),NSSX(J,I),NANG(J,I)               
  110 CONTINUE                                                          
  120 NUMCHI=NCHI(I)                                                    
      IF (NUMCHI .EQ. 0) GO TO 140                                      
      DO 130 J = 1,NUMCHI                                               
      READ(IN23,230) (CHIANG(L,J,I),L=1,3),NDPT1(J,I),NDPT2(J,I),       
     1  NUM(J,I),LRT1(J,I)                                              
  130 CONTINUE                                                          
  140 NATOM = NATOMS(I)                                                 
      READ(IN23,240) ALPHA(1,I),LTYPE(1,I),CHG(1,I),NSN15(1,I)          
     1  ,NSN14(1,I),NFN14(1,I)                                          
      DO 150 J = 2,NATOM                                                
      READ(IN23,250) (XOORD(L,J-1,I),L=1,3),ADC,ALPHA(J,I),LTYPE(J,I)   
     1  ,CHG(J,I),NSN15(J,I),NSN14(J,I),NFN14(J,I)                      
       IF(ADC.EQ.'1' .OR. ADC.EQ.'2' .OR. ADC.EQ.'3'                    
     1               .OR. ADC.EQ.'-' .OR. ADC.EQ.'+') THEN              
        ADCHAR=ALPHA(J,I)                                               
        ADCHAR(1:4)=ADCHAR(1:3)//ADC(1:1)                               
        ALPHA(J,I)=ADCHAR                                               
       END IF                                                           
  150 CONTINUE                                                          
      READ(IN23,250) (XOORD(L,NATOM,I),L=1,3)                           
  160 CONTINUE                                                          
C                                                                       
C THE FOLLOWING SECTION IS FOR END GROUPS:                              
C                                                                       
      DO 180 I=1,NEND                                                   
      IP=I+NREG                                                         
      READ(IN23,210) (TITLE2(L,IP),L=1,4)                               
      READ(IN23,260) NDATOM(I),NBOND(I),(NNDPT1(L,I),NNDPT2(L,I),L=1,6) 
      READ(IN23,270) KNDEND(I),AAN(I),NBBN(I),NSSN(I),NANGN(I)          
      NB = NBOND(I)                                                     
      IF (NB .EQ. 0) NB = 1                                             
      READ(IN23,260) (LR(L,I),L=1,NB)                                   
      ND=NDATOM(I)-3                                                    
      IF (ND.LT.7) ND=7                                                 
      READ(IN23,260) (MSX15(L,I),L=1,ND)                                
      READ(IN23,260) (MSX14(L,I),L=1,ND)                                
      READ(IN23,260) (MFX14(L,I),L=1,ND)                                
      NATOM = NDATOM(I)                                                 
      DO 170 J = 1,NATOM                                                
      READ(IN23,250) (ENOORD(L,J,I),L=1,3),ADC,EALPHA(J,I),             
     1  NDTYPE(J,I),ECHG(J,I),MSN15(J,I),MSN14(J,I),                    
     2  MFN14(J,I)                                                      
       IF(ADC.EQ.'1' .OR. ADC.EQ.'2' .OR. ADC.EQ.'3'                    
     1               .OR. ADC.EQ.'-' .OR. ADC.EQ.'+') THEN              
        ADCHAR=EALPHA(J,I)                                              
        ADCHAR(1:4)=ADCHAR(1:3)//ADC(1:1)                               
        EALPHA(J,I)=ADCHAR                                              
       END IF                                                           
  170 CONTINUE                                                          
  180 CONTINUE                                                          
      RETURN                                                            
  210 FORMAT(4A4)                                                       
  220 FORMAT(2I5,4F10.7)                                                
  230 FORMAT(5X,3F9.6,5X,3I3,I10)                                       
  240 FORMAT(37X,A3,I2,F10.6,I5,2X,4I3)                                 
  250 FORMAT(3F10.3,6X,A1,A3,I2,F10.6,I5,2X,4I3)                        
  260 FORMAT(14I5)                                                      
  270 FORMAT (I4,F10.4,3I5)                                             
  280 FORMAT(3I4)                                                       
  290 FORMAT(F10.4,3I5)                                                 
      END                                                               
      SUBROUTINE MATRIX(CSANG,SNANG,ROTATE,MATC)                        
      IMPLICIT REAL*8(A-H,O-Z)                                          
C                                                                       
C THIS SUBROUTINE IS USED IN THE GENERATION OF COORDINATES WHICH        
C DEPEND ON A PSI OR OMEGA DIHEDRAL ANGLE.  IT COMPUTES A ROTATION      
C MATRIX MATC FROM 'ROTATE' (THE VALUE OF THE DIHEDRAL ANGLE MINUS PI), 
C AND CSANG AND SNANG, THE COSINE AND SINE OF THE ANGLE BETWEEN THE     
C ROTATABLE BOND AND THE X-AXIS.                                        
C                                                                       
      DOUBLE PRECISION CSANG,SNANG,ROTATE,MATC                          
      DOUBLE PRECISION DCOS,DSIN,CROT,SROT,CS1                          
      DIMENSION MATC(9)                                                 
      CROT=DCOS(ROTATE)                                                 
      SROT=DSIN(ROTATE)                                                 
      CS1=1.0D0-CROT                                                    
      MATC(1)=CROT+CS1*CSANG**2                                         
      MATC(2)=CS1*CSANG*SNANG                                           
      MATC(3)=-SROT*SNANG                                               
      MATC(4)=MATC(2)                                                   
      MATC(5)=CROT+CS1*SNANG**2                                         
      MATC(6)=SROT*CSANG                                                
      MATC(7)=-MATC(3)                                                  
      MATC(8)=-MATC(6)                                                  
      MATC(9)=CROT                                                      
      RETURN                                                            
      END                                                               
      SUBROUTINE OUT2                                                   
      IMPLICIT REAL*8(A-H,O-Z)                                          
C                                                                       
C                                                                       
CMSP  INCLUDE (MAXSIZE)                                                 
      INCLUDE '/labo/qclib/inspidas/common/maxsize'
CMSP  INCLUDE(SIZE)                                                     
      INCLUDE '/labo/qclib/inspidas/common/size'
CMSP  INCLUDE (VARANG)                                                  
      INCLUDE '/labo/qclib/inspidas/common/varang'
CMSP  INCLUDE (ALPHA)                                                   
      INCLUDE '/labo/qclib/inspidas/common/alpha'
CMSP  INCLUDE (CHARGE)                                                  
      INCLUDE '/labo/qclib/inspidas/common/charge'
CMSP  INCLUDE (COORD)                                                   
      INCLUDE '/labo/qclib/inspidas/common/coord'
CMSP  INCLUDE (NBTYPE)                                                  
      INCLUDE '/labo/qclib/inspidas/common/nbtype'
CMSP  INCLUDE (REFRNC)                                                  
      INCLUDE '/labo/qclib/inspidas/common/refrnc'
CMSP  INCLUDE (UNITNUMS)                                                
      INCLUDE '/labo/qclib/inspidas/common/unitnums'
CMSP  INCLUDE (PRIMRY)                                                  
      INCLUDE '/labo/qclib/inspidas/common/primry'
      COMMON/BONDS/UTOR(10,MAXRES),NDXARR(10,MAXRES),                   
     &             NV(MAXRES)                                           
      COMMON/CHECK/KNDRES(36),KNDEND(20)                                
C     COMMON/GEN100/INUMRS,LIST(MAXRES),NPRE(MXRS1)                     
      COMMON/GEN100/NPRE(MXRS1)                                         
      COMMON/GEN000/CHG(26,36),ALPHA(26,36),TITLE2(4,56),LTYPE(26,36)   
      COMMON/GEN002/CHIANG(3,7,36),NATOMS(36),NCHI(36), NDPT1(7,36),    
     1    NDPT2(7,36),NUM(7,36)                                         
      COMMON/GEN004/ENOORD(3,22,20),ECHG(22,20),EALPHA(22,20),          
     1   NDATOM(20),NBOND(20),NNDPT1(6,20),NNDPT2(6,20),NDTYPE(22,20)   
C     COMMON/IOUNIT/JREAD                                               
      COMMON/PRAM/NREG,NEND,LR(6,20),LRT1(7,36)                         
      COMMON/PUT14/NSN14(26,36),NFN14(26,36),MSX14(22,20),MFX14(22,20), 
     1   MSN14(22,20),MFN14(22,20)                                      
      COMMON/PUT15/NSN15(26,36),MSN15(22,20),MSX15(22,20)               
C     CHARACTER*4 ALPH,EALPHA,ALPHA                                     
      CHARACTER*4 EALPHA,ALPHA                                          
C     DO 210 I=1,INUMRS                                                 
      DO 210 I=1,NUMRES                                                 
      LISTI=LIST(I)                                                     
      LISTI = IABS(LISTI)                                               
C     IF (I.EQ.1.OR.I.EQ.INUMRS) GO TO 120                              
      IF (I.EQ.1.OR.I.EQ.NUMRES) GO TO 120                              
      NS=NCHI(LISTI) + 3                                                
  120 K = NPRE(I)+1                                                     
C     IF (I .NE. 1 .AND. I .NE. INUMRS) GO TO 140                       
      IF (I .NE. 1 .AND. I .NE. NUMRES) GO TO 140                       
      NS = NBOND(LISTI)                                                 
C     IF(I.EQ.INUMRS) NS=NS-1                                           
      IF(I.EQ.NUMRES) NS=NS-1                                           
  140 IF(NS.LE.0) GO TO 190                                             
      WRITE (IOUT22,340) (ANGLES(J,I),J=1,NS)                           
      GO TO 210                                                         
  190 CONTINUE                                                          
      WRITE (IOUT22,390)                                                
  210 CONTINUE                                                          
      RETURN                                                            
C                                                                       
 310  FORMAT(//1X,46HNO.IN LIST  RESIDUE NAME       DIHEDRAL ANGLES/    
     1 1X,10HCHAIN  NO.,16X,10I9)                                       
  320 FORMAT(1X,I5,1X,I3,3X,4A4,1X,10(1X,F8.3))                         
  330 FORMAT(1X,I5,1X,I3,1X,2HD-,4A4,1X,10(1X,F8.3))                    
  340 FORMAT(10F8.3)                                                    
  350 FORMAT(//12X,18HATOMIC COORDINATES,24X,6HCHARGE/11X,1HX,9X,       
     1   1HY,9X,1HZ,7X,4HATOM,4X,4HTYPE,2X,8H(E.C.U.),3X,8HATOM NO.)    
  360 FORMAT(5X,3F10.4,5X,A4,4X,I2,F10.3,5X,I5)                         
  370 FORMAT (/1X,I5,1X,4A4/)                                           
  380 FORMAT (/1X,I5,1X,2HD-,4A4/)                                      
  390 FORMAT (1H )                                                      
C                                                                       
      END                                                               
      SUBROUTINE PARAM (SUM)                                            
      IMPLICIT REAL*8(A-H,O-Z)                                          
C                                                                       
C THIS SUBROUTINE ASSIGNS VALUES TO ARRAYS CONTAINING THE FOLLOWING     
C INFORMATION FOR EACH ATOM OF THE SPECIFIED POLYPEPTIDE: ATOM TYPE     
C FOR NONBONDED INTERACTIONS (NBTYPE), PARTIAL CHARGE (CHARGE), AND     
C ALPHANUMERIC CHARACTERS SPECIFYING THE CHEMICAL TYPE (ALPH).  PARAM   
C ALSO INITIALIZES THE ARRAY NPRE (SPECIFYING FOR EACH RESIDUE THE      
C NUMBER OF ATOMS PRECEDING IT IN THE POLYPEPTIDE CHAIN), AND COMPUTES  
C 'SUM' (THE NET CHARGE ON THE POLYPEPTIDE).                            
C                                                                       
CMSP  INCLUDE (MAXSIZE)                                                 
      INCLUDE '/labo/qclib/inspidas/common/maxsize'
CMSP  INCLUDE(SIZE)                                                     
      INCLUDE '/labo/qclib/inspidas/common/size'
CMSP  INCLUDE (VARANG)                                                  
      INCLUDE '/labo/qclib/inspidas/common/varang'
CMSP  INCLUDE (ALPHA)                                                   
      INCLUDE '/labo/qclib/inspidas/common/alpha'
CMSP  INCLUDE (CHARGE)                                                  
      INCLUDE '/labo/qclib/inspidas/common/charge'
CMSP  INCLUDE (COORD)                                                   
      INCLUDE '/labo/qclib/inspidas/common/coord'
CMSP  INCLUDE (NBTYPE)                                                  
      INCLUDE '/labo/qclib/inspidas/common/nbtype'
CMSP  INCLUDE (UNITNUMS)                                                
      INCLUDE '/labo/qclib/inspidas/common/unitnums'
CMSP  INCLUDE (PRIMRY)                                                  
      INCLUDE '/labo/qclib/inspidas/common/primry'
      COMMON/BONDS/UTOR(10,MAXRES),NDXARR(10,MAXRES),                   
     &             NV(MAXRES)                                           
      COMMON/CHECK/KNDRES(36),KNDEND(20)                                
C     COMMON/GEN100/INUMRS,LIST(MAXRES),NPRE(MXRS1)                     
      COMMON/GEN100/NPRE(MXRS1)                                         
      COMMON/GEN000/CHG(26,36),ALPHA(26,36),TITLE2(4,56),LTYPE(26,36)   
      COMMON/GEN002/CHIANG(3,7,36),NATOMS(36),NCHI(36), NDPT1(7,36),    
     1    NDPT2(7,36),NUM(7,36)                                         
      COMMON/GEN004/ENOORD(3,22,20),ECHG(22,20),EALPHA(22,20),          
     1   NDATOM(20),NBOND(20),NNDPT1(6,20),NNDPT2(6,20),NDTYPE(22,20)   
C     COMMON/IOUNIT/JREAD                                               
C     CHARACTER*4 ALPH,EALPHA,ALPHA                                     
      CHARACTER*4 EALPHA,ALPHA                                          
      DIMENSION NZERO(5)                                                
      DATA NZERO/12,16,22,23,24/                                        
C                                                                       
C ASSIGN PARAMETERS FOR THE AMINO END GROUP FROM THE STANDARD RESIDUE   
C DATA, INCLUDING THE FIRST THREE ATOMS OF THE FIRST FULL AMINO ACID    
C RESIDUE:                                                              
C                                                                       
      NPRE(1) = 0                                                       
      LAMIN=LIST(1)                                                     
      KAMIN=KNDEND(LAMIN)                                               
      KAMIN=IABS(KAMIN)                                                 
      NA = NDATOM(LAMIN)                                                
      DO 10 I = 1,NA                                                    
      ATNAME(I) = EALPHA(I,LAMIN)                                       
      NBTYPE(I) = NDTYPE(I,LAMIN)                                       
 10   CHARGE(I) = ECHG(I,LAMIN)                                         
      NA = NA - 3                                                       
C                                                                       
C BEGINNING OF LOOP FOR EACH FULL AMINO ACID RESIDUE:                   
C                                                                       
C20   LASTFL = INUMRS - 1                                               
 20   LASTFL = NUMRES - 1                                               
      DO 35 I = 2,LASTFL                                                
      LISTI=LIST(I)                                                     
      LISTI = IABS(LISTI)                                               
      KINDI=KNDRES(LISTI)                                               
      KINDI=IABS(KINDI)                                                 
      NATOM = NATOMS(LISTI)                                             
      NPRE(I) = NA                                                      
C                                                                       
C K INDEXES (IN THE STANDARD RESIDUE DATA) THE FIRST ATOM WHOSE         
C PARAMETERS WILL BE ASSIGNED TO THE POLYPEPTIDE ARRAYS.  IN GENERAL,   
C K IS SET TO 1, INDEXING THE STARTING NITROGEN ATOM.  IF THIS IS THE   
C FIRST FULL RESIDUE, K=4, SINCE PARAMETERS FOR THE FIRST 3 ATOMS HAVE  
C ALREADY BEEN TAKEN FROM THE END GROUP DATA SET.  EXCEPTIONS ARE       
C GLYCINE, PROLINE, HYDROXYPROLINE, AND IONIZED ASPARTIC ACID:          
C                                                                       
      K = 1                                                             
      IF (I.NE.2) GO TO 25                                              
      IF (KINDI.NE.6.AND.KINDI.NE.13.AND.KINDI.NE.22.AND.KINDI.NE.31)   
     1   K=4                                                            
C                                                                       
CIF THE FIRST FULL RESIDUE IS A PROLINE OR HYDROXYPROLINE AND AN        
C IMPROPER AMINO END GROUP (TYPE 1, 2, OR 3) WAS SPECIFIED, PRINT AN    
C ERROR MESSAGE AND STOP:                                               
C                                                                       
      IF (KINDI.NE.13.AND.KINDI.NE.22) GO TO 25                         
      IF (KAMIN.EQ.1.OR.KAMIN.EQ.2.OR.KAMIN.EQ.3) GO TO 70              
C                                                                       
C ASSIGN THE REQUIRED PARAMETERS FOR THIS AMINO ACID RESIDUE FROM THE   
C STANDARD RESIDUE DATA:                                                
C                                                                       
 25   DO 30 L=K,NATOM                                                   
      N = NA + L                                                        
      ATNAME(N) = ALPHA(L,LISTI)                                        
      NBTYPE(N) =  LTYPE(L,LISTI)                                       
 30   CHARGE(N) = CHG(L,LISTI)                                          
C                                                                       
C IF THIS IS THE FIRST FULL RESIDUE AND THE END GROUP IS TYPE 1 OR 3,   
C ASSIGN NBTYPE=14 FOR THE AMINO NITROGEN.  IF THE FIRST FULL RESIDUE   
C IS A GLYCINE OR AN IONIZED ASPARTIC ACID, AND THE END GROUP IS TYPE   
C 1 OR 2, CORRECT ALPH AND CHARGE:                                      
C                                                                       
      IF (I.NE.2) GO TO 35                                              
      IF (KAMIN.EQ.1.OR.KAMIN.EQ.3) NBTYPE(NA+1)=14                     
      IF (KINDI.NE.6.AND.KINDI.NE.31) GO TO 35                          
      IF (KAMIN.EQ.1) ATNAME(3)=ATNAME(1)                               
      IF (KAMIN.NE.2) GO TO 35                                          
      ATNAME(4)=ATNAME(2)                                               
      CHARGE(4)=CHARGE(2)                                               
C                                                                       
C END OF LOOP FOR EACH FULL AMINO ACID RESIDUE:                         
C                                                                       
 35   NA = NA + NATOM                                                   
C                                                                       
C ASSIGN PARAMETERS FOR THE CARBOXYL END GROUP FROM THE STANDARD        
C RESIDUE DATA, FOR ALL ATOMS EXCEPT THE CARBONYL OXYGEN:               
C                                                                       
C     NPRE(INUMRS) = NA                                                 
      NPRE(NUMRES) = NA                                                 
C     LCARB = LIST(INUMRS)                                              
      LCARB = LIST(NUMRES)                                              
      KCARB = KNDEND(LCARB)                                             
      KCARB = IABS(KCARB)                                               
      NATOM = NDATOM(LCARB)                                             
C     NPRE(INUMRS + 1) = NPRE(INUMRS) + NATOM - 1                       
      NPRE(NUMRES + 1) = NPRE(NUMRES) + NATOM - 1                       
      IF (NATOM .EQ. 1) GO TO 45                                        
      NA = NA - 1                                                       
      DO 40 I = 2,NATOM                                                 
      N = NA + I                                                        
      ATNAME(N) = EALPHA(I,LCARB)                                       
      NBTYPE(N) = NDTYPE(I,LCARB)                                       
 40   CHARGE(N) = ECHG(I,LCARB)                                         
C                                                                       
C IF THE END GROUP IS TYPE 12, EQUALIZE THE CHARGE ON THE TWO           
C OXYGEN ATOMS:                                                         
C                                                                       
      IF (KCARB.NE.12) GO TO 45                                         
C     NN = NPRE(INUMRS-1) + 7                                           
      NN = NPRE(NUMRES-1) + 7                                           
      CHARGE(NN) = ECHG(1,LCARB)                                        
C                                                                       
C LOOP OVER ALL ATOMS IN THE POLYPEPTIDE, TO COMPUTE THE NET CHARGE,    
C AND DETERMINE WHETHER ANY ATOM HAS BEEN ASSIGNED AN INVALID NONBONDED 
C TYPE (12, 16, 22, 23 OR 24).  IF THIS IS THE CASE, PRINT AN ERROR     
C MESSAGE AND STOP:                                                     
C                                                                       
 45   SUM = 0.0                                                         
      DO 60 I = 1,N                                                     
      DO 50 J = 1,5                                                     
      IF (NBTYPE(I).NE.NZERO(J)) GO TO 50                               
      WRITE (IOUT06,90) I                                               
      STOP                                                              
 50   CONTINUE                                                          
      SUM = SUM+CHARGE(I)                                               
 60   CONTINUE                                                          
      RETURN                                                            
 70   WRITE (IOUT06,80)                                                 
      STOP                                                              
 80   FORMAT(/47H USE ENDGROUP 6, 7, OR 8 INSTEAD OF 1, 2, OR 3./)      
 90   FORMAT(/43H YOU HAVE USED AN INVALID ATOM TYPE ON ATOM,I4/)       
      END                                                               
      SUBROUTINE ROTSET(CIS,CHI,A)                                      
      IMPLICIT REAL*8(A-H,O-Z)                                          
C                                                                       
C THIS SUBROUTINE IS USED IN THE GENERATION OF COORDINATES WHICH DEPEND 
C ON A DIHEDRAL ANGLE IN A SIDE CHAIN OR END GROUP.  IT COMPUTES A      
C ROTATION MATRIX 'A' FROM THE DIRECTION COSINES (CIS) OF THE           
C ROTATABLE BOND, AND CHI, THE VALUE OF THE DIHEDRAL ANGLE MINUS PI.    
C                                                                       
      DOUBLE PRECISION CIS,CHI,A                                        
      DOUBLE PRECISION DCOS,DSIN,CS,SN                                  
      DOUBLE PRECISION CS1,A1,A2                                        
      DIMENSION A(3,3),CIS(3)                                           
 12   CS = DCOS(CHI)                                                    
      SN = DSIN(CHI)                                                    
      CS1 = 1.0 - CS                                                    
      A(1,1) = CS + CS1*CIS(1)*CIS(1)                                   
      A(2,2) = CS + CS1*CIS(2)*CIS(2)                                   
      A(3,3) = CS + CS1*CIS(3)*CIS(3)                                   
      A1 = CS1*CIS(1)*CIS(2)                                            
      A2 = SN*CIS(3)                                                    
      A(1,2) = A1 - A2                                                  
      A(2,1) = A1 + A2                                                  
      A1 = CS1*CIS(1)*CIS(3)                                            
      A2 = SN*CIS(2)                                                    
      A(1,3) = A1 + A2                                                  
      A(3,1) = A1 - A2                                                  
      A1 = CS1*CIS(2)*CIS(3)                                            
      A2 = SN*CIS(1)                                                    
      A(2,3) = A1 - A2                                                  
      A(3,2) = A1 + A2                                                  
      RETURN                                                            
      END                                                               
      SUBROUTINE TRANSF (T,J,K)                                         
      IMPLICIT REAL*8(A-H,O-Z)                                          
C                                                                       
C THIS SUBROUTINE GENERATES THE COORDINATES OF ATOM J WITH RESPECT TO TH
C AXES OF THE POLYPEPTIDE CHAIN.                                        
C                                                                       
      DOUBLE PRECISION T(9)                                             
CMSP  INCLUDE (MAXSIZE)                                                 
      INCLUDE '/labo/qclib/inspidas/common/maxsize'
CMSP  INCLUDE(SIZE)                                                     
      INCLUDE '/labo/qclib/inspidas/common/size'
CMSP  INCLUDE (ALPHA)                                                   
      INCLUDE '/labo/qclib/inspidas/common/alpha'
CMSP  INCLUDE (CHARGE)                                                  
      INCLUDE '/labo/qclib/inspidas/common/charge'
CMSP  INCLUDE (COORD)                                                   
      INCLUDE '/labo/qclib/inspidas/common/coord'
CMSP  INCLUDE (NBTYPE)                                                  
      INCLUDE '/labo/qclib/inspidas/common/nbtype'
CMSP  INCLUDE (PRIMRY)                                                  
      INCLUDE '/labo/qclib/inspidas/common/primry'
CMSP  INCLUDE(REFRNC)                                                   
      INCLUDE '/labo/qclib/inspidas/common/refrnc'
C     COMMON/GEN100/INUMRS,LIST(MAXRES),NPRE(MXRS1)                     
      COMMON/GEN100/NPRE(MXRS1)                                         
      COMMON/GEN001/XOORD(2808),SNTH2(36),CSTH2(36),SDEL(36),CDEL(36)   
      COMMON/GEN002/CHIANG(3,7,36),NATOMS(36),NUMCHI(36),NDPT1(7,36),   
     1   NDPT2(7,36),NUM(7,36)                                          
      COMMON/GEN003/SIGN,N,NT,IFEVEN                                    
      COMMON/GEN004/ENOORD(3,22,20),ECHG(22,20),EALPHA(22,20),          
     1   NDATOM(20),NBOND(20),NNDPT1(6,20),NNDPT2(6,20),NDTYPE(22,20)   
C     CHARACTER*4 ALPH,EALPHA                                           
      CHARACTER*4 EALPHA                                                
C                                                                       
C L REFERS TO THE ATOM TO BE ADDED TO THE COORDINATE ARRAY.             
C M IS THE ATOM TO WHICH THE NEW ATOM IS BEING ATTACHED.                
C SINCE THE COORDINATES FOR N ARE NOT STORED, THE COUNT OF THE STORED   
C COORDINATES IS OFF BY ONE.                                            
C                                                                       
      L = NPRE(N) + J                                                   
      M = NPRE(N) + K                                                   
      KK = K - 1                                                        
C                                                                       
C     IF(N.EQ.INUMRS) GO TO 130                                         
      IF(N.EQ.NUMRES) GO TO 130                                         
C                                                                       
C IF KK = 0, THEN THE POINT OF ATTACHMENT IS THE NITROGEN.              
C DEFINE IT AS (0,0,0).                                                 
C                                                                       
      IF (KK.GT.0) GO TO 110                                            
      XT = 0.0                                                          
      YT = 0.0                                                          
      ZT = 0.0                                                          
      GO TO 120                                                         
C                                                                       
C ELIMINATE 3 - DIMENSIONAL SUBSCRIPTS:                                 
C                                                                       
  110 KKNT = (KK - 1)*3 + (NT - 1)*78                                   
      XT = XOORD(KKNT + 1)                                              
      YT = XOORD(KKNT + 2)                                              
      ZT = XOORD(KKNT + 3)                                              
C                                                                       
C X,Y,Z GIVE THE COORDINATES OF THE ATOM TO BE ADDED IN TERMS OF THE    
C POINT OF ATTACHMENT.                                                  
C                                                                       
  120 I = J - 1                                                         
      INT = (I - 1)*3 + (NT - 1)*78                                     
      X = XOORD(INT + 1) - XT                                           
      Y = XOORD(INT + 2) - YT                                           
      Z = XOORD(INT + 3) - ZT                                           
      GO TO 160                                                         
C                                                                       
C L AND M ARE  OFF BY 2 BECAUSE OF THE WAY THE END GROUP IS STORED.     
C IF KK=0, ATTACH THE O AND FIRST ATOM OF END GROUP TO C'.              
C                                                                       
  130 L = L-2                                                           
      IF (KK.GT.0) GO TO 140                                            
      XT=0.0                                                            
      YT=0.0                                                            
      ZT=0.0                                                            
      M = NPRE(N - 1) + 6                                               
      GO TO 150                                                         
C                                                                       
  140 XT=ENOORD(1,KK,NT)                                                
      YT=ENOORD(2,KK,NT)                                                
      ZT=ENOORD(3,KK,NT)                                                
      M=M-2                                                             
C                                                                       
  150 I=J-1                                                             
      X=ENOORD(1,I,NT)-XT                                               
      Y=ENOORD(2,I,NT)-YT                                               
      Z=ENOORD(3,I,NT)-ZT                                               
      IF(J.NE.2) GO TO 160                                              
C                                                                       
C POSITION OF O STORED IN END GROUP TO REPLACE O IN LAST RESIDUE.       
C                                                                       
      L = NPRE(N - 1) + 7                                               
C                                                                       
C IFEVEN INDICATES WHETHER TO INVERT THE STORED COORDINATES ABOUT X.    
C SIGN INDICATES D OR L CONFIGURATION.                                  
C                                                                       
  160 Y = FLOAT(IFEVEN)*Y                                               
      Z = FLOAT(IFEVEN)*SIGN*Z                                          
C                                                                       
C ATTACH THE L TH COORD TO THE M TH COORD.                              
      REFCRD(1,L) = T(1)*X + T(4)*Y + T(7)*Z + REFCRD(1,M)              
      REFCRD(2,L) = T(2)*X + T(5)*Y + T(8)*Z + REFCRD(2,M)              
      REFCRD(3,L) = T(3)*X + T(6)*Y + T(9)*Z + REFCRD(3,M)              
      RETURN                                                            
      END                                                               
      SUBROUTINE ADJAMN                                                 
      IMPLICIT REAL*8(A-H,O-Z)                                          
C                                                                       
C THIS SUBROUTINE CALCULATES THE ENERGIES BETWEEN ATOM J IN             
C THE AMINO END GROUP AND THE APPROPRIATE ATOMS IN THE SECOND           
C RESIDUE.                                                              
C                                                                       
CMSP  INCLUDE (MAXSIZE)                                                 
      INCLUDE '/labo/qclib/inspidas/common/maxsize'
CMSP  INCLUDE(SIZE)                                                     
      INCLUDE '/labo/qclib/inspidas/common/size'
CMSP  INCLUDE (PRIMRY)                                                  
      INCLUDE '/labo/qclib/inspidas/common/primry'
      COMMON/AMIN/KSA14(22),KFA14(22),KSA15(22)                         
      COMMON/CAL001/KSTRT,KFIN                                          
      COMMON/CHKN/NIT                                                   
C     COMMON/GEN100/INUMRS,LIST(MAXRES),NPRE(MXRS1)                     
      COMMON/GEN100/NPRE(MXRS1)                                         
      COMMON/NRG1/IJ,IK,LISTIJ,LISTIK,KINDIJ,KINDIK,NPREIJ,NPREIK       
      COMMON/NRG2/QJ,J,JSTRT,JFIN,JPRO,KPRO,IFEND,LASTRS                
      KSTRT=KSA14(J)                                                    
C                                                                       
C IS THE 2ND RESIDUE A PROLINE OR HYDROXYPROLINE?                       
      IF(KPRO.EQ.1) GO TO 2                                             
C                                                                       
C STANDARD CASE                                                         
C                                                                       
 1    KFIN=KFA14(J)                                                     
      CALL CAL14                                                        
      KSTRT=KSA15(J)                                                    
      IF(KSTRT.EQ.NPREIK) RETURN                                        
      KFIN=NPRE(3)                                                      
      CALL CAL15                                                        
      RETURN                                                            
C                                                                       
C PROLINE SECTION                                                       
C                                                                       
C NFIRST IS THE INTRA-RESIDUE NUMBER OF THE FIRST ATOM IN               
C RESIDUE IK (=IJ+1) HAVING A 1-4 INTERACTION WITH J.                   
C NFIRST=1 FOR A NITROGEN, 7 FOR AN OXYGEN.                             
 2    NFIRST=KSTRT-NPREIK                                               
      IF(NFIRST.EQ.1) GO TO 1                                           
      IF(NFIRST.EQ.7) GO TO 3                                           
      CALL PRO37                                                        
      RETURN                                                            
C                                                                       
C OXYGEN SECTION (SEE FLOW CHART)                                       
C                                                                       
 3    KFIN=KSTRT                                                        
      CALL CAL14                                                        
      NIT=1                                                             
C                                                                       
C CALCULATE EXPLICITLY THE INTERACTION WITH THE H15 OF HYDROXYPROLINE   
C                                                                       
      IF (KINDIK.NE.22) RETURN                                          
      KSTRT=15+NPREIK                                                   
      KFIN=KSTRT                                                        
      CALL CAL14                                                        
      RETURN                                                            
      END                                                               
      SUBROUTINE ADJCNT                                                 
      IMPLICIT REAL*8(A-H,O-Z)                                          
C                                                                       
C THIS SUBROUTINE IS NEEDED WHEN CALCULATING THE ENERGIES BETWEEN       
C ADJACENT RESIDUES IJ AND IK.  IT SIMPLY DETERMINES AND                
C CALLS THE APPROPRIATE SUBROUTINE.                                     
C                                                                       
C    ADJOXL IS CALLED IF IK=IJ+1 IS THE CARBOXYL END GROUP,             
C          I.E., IF IJ IS THE LAST FULL RESIDUE                         
C                                                                       
C    ADJAMN IS CALLED WHEN IJ IS THE AMINO END GROUP                    
C                                                                       
C    ADJNN IS CALLED WHEN IJ AND IK ARE BOTH NON-END GROUPS AND         
C          NEITHER IS A PROLINE OR HYDROXYPROLINE                       
C    ADJNP IS USED WHEN IJ IS NOT THE AMINO END GROUP AND IK IS         
C          A PROLINE OR HYDROXYPROLINE                                  
C    ADJPN IS CALLED WHEN IJ IS A PROLINE AND IK IS NOT THE             
C          CARBOXYL END GROUP                                           
C    ADJPP IS USED WHEN BOTH IJ AND IK ARE PROLINES (WHERE THE          
C          TERM "PROLINE" INCLUDES HYDROXYPROLINE)                      
C                                                                       
CMSP  INCLUDE (MAXSIZE)                                                 
      INCLUDE '/labo/qclib/inspidas/common/maxsize'
CMSP  INCLUDE(SIZE)                                                     
      INCLUDE '/labo/qclib/inspidas/common/size'
CMSP  INCLUDE (PRIMRY)                                                  
      INCLUDE '/labo/qclib/inspidas/common/primry'
C     COMMON/GEN100/INUMRS,LIST(MAXRES),NPRE(MXRS1)                     
      COMMON/GEN100/NPRE(MXRS1)                                         
      COMMON/NRG1/IJ,IK,LISTIJ,LISTIK,KINDIJ,KINDIK,NPREIJ,NPREIK       
      COMMON/NRG2/QJ,J,JSTRT,JFIN,JPRO,KPRO,IFEND,LASTRS                
C                                                                       
      IF(IK.NE.NUMRES) GO TO 1                                          
C     IF(IK.NE.INUMRS) GO TO 1                                          
      CALL ADJOXL                                                       
      RETURN                                                            
 1    IF(IJ.GT.1) GO TO 2                                               
      CALL ADJAMN                                                       
      RETURN                                                            
 2    IF(JPRO.EQ.1) GO TO 4                                             
      IF(KPRO.EQ.1) GO TO 3                                             
      CALL ADJNN                                                        
      RETURN                                                            
 3    CALL ADJNP                                                        
      RETURN                                                            
 4    IF(KPRO.EQ.1) GO TO 5                                             
      CALL ADJPN                                                        
      RETURN                                                            
 5    CALL ADJPP                                                        
      RETURN                                                            
      END                                                               
      SUBROUTINE ADJNN                                                  
      IMPLICIT REAL*8(A-H,O-Z)                                          
C                                                                       
C THIS SUBROUTINE CALCULATES THE ENERGIES BETWEEN ATOM J AND THE        
C APPROPRIATE ATOMS IN THE ADJACENT RESIDUE (IK=IJ+1).  IJ AND IK       
C ARE BOTH NON-END GROUPS AND NEITHER IS A PROLINE OR HYDROXY-          
C PROLINE.                                                              
C                                                                       
CMSP  INCLUDE (MAXSIZE)                                                 
      INCLUDE '/labo/qclib/inspidas/common/maxsize'
CMSP  INCLUDE (SIZE)                                                    
      INCLUDE '/labo/qclib/inspidas/common/size'
CMSP  INCLUDE (PRIMRY)                                                  
      INCLUDE '/labo/qclib/inspidas/common/primry'
      COMMON/CAL001/KSTRT,KFIN                                          
C     COMMON/GEN100/INUMRS,LIST(MAXRES),NPRE(MXRS1)                     
      COMMON/GEN100/NPRE(MXRS1)                                         
      COMMON/NRG1/IJ,IK,LISTIJ,LISTIK,KINDIJ,KINDIK,NPREIJ,NPREIK       
      COMMON/NRG2/QJ,J,JSTRT,JFIN,JPRO,KPRO,IFEND,LASTRS                
      DIMENSION NSX14(31),NFX14(31),NSX15(31)                           
      DATA NSX14/1,0,2,2*1,4,2,24*0/                                    
      DATA NFX14/1,0,3,2*1,6,3,24*0/                                    
      DATA NSX15/2,1,4,2,2,7,4,24*1/                                    
C                                                                       
      KSTRT=NSX14(J)                                                    
C                                                                       
C FIRST WE CALCULATE THE 1-4 INTERACTIONS                               
C                                                                       
      IF(KSTRT.EQ.0) GO TO 1                                            
      KSTRT=KSTRT+NPREIK                                                
      KFIN=NFX14(J)+NPREIK                                              
      CALL CAL14                                                        
C                                                                       
C NOW WE CALCULATE THE 1-5 INTERACTIONS                                 
C                                                                       
 1    KSTRT=NSX15(J)+NPREIK                                             
      KFIN=NPRE(IJ+2)                                                   
      CALL CAL15                                                        
      RETURN                                                            
      END                                                               
      SUBROUTINE ADJNP                                                  
      IMPLICIT REAL*8(A-H,O-Z)                                          
C                                                                       
C THIS SUBROUTINE CALCULATES THE ENERGIES BETWEEN ATOM J AND            
C THE APPROPRIATE ATOMS IN THE ADJACENT RESIDUE (IK=IJ+1).  IJ AND IK   
C ARE BOTH NON-END GROUPS.  IJ IS NOT A PROLINE OR HYDROXY-             
C PROLINE, BUT IK IS.                                                   
C                                                                       
CMSP  INCLUDE (MAXSIZE)                                                 
      INCLUDE '/labo/qclib/inspidas/common/maxsize'
CMSP  INCLUDE(SIZE)                                                     
      INCLUDE '/labo/qclib/inspidas/common/size'
CMSP  INCLUDE (PRIMRY)                                                  
      INCLUDE '/labo/qclib/inspidas/common/primry'
      COMMON/CAL001/KSTRT,KFIN                                          
      COMMON/CHKN/NIT                                                   
C     COMMON/GEN100/INUMRS,LIST(MAXRES),NPRE(MXRS1)                     
      COMMON/GEN100/NPRE(MXRS1)                                         
      COMMON/NRG1/IJ,IK,LISTIJ,LISTIK,KINDIJ,KINDIK,NPREIJ,NPREIK       
      COMMON/NRG2/QJ,J,JSTRT,JFIN,JPRO,KPRO,IFEND,LASTRS                
      DIMENSION NPSX14(31),NPFX14(31),NPSX15(31)                        
      DATA NPSX15/2,1,7,2,2,0,7,24*1/                                   
      DATA NPFX14/1,0,6,1,1,7,6,24*0/                                   
      DATA NPSX14/1,0,2,1,1,7,2,24*0/                                   
C                                                                       
      IF (J.EQ.3.OR.J.EQ.7) GO TO 2                                     
      IF(J.EQ.6) NIT=1                                                  
C                                                                       
C FIRST CALCULATE THE 1-4 INTERACTIONS                                  
C                                                                       
      KSTRT=NPSX14(J)+NPREIK                                            
      IF(KSTRT.EQ.NPREIK) GO TO 1                                       
      KFIN=NPFX14(J)+NPREIK                                             
      CALL CAL14                                                        
C                                                                       
C CALCULATE EXPLICITLY THE INTERACTION WITH THE H15 OF HYDROXYPROLINE   
C                                                                       
      IF (KINDIK.NE.22.OR.J.NE.6) GO TO 1                               
      KSTRT=15+NPREIK                                                   
      KFIN=KSTRT                                                        
      CALL CAL14                                                        
C                                                                       
C NOW CALCULATE THE 1-5 INTERACTIONS                                    
C                                                                       
 1    KSTRT=NPSX15(J)+NPREIK                                            
      IF(KSTRT.EQ.NPREIK) RETURN                                        
      KFIN=NPRE(IJ+2)                                                   
      CALL CAL15                                                        
      RETURN                                                            
C                                                                       
C CALCULATE RING                                                        
C THIS SECTION IS FOR THE SPECIAL CASE OF J A C3 OR O7                  
C                                                                       
 2    CALL PRO37                                                        
      RETURN                                                            
      END                                                               
      SUBROUTINE ADJOXL                                                 
      IMPLICIT REAL*8(A-H,O-Z)                                          
C                                                                       
C THIS SUBROUTINE CALCULATES THE APPROPRIATE INTERACTIONS               
C BETWEEN ATOM J IN THE LAST FULL RESIDUE AND THE ATOMS IN              
C THE CARBOXYL END GROUP                                                
C                                                                       
C THE ARRAYS KSC14, KFC14, AND KSC15 ARE INITIALIZED IN                 
C SUBROUTINE CBOXL.  KSC14 AND KFC14 REFER TO THE STARTING AND          
C FINAL 1-4 INTERACTIONS.  KSC15 REFERS TO THE STARTING 1-5             
C INTERACTION.                                                          
C                                                                       
CMSP  INCLUDE (MAXSIZE)                                                 
      INCLUDE '/labo/qclib/inspidas/common/maxsize'
CMSP  INCLUDE(SIZE)                                                     
      INCLUDE '/labo/qclib/inspidas/common/size'
CMSP  INCLUDE (PRIMRY)                                                  
      INCLUDE '/labo/qclib/inspidas/common/primry'
      COMMON/CAL001/KSTRT,KFIN                                          
      COMMON/CARB/KSC14(36),KFC14(36),KSC15(36)                         
C     COMMON/GEN100/INUMRS,LIST(MAXRES),NPRE(MXRS1)                     
      COMMON/GEN100/NPRE(MXRS1)                                         
      COMMON/NRG1/IJ,IK,LISTIJ,LISTIK,KINDIJ,KINDIK,NPREIJ,NPREIK       
      COMMON/NRG2/QJ,J,JSTRT,JFIN,JPRO,KPRO,IFEND,LASTRS                
C                                                                       
C     NUMATM=NPRE(INUMRS+1)                                             
      NUMATM=NPRE(NUMRES+1)                                             
C                                                                       
C FIRST CALCULATE THE 1-4 INTERACTIONS                                  
C                                                                       
      KSTRT=KSC14(J)                                                    
      IF(KSTRT.EQ.NPREIK) GO TO 1                                       
      KFIN=KFC14(J)                                                     
      CALL CAL14                                                        
C                                                                       
C NOW CALCULATE THE 1-5 INTERACTIONS                                    
C                                                                       
 1    KSTRT=KSC15(J)                                                    
      IF(KSTRT.EQ.NPREIK) RETURN                                        
      KFIN=NUMATM                                                       
      CALL CAL15                                                        
      RETURN                                                            
      END                                                               
      SUBROUTINE ADJPN                                                  
      IMPLICIT REAL*8(A-H,O-Z)                                          
C                                                                       
C THIS SUBROUTINE CALCULATES THE APPROPRIATE INTERACTIONS               
C BETWEEN ATOM J AND THE ATOMS IN RESIDUE IK=IJ+1                       
C IJ IS A PROLINE RESIDUE AND IK IS NOT                                 
C                                                                       
CMSP  INCLUDE (MAXSIZE)                                                 
      INCLUDE '/labo/qclib/inspidas/common/maxsize'
CMSP  INCLUDE(SIZE)                                                     
      INCLUDE '/labo/qclib/inspidas/common/size'
CMSP  INCLUDE (PRIMRY)                                                  
      INCLUDE '/labo/qclib/inspidas/common/primry'
      INTEGER PNSX14(15),PNFX14(15),PNSX15(15)                          
      COMMON/CAL001/KSTRT,KFIN                                          
C     COMMON/GEN100/INUMRS,LIST(MAXRES),NPRE(MXRS1)                     
      COMMON/GEN100/NPRE(MXRS1)                                         
      COMMON/NRG1/IJ,IK,LISTIJ,LISTIK,KINDIJ,KINDIK,NPREIJ,NPREIK       
      COMMON/NRG2/QJ,J,JSTRT,JFIN,JPRO,KPRO,IFEND,LASTRS                
      DATA PNSX14/1,1,2,1,1,4,2,1,1,1,1,1,1,1,0/                        
      DATA PNFX14/1,1,3,1,1,6,3,1,1,1,1,1,1,1,0/                        
      DATA PNSX15/2,2,4,2,2,7,4,2,2,2,2,2,2,2,1/                        
C                                                                       
C FIRST CALCULATE THE 1-4 INTERACTIONS                                  
C                                                                       
      KSTRT=PNSX14(J)+NPREIK                                            
      IF(KSTRT.EQ.NPREIK) GO TO 1                                       
      KFIN=PNFX14(J)+NPREIK                                             
      CALL CAL14                                                        
C                                                                       
C NOW CALCULATE THE 1-5 INTERACTIONS                                    
C                                                                       
 1    KSTRT=PNSX15(J)+NPREIK                                            
      KFIN=NPRE(IJ+2)                                                   
      CALL CAL15                                                        
      RETURN                                                            
      END                                                               
      SUBROUTINE ADJPP                                                  
      IMPLICIT REAL*8(A-H,O-Z)                                          
C                                                                       
C THIS SUBROUTINE CALCULATES THE INTERACTIONS BETWEEN                   
C ATOM J IN RESIDUE IJ AND THE APPROPRIATE ATOMS IN RESIDUE             
C IK=IJ+1.  IJ AND IK ARE BOTH PROLINES (WHERE 'PROLINE'                
C INCLUDES HYDROXYPROLINE)                                              
C                                                                       
CMSP  INCLUDE (MAXSIZE)                                                 
      INCLUDE '/labo/qclib/inspidas/common/maxsize'
CMSP  INCLUDE(SIZE)                                                     
      INCLUDE '/labo/qclib/inspidas/common/size'
CMSP  INCLUDE (PRIMRY)                                                  
      INCLUDE '/labo/qclib/inspidas/common/primry'
      INTEGER PPSX14(15),PPFX14(15),PPSX15(15)                          
      COMMON/CAL001/KSTRT,KFIN                                          
      COMMON/CHKN/NIT                                                   
C     COMMON/GEN100/INUMRS,LIST(MAXRES),NPRE(MXRS1)                     
      COMMON/GEN100/NPRE(MXRS1)                                         
      COMMON/NRG1/IJ,IK,LISTIJ,LISTIK,KINDIJ,KINDIK,NPREIJ,NPREIK       
      COMMON/NRG2/QJ,J,JSTRT,JFIN,JPRO,KPRO,IFEND,LASTRS                
      DATA PPSX14/1,1,2,1,1,7,2,1,1,1,1,1,1,1,0/                        
      DATA PPFX14/1,1,6,1,1,7,6,1,1,1,1,1,1,1,0/                        
      DATA PPSX15/2,2,7,2,2,0,7,2,2,2,2,2,2,2,1/                        
C                                                                       
      IF (J.EQ.3.OR.J.EQ.7) GO TO 2                                     
      IF(J.EQ.6) NIT=1                                                  
C                                                                       
C FIRST CALCULATE THE 1-4 INTERACTIONS, IF ANY                          
C                                                                       
      KSTRT=PPSX14(J)+NPREIK                                            
      IF(KSTRT.EQ.NPREIK) GO TO 1                                       
      KFIN=PPFX14(J)+NPREIK                                             
      CALL CAL14                                                        
C                                                                       
C CALCULATE EXPLICITLY THE INTERACTION WITH THE H15 OF HYDROXYPROLINE   
C                                                                       
      IF (KINDIK.NE.22.OR.J.NE.6) GO TO 1                               
      KSTRT=15+NPREIK                                                   
      KFIN=KSTRT                                                        
      CALL CAL14                                                        
C                                                                       
C NOW CALCULATE THE 1-5 INTERACTIONS, IF ANY                            
C                                                                       
 1    KSTRT=PPSX15(J)+NPREIK                                            
      IF(KSTRT.EQ.NPREIK) RETURN                                        
      KFIN=NPRE(IJ+2)                                                   
      CALL CAL15                                                        
      RETURN                                                            
C                                                                       
C CALCULATE RING (SEE FLOW CHART)                                       
C THIS SECTION IS FOR THE SPECIAL CASE OF J A C3 OR O7                  
C                                                                       
 2    CALL PRO37                                                        
      RETURN                                                            
      END                                                               
      SUBROUTINE AMINO                                                  
      IMPLICIT REAL*8(A-H,O-Z)                                          
C                                                                       
C THIS SUBROUTINE SETS THE VALUES OF THE KSA14,KFA14, AND KSA15         
C ARRAYS WHICH WILL BE USED LATER IN SUBROUTINE ADJAMN.                 
C                                                                       
C IF J IS AN ATOM IN THE AMINO END GROUP, THEN                          
C   KSA14(J)=THE FIRST ATOM IN THE 2ND RESIDUE HAVING A 1-4             
C            INTERACTION WITH J,                                        
C   KFA14(J)=THE LAST ATOM IN THE 2ND RESIDUE HAVING A 1-4              
C            INTERACTION WITH J, AND                                    
C   KSA15(J)=THE FIRST ATOM IN THE 2ND RESIDUE HAVING A 1-5             
C            INTERACTION WITH J.                                        
C AMINO IS CALLED IN SPECV                                              
C                                                                       
CMSP  INCLUDE (MAXSIZE)                                                 
      INCLUDE '/labo/qclib/inspidas/common/maxsize'
CMSP  INCLUDE (SIZE)                                                    
      INCLUDE '/labo/qclib/inspidas/common/size'
CMSP  INCLUDE (UNITNUMS)                                                
      INCLUDE '/labo/qclib/inspidas/common/unitnums'
CMSP  INCLUDE (PRIMRY)                                                  
      INCLUDE '/labo/qclib/inspidas/common/primry'
      COMMON/AMIN/KSA14(22),KFA14(22),KSA15(22)                         
C     COMMON/GEN100/INUMRS,LIST(MAXRES),NPRE(MXRS1)                     
      COMMON/GEN100/NPRE(MXRS1)                                         
C     COMMON/IOUNIT/JREAD                                               
      COMMON/PUT14/NSN14(26,36),NFN14(26,36),MSX14(22,20),MFX14(22,20), 
     1   MSN14(22,20),MFN14(22,20)                                      
      COMMON/PUT15/NSN15(26,36),MSN15(22,20),MSX15(22,20)               
C     COMMON/TOR2/LAMIN,KAMIN,LCARB,KCARB,NUMVAR                        
      COMMON/TOR2/LAMIN,KAMIN,LCARB,KCARB                               
      COMMON/CHECK/KNDRES(36),KNDEND(20)                                
C                                                                       
C IF THERE IS NO AMINO END GROUP,RETURN                                 
C                                                                       
      IF(KAMIN.EQ.10) RETURN                                            
C                                                                       
C DEFINE VARIABLES                                                      
C                                                                       
      LIST2=LIST(2)                                                     
      LIST2=IABS(LIST2)                                                 
      KIND2=KNDRES(LIST2)                                               
      KIND2=IABS(KIND2)                                                 
      NPRE2=NPRE(2)                                                     
      JFIN=NPRE2                                                        
C                                                                       
C IS THE 2ND RESIDUE A PROLINE OR HYDROXYPROLINE?                       
      IF(KIND2.EQ.13.OR.KIND2.EQ.22) GO TO 2                            
C                                                                       
C THIS SECTION IS FOR THE SECOND RESIDUE NOT A PROLINE                  
C OR A HYDROXYPROLINE                                                   
      DO 1 J=1,JFIN                                                     
      KSA14(J)=MSX14(J,LAMIN)+NPRE2                                     
      KFA14(J)=MFX14(J,LAMIN)+NPRE2                                     
      KSA15(J)=MSX15(J,LAMIN)+NPRE2                                     
 1    CONTINUE                                                          
      RETURN                                                            
C                                                                       
C THE FOLLOWING SECTION IS FOR PROLINE OR HYDROXYPROLINE                
C                                                                       
 2    DO 7 J=1,JFIN                                                     
      KSTRT=MSX14(J,LAMIN)                                              
      GO TO (3,4,5,6), KSTRT                                            
C                                                                       
C KSTRT=1                                                               
C                                                                       
 3    KSTRT=1+NPRE2                                                     
      KSA14(J)=KSTRT                                                    
      KFA14(J)=KSTRT                                                    
      KSA15(J)=2+NPRE2                                                  
      GO TO 7                                                           
C                                                                       
C KSTRT=2                                                               
C                                                                       
 4    KSA14(J)=2+NPRE2                                                  
      GO TO 7                                                           
C                                                                       
C ERROR (KSTRT=3)                                                       
C                                                                       
 5    WRITE (IOUT06,500)                                                
      STOP                                                              
C                                                                       
C KSTRT=4                                                               
C                                                                       
C NOTICE THAT KFA14 AND KSA15 ARE NOT SET, SINCE THEY WILL              
C NOT BE NEEDED IN ADJAMN                                               
 6    KSA14(J)=7+NPRE2                                                  
C END OF PROLINE SECTION                                                
 7    CONTINUE                                                          
      RETURN                                                            
  500 FORMAT(55H ERROR IN 1-4 INTERACTIONS BETWEEN 1ST AND 2ND RESIDUE.)
      END                                                               
C     SUBROUTINE CAL14                                                  
C     IMPLICIT REAL*8(A-H,O-Z)                                          
C                                                                       
C THIS SUBROUTINE CALCULATES THE ENERGY OF 1,4 INTERACTIONS BETWEEN     
C ATOMS JM AND KM WITH TYPES JJ AND KK RESPECTIVELY                     
C                                                                       
C THE ELECTROSTATIC ENERGY TEES FOR ATOM PAIR JM, KM = CHG(JM)*CHG(KM)/R
C WHERE 2.0 IS TAKEN AS THE DIELECTRIC CONSTANT                         
C        CHG IS STORED AS Q*SQRT(332.0/2.0)                             
C        Q IS THE PARTIAL ATOMIC CHARGE IN E.C.U.                       
C        R IS THE INTERNUCLEAR DISTANCE IN ANGSTROM UNITS.              
C NONBONDED ENERGY TENB FOR JM,KM = F*EPS*RO**6/R**12-2*EPS*RO**3/R**12 
C WHERE F IS 0.5 FOR 1,4 INTERACTIONS                                   
C        EPS IS THE DEPTH OF THE ENERGY MINIMUM                         
C        RO IS THE SQUARE OF THE INTERNUCLEAR DISTANCE AT THE MINIMUM   
C        R IS THE INTERNUCLEAR DISTANCE BETWEEN JM AND KM.              
C HYDROGEN BOND ENERGY = EPS*RO**6/R**12 - 2*EPS*RO**5/R**10            
C                                                                       
C     PARAMETER  (MAXATM=4000)                                          
C     DOUBLE PRECISION DTEES,EES,DTENB,ENB,ETOT                         
C     COMMON/CALC/EES,ENB,ETOT,JM,JJ                                    
C     COMMON/CAL001/KSTRT,KFIN                                          
C     COMMON/ENG000/EPS(28,28),RO(28,28)                                
C     COMMON/NRG2/QJ,J,JSTRT,JFIN,JPRO,KPRO,IFEND,LASTRS                
C     DIMENSION IHB(28)                                                 
C     DATA IHB/0,1,0,1,8*0,2*2,2*0,3*2,9*0/                             
C                                                                       
C     DO 1 KM=KSTRT,KFIN                                                
C     KK=NBTYPE(KM)                                                     
C     QJK=QJ*CHARGE(KM)                                                 
C     DAX=REFCRD(1,KM)-REFCRD(1,JM)                                     
C     DAY=REFCRD(2,KM)-REFCRD(2,JM)                                     
C     DAZ=REFCRD(3,KM)-REFCRD(3,JM)                                     
C     RMAG=DAX*DAX+DAY*DAY+DAZ*DAZ                                      
C     R=1./RMAG                                                         
C     R6=RO(JJ,KK)*R                                                    
C     R4=R6*R6                                                          
C     R6=R6*R4                                                          
C     R=SQRT(R)                                                         
C     TEES=QJK*R                                                        
C     DTEES=TEES                                                        
C     EES=EES+DTEES                                                     
C     EPP=EPS(JJ,KK)                                                    
C     C=2.0                                                             
C     IHBCHK=IHB(JJ)+IHB(KK)                                            
C     IF (IHBCHK.EQ.3) GO TO 101                                        
C     TENB=EPP*R6*(0.5*R6-C)                                            
C     DTENB=TENB                                                        
C     ENB=ENB+DTENB                                                     
C     GO TO 1                                                           
C 101 C=C*R4                                                            
C     TENB=EPP*R6*(R6-C)                                                
C     DTENB=TENB                                                        
C     ENB=ENB+DTENB                                                     
C   1 CONTINUE                                                          
C     RETURN                                                            
C     END                                                               
C     SUBROUTINE CAL15                                                  
C     IMPLICIT REAL*8(A-H,O-Z)                                          
C                                                                       
C THIS SUBROUTINE CALCULATES THE ENERGY OF 1,5 INTERACTIONS BETWEEN     
C ATOMS JM AND KM WITH TYPES JJ AND KK RESPECTIVELY                     
C SEE COMMENTS FOR SUBROUTINE CAL14                                     
C F IN THE EXPRESSION FOR TENB IS 1.0 FOR 1,5 INTERACTIONS              
C                                                                       
C     PARAMETER  (MAXATM=4000)                                          
C     DOUBLE PRECISION DTEES,EES,DTENB,ENB,ETOT                         
C     COMMON/CALC/EES,ENB,ETOT,JM,JJ                                    
C     COMMON/CAL001/KSTRT,KFIN                                          
C     COMMON/ENG000/EPS(28,28),RO(28,28)                                
C     COMMON/NRG2/QJ,J,JSTRT,JFIN,JPRO,KPRO,IFEND,LASTRS                
C     DIMENSION IHB(28)                                                 
C     DATA IHB/0,1,0,1,8*0,2*2,2*0,3*2,9*0/                             
C                                                                       
C     DO 2 KM=KSTRT,KFIN                                                
C     KK=NBTYPE(KM)                                                     
C     QJK=QJ*CHARGE(KM)                                                 
C     DAX=REFCRD(1,KM)-REFCRD(1,JM)                                     
C     DAY=REFCRD(2,KM)-REFCRD(2,JM)                                     
C     DAZ=REFCRD(3,KM)-REFCRD(3,JM)                                     
C     RMAG=DAX*DAX+DAY*DAY+DAZ*DAZ                                      
C     R=1./RMAG                                                         
C     R6=RO(JJ,KK)*R                                                    
C     R4=R6*R6                                                          
C     C=2.0                                                             
C     IHBCHK=IHB(JJ)+IHB(KK)                                            
C     IF (IHBCHK.NE.3) GO TO 102                                        
C     C=C*R4                                                            
C 102 R6=R6*R4                                                          
C     R=SQRT(R)                                                         
C     TEES=QJK*R                                                        
C     DTEES=TEES                                                        
C     EES=EES+DTEES                                                     
C     EPP=EPS(JJ,KK)                                                    
C     TENB=EPP*R6*(R6-C)                                                
C     DTENB=TENB                                                        
C     ENB=ENB+DTENB                                                     
C2    CONTINUE                                                          
C     RETURN                                                            
C     END                                                               
      SUBROUTINE CBOXL                                                  
      IMPLICIT REAL*8(A-H,O-Z)                                          
C                                                                       
C THIS SUBROUTINE SETS UP THE ARRAYS KSC14, KFC14, AND KSC15,           
C WHICH WILL BE USED IN SUBROUTINE ADJOXL TO CALCULATE THE              
C 1-4 AND 1-5 INTERACTIONS BETWEEN THE LAST FULL RESIDUE AND THE        
C CARBOXYL END GROUP                                                    
C CBOXL IS CALLED IN SPECV                                              
C                                                                       
CMSP  INCLUDE (MAXSIZE)                                                 
      INCLUDE '/labo/qclib/inspidas/common/maxsize'
CMSP  INCLUDE(SIZE)                                                     
      INCLUDE '/labo/qclib/inspidas/common/size'
CMSP  INCLUDE(PRIMRY)                                                   
      INCLUDE '/labo/qclib/inspidas/common/primry'
      COMMON/CARB/KSC14(36),KFC14(36),KSC15(36)                         
      COMMON/CHECK/KNDRES(36),KNDEND(20)                                
C     COMMON/GEN100/INUMRS,LIST(MAXRES),NPRE(MXRS1)                     
      COMMON/GEN100/NPRE(MXRS1)                                         
      COMMON/PUT14/NSN14(26,36),NFN14(26,36),MSX14(22,20),MFX14(22,20), 
     1   MSN14(22,20),MFN14(22,20)                                      
      COMMON/PUT15/NSN15(26,36),MSN15(22,20),MSX15(22,20)               
C     COMMON/TOR2/LAMIN,KAMIN,LCARB,KCARB,NUMVAR                        
      COMMON/TOR2/LAMIN,KAMIN,LCARB,KCARB                               
C IF THERE IS NO CARBOXYL END GROUP, RETURN                             
      IF(KCARB.EQ.20) RETURN                                            
C                                                                       
C DEFINE VARIABLES                                                      
C     NPREIK=NPRE(INUMRS)                                               
      NPREIK=NPRE(NUMRES)                                               
C     JFIN=NPREIK-NPRE(INUMRS-1)                                        
      JFIN=NPREIK-NPRE(NUMRES-1)                                        
C     LISTIJ=LIST(INUMRS-1)                                             
      LISTIJ=LIST(NUMRES-1)                                             
      LISTIJ=IABS(LISTIJ)                                               
      KINDIJ=KNDRES(LISTIJ)                                             
      KINDIJ=IABS(KINDIJ)                                               
      JPRO=0                                                            
      IF(KINDIJ.EQ.13.OR.KINDIJ.EQ.22) JPRO=1                           
C                                                                       
C STEP J                                                                
C                                                                       
      DO 3 J=1,JFIN                                                     
C                                                                       
C IS J A BACKBONE ATOM?                                                 
      IF(J.LE.7) GO TO 2                                                
C                                                                       
C IS J A SIDECHAIN ATOM AND PART OF THE PROLINE RING?                   
      IF(JPRO.EQ.1.AND.J.NE.15) GO TO 1                                 
C                                                                       
C THE FOLLOWING SECTION IS FOR J A SIDECHAIN ATOM BUT NOT PART          
C OF THE PROLINE RING                                                   
C                                                                       
      KSC14(J)=NPREIK                                                   
      KFC14(J)=NPREIK                                                   
      KSC15(J)=1+NPREIK                                                 
      GO TO 3                                                           
C                                                                       
C PROLINE RING                                                          
C THE FOLLOWING SECTION IS FOR J A SIDECHAIN ATOM                       
C BUT PART OF A PROLINE RING                                            
C                                                                       
 1    KSC14(J)=MSX14(1,LCARB)+NPREIK                                    
      KFC14(J)=MFX14(1,LCARB)+NPREIK                                    
      KSC15(J)=MSX15(1,LCARB)+NPREIK                                    
      GO TO 3                                                           
C                                                                       
C BACKBONE                                                              
C THE FOLLOWING SECTION IS FOR J LESS THAN 7, I. E., J                  
C IS A BACKBONE ATOM                                                    
C                                                                       
C IF J IS THE C2 OF A PROLINE, THEN IT ALSO BELONGS TO THE              
C PROLINE RING                                                          
 2    IF(JPRO.EQ.1.AND.J.EQ.2) GO TO 1                                  
      KSC14(J)=MSX14(J,LCARB)+NPREIK                                    
      KFC14(J)=MFX14(J,LCARB)+NPREIK                                    
      KSC15(J)=MSX15(J,LCARB)+NPREIK                                    
C                                                                       
C END OF LOOP                                                           
 3    CONTINUE                                                          
      RETURN                                                            
      END                                                               
      SUBROUTINE DIHANG(S,T,U,V)                                        
      IMPLICIT REAL*8(A-H,O-Z)                                          
C                                                                       
C THIS SUBROUTINE COMPUTES THE VALUE OF THE DIHEDRAL ANGLE (ANG1)       
C DEFINED BY THE ATOMIC COORDINATE ARRAYS S, T, U AND V.                
C                                                                       
      DIMENSION S(3),T(3),U(3),V(3)                                     
      DIMENSION A(3),B(3),C(3),AXB(3),BXC(3)                            
      COMMON/HEDRAL/ANG1                                                
      DO 1 L=1,3                                                        
      A(L)=T(L)-S(L)                                                    
      B(L)=U(L)-T(L)                                                    
      C(L)=V(L)-U(L)                                                    
   1  CONTINUE                                                          
      AXB(1)=A(2)*B(3)-A(3)*B(2)                                        
      AXB(2)=A(3)*B(1)-A(1)*B(3)                                        
      AXB(3)=A(1)*B(2)-A(2)*B(1)                                        
      BXC(1)=B(2)*C(3)-B(3)*C(2)                                        
      BXC(2)=B(3)*C(1)-B(1)*C(3)                                        
      BXC(3)=B(1)*C(2)-B(2)*C(1)                                        
      D=BXC(1)**2+BXC(2)**2+BXC(3)**2                                   
      D=SQRT((AXB(1)**2+AXB(2)**2+AXB(3)**2)*D)                         
      ANG1=(AXB(1)*BXC(1)+AXB(2)*BXC(2)+AXB(3)*BXC(3))/D                
      ANG1=ARCOS(ANG1)                                                  
      SCLPRD=A(1)*(B(2)*C(3)-B(3)*C(2)) - A(2)*(B(1)*C(3)-B(3)*C(1))    
     1   +A(3)*(B(1)*C(2)-B(2)*C(1))                                    
      IF (SCLPRD.LE.0.0) ANG1=-ANG1                                     
      RETURN                                                            
      END                                                               
C     SUBROUTINE ENERGY (VAR)                                           
      SUBROUTINE ENERGY                                                 
      IMPLICIT REAL*8(A-H,O-Z)                                          
C                                                                       
C THIS SUBROUTINE GENERATES THE GEOMETRY AND CALCULATES THE             
C CONFORMATIONAL ENERGY OF THE USER'S POLYPEPTIDE CHAIN                 
C                                                                       
CMSP  INCLUDE (MAXSIZE)                                                 
      INCLUDE '/labo/qclib/inspidas/common/maxsize'
CMSP  INCLUDE(SIZE)                                                     
      INCLUDE '/labo/qclib/inspidas/common/size'
CMSP  INCLUDE (VARANG)                                                  
      INCLUDE '/labo/qclib/inspidas/common/varang'
CMSP  INCLUDE (ALPHA)                                                   
      INCLUDE '/labo/qclib/inspidas/common/alpha'
CMSP  INCLUDE (CHARGE)                                                  
      INCLUDE '/labo/qclib/inspidas/common/charge'
CMSP  INCLUDE (COORD)                                                   
      INCLUDE '/labo/qclib/inspidas/common/coord'
CMSP  INCLUDE (NBTYPE)                                                  
      INCLUDE '/labo/qclib/inspidas/common/nbtype'
CMSP  INCLUDE (REFRNC)                                                  
      INCLUDE '/labo/qclib/inspidas/common/refrnc'
CMSP  INCLUDE (TORSNP)                                                  
      INCLUDE '/labo/qclib/inspidas/common/torsnp'
CMSP  INCLUDE (SSPAIR)                                                  
      INCLUDE '/labo/qclib/inspidas/common/sspair'
CMSP  INCLUDE (PRIMRY)                                                  
      INCLUDE '/labo/qclib/inspidas/common/primry'
      DOUBLE PRECISION EES,ENB,ETOT,DUK,ETOR,ETORS                      
      DOUBLE PRECISION ECYSTR,ELOOP                                     
      COMMON/BONDS/UTOR(MXRS10),NDXARR(10,MAXRES),                      
     &             NV(MAXRES)                                           
      COMMON/CALC/EES,ENB,ETOT,JM,JJ                                    
      COMMON/CAL001/KSTRT,KFIN                                          
      COMMON/CHECK/KNDRES(36),KNDEND(20)                                
      COMMON/CHKN/NIT                                                   
C     COMMON/CYS001/KCYS,NCYS                                           
      COMMON/CYS001/KCYS                                                
C     COMMON/GEN100/INUMRS,LIST(MAXRES),NPRE(MXRS1)                     
      COMMON/GEN100/NPRE(MXRS1)                                         
      COMMON/GEN004/ENOORD(3,22,20),ECHG(22,20),EALPHA(22,20),          
     1   NDATOM(20),NBOND(20),NNDPT1(6,20),NNDPT2(6,20),NDTYPE(22,20)   
      COMMON/GEN008/NGEOM(36)                                           
      COMMON/NRG1/IJ,IK,LISTIJ,LISTIK,KINDIJ,KINDIK,NPREIJ,NPREIK       
      COMMON/NRG2/QJ,J,JSTRT,JFIN,JPRO,KPRO,IFEND,LASTRS                
      COMMON/PROLIN/EPRO                                                
      COMMON/TOR/ETOR,ECYSTR,ELOOP                                      
C     COMMON/TORQUE/A(MAXVAR),NB(MAXVAR),NS(MAXVAR),IFTORP(MAXVAR),     
C    &              INDXPV(MAXVAR)                                      
      COMMON/TORQUE/INDXPV(MAXVAR)                                      
C     COMMON/TOR2/LAMIN,KAMIN,LCARB,KCARB,NUMVAR                        
      COMMON/TOR2/LAMIN,KAMIN,LCARB,KCARB                               
      COMMON/TOR3/ETORS                                                 
C     CHARACTER*4 ALPH,EALPHA                                           
      CHARACTER*4 EALPHA                                                
C     DIMENSION VAR (1)                                                 
      DIMENSION RING(7)                                                 
      DIMENSION ANGONE(10*MAXRES)                                       
      EQUIVALENCE (ANGRAD(1,1),ANGONE(1))                               
      DATA RING(1),RING(2),RING(3),RING(4),RING(5),RING(6),RING(7)/     
     1   1.366,0.520,0.318,0.920,0.186,0.000,0.994/                     
C                                                                       
C FIRST WE CALCULATE THE NEW VALUE OF THE TORSIONAL ENERGY. ONLY THE    
C CONTRIBUTIONS FROM THE VARIABLE DIHEDRAL ANGLES MUST BE RECALCULATED. 
C                                                                       
      ETOR=ETORS                                                        
C                                                                       
C IF THERE ARE NO VARIABLE DIHEDRAL ANGLES SKIP THIS TORSIONAL SECTION  
C                                                                       
      IF(NUMVAR.EQ.0) GO TO 2                                           
C                                                                       
C STEP VARIABLES                                                        
C                                                                       
      DO 1 L=1,NUMVAR                                                   
      NDX=INDXPV(L)                                                     
      ANGONE(NDX)=VAR(L)                                                
      IFT=IFTORP(L)                                                     
      IF(IFT.NE.1) GO TO 1                                              
      UK=AP(L)*(1.+FLOAT(NSP(L))*COS(FLOAT(NBP(L))*VAR(L)))             
      DUK=UK                                                            
      ETOR=ETOR+DUK                                                     
      UTOR(NDX)=UK                                                      
 1    CONTINUE                                                          
C                                                                       
C GENERATE                                                              
C                                                                       
  2   CALL GENER                                                        
      ENB=0.0D0                                                         
      EES=0.0D0                                                         
      ECYSTR=0.0D0                                                      
      ELOOP=0.0D0                                                       
      EPRO=0.0E0                                                        
C LASTRS IS THE LAST RESIDUE OF THE MOLECULE, I. E., THE CARBOXYL END   
C GROUP, IF ANY, OTHERWISE THE LAST FULL RESIDUE.                       
C     LASTRS=INUMRS                                                     
      LASTRS=NUMRES                                                     
      IF (KCARB.EQ.20) LASTRS=LASTRS-1                                  
C                                                                       
C STEP IJ                                                               
C IJ IS THE RESIDUE NUMBER OF J, THE 1ST ATOM OF THE INTERACTING PAIR   
C                                                                       
      DO 6 IJ=1,LASTRS                                                  
C                                                                       
C IFEND=0 IF I IS NOT AN END GROUP.  IFEND=1 IF IT IS AN END GROUP      
      IFEND=0                                                           
C     IF(IJ.EQ.1.OR.IJ.EQ.INUMRS) IFEND=1                               
      IF(IJ.EQ.1.OR.IJ.EQ.NUMRES) IFEND=1                               
      LISTIJ=LIST(IJ)                                                   
      LISTIJ=IABS(LISTIJ)                                               
      KINDIJ=KNDRES(LISTIJ)                                             
      IF (IFEND.NE.0) KINDIJ=KNDEND(LISTIJ)                             
      KINDIJ=IABS(KINDIJ)                                               
      KCYS=0                                                            
C     IF (KINDIJ.NE.3.OR.IFEND.EQ.1.OR.NCYS.EQ.0) GO TO 201             
      IF (KINDIJ.NE.3.OR.IFEND.EQ.1.OR.NSS.EQ.0) GO TO 201              
C                                                                       
C IF IJ IS A HALF-CYSTINE RESIDUE, THIS SECTION FINDS KCYS              
C (IF IT EXISTS), THE RESIDUE NUMBER OF THE OTHER HALF.                 
C                                                                       
C     DO 10 N=1,NCYS                                                    
      DO 10 N=1,NSS                                                     
      NP1=NPAIR(N,1)                                                    
      NP2=NPAIR(N,2)                                                    
      IF(IJ.EQ.NP1) KCYS=NP2                                            
 10   CONTINUE                                                          
C                                                                       
C JPRO=1 IF THE RESIDUE CONTAINING THE JTH ATOM IS A PROLINE OR A       
C H-PROLINE                                                             
 201  JPRO=0                                                            
      IF(IFEND.NE.1.AND.(KINDIJ.EQ.13.OR.KINDIJ.EQ.22)) JPRO=1          
C                                                                       
C NPREIJ AND NPREIK WILL BE USED TO CONVERT ATOM NUMBERS                
C J AND K NUMBERED WITHIN THE RESIDUE, TO JM AND KM, THE SAME           
C ATOMS BUT NUMBERED WITHIN THE WHOLE MOLECULE.                         
      NPREIJ=NPRE(IJ)                                                   
      NPREIK=NPRE(IJ+1)                                                 
      JSTRT=1                                                           
      JFIN=NPREIK-NPREIJ                                                
      IF (JFIN.EQ.0) GO TO 6                                            
C                                                                       
C DEFINE VARIABLES NEEDED BELOW (SEE DEFINITION OF VARIABLES)           
      KPRO=0                                                            
      KINDIK=99                                                         
      IF (IJ.EQ.LASTRS) GO TO 22                                        
      IK=IJ+1                                                           
      LISTIK=LIST(IK)                                                   
      LISTIK=IABS(LISTIK)                                               
      KINDIK=KNDRES(LISTIK)                                             
C     IF (IK.EQ.INUMRS) KINDIK=KNDEND(LISTIK)                           
      IF (IK.EQ.NUMRES) KINDIK=KNDEND(LISTIK)                           
      KINDIK=IABS(KINDIK)                                               
C     IF((KINDIK.EQ.13.OR.KINDIK.EQ.22).AND.IK.NE.INUMRS) KPRO=1        
      IF((KINDIK.EQ.13.OR.KINDIK.EQ.22).AND.IK.NE.NUMRES) KPRO=1        
C                                                                       
C STEP J                                                                
C WE NOW STEP OVER ALL THE ATOMS IN THE IJTH RESIDUE                    
C                                                                       
 22   DO 5 J=JSTRT,JFIN                                                 
C                                                                       
C J AND JM REFER TO THE 1ST ATOM OF THE INTERACTING PAIR.  J IS THIS    
C ATOM AS NUMBERED WITHIN RESIDUE I. JM IS THE SAME ATOM, NUMBERED      
C WITHIN THE WHOLE MOLECULE.                                            
      JM=J+NPREIJ                                                       
      JJ=NBTYPE(JM)                                                     
      QJ=CHARGE(JM)                                                     
C                                                                       
C WE NOW CALCULATE THE INTRA-RESIDUE 1-4 AND 1-5 INTERACTIONS           
      CALL INT14                                                        
      CALL INT15                                                        
C                                                                       
C                                                                       
C THE FOLLOWING SECTION IS FOR CALCULATING THE INTERACTIONS BETWEEN     
C ATOM J AND THE ATOMS OF THE ADJACENT RESIDUE                          
C                                                                       
C IF IJ IS THE LAST REAL RESIDUE WE WILL SKIP THIS SECTION              
      IF(IJ.EQ.LASTRS) GO TO 5                                          
C                                                                       
C RESET IK AND NIT BEFORE CALLING ADJCNT                                
C                                                                       
      IK=IJ+1                                                           
      NIT=0                                                             
C                                                                       
C SUBROUTINE ADJCNT CALCULATES THE APPROPRIATE INTER-RESIDUE            
C ADJACENT INTERACTIONS                                                 
      CALL ADJCNT                                                       
      IJ2=IJ+2                                                          
      IF(IJ2.GT.LASTRS) GO TO 5                                         
C                                                                       
C STEP IK                                                               
C THIS SECTION CALCULATES THE APPROPRIATE INTER-RESIDUE                 
C NON-ADJACENT INTERACTIONS                                             
C                                                                       
      DO 4 IK=IJ2,LASTRS                                                
      IF(IK.NE.KCYS) GO TO 3                                            
      NPREIK=NPRE(IK)                                                   
      CALL SSBRIJ                                                       
      NPREIK=NPRE(IJ+1)                                                 
      GO TO 4                                                           
C                                                                       
C NO BRIDGE                                                             
C                                                                       
 3    KSTRT=NPRE(IK)+1                                                  
      IF (NIT.NE.1) GO TO 31                                            
C                                                                       
C THIS SECTION CALCULATES THE 1-4 INTERACTION BETWEEN ATOM J            
C OF RESIDUE IJ AND THE NITROGEN OF RESIDUE IJ+2                        
C                                                                       
      KFIN=KSTRT                                                        
      CALL CAL14                                                        
      KSTRT=KSTRT+1                                                     
      NIT=0                                                             
C                                                                       
 31   KFIN=NPRE(IK+1)                                                   
      IF(KSTRT.GT.KFIN) GO TO 4                                         
      CALL CAL15                                                        
 4    CONTINUE                                                          
 5    CONTINUE                                                          
C                                                                       
C IF THE ENDGROUP IS TYPE 6, ADD TO EPRO THE INTERNAL ENERGY OF CIS-H-  
C PROLINE RELATIVE TO TRANS-H-PROLINE.  IF THE NEXT RESIDUE IS PROLINE, 
C ADD TO EPRO THE INTERNAL ENERGY OF THE FIXED PART OF THE PROLINE RING.
C THIS WILL DIFFER FOR CIS AND TRANS PROLINE, AND FOR DIFFERENT RING    
C GEOMETRIES (DOWN, UP, FLAT) AND IS NOT INCLUDED IN ETOT.              
C                                                                       
      IF (IFEND.EQ.1.AND.KINDIJ.EQ.6) EPRO=EPRO+RING(7)                 
      IF (KPRO.EQ.0.OR.KINDIK.EQ.22) GO TO 6                            
      IFCIS=1                                                           
      L=10*(IJ-1)+3                                                     
      IF (IJ.EQ.1) L=NBOND(LISTIJ)                                      
      IF(COS(ANGONE(L)).LE.0.0) IFCIS=0                                 
 56   JJ=3*IFCIS+NGEOM(LISTIK)                                          
      EPRO=EPRO+RING(JJ)                                                
 6    CONTINUE                                                          
C                                                                       
C WE HAVE NOW CALCULATED THE TOTAL ELECTROSTATIC (EES), NONBONDED       
C (ENB), AND TORSIONAL ENERGIES AND CAN SUM THEM TO FIND ETOT, THE      
C TOTAL ENERGY OF THE MOLECULE.                                         
C                                                                       
      ETOT=EES+ENB+ETOR+ECYSTR+ELOOP                                    
      RETURN                                                            
      END                                                               
C     SUBROUTINE INITOR (VAR)                                           
      SUBROUTINE INITOR                                                 
      IMPLICIT REAL*8(A-H,O-Z)                                          
C                                                                       
C THE SUBROUTINE (1) CALCULATES THE INITIAL TORSIONAL ENERGY            
C OF THE POLYPEPTIDE (BY CALLING TORTOT), (2) INITIALIZES THE           
C TORSIONAL ARRAYS (A,NB,NS, AND IFTORP), (3) CALCULATES ETORS,         
C THAT PART OF THE TOTAL TORSIONAL ENERGY WHICH DOES NOT VARY,          
C AND (4) SETS THE VARIABLE ARRAYS INDXPV AND VAR (SEE DEF'N            
C OF VARIABLES).                                                        
C                                                                       
      DOUBLE PRECISION ETOR,ETORS,ECYSTR,ELOOP,DUK                      
CMSP  INCLUDE (MAXSIZE)                                                 
      INCLUDE '/labo/qclib/inspidas/common/maxsize'
CMSP  INCLUDE(SIZE)                                                     
      INCLUDE '/labo/qclib/inspidas/common/size'
CMSP  INCLUDE (VARANG)                                                  
      INCLUDE '/labo/qclib/inspidas/common/varang'
CMSP  INCLUDE (ALPHA)                                                   
      INCLUDE '/labo/qclib/inspidas/common/alpha'
CMSP  INCLUDE (CHARGE)                                                  
      INCLUDE '/labo/qclib/inspidas/common/charge'
CMSP  INCLUDE (COORD)                                                   
      INCLUDE '/labo/qclib/inspidas/common/coord'
CMSP  INCLUDE (NBTYPE)                                                  
      INCLUDE '/labo/qclib/inspidas/common/nbtype'
CMSP  INCLUDE (REFRNC)                                                  
      INCLUDE '/labo/qclib/inspidas/common/refrnc'
CMSP  INCLUDE (TORSNP)                                                  
      INCLUDE '/labo/qclib/inspidas/common/torsnp'
CMSP  INCLUDE (PRIMRY)                                                  
      INCLUDE '/labo/qclib/inspidas/common/primry'
      COMMON/BONDS/UTOR(MXRS10),NDXARR(10,MAXRES),                      
     &             NV(MAXRES)                                           
      COMMON/CHECK/KNDRES(36),KNDEND(20)                                
C     COMMON/GEN100/INUMRS,LIST(MAXRES),NPRE(MXRS1)                     
      COMMON/GEN100/NPRE(MXRS1)                                         
      COMMON/TOR/ETOR,ECYSTR,ELOOP                                      
      COMMON/TORP/AR(8,36),NBB(8,36),NSSX(8,36),NANG(8,36),NTOR(36),    
     1  AAN(20),NBBN(20),NSSN(20),NANGN(20)                             
C     COMMON/TORQUE/A(MAXVAR),NB(MAXVAR),NS(MAXVAR),IFTORP(MAXVAR),     
C    &              INDXPV(MAXVAR)                                      
      COMMON/TORQUE/INDXPV(MAXVAR)                                      
C     COMMON/TOR2/LAMIN,KAMIN,LCARB,KCARB,NUMVAR                        
      COMMON/TOR2/LAMIN,KAMIN,LCARB,KCARB                               
      COMMON/TOR3/ETORS                                                 
      DIMENSION ANGONE(10*MAXRES)                                       
      EQUIVALENCE (ANGRAD(1,1),ANGONE(1))                               
C     CHARACTER*4 ALPH                                                  
C     DIMENSION VAR (1)                                                 
C                                                                       
C CALL TORTOT TO CALCULATE THE TOTAL TORSIONAL ENERGY OF THE            
C POLYPEPTIDE                                                           
C                                                                       
      CALL TORTOT                                                       
      ETORS=ETOR                                                        
C                                                                       
C IF THE USER HAS SPECIFIED NO VARIABLES, RETURN                        
      IF(NUMVAR.EQ.0) RETURN                                            
C     LASTFL=INUMRS-1                                                   
      LASTFL=NUMRES-1                                                   
      NDXTOT=0                                                          
      NUMVAR=0                                                          
C                                                                       
C STEP RESIDUE                                                          
C                                                                       
C     DO 70 I=1,INUMRS                                                  
      DO 70 I=1,NUMRES                                                  
      NVR=NV(I)                                                         
      IF(NVR.EQ.0) GO TO 70                                             
      LISTI=LIST(I)                                                     
      LISTI=IABS(LISTI)                                                 
C                                                                       
C STEP VARIABLE                                                         
C                                                                       
      DO 60 LL=1,NVR                                                    
      L=NUMVAR+LL                                                       
      NDX=NDXARR(LL,I)                                                  
      IFT=0                                                             
C                                                                       
C IS I THE CARBOXYL END GROUP?                                          
C     IF (I.EQ.INUMRS.AND.KCARB.EQ.(-18)) GO TO 25                      
      IF (I.EQ.NUMRES.AND.KCARB.EQ.(-18)) GO TO 25                      
C     IF(I.EQ.INUMRS) GO TO 50                                          
      IF(I.EQ.NUMRES) GO TO 50                                          
C                                                                       
C IS I THE AMINO END GROUP?                                             
      IF(I.NE.1) GO TO 10                                               
C                                                                       
C DOES THE VARIABLE IN QUESTION HAVE A TORSIONAL TERM?                  
      IF(KAMIN.LT.0.AND.NDX.EQ.NANGN(LAMIN)) GO TO 20                   
      GO TO 50                                                          
C                                                                       
C SET TORSIONAL ARRAYS                                                  
C                                                                       
C IS THE VARIABLE IN QUESTION AN OMEGA?                                 
 10   IF(NDX.NE.3) GO TO 30                                             
C                                                                       
C IS I THE LAST FULL RESIDUE?                                           
      IF(I.NE.LASTFL) GO TO 20                                          
C                                                                       
C DOES THE 3RD BACKBONE DIHEDRAL ANGLE OF THE LAST FULL                 
C RESIDUE HAVE A TORSIONAL TERM?                                        
      IF(KCARB.GE.0) GO TO 30                                           
      AP(L)=AAN(LCARB)                                                  
      NBP(L)=NBBN(LCARB)                                                
      NSP(L)=NSSN(LCARB)                                                
      IFT=1                                                             
      GO TO 50                                                          
C                                                                       
C OMEGA                                                                 
C THIS SECTION COMPUTES THE OMEGA CONTRIBUTION TO THE TORSIONAL ENERGY. 
 20   AP(L)=10.0                                                        
      NBP(L)=2                                                          
      NSP(L)=-1                                                         
      IFT=1                                                             
      GO TO 50                                                          
C                                                                       
C  SIDECHAIN TORSIONAL FOR ETHYL ESTER ENDGROUP                         
C                                                                       
  25  AP(L) = 1.35                                                      
      NBP(L) = 3                                                        
      NSP(L) = 1                                                        
      IFT = 1                                                           
C                                                                       
C SIDECHAIN                                                             
C                                                                       
C IS THE VARIABLE IN QUESTION A BACKBONE DIHEDRAL ANGLE                 
C OR A CHI?                                                             
  30  IF (NDX.LT.4) GO TO 50                                            
      KINDI=KNDRES(LISTI)                                               
C                                                                       
C DOES THE RESIDUE IN QUESTION HAVE A SIDECHAIN TORSIONAL TERM?         
      IF(KINDI.GE.0) GO TO 50                                           
      NKT=NTOR(LISTI)                                                   
      IF (KINDI.EQ.(-3)) NKT=1                                          
      DO 32 J=1,NKT                                                     
      NA=NANG(J,LISTI)                                                  
C                                                                       
C IS THE SIDECHAIN VARIABLE IN QUESTION THE ONE WHICH HAS A             
C TORSIONAL TERM?                                                       
      IF (NDX.NE.NA) GO TO 32                                           
      AP(L)=AR(J,LISTI)                                                 
      NBP(L)=NBB(J,LISTI)                                               
      NSP(L)=NSSX(J,LISTI)                                              
      IFT=1                                                             
  32  CONTINUE                                                          
C                                                                       
C SET VARIABLE ARRAYS                                                   
C                                                                       
 50   NDX=NDX+NDXTOT                                                    
C                                                                       
C SEE DEFINITION OF VARIABLES FOR AN EXPLANATION OF THE                 
C FOLLOWING ARRAYS.                                                     
      INDXPV(L)=NDX                                                     
      VAR(L)=ANGONE(NDX)                                                
      IFTORP(L)=IFT                                                     
C                                                                       
C DOES THE VARIABLE BEING CONSIDERED HAVE A TORSIONAL TERM?             
      IF(IFT.EQ.0) GO TO 60                                             
      DUK=UTOR(NDX)                                                     
      ETORS=ETORS-DUK                                                   
C                                                                       
C END OF VARIABLE LOOP                                                  
 60   CONTINUE                                                          
      NUMVAR=NUMVAR+NVR                                                 
C                                                                       
C END OF RESIDUE LOOP                                                   
 70   NDXTOT=NDXTOT+10                                                  
      RETURN                                                            
      END                                                               
      SUBROUTINE INT14                                                  
      IMPLICIT REAL*8(A-H,O-Z)                                          
C                                                                       
C THIS SUBROUTINE CALCULATES THE 1-4 INTERACTIONS BETWEEN ATOM J        
C AND ALL APPROPRIATE ATOMS K IN THE SAME RESIDUE                       
C                                                                       
      DOUBLE PRECISION EES,ENB,ETOT                                     
      COMMON/CALC/EES,ENB,ETOT,JM,JJ                                    
      COMMON/CAL001/KSTRT,KFIN                                          
      COMMON/NRG1/IJ,IK,LISTIJ,LISTIK,KINDIJ,KINDIK,NPREIJ,NPREIK       
      COMMON/NRG2/QJ,J,JSTRT,JFIN,JPRO,KPRO,IFEND,LASTRS                
      COMMON/PUT14/NSN14(26,36),NFN14(26,36),MSX14(22,20),MFX14(22,20), 
     1   MSN14(22,20),MFN14(22,20)                                      
C                                                                       
      IF(IFEND.EQ.1) GO TO 3                                            
C THIS SECTION CALCULATES THE INTRA-RESIDUE 1-4 INTERACTIONS            
C FOR FULL RESIDUES                                                     
      KSTRT=NSN14(J,LISTIJ)                                             
      IF(KSTRT.EQ.0) GO TO 1                                            
      KSTRT=KSTRT+NPREIJ                                                
      KFIN=NFN14(J,LISTIJ)+NPREIJ                                       
      CALL CAL14                                                        
 1    IF(KINDIJ.NE.22.OR.J.GT.5) GO TO 2                                
C IF THE RESIDUE IS A HYDROXYPROLINE, THE H15 MUST BE EXPLICITLY        
C CALCULATED FOR ATOMS 1-5                                              
      KSTRT=15+NPREIJ                                                   
      KFIN=KSTRT                                                        
      CALL CAL14                                                        
 2    IF(J.NE.5) RETURN                                                 
C THE INTERACTION BETWEEN ATOMS 5 AND 7 MUST BE EXPLICITLY              
C CALCULATED                                                            
      KSTRT=7+NPREIJ                                                    
      KFIN=KSTRT                                                        
      CALL CAL14                                                        
      RETURN                                                            
C THIS SECTION IS FOR CALCULATING THE INTRA-RESIDUE 1-4 INTER-          
C ACTIONS FOR END GROUPS                                                
 3    KSTRT=MSN14(J,LISTIJ)                                             
      IF(KSTRT.EQ.0) RETURN                                             
      KSTRT=KSTRT+NPREIJ                                                
      KFIN=MFN14(J,LISTIJ)+NPREIJ                                       
      CALL CAL14                                                        
      RETURN                                                            
      END                                                               
      SUBROUTINE INT15                                                  
      IMPLICIT REAL*8(A-H,O-Z)                                          
C                                                                       
C THIS SUBROUTINE CALCULATES THE 1-5 INTERACTIONS BETWEEN ATOM J        
C AND ALL APPROPRIATE ATOMS K IN THE SAME RESIDUE                       
C                                                                       
      COMMON/CAL001/KSTRT,KFIN                                          
      COMMON/NRG1/IJ,IK,LISTIJ,LISTIK,KINDIJ,KINDIK,NPREIJ,NPREIK       
      COMMON/NRG2/QJ,J,JSTRT,JFIN,JPRO,KPRO,IFEND,LASTRS                
      COMMON/PUT15/NSN15(26,36),MSN15(22,20),MSX15(22,20)               
      IF (IFEND.EQ.0) KSTRT=NSN15(J,LISTIJ)                             
      IF(IFEND.EQ.1) KSTRT=MSN15(J,LISTIJ)                              
      IF(KSTRT.EQ.0) RETURN                                             
      KSTRT=KSTRT+NPREIJ                                                
      KFIN=JFIN+NPREIJ                                                  
      CALL CAL15                                                        
      RETURN                                                            
      END                                                               
      SUBROUTINE PRO37                                                  
      IMPLICIT REAL*8(A-H,O-Z)                                          
C                                                                       
C THIS SUBROUTINE EXPLICITLY CALCULATES THE 1-4 AND 1-5                 
C INTERACTIONS BETWEEN J AND THE APPROPRIATE ATOMS OF                   
C RESIDUE IK=IJ+1 WHEN (1) J IS A C3 OR O7, AND (2) IK IS A             
C PROLINE OR HYDROXYPROLINE                                             
C                                                                       
      COMMON/NRG1/IJ,IK,LISTIJ,LISTIK,KINDIJ,KINDIK,NPREIJ,NPREIK       
      COMMON/CAL001/KSTRT,KFIN                                          
C                                                                       
C FIRST CALCULATE THE 1-4 INTERACTIONS BETWEEN J AND THE ATOMS          
C 2-6 AND 8-14 OF RESIDUE IJ+1                                          
      KSTRT=2+NPREIK                                                    
      KFIN=6+NPREIK                                                     
      CALL CAL14                                                        
      KSTRT=8+NPREIK                                                    
      KFIN=14+NPREIK                                                    
      CALL CAL14                                                        
C NOW CALCULATE THE 1-5 INTERACTIONS BETWEEN J AND THE O7               
C (AND H15 IF HYDROXYPROLINE) OF RESIDUE IJ+1                           
      KSTRT=7+NPREIK                                                    
      KFIN=KSTRT                                                        
      CALL CAL15                                                        
C                                                                       
C CALCULATE EXPLICITLY THE INTEREACTION BETWEEN ATOM J IN RESIDUE IJ AND
C THE H15 OF THE HYDROXYPROLINE (RESIDUE IK=IJ+1)                       
      IF (KINDIK.NE.22) RETURN                                          
      KSTRT=15+NPREIK                                                   
      KFIN=KSTRT                                                        
      CALL CAL15                                                        
      RETURN                                                            
      END                                                               
      SUBROUTINE RDCYS                                                  
      IMPLICIT REAL*8(A-H,O-Z)                                          
C                                                                       
C THIS SUBROUTINE CHECKS TO SEE IF THE POLYPEPTIDE CHAIN                
C CONTAINS AT LEAST TWO HALF-CYSTINE RESIDUES.  IF SO IT                
C READS IN THE APPROPRIATE 'CYSTINE PAIR' (DISULFIDE BRIDGE)            
C INFORMATION.                                                          
C                                                                       
CMSP  INCLUDE (MAXSIZE)                                                 
      INCLUDE '/labo/qclib/inspidas/common/maxsize'
CMSP  INCLUDE(SIZE)                                                     
      INCLUDE '/labo/qclib/inspidas/common/size'
CMSP  INCLUDE (UNITNUMS)                                                
      INCLUDE '/labo/qclib/inspidas/common/unitnums'
CMSP  INCLUDE (SSPAIR)                                                  
      INCLUDE '/labo/qclib/inspidas/common/sspair'
CMSP  INCLUDE (PRIMRY)                                                  
      INCLUDE '/labo/qclib/inspidas/common/primry'
      COMMON/CHECK/KNDRES(36),KNDEND(20)                                
C     COMMON/CYS001/KCYS,NCYS,NPAIR(MAXSS,2)                            
      COMMON/CYS001/KCYS                                                
C     COMMON/GEN100/INUMRS,LIST(MAXRES),NPRE(MXRS1)                     
      COMMON/GEN100/NPRE(MXRS1)                                         
C     COMMON/IOUNIT/JREAD                                               
C     LASTFL=INUMRS-1                                                   
      LASTFL=NUMRES-1                                                   
C     NCYS=0                                                            
      NSS=0                                                             
      NHALF=0                                                           
      DO 1 I=2,LASTFL                                                   
      LISTI=LIST(I)                                                     
      LISTI=IABS(LISTI)                                                 
      KINDI=KNDRES(LISTI)                                               
      IF (KINDI.NE.(-3)) GO TO 1                                        
      NHALF=NHALF+1                                                     
 1    CONTINUE                                                          
      IF(NHALF.LT.2) RETURN                                             
C     READ (IN21,100) NC,NCYS                                           
      READ (IN21,100) NC,NSS                                            
CC --------------------------                                           
CC    IF (NC.EQ.(-1)) GO TO 2                                           
CC    WRITE (IOUT06,200)                                                
CC    STOP                                                              
CC --------------------------                                           
C  2  IF (NCYS.EQ.0)  RETURN                                            
   2  IF (NSS.EQ.0)   RETURN                                            
C     READ (IN21,100) ((NPAIR(K,J),J=1,2),K=1,NCYS)                     
      READ (IN21,100) ((NPAIR(K,J),J=1,2),K=1,NSS)                      
      RETURN                                                            
 100  FORMAT(16I5)                                                      
 200  FORMAT(45H YOU FORGOT THE CYSTINE PAIR DATA...TRY AGAIN)          
      END                                                               
      SUBROUTINE SPECV                                                  
      IMPLICIT REAL*8(A-H,O-Z)                                          
C                                                                       
C THIS SUBROUTINE READS IN THE DATA BY WHICH THE USER SPECIFIES WHICH   
C DIHEDRAL ANGLES, IF ANY, HE WISHES TO TREAT AS VARIABLES.             
C SEE THE WRITEUP OF THE MAIN PROGRAM FOR FURTHER DETAILS               
C                                                                       
C KV "BACK" VARIES ALL BACKBONE DIHEDRAL ANGLES                         
C KV "SIDE" VARIES ALL SIDECHAIN DIHEDRAL ANGLES                        
C KV "ALL " VARIES ALL DIHEDRAL ANGLES                                  
C KV "SPEC" MEANS THE USER SPECIFIES EXPLICITLY VIA DATA CARDS WHICH    
C       DIHEDRAL ANGLES HE WANTS TO VARY                                
C KV "NONE" MEANS THERE ARE NO VARIABLE DIHEDRAL ANGLES                 
C                                                                       
CMSP  INCLUDE (MAXSIZE)                                                 
      INCLUDE '/labo/qclib/inspidas/common/maxsize'
CMSP  INCLUDE (SIZE)                                                    
      INCLUDE '/labo/qclib/inspidas/common/size'
CMSP  INCLUDE (VARANG)                                                  
      INCLUDE '/labo/qclib/inspidas/common/varang'
CMSP  INCLUDE (TORSNP)                                                  
      INCLUDE '/labo/qclib/inspidas/common/torsnp'
CMSP  INCLUDE (UNITNUMS)                                                
      INCLUDE '/labo/qclib/inspidas/common/unitnums'
CMSP  INCLUDE (PRIMRY)                                                  
      INCLUDE '/labo/qclib/inspidas/common/primry'
C     REAL KV,KV1,KV2,KV3,KV4,KV5                                       
      CHARACTER*4 KV                                                    
      COMMON/BONDS/UTOR(MXRS10),NDXARR(10,MAXRES),                      
     &             NV(MAXRES)                                           
      COMMON/CHECK/KNDRES(36),KNDEND(20)                                
C     COMMON/GEN100/INUMRS,LIST(MAXRES),NPRE(MXRS1)                     
      COMMON/GEN100/NPRE(MXRS1)                                         
      COMMON/GEN002/CHIANG(3,7,36),NATOMS(36),NCHI(36),NDPT1(7,36),     
     1   NDPT2(7,36),NUM(7,36)                                          
      COMMON/GEN004/ENOORD(3,22,20),ECHG(22,20),EALPHA(22,20),          
     1   NDATOM(20),NBOND(20),NNDPT1(6,20),NNDPT2(6,20),NDTYPE(22,20)   
C     COMMON/IOUNIT/JREAD                                               
C     COMMON/TORQUE/A(MAXVAR),NB(MAXVAR),NS(MAXVAR),IFTORP(MAXVAR),     
C    &              INDXPV(MAXVAR)                                      
      COMMON/TORQUE/INDXPV(MAXVAR)                                      
C     COMMON/TOR2/LAMIN,KAMIN,LCARB,KCARB,NUMVAR                        
      COMMON/TOR2/LAMIN,KAMIN,LCARB,KCARB                               
      CHARACTER*4 EALPHA                                                
      DIMENSION LTEMP(10)                                               
C     DATA KV1,KV2,KV3,KV4,KV5/4HBACK,4HSIDE,4HALL ,4HSPEC,4HNONE/      
C     DO 1 I=1,INUMRS                                                   
      DO 1 I=1,NUMRES                                                   
 1    NV(I)=0                                                           
C                                                                       
C SET VARIABLES USED BELOW                                              
C     LASTFL=INUMRS-1                                                   
      LASTFL=NUMRES-1                                                   
      LAMIN=LIST(1)                                                     
C     LCARB=LIST(INUMRS)                                                
      LCARB=LIST(NUMRES)                                                
      KAMIN=KNDEND(LAMIN)                                               
      KCARB=KNDEND(LCARB)                                               
      JFLAG=0                                                           
      DO 5 I=2,LASTFL                                                   
      LISTI=LIST(I)                                                     
      LISTI=IABS(LISTI)                                                 
      KINDI=KNDRES(LISTI)                                               
      KINDI=IABS(KINDI)                                                 
      IF (KINDI.EQ.22) JFLAG=1                                          
      IF (JFLAG.EQ.1) GO TO 6                                           
 5    CONTINUE                                                          
 6    IF (JFLAG.EQ.1) WRITE(IOUT06,600)                                 
C                                                                       
C SUBROUTINES AMINO AND CBOXL ARE NOT NEEDED IN SPECV BUT               
C ARE CALLED HERE FOR CONVENIENCE.  THEY MUST NOT BE CALLED             
C BEFORE KAMIN AND KCARB ARE DEFINED ABOVE.                             
      CALL AMINO                                                        
      CALL CBOXL                                                        
C                                                                       
C READ KV                                                               
C                                                                       
C     READ (IN21,100) KV                                                
C ++++++++++++++                                                        
      KV = 'ALL '                                                       
C ++++++++++++++                                                        
      WRITE (IOUT06,200) KV                                             
      NUMVAR=0                                                          
C     IF (KV.EQ.KV5) RETURN                                             
C     IF (KV.EQ.KV4) GO TO 40                                           
C     IF (KV.EQ.KV2) GO TO 20                                           
C     IF (KV.NE.KV1.AND.KV.NE.KV3) GO TO 44                             
C                                                                       
C BACKBONE                                                              
C THIS SECTION IS FOR KV "BACK" OR "ALL "; I.E., ALL BACKBONE ANGLES ARE
C VARIED.                                                               
C                                                                       
C 1ST WE TAKE CARE OF THE NON-END GROUPS                                
 10   DO 14 I=2,LASTFL                                                  
      NV(I)=3                                                           
      NOPHI=0                                                           
      LISTI=LIST(I)                                                     
      LISTI=IABS(LISTI)                                                 
      KINDI=KNDRES(LISTI)                                               
      KINDI=IABS(KINDI)                                                 
      IF(KINDI.NE.13.AND.KINDI.NE.22) GO TO 12                          
 11   NOPHI=1                                                           
      NV(I)=2                                                           
 12   IF (I.NE.LASTFL) GO TO 121                                        
C     LISTN=LIST(INUMRS)                                                
C     KINDN=KNDEND(LISTN)                                               
C     IF (KINDN.NE.20) GO TO 121                                        
      IF (NBOND(LCARB).GT.0)  GOTO  121                                 
      NV(I)=NV(I) - 1                                                   
 121  NVR=NV(I)                                                         
      DO 13 L=1,NVR                                                     
 13   NDXARR(L,I)=L+NOPHI                                               
 14   CONTINUE                                                          
C                                                                       
C NOW WE CONSIDER THE AMINO END                                         
      NDIHED=NBOND(LAMIN)                                               
      NV(1)=NDIHED                                                      
      IF(NDIHED.EQ.0) GO TO 16                                          
      DO 15 L=1,NDIHED                                                  
 15   NDXARR(L,1)=L                                                     
 16   CONTINUE                                                          
C                                                                       
C NOW WE CONSIDER THE CARBOXYL END                                      
      NDIHED=NBOND(LCARB)-1                                             
      IF(NDIHED.LE.0) GO TO 18                                          
C     NV(INUMRS)=NDIHED                                                 
      NV(NUMRES)=NDIHED                                                 
      DO 17 L=1,NDIHED                                                  
C17   NDXARR(L,INUMRS)=L                                                
 17   NDXARR(L,NUMRES)=L                                                
 18   CONTINUE                                                          
      NUMVAR=1                                                          
C                                                                       
C DOES THE USER WANT TO VARY ONLY THE BACKBONE DIHEDRAL ANGLES?         
CC    IF (KV.EQ.KV1) RETURN                                             
C                                                                       
C SIDECHAIN                                                             
C THIS SECTION IS FOR KV "SIDE" OR "ALL "; I.E., ALL SIDECHAIN ANGLES   
C ARE VARIED                                                            
C                                                                       
 20   DO 22 I=2,LASTFL                                                  
      LISTI=LIST(I)                                                     
      LISTI=IABS(LISTI)                                                 
      NUMCHI=NCHI(LISTI)                                                
      IF(NUMCHI.EQ.0) GO TO 22                                          
      NVBACK=NV(I)                                                      
      NV(I)=NVBACK+NUMCHI                                               
      DO 21 L=1,NUMCHI                                                  
      LP=L+NVBACK                                                       
 21   NDXARR(LP,I)=L+3                                                  
 22   CONTINUE                                                          
      NUMVAR=1                                                          
      RETURN                                                            
C                                                                       
C USER SPECIFIES                                                        
C THIS SECTION IS USED WHEN THE READER WANTS TO SPECIFY THE ANGLES TO BE
C VARIED.  THE USER GIVES THE RESIDUE NUMBER, THE NUMBER OF VARIABLES IN
C THAT RESIDUE, AND THE ANGLES TO BE VARIED.                            
C                                                                       
   40 WRITE (IOUT06,300)                                                
C     DO 42 I=1,INUMRS                                                  
      DO 42 I=1,NUMRES                                                  
      READ (IN21,400) NRES,NVAR,(LTEMP(K),K=1,NVAR)                     
      IF (NRES.NE.0) WRITE(IOUT06,500) NRES,NVAR,(LTEMP(K),K=1,NVAR)    
C                                                                       
C NOTICE THAT THE ELEMENTS OF THE NDXARR ARRAY ARE TEMPORARILY STORED   
C IN LTEMP.  THIS IS NECESSARY TO PREVENT ERRORS WHEN NRES=0            
C (I.E., WHEN THE USER IS SIGNALLING THE END OF HIS DATA.)              
C                                                                       
      NUMVAR=I                                                          
      IF(NRES.EQ.0) GO TO 43                                            
      DO 41 L=1,NVAR                                                    
 41   NDXARR(L,NRES)=LTEMP(L)                                           
      NV(NRES)=NVAR                                                     
 42   CONTINUE                                                          
 43   NUMVAR=NUMVAR-1                                                   
      RETURN                                                            
  44  WRITE (IOUT06,700)                                                
      STOP                                                              
  100 FORMAT (A4)                                                       
  200 FORMAT(/36H ANGLES TO BE TREATED AS VARIABLES  ,A4)               
  300 FORMAT (/10H RES.NO.   ,10H VARIABLES,22H   ANGLES TO BE VARIED)  
  400 FORMAT (16I5)                                                     
  500 FORMAT (I5,5X,I5,5X,12I5)                                         
 600  FORMAT(/60H THE INTERNAL CONFORMATIONAL ENERGY OF THE FIXED PART O
     1F THE/45H HYDROXYPROLINE RING IS NOT INCLUDED IN EPRO.)           
  700 FORMAT (/1X,63HILLEGAL INPUT DATA FOR VARIABLE KV AS READ IN SUBRO
     1UTINE SPECV.)                                                     
      END                                                               
      SUBROUTINE SSBRIJ                                                 
      IMPLICIT REAL*8(A-H,O-Z)                                          
C                                                                       
C THIS SUBROUTINE CALCULATES EXTRA ENERGY TERMS, ELOOP AND ECYSTR,      
C NEEDED WHEN IJ AND IK ARE THE TWO HALVES OF A WHOLE CYSTINE           
C RESIDUE.  (I. E., THERE IS A DISULFIDE BRIDGE BETWEEN                 
C HALF-RESIDUES IJ AND IK.)                                             
C IT ALSO CALCULATES THE 1-4 AND 1-5 INTERACTIONS BETWEEN               
C THE TWO HALF-CYSTINE RESIDUES IJ AND IK. (I. E., IJ AND IK ARE        
C THE TWO HALVES OF A WHOLE CYSTINE RESIDUE)                            
C J REFERS TO THE ATOM IN THE 1ST HALF-CYSTINE RESIDUE IJ, AND          
C K REFERS TO THE ATOM IN THE 2ND HALF-CYSTINE RESIDUE                  
C NB=0 IF THERE IS NO INTERACTION BETWEEN ATOMS J AND K,                
C NB=4 IF THERE IS A 1-4 INTERACTION, AND                               
C NB=5 IF THERE IS A 1-5 INTERACTION                                    
C                                                                       
      DOUBLE PRECISION EES,ENB,ETOT                                     
      DOUBLE PRECISION ETOR,ECYSTR,ELOOP,DUK,ESAVE,ETHIS                
CMSP  INCLUDE (MAXSIZE)                                                 
      INCLUDE '/labo/qclib/inspidas/common/maxsize'
CMSP  INCLUDE(SIZE)                                                     
      INCLUDE '/labo/qclib/inspidas/common/size'
CMSP  INCLUDE (ALPHA)                                                   
      INCLUDE '/labo/qclib/inspidas/common/alpha'
CMSP  INCLUDE (CHARGE)                                                  
      INCLUDE '/labo/qclib/inspidas/common/charge'
CMSP  INCLUDE (COORD)                                                   
      INCLUDE '/labo/qclib/inspidas/common/coord'
CMSP  INCLUDE (NBTYPE)                                                  
      INCLUDE '/labo/qclib/inspidas/common/nbtype'
CMSP  INCLUDE (UNITNUMS)                                                
      INCLUDE '/labo/qclib/inspidas/common/unitnums'
CMSP  INCLUDE (CNTL)                                                    
      INCLUDE '/labo/qclib/inspidas/common/cntl'
CMSP  INCLUDE (PRIMRY)                                                  
      INCLUDE '/labo/qclib/inspidas/common/primry'
CMSP  INCLUDE (REFRNC)                                                  
      INCLUDE '/labo/qclib/inspidas/common/refrnc'
      COMMON/CALC/EES,ENB,ETOT,JM,JNB                                   
      COMMON/CAL001/KSTRT,KFIN                                          
      COMMON/CHKN/NIT                                                   
C     COMMON/GEN100/INUMRS,LIST(MAXRES),NPRE(MXRS1)                     
      COMMON/GEN100/NPRE(MXRS1)                                         
      COMMON/HEDRAL/ANG1                                                
C     COMMON/IOUNIT/JREAD                                               
      COMMON/NRG1/IJ,IK,LISTIJ,LISTIK,KINDIJ,KINDIK,NPREIJ,NPREIK       
      COMMON/NRG2/QJ,J,JSTRT,JFIN,JPRO,KPRO,IFEND,LASTRS                
C     COMMON/PRINT/IPRNT                                                
      COMMON/TOR/ETOR,ECYSTR,ELOOP                                      
      COMMON/TORP/AR(8,36),NBB(8,36),NSSX(8,36),NANG(8,36),NTOR(36),    
     1  AAN(20),NBBN(20),NSSN(20),NANGN(20)                             
C     CHARACTER*4 ALPH                                                  
      DIMENSION NBCYS(10)                                               
      DIMENSION A1(3),B1(3),S1(3),A2(3),B2(3),S2(3)                     
      DATA NBCYS/2*5,4,5,0,2*5,2*4,0/                                   
      DATA R01,R02,R03,R04,D0/2.04,3.052,3.052,3.855,1.83/              
      DATA C1/57.29578/                                                 
C                                                                       
C IS THIS THE 1ST CALL TO CYS FOR THE IJTH RESIDUE?                     
      IF (J.NE.JSTRT) GO TO 130                                         
      IA1=NPREIJ+3                                                      
      IB1=NPREIJ+5                                                      
      IS1=NPREIJ+10                                                     
      IA2=NPREIK+3                                                      
      IB2=NPREIK+5                                                      
      IS2=NPREIK+10                                                     
      DO 110 L=1,3                                                      
      A1(L)=REFCRD(L,IA1)                                               
      B1(L)=REFCRD(L,IB1)                                               
      S1(L)=REFCRD(L,IS1)                                               
      A2(L)=REFCRD(L,IA2)                                               
      B2(L)=REFCRD(L,IB2)                                               
      S2(L)=REFCRD(L,IS2)                                               
  110 CONTINUE                                                          
      ESAVE=ELOOP                                                       
      D1=DST(S1,S2)                                                     
      ELOOP=ELOOP+100.*(D1-R01)**2                                      
      D2=DST(B1,S2)                                                     
      ELOOP=ELOOP+100.*(D2-R02)**2                                      
      D3=DST(S1,B2)                                                     
      ELOOP=ELOOP+100.*(D3-R03)**2                                      
      D4=DST(B1,B2)                                                     
      UK =AR(3,LISTIJ)*(D4-R04)**2                                      
      DUK=UK                                                            
      ECYSTR=ECYSTR+DUK                                                 
      CALL DIHANG(A1,B1,S1,S2)                                          
      ENSS=FLOAT(NSSX(2,LISTIJ))                                        
      ENBB=FLOAT(NBB(2,LISTIJ))                                         
      UK2=AR(2,LISTIJ)*(1.+ENSS*COS(ENBB*ANG1))                         
      ANG2=C1*ANG1                                                      
      DUK=UK2                                                           
      ECYSTR=ECYSTR+DUK                                                 
      CALL DIHANG(S1,S2,B2,A2)                                          
      UK3=AR(2,LISTIJ)*(1.+ENSS*COS(ENBB*ANG1))                         
      ANG3=C1*ANG1                                                      
      DUK=UK3                                                           
      ECYSTR=ECYSTR+DUK                                                 
      IF (IPRNT.NE.1) GO TO 130                                         
      ETHIS=ELOOP-ESAVE                                                 
      THETA1=C1*ARCOS((D0**2+D1**2-D2**2)/(2.*D0*D1))                   
      THETA2=C1*ARCOS((D0**2+D1**2-D3**2)/(2.*D0*D1))                   
      CALL DIHANG(B1,S1,S2,B2)                                          
      ANG1=C1*ANG1                                                      
      WRITE (IOUT06,100) IJ,IK                                          
      WRITE (IOUT06,200)                                                
      WRITE (IOUT06,300) D1,D2,D3,D4                                    
      WRITE (IOUT06,400)                                                
      WRITE (IOUT06,500) THETA1,THETA2                                  
      WRITE (IOUT06,600)                                                
      WRITE (IOUT06,700) ANG1,UK,ANG2,UK2,ANG3,UK3                      
      WRITE (IOUT06,800) ETHIS                                          
  130 CONTINUE                                                          
C                                                                       
C STEP ATOM                                                             
      DO 140 K=1,10                                                     
      NB=5                                                              
      IS13=IJ+2                                                         
      IF (J.NE.6.OR.K.NE.1.OR.IS13.NE.IK.OR.NIT.NE.1) GO TO 135         
      NB=4                                                              
      NIT=0                                                             
  135 CONTINUE                                                          
      IF(J.EQ.5.AND.K.EQ.5) NB=4                                        
      IF(J.EQ.10) NB=NBCYS(K)                                           
      IF(K.EQ.10) NB=NBCYS(J)                                           
      IF(NB.EQ.0) GO TO 140                                             
      KM=K+NPREIK                                                       
      KSTRT=KM                                                          
      KFIN=KM                                                           
      IF (NB.EQ.4) CALL CAL14                                           
      IF (NB.EQ.5) CALL CAL15                                           
  140 CONTINUE                                                          
      RETURN                                                            
  100 FORMAT (/39H GEOMETRY AND ENERGIES FOR CYSTINE PAIR,I4,1X,I3)     
  200 FORMAT (/28X,8HDISTANCE/8X,5HATOMS,14X,11H(ANGSTROMS))            
  300 FORMAT (/5X,8HSG1  SG2,12X,F11.3/5X,8HCB1  SG2,12X,F11.3/         
     1 5X,8HSG1  CB2,12X,F11.3/5X,8HCB1  CB2,12X,F11.3)                 
  400 FORMAT (/27X,10HBOND ANGLE/28X,9H(DEGREES))                       
  500 FORMAT (/5X,13HCB1  SG1  SG2,10X,F8.3/5X,13HSG1  SG2  CB2,        
     1 10X,F8.3)                                                        
  600 FORMAT (/25X,14HDIHEDRAL ANGLE,6X,16HTORSIONAL ENERGY/            
     1 28X,9H(DEGREES),11X,11H(KCAL/MOLE))                              
  700 FORMAT (/5X,18HCB1  SG1  SG2  CB2,5X,F8.3,12X,F8.3                
     1        /5X,18HCA1  CB1  SG1  SG2,5X,F8.3,12X,F8.3                
     2        /5X,18HSG1  SG2  CB2  CA2,5X,F8.3,12X,F8.3)               
  800 FORMAT (/5X,47HLOOP-CLOSING ENERGY FOR THIS PAIR (KCAL/MOLE) =,   
     1 E12.5)                                                           
      END                                                               
      SUBROUTINE TORTOT                                                 
      IMPLICIT REAL*8(A-H,O-Z)                                          
C                                                                       
C THIS SUBROUTINE CALCULATES THE INITIAL TOTAL TORSIONAL ENERGY         
C (ETOR) OF THE POLYPEPTIDE CHAIN.  IT STORES THE INDIVIDUAL            
C TERMS IN ARRAY UTOR.                                                  
C                                                                       
CMSP  INCLUDE (MAXSIZE)                                                 
      INCLUDE '/labo/qclib/inspidas/common/maxsize'
CMSP  INCLUDE(SIZE)                                                     
      INCLUDE '/labo/qclib/inspidas/common/size'
CMSP  INCLUDE (VARANG)                                                  
      INCLUDE '/labo/qclib/inspidas/common/varang'
CMSP  INCLUDE (REFRNC)                                                  
      INCLUDE '/labo/qclib/inspidas/common/refrnc'
CMSP  INCLUDE (PRIMRY)                                                  
      INCLUDE '/labo/qclib/inspidas/common/primry'
      DOUBLE PRECISION DUK,ETOR,ECYSTR,ELOOP                            
      COMMON/BONDS/UTOR(MXRS10),NDXARR(10,MAXRES),                      
     &             NV(MAXRES)                                           
      COMMON/CHECK/KNDRES(36),KNDEND(20)                                
C     COMMON/GEN100/INUMRS,LIST(MAXRES),NPRE(MXRS1)                     
      COMMON/GEN100/NPRE(MXRS1)                                         
      COMMON/GEN004/ENOORD(3,22,20),ECHG(22,20),EALPHA(22,20),          
     1   NDATOM(20),NBOND(20),NNDPT1(6,20),NNDPT2(6,20),NDTYPE(22,20)   
      COMMON/TOR/ETOR,ECYSTR,ELOOP                                      
      COMMON/TORP/AR(8,36),NBB(8,36),NSSX(8,36),NANG(8,36),NTOR(36),    
     1  AAN(20),NBBN(20),NSSN(20),NANGN(20)                             
C     COMMON/TOR2/LAMIN,KAMIN,LCARB,KCARB,NUMVAR                        
      COMMON/TOR2/LAMIN,KAMIN,LCARB,KCARB                               
      CHARACTER*4 EALPHA                                                
      DIMENSION ANGONE(10*MAXRES)                                       
      EQUIVALENCE (ANGRAD(1,1),ANGONE(1))                               
C                                                                       
C     LASTFL=INUMRS-1                                                   
      LASTFL=NUMRES-1                                                   
      ETOR=0.0D0                                                        
C     IRES10=10*INUMRS                                                  
      IRES10=10*NUMRES                                                  
      DO 10 L=1,IRES10                                                  
 10   UTOR(L)=0.0                                                       
C                                                                       
C DO TORSIONAL TOTAL HERE, STARTING WITH THE END GROUPS                 
C                                                                       
C DOES THE AMINO END GROUP HAVE A TORSIONAL TERM?                       
      IF (KAMIN.GE.0) GO TO 20                                          
C                                                                       
C CALCULATE THE TORSIONAL TERM FOR THE LAST DIHEDRAL ANGLE OF           
C THE AMINO END GROUP                                                   
      IANG=NBOND(LAMIN)                                                 
      UK=10.*(1.-COS(2.*ANGONE(IANG)))                                  
      UTOR(IANG)=UK                                                     
      DUK=UK                                                            
      ETOR=ETOR+DUK                                                     
C                                                                       
C STEP FULL RESIDUES                                                    
C NOW WE CALCULATE THE NON-END GROUP CONTRIBUTIONS TO THE TORSIONAL     
C ENERGY                                                                
 20   DO 50 I=2,LASTFL                                                  
      I10=10*(I-1)                                                      
      IANG=I10+3                                                        
C                                                                       
C 1ST CALCULATE OMEGA CONTRIBUTION                                      
C                                                                       
C THE THIRD BACKBONE ANGLE OF THE NEXT TO THE LAST RESIDUE              
C WILL BE CONSIDERED LATER.                                             
      IF(I.EQ.LASTFL) GO TO 30                                          
      UK=10.*(1.-COS(2.*ANGONE(IANG)))                                  
      UTOR(IANG)=UK                                                     
      DUK=UK                                                            
      ETOR=ETOR+DUK                                                     
 30   LISTI=LIST(I)                                                     
      LISTI=IABS(LISTI)                                                 
C                                                                       
C ALL RESIDUES WITH THE EXCEPTION OF GLYCINE AND PROLINE MAKE           
C SIDECHAIN CONTRIBUTIONS TO THE TORSIONAL ENERGY.  THESE SIDECHAIN     
C TERMS (EXCEPT FOR THE SPECIAL CASE OF CYSTINE) ARE CALCULATED NOW.    
C                                                                       
      NKT=NTOR(LISTI)                                                   
      KINDI=KNDRES(LISTI)                                               
C                                                                       
C DOES THE ITH RESIDUE HAVE A SIDECHAIN TORSIONAL TERM?                 
C                                                                       
      IF(KINDI.GE.0) GO TO 50                                           
      IF (KINDI.EQ.(-3)) NKT=1                                          
      DO 31 J=1,NKT                                                     
      NA=NANG(J,LISTI)                                                  
      IANG=I10+NA                                                       
      ANG=ANGONE(IANG)                                                  
      ENSS=FLOAT(NSSX(J,LISTI))                                         
      ENBB=FLOAT(NBB(J,LISTI))                                          
      UK=AR(J,LISTI)*(1.+ENSS*COS(ENBB*ANG))                            
      UTOR(IANG)=UK                                                     
      DUK=UK                                                            
      ETOR=ETOR+DUK                                                     
  31  CONTINUE                                                          
 50   CONTINUE                                                          
C                                                                       
C DOES THE DIHEDRAL ANGLE BETWEEN THE LAST FULL RESIDUE AND             
C THE CARBOXYL END GROUP HAVE A TORSIONAL TERM?                         
      IF(KCARB.GE.0) RETURN                                             
C     IANG=(INUMRS-2)*10+3                                              
      IANG=(NUMRES-2)*10+3                                              
      ANG=ANGONE(IANG)                                                  
C     ENSSN=FLOAT(NSSN(LCARB))                                          
C     ENBBN=FLOAT(NBBN(LCARB))                                          
      UK=AAN(LCARB)*(1.+FLOAT(NSSN(LCARB))*COS(FLOAT(NBBN(LCARB))*ANG)) 
      UTOR(IANG)=UK                                                     
      DUK=UK                                                            
      ETOR=ETOR+DUK                                                     
  310 IF (KCARB.NE.(-18)) RETURN                                        
C     IANG=(INUMRS-1)*10+2                                              
      IANG=(NUMRES-1)*10+2                                              
      ANG=ANGONE(IANG)                                                  
      UK=1.35*(1.+COS(3.*ANG))                                          
      UTOR(IANG)=UK                                                     
      DUK=UK                                                            
      ETOR=ETOR+DUK                                                     
      RETURN                                                            
      END                                                               
C********************************************************************   
C                                                                   *   
C               SUPPLEMENTARY PROGRAMS                              *   
C                                                                   *   
C********************************************************************   
      SUBROUTINE  PREP                                                  
      IMPLICIT REAL*8(A-H,O-Z)                                          
      REAL*8  EES,ENB,ETOT                                              
CMSP  INCLUDE (MAXSIZE)                                                 
      INCLUDE '/labo/qclib/inspidas/common/maxsize'
CMSP  INCLUDE (SIZE)                                                    
      INCLUDE '/labo/qclib/inspidas/common/size'
CMSP  INCLUDE (INTER0)                                                  
      INCLUDE '/labo/qclib/inspidas/common/inter0'
CMSP  INCLUDE (UNITNUMS)                                                
      INCLUDE '/labo/qclib/inspidas/common/unitnums'
      COMMON/CALC/EES,ENB,ETOT,JM,JJ                                    
      COMMON/CAL001/KSTRT,KFIN                                          
C     COMMON/IOUNIT/JREAD                                               
C     COMMON/PREPAR/LNUM,JMLAST,KMLAST,LNUMS,LEN,NATM                   
      COMMON/PREPAR/LNUM,JMLAST,KMLAST,LNUMS,LEN                        
C     COMMON/RUNS/INTER(3,MAXLEN)                                       
C                                                                       
C                                                                       
      IF (LEN.GT.MAXLEN)  THEN                                          
        WRITE(6,700)                                                    
        STOP                                                            
      ENDIF                                                             
      ISKIP = JM-JMLAST-1                                               
      JRUN = KFIN-KSTRT+1                                               
      IF (LNUM.EQ.4)  GO TO  210                                        
C                                                                       
C THIS SECTION IS FOR 1-5'S                                             
C                                                                       
      IF (LNUMS.EQ.5)  GO TO  110                                       
C                                                                       
C THE LAST CALL WAS FROM CAL14                                          
C                                                                       
      IF (JM.NE.JMLAST)  GO TO  100                                     
      I5RUN = JRUN                                                      
      NEXT = KMLAST+1                                                   
      IF (KSTRT.NE.NEXT)  GO TO  50                                     
      RETURN                                                            
C                                                                       
C THE CURRENT RUN OF 1-5'S DOES NOT FOLLOW CONSECUTIVELY THE RUN OF     
C 1-4'S FOR THIS JM.                                                    
C                                                                       
C 50  INTER(1,LEN) = IOFF                                               
C     INTER(2,LEN) = I4RUN                                              
C     INTER(3,LEN) = 0                                                  
  50  INTATM(1,LEN) = IOFF                                              
      INTATM(2,LEN) = I4RUN                                             
      INTATM(3,LEN) = 0                                                 
      LEN = LEN+1                                                       
      IOFF = KSTRT-JM                                                   
      I4RUN = 0                                                         
      RETURN                                                            
C                                                                       
C THERE ARE NO 1-5'S FOR THE PREVIOUS JM AND (SO FAR) NO 1-4'S FOR THE  
C CURRENT JM.                                                           
C                                                                       
  100 KEY = 0                                                           
C     INTER(1,LEN) = IOFF                                               
C     INTER(2,LEN) = I4RUN                                              
C     INTER(3,LEN) = KEY                                                
      INTATM(1,LEN) = IOFF                                              
      INTATM(2,LEN) = I4RUN                                             
      INTATM(3,LEN) = KEY                                               
      LEN = LEN + 1                                                     
      IOFF = 0                                                          
      I4RUN = 0                                                         
C     INTER(1,LEN) = IOFF                                               
C     INTER(2,LEN) = I4RUN                                              
C     INTER(3,LEN) = KEY                                                
      INTATM(1,LEN) = IOFF                                              
      INTATM(2,LEN) = I4RUN                                             
      INTATM(3,LEN) = KEY                                               
      LEN = LEN + 1                                                     
      GO TO  130                                                        
C                                                                       
C THE LAST CALL WAS FROM CAL15                                          
C                                                                       
  110 IF (JM.NE.JMLAST)  GO TO  120                                     
      KSKIP = KSTRT-KMLAST-1                                            
      IF (KSKIP.GT.0)  GO TO  120                                       
      I5RUN = I5RUN + JRUN                                              
      RETURN                                                            
C                                                                       
C THERE ARE NO 1-4'S FOR THE CURRENT ATOM JM                            
C OR 1-5'S FOR ATOM JM ARE NOT CONSECUTIVE.                             
C                                                                       
  120 KEY = I5RUN                                                       
C     IF (KMLAST.EQ.NATM) KEY=JMLAST+IOFF+I4RUN-NATM-2                  
      IF (KMLAST.EQ.NUMATM) KEY=JMLAST+IOFF+I4RUN-NUMATM-2              
C     INTER(1,LEN) = IOFF                                               
C     INTER(2,LEN) = I4RUN                                              
C     INTER(3,LEN) = KEY                                                
      INTATM(1,LEN) = IOFF                                              
      INTATM(2,LEN) = I4RUN                                             
      INTATM(3,LEN) = KEY                                               
      LEN = LEN + 1                                                     
C     IF (JM.NE.JMLAST.AND.KMLAST.NE.NATM)  THEN                        
      IF (JM.NE.JMLAST.AND.KMLAST.NE.NUMATM)  THEN                      
C       INTER(1,LEN) = 0                                                
C       INTER(2,LEN) = 0                                                
C       INTER(3,LEN) = 0                                                
        INTATM(1,LEN) = 0                                               
        INTATM(2,LEN) = 0                                               
        INTATM(3,LEN) = 0                                               
        LEN = LEN + 1                                                   
      ENDIF                                                             
  130 I4RUN = 0                                                         
      I5RUN = JRUN                                                      
      IOFF = KSTRT-JM                                                   
      RETURN                                                            
C                                                                       
C THIS SECTION IS FOR 1-4'S                                             
C                                                                       
  210 IF (LNUMS.EQ.4)  GO TO  220                                       
      IF (LNUMS.EQ.0)  GO TO  235                                       
C                                                                       
C THE LAST CALL WAS FROM CAL15 SO PRINT OFFSET, LENGTH OF RUN, KEY.     
C                                                                       
      KEY = I5RUN                                                       
C     IF (KMLAST.EQ.NATM) KEY=JMLAST+IOFF+I4RUN-NATM-2                  
      IF (KMLAST.EQ.NUMATM) KEY=JMLAST+IOFF+I4RUN-NUMATM-2              
C     INTER(1,LEN) = IOFF                                               
C     INTER(2,LEN) = I4RUN                                              
C     INTER(3,LEN) = KEY                                                
      INTATM(1,LEN) = IOFF                                              
      INTATM(2,LEN) = I4RUN                                             
      INTATM(3,LEN) = KEY                                               
      LEN = LEN + 1                                                     
C                                                                       
C     IF (ISKIP.EQ.0.AND.KMLAST.NE.NATM)  GO TO  240                    
      IF (ISKIP.EQ.0.AND.KMLAST.NE.NUMATM)  GO TO  240                  
      IF (ISKIP.LE.0)  GO TO  150                                       
      DO  140  I = 1, ISKIP                                             
C     INTER(1,LEN) = 0                                                  
C     INTER(2,LEN) = 0                                                  
C     INTER(3,LEN) = 0                                                  
      INTATM(1,LEN) = 0                                                 
      INTATM(2,LEN) = 0                                                 
      INTATM(3,LEN) = 0                                                 
      LEN = LEN + 1                                                     
  140 CONTINUE                                                          
  150 CONTINUE                                                          
C                                                                       
      I4RUN = JRUN                                                      
      IOFF = KSTRT-JM                                                   
      RETURN                                                            
C                                                                       
C THE LAST CALL WAS FROM CAL14                                          
C                                                                       
  220 KSUM = KMLAST+1                                                   
      IF (KSUM.NE.KSTRT)  GO TO  230                                    
C                                                                       
C THIS RUN FOLLOWS CONSECUTIVELY THE LAST 1-4 RUN                       
C                                                                       
      I4RUN = I4RUN+JRUN                                                
      RETURN                                                            
C                                                                       
C THIS 1-4 RUN DOES NOT FOLLOW CONSECUTIVELY THE LAST 1-4 RUN.          
C                                                                       
  230 KEY = 0                                                           
C     INTER(1,LEN) = IOFF                                               
C     INTER(2,LEN) = I4RUN                                              
C     INTER(3,LEN) = KEY                                                
      INTATM(1,LEN) = IOFF                                              
      INTATM(2,LEN) = I4RUN                                             
      INTATM(3,LEN) = KEY                                               
      LEN = LEN + 1                                                     
      IF (JM.NE.JMLAST)  GO TO  240                                     
  235 I4RUN = JRUN                                                      
      IOFF = KSTRT-JM                                                   
      RETURN                                                            
C                                                                       
C THIS IS A NEW ATOM JM, AND THE LAST JM HAD A 1-4 RUN NOT              
C FOLLOWED BY 1-5'S.                                                    
C                                                                       
  240 I4RUN = 0                                                         
      IOFF = 0                                                          
      KEY = 0                                                           
C     INTER(1,LEN) = IOFF                                               
C     INTER(2,LEN) = I4RUN                                              
C     INTER(3,LEN) = KEY                                                
      INTATM(1,LEN) = IOFF                                              
      INTATM(2,LEN) = I4RUN                                             
      INTATM(3,LEN) = KEY                                               
      LEN = LEN + 1                                                     
      I4RUN = JRUN                                                      
      IOFF = KSTRT-JM                                                   
      RETURN                                                            
C                                                                       
C                                                                       
  700 FORMAT('0  **ERROR MESSAGE FROM THE SUBROUTINE PREP. ' /          
     &  '    LEN HAS EXCEEDS MAXLEN.  ASSIGN A GREATER NUMBER TO',      
     &  ' MAXLEN IN THE PARAMETER STATEMENTS AND TRY AGAIN.')           
      END                                                               
      SUBROUTINE CAL14                                                  
      IMPLICIT REAL*8(A-H,O-Z)                                          
C                                                                       
C THIS VERSION IS FOR GENERATION OF DATA FOR THE AP                     
C                                                                       
      REAL*8 EES,ENB,ETOT                                               
C     INCLUDE (SIZE)                                                    
      COMMON/CALC/EES,ENB,ETOT,JM,JJ                                    
      COMMON/CAL001/KSTRT,KFIN                                          
C     COMMON/PREPAR/LNUM,JMLAST,KMLAST,LNUMS,LEN,NATM                   
      COMMON/PREPAR/LNUM,JMLAST,KMLAST,LNUMS,LEN                        
      LNUM = 4                                                          
      CALL  PREP                                                        
      JMLAST = JM                                                       
      KMLAST = KFIN                                                     
      LNUMS = 4                                                         
      RETURN                                                            
      END                                                               
      SUBROUTINE  CAL15                                                 
      IMPLICIT REAL*8(A-H,O-Z)                                          
C                                                                       
C THIS VERSION IS FOR GENERATION OF DATA FOR THE AP                     
C                                                                       
      REAL*8 EES,ENB,ETOT                                               
C     INCLUDE (SIZE)                                                    
      COMMON/CALC/EES,ENB,ETOT,JM,JJ                                    
      COMMON/CAL001/KSTRT,KFIN                                          
C     COMMON/PREPAR/LNUM,JMLAST,KMLAST,LNUMS,LEN,NATM                   
      COMMON/PREPAR/LNUM,JMLAST,KMLAST,LNUMS,LEN                        
      LNUM = 5                                                          
      CALL  PREP                                                        
      JMLAST = JM                                                       
      KMLAST = KFIN                                                     
      LNUMS = 5                                                         
      RETURN                                                            
      END                                                               
      SUBROUTINE  INPUT                                                 
      IMPLICIT REAL*8(A-H,O-Z)                                          
C     CHARACTER TITLE*80                                                
CMSP  INCLUDE (MAXSIZE)                                                 
      INCLUDE '/labo/qclib/inspidas/common/maxsize'
CMSP  INCLUDE (ALPHA)                                                   
      INCLUDE '/labo/qclib/inspidas/common/alpha'
      COMMON/GEN002/ CHIANG(3,7,36),NATOMS(36),NCHI(36),NDPT1(7,36),    
     &   NDPT2(7,36),NUM(7,36)                                          
      COMMON/GEN004/ ENOORD(3,22,20),ECHG(22,20),EALPHA(22,20),         
     &   NDATOM(20),NBOND(20),NNDPT1(6,20),NNDPT2(6,20),NDTYPE(22,20)   
      COMMON/GEN016/ NUNITA(36),NMUNTA(26,36),NMNEWA(26,36),            
     &   NEWKA(10,36),NEDGEA(2,10,36),IBCHRA(3,10,36),IFRNTA(10,36),    
     &   IUATMA(0:9,36),NBCKA(0:9,36),IBCKA(2,0:9,36)                   
      COMMON/GEN032/ NUNITE(20),NMUNTE(18,20),NMNEWE(18,20),            
     &   NEWKE(3,20),NEDGEE(2,3,20),IBCHRE(3,3,20),IFRNTE(3,20),        
     &   IUATME(0:2,20),NBCKE(0:2,20),IBCKE(2,0:2,20)                   
      COMMON/GEN064/ NMDPLA(36),NLDPLA(36),NDATMA(36),KUNDPA(5,36),     
     &   CHRGA(2,5,36),LSTDPA(5,36),LSTAMA(28,36),JATDPA(8,36),         
     &   CHRGAX(8,36),JCLDPA(8,36)                                      
      COMMON/GEN128/ NMDPLE(20),NLDPLE(20),NDATME(20),KUNDPE(5,20),     
     &   CHRGE(2,5,20),LSTDPE(5,20),LSTAME(28,20),JATDPE(8,20),         
     &   CHRGEX(8,20),JCLDPE(8,20),NEXTNE(20)                           
      COMMON/PRAM/  NREG,NEND,LR(6,20),LRT1(7,36)                       
      CHARACTER*4 EALPHA                                                
      DATA  IN25/25/                                                    
C                                                                       
C THE FOLLOWING SECTION IS FOR FULL AMINO ACID RESIDUES                 
C                                                                       
      DO  130  I = 1, NREG                                              
      NNN = NATOMS(I)                                                   
      READ(IN25,1000)  TITLE                                            
      READ(IN25,1010)  NUNITA(I),(NMUNTA(L,I),L=1,NNN)                  
      READ(IN25,1020)  (NMNEWA(L,I),L=1,NNN)                            
      NJJ = NUNITA(I)                                                   
      DO  100  J = 1, NJJ                                               
      J1 = J - 1                                                        
  100 READ(IN25,1030)  NEWKA(J,I),(NEDGEA(L,J,I),L=1,2),                
     &  (IBCHRA(L,J,I),L=1,3),IFRNTA(J,I),                              
     &  IUATMA(J1,I),NBCKA(J1,I),(IBCKA(L,J1,I),L=1,2)                  
      READ(IN25,1040)  NMDPLA(I),NLDPLA(I),NDATMA(I)                    
      NJJ = NMDPLA(I)                                                   
      DO  110  J = 1, NJJ                                               
  110 READ(IN25,1050)  KUNDPA(J,I),(CHRGA(L,J,I),L=1,2),LSTDPA(J,I)     
      NJJ = NLDPLA(I)                                                   
      READ(IN25,1060)  (LSTAMA(J,I),J=1,NJJ)                            
      NJJ = NDATMA(I)                                                   
      IF (NJJ.LE.0)  GOTO  130                                          
      DO  120  J = 1, NJJ                                               
  120 READ(IN25,1070)  JATDPA(J,I),CHRGAX(J,I),JCLDPA(J,I)              
  130 CONTINUE                                                          
C                                                                       
C THE FOLLOWING SECTION IS FOR END GROUPS                               
C                                                                       
      DO  230  I = 1, 20                                                
      NNN = NDATOM(I)                                                   
      READ(IN25,1000)  TITLE                                            
      READ(IN25,1010)  NUNITE(I),(NMUNTE(L,I),L=1,NNN)                  
      READ(IN25,1020)  (NMNEWE(L,I),L=1,NNN)                            
      NJJ = NUNITE(I)                                                   
      IF (NJJ.GT.0)  THEN                                               
      DO  200  J = 1, NJJ                                               
      J1 = J - 1                                                        
  200 READ(IN25,1030)  NEWKE(J,I),(NEDGEE(L,J,I),L=1,2),                
     &  (IBCHRE(L,J,I),L=1,3),IFRNTE(J,I),                              
     &  IUATME(J1,I),NBCKE(J1,I),(IBCKE(L,J1,I),L=1,2)                  
      ENDIF                                                             
      READ(IN25,1040)  NMDPLE(I),NLDPLE(I),NDATME(I),NEXTNE(I)          
      NJJ = NMDPLE(I)                                                   
      IF (NJJ.GT.0)  THEN                                               
      DO  210  J = 1, NJJ                                               
  210 READ(IN25,1050)  KUNDPE(J,I),(CHRGE(L,J,I),L=1,2),LSTDPE(J,I)     
      ENDIF                                                             
      NJJ = NLDPLE(I)                                                   
      IF (NJJ.GT.0)  READ(IN25,1060)  (LSTAME(J,I),J=1,NJJ)             
      NJJ = NDATME(I)                                                   
      IF (NJJ.GT.0)  THEN                                               
      DO  220  J = 1, NJJ                                               
  220 READ(IN25,1070)  JATDPE(J,I),CHRGEX(J,I),JCLDPE(J,I)              
      ENDIF                                                             
  230 CONTINUE                                                          
      RETURN                                                            
 1000 FORMAT(A80)                                                       
 1010 FORMAT(I3,1X,38I2)                                                
 1020 FORMAT(4X,38I2)                                                   
 1030 FORMAT(4X,I3,1X,2I3,2X,3I2,I4,5X,I3,2X,3I2)                       
 1040 FORMAT(4I5)                                                       
 1050 FORMAT(I7,2F10.2,I3)                                              
 1060 FORMAT(26I3)                                                      
 1070 FORMAT(I7,F10.2,I3)                                               
      END                                                               
      SUBROUTINE  OUT1                                                  
      IMPLICIT REAL*8(A-H,O-Z)                                          
C                                                                       
C THIS SUBROUTINE PUNCHOUTS THE DATA FOR THE FAST ECEPP                 
C                                                                       
CMSP  INCLUDE (MAXSIZE)                                                 
      INCLUDE '/labo/qclib/inspidas/common/maxsize'
CMSP  INCLUDE (SIZE)                                                    
      INCLUDE '/labo/qclib/inspidas/common/size'
CMSP  INCLUDE (TORSNP)                                                  
      INCLUDE '/labo/qclib/inspidas/common/torsnp'
CMSP  INCLUDE (TORSN0)                                                  
      INCLUDE '/labo/qclib/inspidas/common/torsn0'
CMSP  INCLUDE (VARANG)                                                  
      INCLUDE '/labo/qclib/inspidas/common/varang'
CMSP  INCLUDE (REFRNC)                                                  
      INCLUDE '/labo/qclib/inspidas/common/refrnc'
CMSP  INCLUDE (ATOM)                                                    
      INCLUDE '/labo/qclib/inspidas/common/atom'
CMSP  INCLUDE (ALPHA)                                                   
      INCLUDE '/labo/qclib/inspidas/common/alpha'
CMSP  INCLUDE (CHARGE)                                                  
      INCLUDE '/labo/qclib/inspidas/common/charge'
CMSP  INCLUDE (COORD)                                                   
      INCLUDE '/labo/qclib/inspidas/common/coord'
CMSP  INCLUDE (NBTYPE)                                                  
      INCLUDE '/labo/qclib/inspidas/common/nbtype'
CMSP  INCLUDE (INTER0)                                                  
      INCLUDE '/labo/qclib/inspidas/common/inter0'
CMSP  INCLUDE (BOND)                                                    
      INCLUDE '/labo/qclib/inspidas/common/bond'
CMSP  INCLUDE (TABLE1)                                                  
      INCLUDE '/labo/qclib/inspidas/common/table1'
CMSP  INCLUDE (UNITNUMS)                                                
      INCLUDE '/labo/qclib/inspidas/common/unitnums'
CMSP  INCLUDE (SSPAIR)                                                  
      INCLUDE '/labo/qclib/inspidas/common/sspair'
CMSP  INCLUDE (PRIMRY)                                                  
      INCLUDE '/labo/qclib/inspidas/common/primry'
CKM DEBUG                                                               
      COMMON/BONDS/UTOR(10,MAXRES),NDXARR(10,MAXRES),                   
     &             NV(MAXRES)                                           
CKM DEBUG                                                               
C     COMMON/CYS001/ KCYS,NCYS,NPAIR(MAXSS,2)                           
      COMMON/CYS001/ KCYS                                               
C     COMMON/IOUNIT/ JREAD                                              
C     COMMON/TORQUE/ A(MAXVAR),NB(MAXVAR),NS(MAXVAR),IFTORP(MAXVAR),    
C    &               INDXPV(MAXVAR)                                     
      COMMON/TORQUE/ INDXPV(MAXVAR)                                     
C     COMMON/TOR2/  LAMIN,KAMIN,LCARB,KCARB,NUMVAR                      
      COMMON/TOR2/  LAMIN,KAMIN,LCARB,KCARB                             
C     COMMON/RUNS/  INTER(3,MAXLEN)                                     
      COMMON/UNITS/  NPREU(0:MAXVAR)                                    
      COMMON/NEWOLD/ NMUNIT(MAXATM),NUMNEW(MAXATM)                      
C     COMMON/DIHED/ INDEX(2,MAXVAR),NEDGE(2,MAXVAR),IFRONT(MAXVAR),     
C    &   IBCHAR(3,MAXVAR),IUATM(0:MAXVAR),                              
C    &   NBACK(0:MAXVAR),IBACK(2,0:MAXVAR),                             
C    &   NEWK(MAXVAR)                                                   
      COMMON/DIHED/ INDEX(2,MAXVAR),IUATM(0:MAXVAR),NEWK(MAXVAR)        
      COMMON/DIPOL/ NUMDPL,NLDPL,NDPATM,KUNDPL(MAXDP),CHRGDP(MAXDP2),   
     &   LSTDPL(MAXDP),LSTAMB(MAXDPL),JATDPL(MAXDBL),CHRGAM(MAXDBL),    
     &   JCLDPL(MAXDBL)                                                 
C     COMMON/GEN100/ INUMRS,LIST(MAXRES),NPRE(MXRS1)                    
      COMMON/GEN100/ NPRE(MXRS1)                                        
C     DIMENSION INTERR(MAXATM)                                          
      CHARACTER*4  AANAME(36) /'ALA','ASP','CYS','GLU','PHE','GLY',     
     &  'HIS','ILE','LYS','LEU','MET','ASN','PRO','GLN','ARG','SER',    
     &  'THR','VAL','TRP','TYR','CYS','HPR','NLE','ORN','ORN+','HIS2',  
     &  'HIS+','LYS+','ARG+','ASB','ASP-','GLU-',                       
     &  'PROU','PROF','HPRU','HPRF'/                                    
C     CHARACTER*4 ALPH                                                  
      DATA  RCUT /7.D0/, IZERO /0/                                      
CC---- FOLLOWING SECTION IS NOT NECCESSARY HERE ------------------|     
C                                                                 |     
C MAKE THE LIST  INTERR                                           |     
C                                                                 |     
C     DO  5  J = 1, 3                                             |     
C  5  INTER(J,LEN) = 0                                            |     
C  5  INTATM(J,LEN) = 0                                           |     
C     NATM = NPRE(INUMRS+1)                                       |     
C     NATM = NPRE(NUMRES+1)                                       |     
C     INTERR(1) = 1                                               |     
C     INTER(1) = 1                                                |     
C     IXI = 2                                                     |     
C     DO  10  I = 1, LEN                                          |     
C       INTER2 = INTER(2,I)                                       |     
C       INTER3 = INTER(3,I)                                       |     
C       INTER2 = INTATM(2,I)                                      |     
C       INTER3 = INTATM(3,I)                                      |     
C       IF (INTER3.LT.0.OR.(INTER2.EQ.0.AND.INTER3.EQ.0))  THEN   |     
C         INTERR(IXI) = I + 1                                     |     
C         INTER(IXI) = I + 1                                      |     
C         IXI = IXI + 1                                           |     
C       ENDIF                                                     |     
C 10  CONTINUE                                                    |     
C     IF (IXI.GT.NATM) GOTO  22                                   |     
C       DO  20  I = IXI, NATM                                     |     
C 20    INTERR(I) = INTERR(I-1) + 1                               |     
C 20    INTER(I) = INTER(I-1) + 1                                 |     
C 22  IALL = INTERR(NATM)                                         |     
C 22  IALL = INTER(NATM)                                          |     
C     IF (LEN.GE.IALL)  GOTO  32                                  |     
C       DO  30  I = LEN+1, IALL                                   |     
C       DO  30  J = 1, 3                                          |     
C 30    INTER(J,I) = 0                                            |     
C 30    INTATM(J,I) = 0                                           |     
CC--- ABOVE SECTION IN NOT NECCESARY HERE ------------------------|     
C                                                                       
C OUTPUT                                                                
C                                                                       
  32  WRITE(IOUT22,100)  TITLE                                          
C     WRITE(IOUT22,110)  NATM,NUMVAR,INUMRS,IALL,NCYS                   
      WRITE(IOUT22,110)  NUMATM,NUMVAR,NUMRES,NUMINT,NSS                
      CALL  OUT2                                                        
      WRITE(IOUT22,130)  IUATM(0),NBACK(0),(IBACK(J,0),J=1,2),IZERO     
C     NNUNIT = NPREU(INUMRS)                                            
      NNUNIT = NPREU(NUMRES)                                            
      DO  40  I = 1, NNUNIT-1                                           
      K = NEWK(I)                                                       
CC ---------------- CUT ------------------|                             
CC    AP(K)=A(K)                          |                             
CC    NBP(K)=NB(K)                        |                             
CC    NSP(K)=NS(K)                        |                             
CC    IFTOR(K)=IFTORP(K)                  |                             
CC    INDXV(I)=INDEX(1,I)*100+INDEX(2,I)  |                             
CC ---------------- CUT ------------------|                             
C     WRITE(IOUT22,140)  (INDEX(J,I),J=1,2),(NEDGE(J,I),J=1,2),IFRONT(I)
C    &    ,(IBCHAR(J,I),J=1,3),A(K),NB(K),NS(K),IFTORP(K),              
C    &    IUATM(I),NBACK(I),(IBACK(J,I),J=1,2),I                        
      WRITE(IOUT22,140)  (INDEX(J,I),J=1,2),IBND1(I),IBND2(I),IFRONT(I) 
     &    ,(IBCHAR(J,I),J=1,3),AP(K),NBP(K),NSP(K),IFTORP(K),           
     &    IUATM(I),NBACK(I),(IBACK(J,I),J=1,2),I                        
 40   CONTINUE                                                          
CC ---------------- CUT ------------------|                             
CC    DO 35 I=1,NUMVAR                    |                             
CC      J=INDXV(I)/100                    |                             
CC      K=INDXV(I)-100*J                  |                             
CC      REFANG(I) = ANGRAD(K,J)           |                             
C 35   CONTINUE                           |                             
CC ---------------- CUT ------------------|                             
      K = 1                                                             
      DO  50  I = 1, NPRE(2)                                            
      WRITE(IOUT22,150)  (REFCRD(J,I),J=1,3),CHARGE(I),NBTYPE(I),       
     &     NMUNIT(I),NUMNEW(I),I,ATNAME(I),AANAME(LIST(2)),K            
CC --------------- CUT -------------------|                             
CC    KATOM(I)=NUMNEW(I)                  |                             
CC    JATOM(KATOM(I))=I                   |                             
CC    RENAME(I)=AANAME(LIST(2))           |                             
CC    NMBRES(I)=K                         |                             
CC --------------- CUT -------------------|                             
 50   CONTINUE                                                          
C     DO  52  K = 2, INUMRS-1                                           
      DO  52  K = 2, NUMRES-1                                           
      DO  52  I = NPRE(K)+1, NPRE(K+1)                                  
      WRITE(IOUT22,150)  (REFCRD(J,I),J=1,3),CHARGE(I),NBTYPE(I),       
     &     NMUNIT(I),NUMNEW(I),I,ATNAME(I),AANAME(LIST(K)),K-1          
CC --------------- CUT -------------------|                             
CC    KATOM(I)=NUMNEW(I)                  |                             
CC    JATOM(KATOM(I))=I                   |                             
CC    RENAME(I)=AANAME(LIST(K))           |                             
CC    NMBRES(I)=K-1                       |                             
CC --------------- CUT -------------------|                             
 52   CONTINUE                                                          
C     K = INUMRS-1                                                      
      K = NUMRES-1                                                      
C     DO  54  I = NPRE(INUMRS)+1, NPRE(INUMRS+1)                        
      DO  54  I = NPRE(NUMRES)+1, NPRE(NUMRES+1)                        
      WRITE(IOUT22,150)  (REFCRD(J,I),J=1,3),CHARGE(I),NBTYPE(I),       
     &     NMUNIT(I),NUMNEW(I),I,ATNAME(I),AANAME(LIST(K)),K-1          
CC --------------- CUT -------------------|                             
CC    KATOM(I)=NUMNEW(I)                  |                             
CC    JATOM(KATOM(I))=I                   |                             
CC    RENAME(I)=AANAME(LIST(K))           |                             
CC    NMBRES(I)=K-1                       |                             
CC --------------- CUT -------------------|                             
 54   CONTINUE                                                          
C     WRITE(IOUT22,110)  (INTERR(I),I=1,NATM)                           
      WRITE(IOUT22,110)  (INTER(I),I=1,NUMATM)                          
C     WRITE(IOUT22,170)  ((INTER(J,I),J=1,3),I=1,IALL)                  
      WRITE(IOUT22,170)  ((INTATM(J,I),J=1,3),I=1,NUMINT)               
C                                                                       
C DISULFIDE BONDS                                                       
C                                                                       
C     IF (NCYS.EQ.0)  GOTO  2                                           
      IF (NSS.EQ.0)   GOTO  2                                           
C     DO  60  I = 1, NCYS                                               
      DO  60  I = 1, NSS                                                
CC --------------- CUT -------------------------|                       
CC    KSSPER(1,1,I) = NPRE(NPAIR(I,1)) + 3      |                       
CC    KSSPER(2,1,I) = NPRE(NPAIR(I,1)) + 5      |                       
CC    KSSPER(3,1,I) = NPRE(NPAIR(I,1)) + 10     |                       
CC    KSSPER(4,1,I) = NPRE(NPAIR(I,2)) + 3      |                       
CC    KSSPER(5,1,I) = NPRE(NPAIR(I,2)) + 5      |                       
CC    KSSPER(6,1,I) = NPRE(NPAIR(I,2)) + 10     |                       
CC --------------- CUT -------------------------|                       
      WRITE(IOUT22,110)  (KSSPER(J,1,I),J=1,6)                          
  60  CONTINUE                                                          
C                                                                       
C DATA FOR THE DIPOLE CLUSTERS                                          
C                                                                       
   2  WRITE(IOUT22,200)                                                 
      WRITE(IOUT22,110)  NUMDPL,NLDPL,NDPATM                            
      K = 0                                                             
      DO  70  I = 1, NUMDPL                                             
      WRITE(IOUT22,210)  KUNDPL(I),CHRGDP(K+1),CHRGDP(K+2),LSTDPL(I)    
  70  K = K+2                                                           
      WRITE(IOUT22,110)  (LSTAMB(I),I=1,NLDPL)                          
      DO  80  I = 1, NDPATM                                             
  80  WRITE(IOUT22,220)  JATDPL(I),CHRGAM(I),JCLDPL(I)                  
      WRITE(IOUT22,120)  RCUT                                           
      RETURN                                                            
C                                                                       
C PUNCHING FORMATS                                                      
C                                                                       
  100 FORMAT(A80)                                                       
  110 FORMAT(16I5)                                                      
  120 FORMAT(10F8.3)                                                    
  130 FORMAT(53X,2I5,I4,I3,4X,I3)                                       
  140 FORMAT(I4,I2,2X,2I5,2X,2I5,2I2,F10.4,3I3,I5,I5,I5,I5,1X,I5)       
  150 FORMAT(3F10.4,4X,F10.3,4I5,2X,A4,1X,A4,I5)                        
  170 FORMAT(5(1X,3I5))                                                 
  200 FORMAT('CUTOFF')                                                  
  210 FORMAT(I5,2F10.4,I10)                                             
  220 FORMAT(I10,F10.4,I5)                                              
      END                                                               
      SUBROUTINE  PARAMT                                                
      IMPLICIT REAL*8(A-H,O-Z)                                          
C                                                                       
C THIS SUBROUTINE ASSIGNS THE VALUES WHICH ARE NEEDED IN THE FAST ECEPP 
C                                                                       
CMSP  INCLUDE (MAXSIZE)                                                 
      INCLUDE '/labo/qclib/inspidas/common/maxsize'
CMSP  INCLUDE (BOND)                                                    
      INCLUDE '/labo/qclib/inspidas/common/bond'
CMSP  INCLUDE(TABLE1)                                                   
      INCLUDE '/labo/qclib/inspidas/common/table1'
CMSP  INCLUDE(SIZE)                                                     
      INCLUDE '/labo/qclib/inspidas/common/size'
CMSP  INCLUDE (PRIMRY)                                                  
      INCLUDE '/labo/qclib/inspidas/common/primry'
      COMMON/CHECK/KNDRES(36),KNDEND(20)                                
      COMMON/GEN016/ NUNITA(36),NMUNTA(26,36),NMNEWA(26,36),            
     &   NEWKA(10,36),NEDGEA(2,10,36),IBCHRA(3,10,36),IFRNTA(10,36),    
     &   IUATMA(0:9,36),NBCKA(0:9,36),IBCKA(2,0:9,36)                   
      COMMON/GEN032/ NUNITE(20),NMUNTE(18,20),NMNEWE(18,20),            
     &   NEWKE(3,20),NEDGEE(2,3,20),IBCHRE(3,3,20),IFRNTE(3,20),        
     &   IUATME(0:2,20),NBCKE(0:2,20),IBCKE(2,0:2,20)                   
      COMMON/GEN064/ NMDPLA(36),NLDPLA(36),NDATMA(36),KUNDPA(5,36),     
     &   CHRGA(2,5,36),LSTDPA(5,36),LSTAMA(28,36),JATDPA(8,36),         
     &   CHRGAX(8,36),JCLDPA(8,36)                                      
      COMMON/GEN128/ NMDPLE(20),NLDPLE(20),NDATME(20),KUNDPE(5,20),     
     &   CHRGE(2,5,20),LSTDPE(5,20),LSTAME(28,20),JATDPE(8,20),         
     &   CHRGEX(8,20),JCLDPE(8,20),NEXTNE(20)                           
      COMMON/UNITS/ NPREU(0:MAXVAR)                                     
      COMMON/NEWOLD/ NMUNIT(MAXATM),NUMNEW(MAXATM)                      
C     COMMON/DIHED/ INDEX(2,MAXVAR),NEDGE(2,MAXVAR),IFRONT(MAXVAR),     
C    &   IBCHAR(3,MAXVAR),IUATM(0:MAXVAR),                              
C    &   NBACK(0:MAXVAR),IBACK(2,0:MAXVAR),                             
C    &   NEWK(MAXVAR)                                                   
      COMMON/DIHED/ INDEX(2,MAXVAR),IUATM(0:MAXVAR),NEWK(MAXVAR)        
      COMMON/DIPOL/ NUMDPL,NLDPL,NDPATM,KUNDPL(MAXDP),CHRGDP(MAXDP2),   
     &    LSTDPL(MAXDP),LSTAMB(MAXDPL),JATDPL(MAXDBL),CHRGAM(MAXDBL),   
     &    JCLDPL(MAXDBL)                                                
C     COMMON/GEN100/ INUMRS,LIST(MAXRES),NPRE(MXRS1)                    
      COMMON/GEN100/ NPRE(MXRS1)                                        
C********************                                                   
C AMINO END SECTION *                                                   
C********************                                                   
      LAMIN = IABS(LIST(1))                                             
C                                                                       
C ATOM                                                                  
C                                                                       
      DO  100  I = 1, NPRE(2)                                           
        NMUNIT(I) = NMUNTE(I,LAMIN)                                     
        NUMNEW(I) = NMNEWE(I,LAMIN)                                     
  100 CONTINUE                                                          
C                                                                       
C BOND & UNIT                                                           
C                                                                       
      NPREU(0) = 0                                                      
      NENDU = NUNITE(LAMIN)                                             
      NPREU(1) = NENDU                                                  
      IBLAST = 0                                                        
C                                                                       
      IF (NENDU.EQ.0)  GOTO  500                                        
C                                                                       
      DO  400  I = 1, NENDU                                             
C  (BOND)                                                               
        NEWK(I)  = NEWKE (I,LAMIN)                                      
        INDEX(1,I) = 1                                                  
        INDEX(2,I) = NEWK(I)                                            
        IFRONT(I) = IFRNTE(I,LAMIN)                                     
C       NEDGE(1,I) = NEDGEE(1,I,LAMIN)                                  
C       NEDGE(2,I) = NEDGEE(2,I,LAMIN)                                  
        IBND1(I) = NEDGEE(1,I,LAMIN)                                    
        IBND2(I) = NEDGEE(2,I,LAMIN)                                    
        DO  350  J = 1, 3                                               
  350   IBCHAR(J,I) = IBCHRE(J,I,LAMIN)                                 
C  (UNIT)                                                               
        I1 = I - 1                                                      
        IUATM(I1) = IUATME(I1,LAMIN)                                    
        NBACK(I1)  = NBCKE(I1,LAMIN)                                    
        IBACK(1,I1) = IBCKE (1,I1,LAMIN)                                
        IBACK(2,I1) = IBCKE (2,I1,LAMIN)                                
  400 CONTINUE                                                          
      IBLAST = IBCHAR(1,NENDU)                                          
C                                                                       
C DIPOLE CLUSTER                                                        
C                                                                       
  500 NUMDPL = NMDPLE(LAMIN)                                            
      NLDPL  = NLDPLE(LAMIN)                                            
      NDPATM = NDATME(LAMIN)                                            
      KK = 0                                                            
      DO  610  I = 1, NUMDPL                                            
        KUNDPL(I) = KUNDPE(I,LAMIN)                                     
        DO  600  L = 1, 2                                               
          KK = KK + 1                                                   
  600     CHRGDP(KK) = CHRGE(L,I,LAMIN)                                 
        LSTDPL(I) = LSTDPE(I,LAMIN)                                     
  610 CONTINUE                                                          
      DO  700  I = 1, NLDPL                                             
  700 LSTAMB(I) = LSTAME(I,LAMIN)                                       
      IF (NDPATM.EQ.0)  GOTO  900                                       
      DO  800  I = 1, NDPATM                                            
      JATDPL(I) = JATDPE(I,LAMIN)                                       
      CHRGAM(I) = CHRGEX(I,LAMIN)                                       
      JCLDPL(I) = JCLDPE(I,LAMIN)                                       
  800 CONTINUE                                                          
C                                                                       
C IF THE NEXT RESIDUE IS GLY, PRO OR H-PRO,  THEN ...                   
C                                                                       
  900 LISTI = IABS(LIST(2))                                             
      KIND = IABS(KNDRES(LISTI))                                        
      IF (KIND.EQ.6)  THEN                                              
        NDPATM = NDPATM+1                                               
        LAN = LSTAMB(NLDPL-1)                                           
        LSTAMB(NLDPL-1) = - NDPATM                                      
        JATDPL(NDPATM) = LAN                                            
        CHRGAM(NDPATM) = -4.59                                          
        JCLDPL(NDPATM) = NUMDPL+1                                       
      ELSE IF (KIND.EQ.13.OR.KIND.EQ.22)  THEN                          
        NDPATM = NDPATM + 2                                             
        LAN = LSTAMB(NLDPL-1)                                           
        LAC = LSTAMB(NLDPL)                                             
        LSTAMB(NLDPL-1) = - (NDPATM-1)                                  
        LSTAMB(NLDPL) = -NDPATM                                         
        JATDPL(NDPATM-1) = -LAN                                         
        JATDPL(NDPATM) = -LAC                                           
        CHRGAM(NDPATM-1) = -4.59                                        
        CHRGAM(NDPATM) = 2.27                                           
        JCLDPL(NDPATM-1) = NUMDPL+1                                     
        JCLDPL(NDPATM) = NUMDPL+1                                       
      ENDIF                                                             
C***********************************                                    
C FULL AMINO ACID RESIDUE SECTION  *                                    
C***********************************                                    
C1000 LASTFL = INUMRS-1                                                 
 1000 LASTFL = NUMRES-1                                                 
      DO  1800  III = 2, LASTFL                                         
      LISTI = IABS(LIST(III))                                           
      KIND = IABS(KNDRES(LISTI))                                        
      NKFLAG = 0                                                        
      INEWK = 0                                                         
      IF (KIND.EQ.13.OR.KIND.EQ.22)  INEWK = -1                         
      IF (III.NE.LASTFL)  GOTO  1010                                    
      IF (KIND.EQ.13)  GOTO  1010                                       
C     LINTN = LIST(INUMRS)                                              
      LINTN = LIST(NUMRES)                                              
      LINTN = IABS(LINTN)                                               
      IF (NUNITE(LINTN).NE.0)  GOTO  1010                               
        INEWK = -1                                                      
        NKFLAG = 1                                                      
        IF (KIND.EQ.22)  NKFLAG = 2                                     
 1010 NA = NUNITA(LISTI)                                                
      NPREU(III) = NPREU(III-1)+NA                                      
      NNS = NPRE(III)                                                   
      NNE = NPRE(III+1)                                                 
      NUS = NPREU(III-1)                                                
      NUE = NPREU(III)                                                  
C                                                                       
C ATOM                                                                  
C                                                                       
      DO  1100  I = NNS+1, NNE                                          
        K = I-NNS                                                       
        NMUNTI = NMUNTA(K,LISTI)                                        
        NMUNIT(I) = NMUNTI + NUS                                        
        NMNEWI = NMNEWA(K,LISTI)                                        
        NUMNEW(I) = NMNEWI + NNS                                        
 1100 CONTINUE                                                          
C                                                                       
C BOND & UNIT                                                           
C                                                                       
      DO  1300  I = NUS+1, NUE                                          
        K = I-NUS                                                       
C  (BOND)                                                               
        NEWKI = NEWKA(K,LISTI)                                          
        INK = INEWK                                                     
        IF (NKFLAG.EQ.1.AND.NEWKI.LE.2)  INK = 0                        
        IF (NKFLAG.EQ.2.AND.NEWKI.EQ.4)  INK = -2                       
        NEWK(I) = NEWKI + NUS + INK                                     
        INDEX(1,I) = III                                                
        INDEX(2,I) = NEWKI                                              
        IFRNTI = IFRNTA(K,LISTI)                                        
        IFRONT(I) = IFRNTI + NUS                                        
C       DO  1200  J = 1, 2                                              
C         NEDGEJ = NEDGEA(J,K,LISTI)                                    
C         NEDGE(J,I) = NEDGEJ + NNS                                     
C1200   CONTINUE                                                        
         IBND1(I)=NEDGEA(1,K,LISTI)+NNS                                 
         IBND2(I)=NEDGEA(2,K,LISTI)+NNS                                 
        DO  1210  J = 1, 3                                              
 1210   IBCHAR(J,I) = IBCHRA(J,K,LISTI)                                 
        IBCHAR(1,I) = IBCHAR(1,I) + IBLAST                              
C  (UNIT)                                                               
        I1 = I - 1                                                      
        K1 = K - 1                                                      
        IUATMI = IUATMA(K1,LISTI)                                       
        IUATM(I1) = IUATMI + NNS                                        
        NBACK(I1) = NBCKA(K1,LISTI)                                     
        DO  1220  J = 1, 2                                              
          IBCKJI = IBCKA(J,K1,LISTI)                                    
          IF (IBCKJI.EQ.0)  THEN                                        
            IBACK(J,I1) = 0                                             
          ELSE                                                          
            IBACK(J,I1) = IBCKJI + NUS                                  
          ENDIF                                                         
 1220   CONTINUE                                                        
C       LINTN = IABS(LIST(INUMRS))                                      
        LINTN = IABS(LIST(NUMRES))                                      
        IF (III.EQ.LASTFL.AND.I.EQ.NUE.AND.NUNITE(LINTN).EQ.0)  THEN    
          NBACK(I1) = 0                                                 
          IBACK(1,I1) = 0                                               
        ENDIF                                                           
 1300 CONTINUE                                                          
      IBLAST = IBCHAR(1,NUE)                                            
C                                                                       
C DIPOLE CLUSTER                                                        
C                                                                       
      LUMDPL = NUMDPL                                                   
      LLDPL  = NLDPL                                                    
      LDPATM = NDPATM                                                   
      NUMDPL = NUMDPL + NMDPLA(LISTI)                                   
      NLDPL  = NLDPL  + NLDPLA(LISTI)                                   
      NDPATM = NDPATM + NDATMA(LISTI)                                   
      DO  1400  I = 1, NMDPLA(LISTI)                                    
        II = LUMDPL+I                                                   
        KUNDPL(II) = NUS + KUNDPA(I,LISTI)                              
        CHRGDP(KK+1) = CHRGA(1,I,LISTI)                                 
        CHRGDP(KK+2) = CHRGA(2,I,LISTI)                                 
        KK = KK + 2                                                     
        LSTDPL(II) = LLDPL + LSTDPA(I,LISTI)                            
 1400 CONTINUE                                                          
      DO  1500  I = 1, NLDPLA(LISTI)                                    
        II = LLDPL+I                                                    
        IF (LSTAMA(I,LISTI).GT.0)  THEN                                 
          LSTAMB(II) = LSTAMA(I,LISTI) + NNS                            
        ELSE                                                            
          LSTAMB(II) = - (LDPATM+IABS(LSTAMA(I,LISTI)))                 
        ENDIF                                                           
 1500 CONTINUE                                                          
      IF (NDATMA(LISTI).EQ.0)  GOTO  1700                               
      DO  1600  I = 1, NDATMA(LISTI)                                    
        II = LDPATM+I                                                   
        JATDPL(II) = ISIGN(IABS(JATDPA(I,LISTI))+NNS,JATDPA(I,LISTI))   
        CHRGAM(II) = CHRGAX(I,LISTI)                                    
        JCLDPL(II) = JCLDPA(I,LISTI) + LUMDPL                           
 1600 CONTINUE                                                          
C                                                                       
 1700 IF (III.EQ.LASTFL)  GOTO  1800                                    
C                                                                       
C IF THE NEXT RESIDUE IS GLY, PRO OR H-PRO, THEN ...                    
C                                                                       
      LISTIJ = IABS(LIST(III+1))                                        
      KIND = IABS(KNDRES(LISTIJ))                                       
      IF (KIND.EQ.6)  THEN                                              
        NDPATM = NDPATM+1                                               
        II = NLDPL-1                                                    
        LAN = LSTAMB(II)                                                
        LSTAMB(II) = - NDPATM                                           
        JATDPL(NDPATM) = LAN                                            
        CHRGAM(NDPATM) = -4.59                                          
        JCLDPL(NDPATM) = NUMDPL+1                                       
      ELSE IF (KIND.EQ.13.OR.KIND.EQ.22)  THEN                          
        NDPATM = NDPATM+2                                               
        II = NLDPL-1                                                    
        LAN = LSTAMB(II)                                                
        LAC = LSTAMB(II+1)                                              
        LSTAMB(II) = -(NDPATM-1)                                        
        LSTAMB(II+1) = -NDPATM                                          
        JATDPL(NDPATM-1) = -LAN                                         
        JATDPL(NDPATM) = -LAC                                           
        CHRGAM(NDPATM-1) = -4.59                                        
        CHRGAM(NDPATM) = 2.27                                           
        JCLDPL(NDPATM-1) = NUMDPL+1                                     
        JCLDPL(NDPATM) = NUMDPL+1                                       
      ENDIF                                                             
 1800 CONTINUE                                                          
C************************                                               
C CARBOXYL END SECTION  *                                               
C************************                                               
C     LCARB = IABS(LIST(INUMRS))                                        
      LCARB = IABS(LIST(NUMRES))                                        
      NA = NUNITE(LCARB)                                                
C     NPREU(INUMRS) = NPREU(INUMRS-1) + NA                              
      NPREU(NUMRES) = NPREU(NUMRES-1) + NA                              
C     NLS = NPREU(INUMRS-1)                                             
      NLS = NPREU(NUMRES-1)                                             
C     NLE = NPREU(INUMRS)                                               
      NLE = NPREU(NUMRES)                                               
C     NNS = NPRE(INUMRS)                                                
      NNS = NPRE(NUMRES)                                                
C     NNE = NPRE(INUMRS+1)                                              
      NNE = NPRE(NUMRES+1)                                              
C                                                                       
C ATOM                                                                  
C                                                                       
      DO  2100  I = NNS+1, NNE                                          
        K = I-NNS+1                                                     
        NMUNTI = NMUNTE(K,LCARB)                                        
        NMUNIT(I) = NMUNTI + NLS                                        
        NMNEWI = NMNEWE(K,LCARB)                                        
        NUMNEW(I) = NMNEWI + NNS                                        
 2100 CONTINUE                                                          
C                                                                       
C BOND & UNIT                                                           
C                                                                       
      IF (NA.EQ.0)  GOTO  2280                                          
C                                                                       
      DO  2260  I = NLS+1, NLE                                          
        K = I-NLS                                                       
        I1 = I - 1                                                      
C  (UNIT)                                                               
        K1 = K - 1                                                      
        IUATMI = IUATME(K1,LCARB)                                       
        IUATM(I1) = IUATMI + NNS                                        
        NBACK(I1) = NBCKE(K1,LCARB)                                     
        DO  2200  J = 1, 2                                              
          IBCKJI = IBCKE(J,K1,LCARB)                                    
          IF (IBCKJI.EQ.0)  THEN                                        
            IBACK(J,I1) = 0                                             
          ELSE                                                          
            IBACK(J,I1) = IBCKJI + NLS                                  
          ENDIF                                                         
 2200   CONTINUE                                                        
C                                                                       
        IF (K.EQ.1)  GOTO  2260                                         
C  (BOND)                                                               
        IFRNTI = IFRNTE(K,LCARB)                                        
        IFRONT(I) = IFRNTI + NLS                                        
        NEWKI = NEWKE(K,LCARB)                                          
        NEWK(I1) = NEWKI + NLS                                          
C       INDEX(1,I1) = INUMRS                                            
        INDEX(1,I1) = NUMRES                                            
        INDEX(2,I1) = NEWKI                                             
C       DO  2220  J = 1, 2                                              
C         NEDGEJ = NEDGEE(J,K,LCARB) - 1                                
C         NEDGE(J,I1) = NEDGEJ + NNS                                    
C2220   CONTINUE                                                        
          IBND1(I1)=NEDGEE(1,K,LCARB) -1 + NNS                          
          IBND2(I1)=NEDGEE(2,K,LCARB) -1 + NNS                          
        DO  2240  J = 1, 3                                              
 2240   IBCHAR(J,I1) = IBCHRE(J,K,LCARB)                                
        IBCHAR(1,I1) = IBCHAR(1,I1) + IBLAST                            
 2260 CONTINUE                                                          
C                                                                       
C DIPOLE CLUSTER                                                        
C                                                                       
 2280 LUMDPL = NUMDPL                                                   
      LLDPL = NLDPL                                                     
      LDPATM = NDPATM                                                   
      IF (NEXTNE(LCARB).EQ.2)  THEN                                     
        LLDPL = LLDPL-2                                                 
        CHRGDP(KK-1) = CHRGDP(KK-1) - 2.27                              
        CHRGDP(KK)   = CHRGDP(KK) + 4.59                                
      ELSE IF (NEXTNE(LCARB).EQ.1)  THEN                                
        LLDPL = LLDPL - 1                                               
        CHRGDP(KK-1) = CHRGDP(KK-1) - 2.27                              
        CHRGDP(KK)   = CHRGDP(KK) + 2.27                                
        LDPATM = LDPATM+1                                               
        LAN = LSTAMB(LLDPL)                                             
        LSTAMB(LLDPL) = - LDPATM                                        
        JATDPL(LDPATM) = -LAN                                           
        CHRGAM(LDPATM) = -2.32                                          
        JCLDPL(LDPATM) = LUMDPL+1                                       
      ELSE IF (NEXTNE(LCARB).EQ.3)  THEN                                
        LLDPL = LLDPL - 1                                               
        CHRGDP(KK-1) = CHRGDP(KK-1) - 2.27                              
        CHRGDP(KK)   = CHRGDP(KK) + 2.27                                
        LDPATM = LDPATM+1                                               
        LAN = LSTAMB(LLDPL)                                             
        LSTAMB(LLDPL) = - LDPATM                                        
        JATDPL(LDPATM) = -LAN                                           
        CHRGAM(LDPATM) = -0.41                                          
        JCLDPL(LDPATM) = LUMDPL+1                                       
      ELSE                                                              
        LDPATM = LDPATM+2                                               
        LAN = LSTAMB(LLDPL-1)                                           
        LAH = LSTAMB(LLDPL)                                             
        LSTAMB(LLDPL-1) = -(LDPATM-1)                                   
        LSTAMB(LLDPL) = -LDPATM                                         
        JATDPL(LDPATM-1) = -LAN                                         
        JATDPL(LDPATM) = -LAH                                           
        CHRGAM(LDPATM-1) = -4.59                                        
        CHRGAM(LDPATM) = 2.27                                           
        JCLDPL(LDPATM-1) = LUMDPL+1                                     
        JCLDPL(LDPATM) = LUMDPL+1                                       
      ENDIF                                                             
      NUMDPL = LUMDPL + NMDPLE(LCARB)                                   
      NLDPL  = LLDPL  + NLDPLE(LCARB)                                   
      NDPATM = LDPATM + NDATME(LCARB)                                   
      IF (NMDPLE(LCARB).GT.0)  THEN                                     
      DO  2310  I = 1, NMDPLE(LCARB)                                    
        II = LUMDPL + 1                                                 
        KUNDPL(II) = NLS + KUNDPE(I,LCARB)                              
        DO 2300  L = 1, 2                                               
          KK = KK + 1                                                   
 2300     CHRGDP(KK) = CHRGE(L,I,LCARB)                                 
        LSTDPL(II) = LLDPL + LSTDPE(I,LCARB)                            
 2310 CONTINUE                                                          
      ENDIF                                                             
      IF (NLDPLE(LCARB).GT.0)  THEN                                     
      DO  2400  I = 1, NLDPLE(LCARB)                                    
        II = LLDPL + I                                                  
        IF (LSTAME(I,LCARB).GT.0)  THEN                                 
          LSTAMB(II) = LSTAME(I,LCARB) + NNS - 1                        
        ELSE                                                            
          LSTAMB(II) = -(LDPATM+IABS(LSTAME(I,LCARB)))                  
        ENDIF                                                           
 2400 CONTINUE                                                          
      ENDIF                                                             
      IF (NDATME(LCARB).EQ.0)  GOTO  3000                               
      DO  2500  I = 1, NDATME(LCARB)                                    
        II = LDPATM + I                                                 
        JATDPL(II) = ISIGN(IABS(JATDPE(I,LCARB))+NNS-1,JATDPE(I,LCARB)) 
        CHRGAM(II) = CHRGEX(I,LCARB)                                    
        JCLDPL(II) = JCLDPE(I,LCARB) + LUMDPL                           
 2500 CONTINUE                                                          
C                                                                       
 3000 CONTINUE                                                          
C                                                                       
C CHECK THE PARAMETER MAXDP & MAXDBL                                    
C                                                                       
      IF (NUMDPL.GT.MAXDP)  THEN                                        
        WRITE(6,4000)  MAXDP,NUMDPL                                     
        STOP                                                            
      ENDIF                                                             
      IF (NDPATM.GT.MAXDBL)  THEN                                       
        WRITE(6,4010)  MAXDBL,NDPATM                                    
        STOP                                                            
      ENDIF                                                             
C                                                                       
       RETURN                                                           
C                                                                       
 4000 FORMAT('0 ***ERROR MESSAGE FROM THE SUBROUTINE PARAMT.'/          
     &  '    * MAXDP.LT.NUMDPL *    CORRECT MAXDP IN PARAMETER'/        
     &  '         MAXDP=',I5,',   NUMDPL=',I5)                          
 4010 FORMAT('0 ***ERROR MESSAGE FROM THE SUBROUTINE PARAMT.'/          
     &  '    * MAXDBL.LT.NDPATM *    CORRECT MAXDBL IN PARAMETER'/      
     &  '         MAXDBL=',I5,',   NDPATM=',I5)                         
      END                                                               
      SUBROUTINE  OUTMAX                                                
      IMPLICIT REAL*8(A-H,O-Z)                                          
CMSP  INCLUDE (MAXSIZE)                                                 
      INCLUDE '/labo/qclib/inspidas/common/maxsize'
CMSP  INCLUDE (VARANG)                                                  
      INCLUDE '/labo/qclib/inspidas/common/varang'
CMSP  INCLUDE (BOND)                                                    
      INCLUDE '/labo/qclib/inspidas/common/bond'
CMSP  INCLUDE(TABLE1)                                                   
      INCLUDE '/labo/qclib/inspidas/common/table1'
CMSP  INCLUDE (UNITNUMS)                                                
      INCLUDE '/labo/qclib/inspidas/common/unitnums'
CMSP  INCLUDE (CNTL)                                                    
      INCLUDE '/labo/qclib/inspidas/common/cntl'
CMSP  INCLUDE (SSPAIR)                                                  
      INCLUDE '/labo/qclib/inspidas/common/sspair'
CMSP  INCLUDE(SIZE)                                                     
      INCLUDE '/labo/qclib/inspidas/common/size'
CMSP  INCLUDE (PRIMRY)                                                  
      INCLUDE '/labo/qclib/inspidas/common/primry'
      COMMON/BONDS/ UTOR(10,MAXRES),NDXARR(10,MAXRES),                  
     &              NV(MAXRES)                                          
C     COMMON/CYS001/ KCYS,NCYS,NPAIR(MAXSS,2)                           
      COMMON/CYS001/ KCYS                                               
C     COMMON/GEN100/ INUMRS,LIST(MAXRES),NPRE(MXRS1)                    
      COMMON/GEN100/ NPRE(MXRS1)                                        
C     COMMON/IOUNIT/ JREAD                                              
C     COMMON/PRINT/  IPRNT                                              
C     COMMON/PREPAR/ LNUM,JMLAST,KMLAST,LNUMS,LEN,NUMATM                
      COMMON/PREPAR/ LNUM,JMLAST,KMLAST,LNUMS,LEN                       
C     COMMON/TOR2/LAMIN,KAMIN,LCARB,KCARB,NUMVAR                        
      COMMON/TOR2/LAMIN,KAMIN,LCARB,KCARB                               
C     COMMON/DIHED/ INDEX(2,MAXVAR),NEDGE(2,MAXVAR),IFRONT(MAXVAR),     
C    &   IBCHAR(3,MAXVAR),IUATM(0:MAXVAR),                              
C    &   NBACK(0:MAXVAR),IBACK(2,0:MAXVAR),                             
C    &    NEWK(MAXVAR)                                                  
      COMMON/DIHED/ INDEX(2,MAXVAR),IUATM(0:MAXVAR),NEWK(MAXVAR)        
      COMMON/DIPOL/ NUMDPL,NLDPL,NDPATM,KUNDPL(MAXDP),CHRGDP(MAXDP2),   
     &    LSTDPL(MAXDP),LSTAMB(MAXDPL),JATDPL(MAXDBL),CHRGAM(MAXDBL),   
     &    JCLDPL(MAXDBL)                                                
      DIMENSION  NJ(0:MAXVAR)                                           
      DATA  IONE /1/, NJ /0,MAXVAR*0/                                   
      WRITE(6,500)                                                      
      WRITE(6,510)  'MAXATMM',NUMATM                                    
      WRITE(6,510)  'MAXVAR',NUMVAR                                     
C     WRITE(6,510)  'MAXRES',INUMRS                                     
      WRITE(6,510)  'MAXRES',NUMRES                                     
      WRITE(6,510)  'MAXLEN',LEN                                        
C     IF (NCYS.GT.0)  THEN                                              
      IF (NSS.GT.0)   THEN                                              
C       WRITE(6,510)  'MAXSS ',NCYS                                     
        WRITE(6,510)  'MAXSS ',NSS                                      
      ELSE                                                              
        WRITE(6,520)  'MAXSS ',IONE                                     
      ENDIF                                                             
C                                                                       
      KMAX = 0                                                          
      DO  10  IA = 1, NUMVAR                                            
       DO 10  IB = 1, IA                                                
        KAB = KDISTP (IA,IB,NUMVAR,IBCHAR)                              
        NJ(KAB) = NJ(KAB) + 1                                           
        KMAX = MAX (KMAX,KAB)                                           
  10  CONTINUE                                                          
      MAXJX = 0                                                         
      DO  20  I = 0, KMAX                                               
  20  MAXJX = MAX (MAXJX,NJ(I))                                         
      WRITE(6,525)  'MAXJ  ',MAXJX,KMAX                                 
C                                                                       
      WRITE(6,530)                                                      
      WRITE(6,510)  'MAXDPC',NUMDPL                                     
      WRITE(6,510)  'MAXDPA',NDPATM                                     
      NAXDPL = NUMATM + NDPATM/2                                        
      IF (NLDPL.LE.NAXDPL)  THEN                                        
        WRITE(6,540)                                                    
      ELSE                                                              
        WRITE(6,510)  'MAXDPL',NLDPL                                    
        WRITE(6,550)                                                    
      ENDIF                                                             
C                                                                       
      CALL  INTRCT (KMAX)                                               
C                                                                       
  500 FORMAT(///' ***  INFORMATION ON THE ARRAY SIZES IN THE FEDER  *** 
     &'//' ',8X,'THE FOLLOWING VALUES SHOW THE MINIMAL ONES THAT SHOULD'
     &/' ',8X,'BE ASSIGNED TO THE PARAMETERS IN THE FEDER')             
  510 FORMAT('0',15X,A6,'=',I5)                                         
  520 FORMAT('0',15X,A6,'=',I5,5X,'(NCYS=0)')                           
  525 FORMAT('0',15X,A6,'=',I5,5X,'(KMAX=',I4,')')                      
  530 FORMAT('0',8X,'THE FOLLOWING PARAMETERS APPEAR ONLY IN THE FEDER',
     &      /'0',8X,'WITH CUTOFF AND DIPOLE APPROXIMATION.')            
  540 FORMAT('0',15X,'MAXDPL=MAXATM+NDPATM/2')                          
  550 FORMAT('0',18X,'(REPLACE  MAXDPL=MAXATM+NDPATM/2 IN THE FEDER BY T
     &HE ABOVE VALUE)')                                                 
      RETURN                                                            
C     DEBUG SUBCHK,INIT                                                 
      END                                                               
      FUNCTION  KDISTP (IA,IB,NUMVAR,IBCHAR)                            
      IMPLICIT REAL*8(A-H,O-Z)                                          
C                                                                       
C  THIS FUNCTION SUBPROGRAM COMPUTES THE DISTANCE BETWEEN TWO BONDS     
C  IA AND IB ALONG THE CHAIN.                                           
C                                                                       
      DIMENSION  IBCHAR(3,NUMVAR)                                       
      IF (IBCHAR(1,IA).NE.IBCHAR(1,IB))  THEN                           
        KDISTP=IABS(IBCHAR(1,IA)-IBCHAR(1,IB))+IBCHAR(2,IA)+IBCHAR(2,IB)
     &                                       +IBCHAR(3,IA)+IBCHAR(3,IB) 
        KDISTP = KDISTP/2                                               
      ELSE IF (IBCHAR(2,IA).NE.IBCHAR(2,IB))  THEN                      
        KDISTP=IABS(IBCHAR(2,IA)-IBCHAR(2,IB))+IBCHAR(3,IA)+IBCHAR(3,IB)
        KDISTP = KDISTP/2                                               
      ELSE                                                              
        KDISTP=IABS(IBCHAR(3,IA)-IBCHAR(3,IB))/2                        
      ENDIF                                                             
      RETURN                                                            
      END                                                               
      SUBROUTINE  INTRCT (KMAX)                                         
      IMPLICIT REAL*8(A-H,O-Z)                                          
C                                                                       
C  THIS SUBROUTINE COMPUTES THE NONBONDED AND ELECTROSTATIC ENERGIES.   
C                                                                       
CMSP  INCLUDE (MAXSIZE)                                                 
      INCLUDE '/labo/qclib/inspidas/common/maxsize'
CMSP  INCLUDE(SIZE)                                                     
      INCLUDE '/labo/qclib/inspidas/common/size'
CMSP  INCLUDE (INTER0)                                                  
      INCLUDE '/labo/qclib/inspidas/common/inter0'
CMSP  INCLUDE (BOND)                                                    
      INCLUDE '/labo/qclib/inspidas/common/bond'
CMSP  INCLUDE(TABLE1)                                                   
      INCLUDE '/labo/qclib/inspidas/common/table1'
CMSP  INCLUDE (PRIMRY)                                                  
      INCLUDE '/labo/qclib/inspidas/common/primry'
C     COMMON/TOR2/  LAMIN,KAMIN,LCARB,KCARB,NUMVAR                      
      COMMON/TOR2/  LAMIN,KAMIN,LCARB,KCARB                             
C     COMMON/RUNS/  INTER(3,MAXLEN)                                     
      COMMON/NEWOLD/ NMUNIT(MAXATM),NUMNEW(MAXATM)                      
C     COMMON/DIHED/ INDEX(2,MAXVAR),NEDGE(2,MAXVAR),IFRONT(MAXVAR),     
C    &   IBCHAR(3,MAXVAR),IUATM(0:MAXVAR),                              
C    &   NBACK(0:MAXVAR),IBACK(2,0:MAXVAR),                             
C    &   NEWK(MAXVAR)                                                   
      COMMON/DIHED/ INDEX(2,MAXVAR),IUATM(0:MAXVAR),NEWK(MAXVAR)        
C     COMMON/GEN100/ INUMRS,LIST(MAXRES),NPRE(MXRS1)                    
      COMMON/GEN100/ NPRE(MXRS1)                                        
C     COMMON/PREPAR/ LNUM,JMLAST,KMLAST,LNUMS,LEN,NUMATM                
      COMMON/PREPAR/ LNUM,JMLAST,KMLAST,LNUMS,LEN                       
      DIMENSION  NPAIR(0:MAXVAR)                                        
      DATA  NPAIR /0,MAXVAR*0/                                          
      MA = 1                                                            
      DO  100  L = 1, LEN                                               
C       IATMI = MA + INTER(1,L)                                         
        IATMI = MA + INTATM(1,L)                                        
C       NUM4 = INTER(2,L)                                               
        NUM4 = INTATM(2,L)                                              
        IATMF = IATMI + NUM4 - 1                                        
        MAUNIT = NMUNIT(MA)                                             
        IF (NUM4.EQ.0)  GOTO  20                                        
C                                                                       
C  1-4 INTERACTION                                                      
C                                                                       
        DO  10  MB = IATMI, IATMF                                       
        MBUNIT = NMUNIT(MB)                                             
        KAB = MDIST (MAUNIT,MBUNIT,NUMVAR,IBCHAR,NBACK,IBACK)           
        NPAIR(KAB) = NPAIR(KAB) + 1                                     
  10    CONTINUE                                                        
C                                                                       
C 20    KEY = INTER(3,L)                                                
  20    KEY = INTATM(3,L)                                               
        IF (KEY.EQ.0)  GOTO  40                                         
        IATMI = IATMF + 1                                               
        IATMF = NUMATM                                                  
        IF (KEY.GT.0)  IATMF = IATMI + KEY - 1                          
C                                                                       
C  1-5 INTERACTION                                                      
C                                                                       
        DO  30  MB = IATMI, IATMF                                       
        MBUNIT = NMUNIT(MB)                                             
        KAB = MDIST (MAUNIT,MBUNIT,NUMVAR,IBCHAR,NBACK,IBACK)           
        NPAIR(KAB) = NPAIR(KAB) + 1                                     
  30    CONTINUE                                                        
C                                                                       
  40    IF (NUM4.EQ.0.AND.KEY.EQ.0)  MA = MA + 1                        
        IF (KEY.LT.0)  MA = MA + 1                                      
  100 CONTINUE                                                          
C                                                                       
C     WRITE(6,500)                                                      
      IS = 0                                                            
      MAXP = 0                                                          
      JABF = 10                                                         
      WRITE(6,510)                                                      
      DO  200  KAB = 0, KMAX                                            
        NP = NPAIR(KAB)                                                 
        IS = IS + NP                                                    
        MAXP = MAX (MAXP, NP)                                           
        IF (KAB.LE.JABF)  WRITE(6,511)  NP,KAB,IS,KAB                   
C       IF (KAB.EQ.2)  MAXPER=IS     CKM  THIS MAXPER IS LOCAL.  CKM    
        IF (KAB.EQ.2)  MXPER=IS                                         
  200 CONTINUE                                                          
      WRITE(6,515)  MAXP                                                
      WRITE(6,517)                                                      
      WRITE(6,520)  IS                                                  
C     WRITE(6,530)  MAXPER                                              
      WRITE(6,530)  MXPER                                               
C 500 FORMAT('0',5X,'THE FOLLOWING DATA WILL BE HELPFUL WHEN YOU DETERMI
C    &NE THE SIZE'/' ',5X,'OF THE ARRAYS IPAIR AND JPAIR AND THE VALUES 
C    &OF THE PARAMETER MAXPER.')                                        
  510 FORMAT('0',5X,'THE NUMBER OF INTERACTABLE ATOM PAIRS IN THE UNIT',
     &    ' PAIRS OF THE SMALL DISTANCES'/ )                            
  511 FORMAT(' ',10X,'# PAIRS=',I8,'(KAB=',I2,')',5X,                   
     &               '# PAIRS=',I8,'(KAB=0 TO ',I2,')')                 
  515 FORMAT('0',15X,'MAXPER=',I5)                                      
  517 FORMAT('0',5X,'MAXINT    IS USED WITH DIFFERENT MEANINGS IN THE FE
     &DER PROGRAMS'/ ' ',5X,'WITH AND WITHOUT CUTOFF AND DIPOLE APPROXIM
     &ATION'/'0',5X,'FOR FEDER WITH CUTOFF AND DIPOLE APPROXIMATION')   
  520 FORMAT('0',9X,'TOTAL NUMBER OF INTERACTABLE ATOM PAIRS:',I8/      
     &       '0',15X,'MAXINT=(AROUND 30% OF THIS NUMBER)'/              
     &       '0',9X,'SINCE IT DEPENDS ON THE CONFORMATION, YOU CAN CHECK
     & IT ONLY AFTER YOU'/' ',9X,'RUN THE FEDER WITH CUTOFF AND DIPOLE A
     &PPROXIMATION, IN WHICH   NINT  TELLS US THIS NUMER')              
  530 FORMAT('0',5X,'FOR FEDER WITHOUT CUTOFF AND DIPOLE APPROXIMATION'/
     &       '0',9X,'MAX OF THE NUMBER OF INTERACTABLE ATOM PAIRS IN THE
     & GROUPS OF UNIT PAIRS'/' ',9X,                                    
     & 'WITH THE SAME VALUE OF DISTANCE :'/'0',15X,'MAXINT=',I8)        
      RETURN                                                            
C     DEBUG SUBCHK                                                      
      END                                                               
      FUNCTION  MDIST (IA,IB,NUMVAR,IBCHAR,NBACK,IBACK)                 
      IMPLICIT REAL*8(A-H,O-Z)                                          
      DIMENSION  IBCHAR(3,NUMVAR),NBACK(0:NUMVAR),IBACK(2,0:NUMVAR)     
      MDIST = NUMVAR                                                    
      JA = MAX (IA,IB)                                                  
      JB = MIN (IA,IB)                                                  
      IF (JB.EQ.0)  GOTO  10                                            
      MDIST = KDISTP (JA,JB,NUMVAR,IBCHAR)                              
      IF (NBACK(JB).EQ.0)  RETURN                                       
  10  DO  20  I = 1, NBACK(JB)                                          
        MD = KDISTP (JA,IBACK(I,JB),NUMVAR,IBCHAR)                      
        MDIST = MIN (MDIST,MD)                                          
  20  CONTINUE                                                          
      RETURN                                                            
      END                                                               
C                                                                       
      SUBROUTINE  RUN1 (LEN)                                            
      IMPLICIT REAL*8(A-H,O-Z)                                          
C                                                                       
C THIS SUBROUTINE PUNCHOUTS THE DATA FOR THE FAST ECEPP                 
C                                                                       
CMSP  INCLUDE (MAXSIZE)                                                 
      INCLUDE '/labo/qclib/inspidas/common/maxsize'
CMSP  INCLUDE (SIZE)                                                    
      INCLUDE '/labo/qclib/inspidas/common/size'
CMSP  INCLUDE (TORSNP)                                                  
      INCLUDE '/labo/qclib/inspidas/common/torsnp'
CMSP  INCLUDE (TORSN0)                                                  
      INCLUDE '/labo/qclib/inspidas/common/torsn0'
CMSP  INCLUDE (VARANG)                                                  
      INCLUDE '/labo/qclib/inspidas/common/varang'
CMSP  INCLUDE (REFRNC)                                                  
      INCLUDE '/labo/qclib/inspidas/common/refrnc'
CMSP  INCLUDE (ATOM)                                                    
      INCLUDE '/labo/qclib/inspidas/common/atom'
CMSP  INCLUDE (ALPHA)                                                   
      INCLUDE '/labo/qclib/inspidas/common/alpha'
CMSP  INCLUDE (CHARGE)                                                  
      INCLUDE '/labo/qclib/inspidas/common/charge'
CMSP  INCLUDE (COORD)                                                   
      INCLUDE '/labo/qclib/inspidas/common/coord'
CMSP  INCLUDE (NBTYPE)                                                  
      INCLUDE '/labo/qclib/inspidas/common/nbtype'
CMSP  INCLUDE (INTER0)                                                  
      INCLUDE '/labo/qclib/inspidas/common/inter0'
CMSP  INCLUDE (BOND)                                                    
      INCLUDE '/labo/qclib/inspidas/common/bond'
CMSP  INCLUDE (TABLE1)                                                  
      INCLUDE '/labo/qclib/inspidas/common/table1'
CMSP  INCLUDE (UNITNUMS)                                                
      INCLUDE '/labo/qclib/inspidas/common/unitnums'
CMSP  INCLUDE (SSPAIR)                                                  
      INCLUDE '/labo/qclib/inspidas/common/sspair'
CMSP  INCLUDE (PRIMRY)                                                  
      INCLUDE '/labo/qclib/inspidas/common/primry'
CKM DEBUG                                                               
      COMMON/BONDS/UTOR(10,MAXRES),NDXARR(10,MAXRES),                   
     &             NV(MAXRES)                                           
CKM DEBUG                                                               
C     COMMON/CYS001/ KCYS,NCYS,NPAIR(MAXSS,2)                           
      COMMON/CYS001/ KCYS                                               
C     COMMON/IOUNIT/ JREAD                                              
C     COMMON/TORQUE/ A(MAXVAR),NB(MAXVAR),NS(MAXVAR),IFTORP(MAXVAR),    
C    &               INDXPV(MAXVAR)                                     
      COMMON/TORQUE/ INDXPV(MAXVAR)                                     
C     COMMON/TOR2/  LAMIN,KAMIN,LCARB,KCARB,NUMVAR                      
      COMMON/TOR2/  LAMIN,KAMIN,LCARB,KCARB                             
C     COMMON/RUNS/  INTER(3,MAXLEN)                                     
      COMMON/UNITS/  NPREU(0:MAXVAR)                                    
      COMMON/NEWOLD/ NMUNIT(MAXATM),NUMNEW(MAXATM)                      
C     COMMON/DIHED/ INDEX(2,MAXVAR),NEDGE(2,MAXVAR),IFRONT(MAXVAR),     
C    &   IBCHAR(3,MAXVAR),IUATM(0:MAXVAR),                              
C    &   NBACK(0:MAXVAR),IBACK(2,0:MAXVAR),                             
C    &   NEWK(MAXVAR)                                                   
      COMMON/DIHED/ INDEX(2,MAXVAR),IUATM(0:MAXVAR),NEWK(MAXVAR)        
      COMMON/DIPOL/ NUMDPL,NLDPL,NDPATM,KUNDPL(MAXDP),CHRGDP(MAXDP2),   
     &   LSTDPL(MAXDP),LSTAMB(MAXDPL),JATDPL(MAXDBL),CHRGAM(MAXDBL),    
     &   JCLDPL(MAXDBL)                                                 
C     COMMON/GEN100/ INUMRS,LIST(MAXRES),NPRE(MXRS1)                    
      COMMON/GEN100/ NPRE(MXRS1)                                        
C     DIMENSION INTERR(MAXATM)                                          
      CHARACTER*4  AANAME(36) /'ALA','ASP','CYS','GLU','PHE','GLY',     
     &  'HIS','ILE','LYS','LEU','MET','ASN','PRO','GLN','ARG','SER',    
     &  'THR','VAL','TRP','TYR','CYS','HPR','NLE','ORN','ORN+','HIS2',  
     &  'HIS+','LYS+','ARG+','ASB','ASP-','GLU-',                       
     &  'PROU','PROF','HPRU','HPRF'/                                    
C     CHARACTER  TITLE*80                                               
C     CHARACTER*4 ALPH                                                  
      DATA  RCUT /7.D0/, IZERO /0/                                      
C                                                                       
C MAKE THE LIST  INTERR                                                 
C                                                                       
      DO  5  J = 1, 3                                                   
C  5  INTER(J,LEN) = 0                                                  
   5  INTATM(J,LEN) = 0                                                 
C     NATM = NPRE(INUMRS+1)                                             
CC*******                                                               
      NUMATM = NPRE(NUMRES+1)                                           
CC*******                                                               
C     INTERR(1) = 1                                                     
      INTER(1) = 1                                                      
      IXI = 2                                                           
      DO  10  I = 1, LEN                                                
C       INTER2 = INTER(2,I)                                             
C       INTER3 = INTER(3,I)                                             
        INTER2 = INTATM(2,I)                                            
        INTER3 = INTATM(3,I)                                            
        IF (INTER3.LT.0.OR.(INTER2.EQ.0.AND.INTER3.EQ.0))  THEN         
C         INTERR(IXI) = I + 1                                           
          INTER(IXI) = I + 1                                            
          IXI = IXI + 1                                                 
        ENDIF                                                           
  10  CONTINUE                                                          
      IF (IXI.GT.NUMATM) GOTO  22                                       
        DO  20  I = IXI, NUMATM                                         
C 20    INTERR(I) = INTERR(I-1) + 1                                     
  20    INTER(I) = INTER(I-1) + 1                                       
C 22  IALL = INTERR(NATM)                                               
  22  NUMINT = INTER(NUMATM)                                            
      IF (LEN.GE.NUMINT)  GOTO  32                                      
        DO  30  I = LEN+1, NUMINT                                       
        DO  30  J = 1, 3                                                
C 30    INTER(J,I) = 0                                                  
  30    INTATM(J,I) = 0                                                 
C                                                                       
C OUTPUT                                                                
C                                                                       
 32     CONTINUE                                                        
CC    WRITE(IOUT22,100)  TITLE                                          
C     WRITE(IOUT22,110)  NATM,NUMVAR,INUMRS,IALL,NCYS                   
CC    WRITE(IOUT22,110)  NATM,NUMVAR,NUMRES,IALL,NSS                    
      CALL  RUN2                                                        
C     WRITE(IOUT22,130)  IUATM(0),NBACK(0),(IBACK(J,0),J=1,2),IZERO     
C     NNUNIT = NPREU(INUMRS)                                            
      NNUNIT = NPREU(NUMRES)                                            
      DO  40  I = 1, NNUNIT-1                                           
      K = NEWK(I)                                                       
      A(I)=AP(K)                                                        
      NB(I)=NBP(K)                                                      
      NS(I)=NSP(K)                                                      
      IFTOR(I)=IFTORP(K)                                                
      INDXV(I)=INDEX(1,I)*100+INDEX(2,I)                                
C     WRITE(IOUT22,140)  (INDEX(J,I),J=1,2),(NEDGE(J,I),J=1,2),IFRONT(I)
C    &    ,(IBCHAR(J,I),J=1,3),A(K),NB(K),NS(K),IFTORP(K),              
C    &    IUATM(I),NBACK(I),(IBACK(J,I),J=1,2),I                        
CC    WRITE(IOUT22,140)  (INDEX(J,I),J=1,2),IBND1(I),IBND2(I),IFRONT(I) 
CC   &    ,(IBCHAR(J,I),J=1,3),A(K),NB(K),NS(K),IFTORP(K),              
CC   &    IUATM(I),NBACK(I),(IBACK(J,I),J=1,2),I                        
 40   CONTINUE                                                          
      DO 35 I=1,NUMVAR                                                  
        J=INDXV(I)/100                                                  
        K=INDXV(I)-100*J                                                
        REFANG(I) = ANGRAD(K,J)                                         
 35   CONTINUE                                                          
      K = 1                                                             
      DO  50  I = 1, NPRE(2)                                            
CC    WRITE(IOUT22,150)  (REFCRD(J,I),J=1,3),CHARGE(I),NBTYPE(I),       
CC   &     NMUNIT(I),NUMNEW(I),I,ATNAME(I),AANAME(LIST(2)),K            
      KUNIT(I)=NMUNIT(I)                                                
      KATOM(I)=NUMNEW(I)                                                
      JATOM(KATOM(I))=I                                                 
      RENAME(I)=AANAME(LIST(2))                                         
      NMBRES(I)=K                                                       
 50   CONTINUE                                                          
C     DO  52  K = 2, INUMRS-1                                           
      DO  52  K = 2, NUMRES-1                                           
      DO  52  I = NPRE(K)+1, NPRE(K+1)                                  
CC    WRITE(IOUT22,150)  (REFCRD(J,I),J=1,3),CHARGE(I),NBTYPE(I),       
CC   &     NMUNIT(I),NUMNEW(I),I,ATNAME(I),AANAME(LIST(K)),K-1          
      KUNIT(I)=NMUNIT(I)                                                
      KATOM(I)=NUMNEW(I)                                                
      JATOM(KATOM(I))=I                                                 
      RENAME(I)=AANAME(LIST(K))                                         
      NMBRES(I)=K-1                                                     
 52   CONTINUE                                                          
C     K = INUMRS-1                                                      
      K = NUMRES-1                                                      
C     DO  54  I = NPRE(INUMRS)+1, NPRE(INUMRS+1)                        
      DO  54  I = NPRE(NUMRES)+1, NPRE(NUMRES+1)                        
CC    WRITE(IOUT22,150)  (REFCRD(J,I),J=1,3),CHARGE(I),NBTYPE(I),       
CC   &     NMUNIT(I),NUMNEW(I),I,ATNAME(I),AANAME(LIST(K)),K-1          
      KUNIT(I)=NMUNIT(I)                                                
      KATOM(I)=NUMNEW(I)                                                
      JATOM(KATOM(I))=I                                                 
      RENAME(I)=AANAME(LIST(K))                                         
      NMBRES(I)=K-1                                                     
 54   CONTINUE                                                          
C     WRITE(IOUT22,110)  (INTERR(I),I=1,NATM)                           
CC    WRITE(IOUT22,110)  (INTER(I),I=1,NATM)                            
C     WRITE(IOUT22,170)  ((INTER(J,I),J=1,3),I=1,IALL)                  
CC    WRITE(IOUT22,170)  ((INTATM(J,I),J=1,3),I=1,IALL)                 
C                                                                       
C DISULFIDE BONDS                                                       
C                                                                       
C     IF (NCYS.EQ.0)  GOTO  2                                           
      IF (NSS.EQ.0)   GOTO  2                                           
C     DO  60  I = 1, NCYS                                               
      DO  60  I = 1, NSS                                                
      KSSPER(1,1,I) = NPRE(NPAIR(I,1)) + 3                              
      KSSPER(2,1,I) = NPRE(NPAIR(I,1)) + 5                              
      KSSPER(3,1,I) = NPRE(NPAIR(I,1)) + 10                             
      KSSPER(4,1,I) = NPRE(NPAIR(I,2)) + 3                              
      KSSPER(5,1,I) = NPRE(NPAIR(I,2)) + 5                              
      KSSPER(6,1,I) = NPRE(NPAIR(I,2)) + 10                             
CC    WRITE(IOUT22,110)  (KSSPER(J,1,I),J=1,6)                          
  60  CONTINUE                                                          
C                                                                       
C DATA FOR THE DIPOLE CLUSTERS                                          
C                                                                       
   2  CONTINUE                                                          
CC    WRITE(IOUT22,200)                                                 
CC    WRITE(IOUT22,110)  NUMDPL,NLDPL,NDPATM                            
C     K = 0                                                             
C     DO  70  I = 1, NUMDPL                                             
C     WRITE(IOUT22,210)  KUNDPL(I),CHRGDP(K+1),CHRGDP(K+2),LSTDPL(I)    
  70  K = K+2                                                           
CC    WRITE(IOUT22,110)  (LSTAMB(I),I=1,NLDPL)                          
CC    DO  80  I = 1, NDPATM                                             
CC80  WRITE(IOUT22,220)  JATDPL(I),CHRGAM(I),JCLDPL(I)                  
CC    WRITE(IOUT22,120)  RCUT                                           
      RETURN                                                            
C                                                                       
C PUNCHING FORMATS                                                      
C                                                                       
  100 FORMAT(A80)                                                       
  110 FORMAT(16I5)                                                      
  120 FORMAT(10F8.3)                                                    
  130 FORMAT(53X,2I5,I4,I3,4X,I3)                                       
  140 FORMAT(I4,I2,2X,2I5,2X,2I5,2I2,F10.4,3I3,I5,I5,I5,I5,1X,I5)       
  150 FORMAT(3F10.4,4X,F10.3,4I5,2X,A4,1X,A4,I5)                        
  170 FORMAT(5(1X,3I5))                                                 
  200 FORMAT('CUTOFF')                                                  
  210 FORMAT(I5,2F10.4,I10)                                             
  220 FORMAT(I10,F10.4,I5)                                              
      END                                                               
      SUBROUTINE RUN2                                                   
      IMPLICIT REAL*8(A-H,O-Z)                                          
C                                                                       
CMSP  INCLUDE (MAXSIZE)                                                 
      INCLUDE '/labo/qclib/inspidas/common/maxsize'
CMSP  INCLUDE(SIZE)                                                     
      INCLUDE '/labo/qclib/inspidas/common/size'
CMSP  INCLUDE (VARANG)                                                  
      INCLUDE '/labo/qclib/inspidas/common/varang'
CMSP  INCLUDE (ALPHA)                                                   
      INCLUDE '/labo/qclib/inspidas/common/alpha'
CMSP  INCLUDE (CHARGE)                                                  
      INCLUDE '/labo/qclib/inspidas/common/charge'
CMSP  INCLUDE (COORD)                                                   
      INCLUDE '/labo/qclib/inspidas/common/coord'
CMSP  INCLUDE (NBTYPE)                                                  
      INCLUDE '/labo/qclib/inspidas/common/nbtype'
CMSP  INCLUDE (REFRNC)                                                  
      INCLUDE '/labo/qclib/inspidas/common/refrnc'
CMSP  INCLUDE (UNITNUMS)                                                
      INCLUDE '/labo/qclib/inspidas/common/unitnums'
CMSP  INCLUDE (PRIMRY)                                                  
      INCLUDE '/labo/qclib/inspidas/common/primry'
      COMMON/BONDS/UTOR(10,MAXRES),NDXARR(10,MAXRES),                   
     &             NV(MAXRES)                                           
      COMMON/CHECK/KNDRES(36),KNDEND(20)                                
C     COMMON/GEN100/INUMRS,LIST(MAXRES),NPRE(MXRS1)                     
      COMMON/GEN100/NPRE(MXRS1)                                         
      COMMON/GEN000/CHG(26,36),ALPHA(26,36),TITLE2(4,56),LTYPE(26,36)   
      COMMON/GEN002/CHIANG(3,7,36),NATOMS(36),NCHI(36), NDPT1(7,36),    
     1    NDPT2(7,36),NUM(7,36)                                         
      COMMON/GEN004/ENOORD(3,22,20),ECHG(22,20),EALPHA(22,20),          
     1   NDATOM(20),NBOND(20),NNDPT1(6,20),NNDPT2(6,20),NDTYPE(22,20)   
C     COMMON/IOUNIT/JREAD                                               
      COMMON/PRAM/NREG,NEND,LR(6,20),LRT1(7,36)                         
      COMMON/PUT14/NSN14(26,36),NFN14(26,36),MSX14(22,20),MFX14(22,20), 
     1   MSN14(22,20),MFN14(22,20)                                      
      COMMON/PUT15/NSN15(26,36),MSN15(22,20),MSX15(22,20)               
C     CHARACTER*4 ALPH,EALPHA,ALPHA                                     
      CHARACTER*4 EALPHA,ALPHA                                          
CC    DIMENSION A(10)                                                   
C     DO 210 I=1,INUMRS                                                 
      DO 210 I=1,NUMRES                                                 
      LISTI=LIST(I)                                                     
      LISTI = IABS(LISTI)                                               
C     IF (I.EQ.1.OR.I.EQ.INUMRS) GO TO 120                              
      IF (I.EQ.1.OR.I.EQ.NUMRES) GO TO 120                              
      NS=NCHI(LISTI) + 3                                                
  120 K = NPRE(I)+1                                                     
C     IF (I .NE. 1 .AND. I .NE. INUMRS) GO TO 140                       
      IF (I .NE. 1 .AND. I .NE. NUMRES) GO TO 140                       
      NS = NBOND(LISTI)                                                 
C     IF(I.EQ.INUMRS) NS=NS-1                                           
      IF(I.EQ.NUMRES) NS=NS-1                                           
  140 IF(NS.LE.0) GO TO 190                                             
      DO 150 J = 1,NS                                                   
      ANGLES(J,I) = ANGRAD(J,I) * 57.29578                              
      IF (ANGLES(J,I).GT.180.0) ANGLES(J,I) = ANGLES(J,I) - 360.0       
      IF (ANGLES(J,I).LT.(-180.0)) ANGLES(J,I) = ANGLES(J,I) + 360.0    
  150 CONTINUE                                                          
      GO TO 210                                                         
  190 CONTINUE                                                          
  210 CONTINUE                                                          
      RETURN                                                            
C                                                                       
 310  FORMAT(//1X,46HNO.IN LIST  RESIDUE NAME       DIHEDRAL ANGLES/    
     1 1X,10HCHAIN  NO.,16X,10I9)                                       
  320 FORMAT(1X,I5,1X,I3,3X,4A4,1X,10(1X,F8.3))                         
  330 FORMAT(1X,I5,1X,I3,1X,2HD-,4A4,1X,10(1X,F8.3))                    
  340 FORMAT(10F8.3)                                                    
  350 FORMAT(//12X,18HATOMIC COORDINATES,24X,6HCHARGE/11X,1HX,9X,       
     1   1HY,9X,1HZ,7X,4HATOM,4X,4HTYPE,2X,8H(E.C.U.),3X,8HATOM NO.)    
  360 FORMAT(5X,3F10.4,5X,A4,4X,I2,F10.3,5X,I5)                         
  370 FORMAT (/1X,I5,1X,4A4/)                                           
  380 FORMAT (/1X,I5,1X,2HD-,4A4/)                                      
  390 FORMAT (1H )                                                      
C                                                                       
      END                                                               
./ ADD NAME=PREIN
./ NUMBER NEW1=10,INCR=10
C                                                                       
C  *** PRECEP INPUT DATA CREATION PROGRAM ***                           
C      THIS PROGRAM CREATES PRECEP INPUT DATA                           
C                                                                       
C                                                                       
C      *** INPUT FILE ***                                               
C          11    COORDINATE FILE ( ABE FORMAT )                         
C          13    DIHEDRAL ANGLE FILE ( ECEPP FORMAT )                   
C      *** OUTPUT FILE ***                                              
C          12    PRECEP INPUT FILE                                      
C                                                                       
      SUBROUTINE PREIN                                                  
C                                                                       
C     *** DECLARE ***                                                   
C                                                                       
      IMPLICIT REAL*8 (A-H,O-Z)                                         
C                                                                       
CMSP  INCLUDE (COMMAND)                                                 
      INCLUDE '/labo/qclib/inspidas/common/command'
CMSP  INCLUDE (MAXSIZE)                                                 
      INCLUDE '/labo/qclib/inspidas/common/maxsize'
CMSP  INCLUDE (UNITNUMS)                                                
      INCLUDE '/labo/qclib/inspidas/common/unitnums'
CMSP  INCLUDE (ALPHA)                                                   
      INCLUDE '/labo/qclib/inspidas/common/alpha'
CMSP  INCLUDE (SIZE)                                                    
      INCLUDE '/labo/qclib/inspidas/common/size'
CMSP  INCLUDE (CNTL)                                                    
      INCLUDE '/labo/qclib/inspidas/common/cntl'
CMSP  INCLUDE (PRIMRY)                                                  
      INCLUDE '/labo/qclib/inspidas/common/primry'
CMSP  INCLUDE (SSPAIR)                                                  
      INCLUDE '/labo/qclib/inspidas/common/sspair'
CMSP  INCLUDE (VARANG)                                                  
      INCLUDE '/labo/qclib/inspidas/common/varang'
C                                                                       
      CHARACTER*60 NAME                                                 
      CHARACTER*11 FORMA                                                
      CHARACTER*4  SUBTAS,NXTWD                                         
      CHARACTER*4  DAOP                                                 
      CHARACTER*1  ENDOP                                                
C                                                                       
      INTEGER NURESV,NENDN,CENDN                                        
      INTEGER RESNU(MAXRES),NUDA(MAXRES),DANU(MAXRES,10)                
C                                                                       
C     *** VARIABLE LIST ***                                             
C     MAXRES = MAX NUMBER OF RESIDUES                                   
C     MAXSS = MAX NUMBER OF S-S                                         
C     NURES = NUMBER OF RESIDUES ( NUMER OF AMINO ACIDS + 2 )           
C     NUSS = NUMBER OF S-S                                              
C     PROP = PRINT OPTION ; 0 : PART OUTPUT  1 : ALL OUTPUT             
C]]]]]]]] PROP CHANGED TO IPRNT BY A. KITAO FEB 16, 1990]]]]]]]]]]]]]]]]
C     DAOP = DIHEDRAL ANGLES OPTION ;  'ALL ','BACK','SIDE','SPEC'      
C            'ALL ' ; ALL DIHEDRAL ANGLES ARE TO BE VARIED              
C            'BACK' ; ALL BACKBONE DIHEDRAL ANGLES AND ALL END GROUP    
C                     DIHEDRAL ANGLES ARE TO BE VARIED                  
C            'SIDE' ; ALL SIDE-CHAIN DIHEDRAL ANGLES ARE TO BE VARIED   
C            'SPEC' ; ONLY THOSE DIHEDRAL ANGLES SPECIFIED EXPLICITLY   
C                     BY SUBSEQUENT DATA ARE TO BE VARIED               
C     ENDOP = END GROUP OPTION ;  'Y ' OR 'N'                           
C     NURESV = NUMBER OF RESIDUES WHICH HAVE VARIABL DIHEDRAL ANGLES    
C     NENDN = N-END GROUP NUMBER WHICN USER SPECIFY                     
C     CENDN = C-END GROUP NUMBER WHICN USER SPECIFY                     
C     LIST(I) = RESIDUE SEQUENCE BY NUMBER                              
C     RESNU(I) = RESIDUE NUMBER WHICH HAS VARIABLE DIHEDRAL ANGLES      
C     NUDA(I) = NUMBER OF VARIABLE DIHEDRAL ANGLES OF RESIDUE I         
C     DANU(I,J) = DIHEDRAL ANGLE NUMBER OF RESIDUE I                    
C     CYSPAIR(I,J) = CYS(S-S) RESIDUE NUMBER                            
C                                                                       
C    IPRNT IS FIXED TO 0                                                
C    DAOP IS FIXED TO 'ALL '                                            
      IPRNT = 0                                                         
      DAOP = 'ALL '                                                     
C                                                                       
C     *** GET SUBTASK                                                   
C                                                                       
  999 CONTINUE                                                          
      CALL NXTCMN(SUBTAS)                                               
      WRITE(IOUT02,10) SUBTAS                                           
   10 FORMAT(/5X,' NEXT SUBTASK * ', A4,/)                              
C                                                                       
C      *** SUBTASK QUIT                                                 
C                                                                       
      IF(SUBTAS .EQ. 'QUIT') GOTO 629                                   
C                                                                       
C      *** SUBTASK BUILD                                                
C                                                                       
      IF(SUBTAS .EQ. 'BUIL') THEN                                       
          CALL NXTWRD(COMLY2, COMLEN, NXTWD, 4)                         
          IF(NXTWD .EQ. 'PRIM') THEN                                    
C         *** READ PRIMARY STRUCTURE                                    
              CALL PRIM(NUMRES)                                         
          ELSEIF(NXTWD .EQ. 'CROS') THEN                                
C         *** READ CROSSLINK                                            
              CALL CROSS(NSS,NPAIR)                                     
          ELSEIF(NXTWD .EQ. 'READ') THEN                                
C         *** READ RESIDUE SEQUENCE DATA                                
              CALL GTFLNM(NAME)                                         
              FORMA = 'FORMATTED'                                       
              CALL OPENRD(IN11,FORMA,NAME,IOUT06)                       
              WRITE(IOUT02,20) NXTWD,NAME                               
   20         FORMAT(5X,A4,' : READ FROM ',A60)                         
              CALL RDABE(NUMRES,NSS,NPAIR)                              
              CLOSE(IN11)                                               
          ELSEIF(NXTWD .EQ. 'END ') THEN                                
C         *** SPECIFY END-GROUP                                         
C           IF YOU DON'T SPECIFY END GROUP , N-END GROUP IS 'H2N'       
C           AND C-END GROUP IS 'COOH' .                                 
              ENDOP =  'Y'                                              
C             *** GET N-END NUMBER                                      
              CALL GETPAI(COMLY2, COMLEN, 'NEND',4, ' ', 0, NENDN)      
C             *** GET C-END NUMBER                                      
              CALL GETPAI(COMLY2, COMLEN, 'CEND',4, ' ', 0, CENDN)      
              WRITE(IOUT02,40)                                          
              WRITE(IOUT02,50)                                          
              WRITE(IOUT02,60) NENDN,CENDN                              
              WRITE(IOUT06,40)                                          
              WRITE(IOUT06,50)                                          
              WRITE(IOUT06,60) NENDN,CENDN                              
   40         FORMAT(6X,'*** END GROUP ***    ')                        
   50         FORMAT(5X,'   DEFAULT     N-END   1  C-END  11')          
   60         FORMAT(5X,'   CHANGED TO  N-END  ',I2,'  C-END  ',I2)     
              LIST(1)=NENDN                                             
              LIST(NUMRES)=CENDN                                        
          ENDIF                                                         
       ENDIF                                                            
C                                                                       
C      *** SUBTASK READ                                                 
C                                                                       
      IF(SUBTAS .EQ. 'READ') THEN                                       
          CALL NXTWRD(COMLY2, COMLEN, NXTWD, 4)                         
          IF(NXTWD .EQ. 'ANGL') THEN                                    
C     *** READ DIHEDRAL ANGLE DATA                                      
              CALL GTFLNM(NAME)                                         
              FORMA = 'FORMATTED'                                       
              CALL OPENRD(IN13,FORMA,NAME,IOUT06)                       
              WRITE(IOUT02,20) NXTWD,NAME                               
              CALL RDANGL(IN13)                                         
              CLOSE(IN13)                                               
           ENDIF                                                        
      ENDIF                                                             
C                                                                       
C      *** SUBTASK WRITE                                                
C                                                                       
      IF(SUBTAS .EQ. 'WRIT') THEN                                       
          CALL NXTWRD(COMLY2, COMLEN, NXTWD, 4)                         
          IF(NXTWD .EQ. 'ANGL') THEN                                    
C         *** WRITE ANGLE DATA (ECEPP FORMAT)                           
              CALL GTFLNM(NAME)                                         
              FORMA = 'FORMATTED'                                       
              CALL OPENWT(IOUT14,FORMA,NAME,IOUT06)                     
              WRITE(IOUT02,30) NXTWD,NAME                               
              CALL WTANGL(IOUT14)                                       
              CLOSE(IOUT14)                                             
          ELSEIF(NXTWD .EQ. 'ABE ') THEN                                
C         *** WRITE SEQUENCE DATA (ABE FORMAT)                          
              WRITE(IOUT02,*) '     NOT SUPPORTEDIN THIS VERSION]]'     
          ELSEIF(NXTWD .EQ. 'PREI') THEN                                
C         *** WRITE INPUT DATA FORT PRECEP                              
              CALL GTFLNM(NAME)                                         
              FORMA = 'FORMATTED'                                       
              CALL OPENWT(IOUT12,FORMA,NAME,IOUT06)                     
              WRITE(IOUT02,30) NXTWD,NAME                               
   30         FORMAT(5X,A4,' : WRITE TO  ',A60)                         
              CALL WTPRIN(NUMRES,IPRNT,NSS,NPAIR,DAOP,                  
     1                  NURESV,RESNU,NUDA,DANU)                         
              CLOSE(IOUT12)                                             
          ENDIF                                                         
       ENDIF                                                            
C                                                                       
C      *** RETURN TO THE TOP OF THE LOOP                                
C                                                                       
       GOTO 999                                                         
C                                                                       
  629 RETURN                                                            
      END                                                               
C                                                                       
C     THIS SUBROUTINE READS TITLE NURES,NUSS,CYSPAIR(I,J),AA(I)         
C     FROM C.DATA FILE AND CONVERT AA(I)(4 CHARACTER RESIDUE SEQUENCE)  
C     TO LIST(I)(NUMBER RESIDUE SEQUENCE)                               
C                                                                       
      SUBROUTINE RDABE(NURES,NUSS,SSPAIR)                               
C                                                                       
C     *** DECLARE ***                                                   
C                                                                       
      IMPLICIT REAL*8 (A-H,O-Z)                                         
C                                                                       
CMSP  INCLUDE (MAXSIZE)                                                 
      INCLUDE '/labo/qclib/inspidas/common/maxsize'
CMSP  INCLUDE (ALPHA)                                                   
      INCLUDE '/labo/qclib/inspidas/common/alpha'
CMSP  INCLUDE (COMMAND)                                                 
      INCLUDE '/labo/qclib/inspidas/common/command'
CMSP  INCLUDE (UNITNUMS)                                                
      INCLUDE '/labo/qclib/inspidas/common/unitnums'
CMSP  INCLUDE (PRIMRY)                                                  
      INCLUDE '/labo/qclib/inspidas/common/primry'
C                                                                       
      INTEGER NURES,NUSS,SSPAIR(MAXSS,2)                                
C                                                                       
      CHARACTER*4 AA(MAXRES)                                            
      CHARACTER*144 BAA                                                 
C                                                                       
C     *** VARIABLE LIST ***                                             
C     BAA = 36 AMINO ACIDS REPRESENTED BY 4 CHARACTERS                  
C                                                                       
      BAA='ALA ASP CYS GLU PHE GLY HIS ILE LYS LEU MET ASN ' //         
     1    'PRO GLN ARG SER THR VAL TRP TYR CYE HPR NLE ORN ' //         
     2    'ORN+HIS2HIS+LYS+ARG+ASB ASP-GLU-PROUPROFHPRUHPRF'            
C                                                                       
C     *** READ DATA FROM C.DATA FILE ***                                
C                                                                       
      READ(IN11,1000)TITLE                                              
 1000 FORMAT(A80)                                                       
      READ(IN11,1001)NURES,NUSS                                         
 1001 FORMAT(I5,10X,I5)                                                 
      IF(NURES.GT.MAXRES)GO TO 1                                        
      IF(NUSS.GT.MAXSS)GO TO 1                                          
      READ(IN11,1002)(AA(I),I=1,NURES)                                  
 1002 FORMAT(5X,10A4)                                                   
      IF(NUSS.NE.0)THEN                                                 
        READ(IN11,1003)((SSPAIR(I,J),J=1,2),I=1,NUSS)                   
 1003   FORMAT(20I4)                                                    
      ENDIF                                                             
C                                                                       
C        ** CONVERT AA(I) TO LIST(I) **                                 
C                                                                       
      DO 10 I=2,NURES-1                                                 
        J=INDEX(BAA,AA(I))                                              
        LIST(I)=(J+3)/4                                                 
   10 CONTINUE                                                          
C                                                                       
C        ** N-END GROUP IS 'H2N' (1)  **                                
C        ** C-END GROUP IS 'COOH'(11) **                                
C                                                                       
      LIST(1)=1                                                         
      LIST(NURES)=11                                                    
      RETURN                                                            
C                                                                       
    1 CONTINUE                                                          
      WRITE(IOUT02,600)                                                 
  600 FORMAT(' ','   NUMBER OVER')                                      
      WRITE(IOUT02,601)NURES,MAXRES,NUSS,MAXSS                          
  601 FORMAT(' ',' NUMBER OF RESIDUES',I5,'(MAX=',I5,') :'/             
     1           ' NUMBER OF S-S     ',I5,'(MAX=',I5,')')               
C                                                                       
      STOP                                                              
      END                                                               
C                                                                       
C     THIS SUBROUTINE READS NUSS,SSPAIR(I,J) FROM INPUT FILE            
C                                                                       
      SUBROUTINE CROSS(NUSS,SSPAIR)                                     
C                                                                       
C     *** DECLARE ***                                                   
C                                                                       
      IMPLICIT REAL*8 (A-H,O-Z)                                         
C                                                                       
CMSP  INCLUDE (COMMAND)                                                 
      INCLUDE '/labo/qclib/inspidas/common/command'
CMSP  INCLUDE (MAXSIZE)                                                 
      INCLUDE '/labo/qclib/inspidas/common/maxsize'
CMSP  INCLUDE (UNITNUMS)                                                
      INCLUDE '/labo/qclib/inspidas/common/unitnums'
CMSP  INCLUDE (PRIMRY)                                                  
      INCLUDE '/labo/qclib/inspidas/common/primry'
C                                                                       
      INTEGER NUSS,SSPAIR(MAXSS,2)                                      
C                                                                       
C     *** READ CROSS LINK DATA FROM INPUT FILE                          
C                                                                       
      DO 10 I=1,99999                                                   
         CALL GETPAI(COMLY2, COMLEN, 'CYS1',4, ' ', 0, SSPAIR(I,1))     
         CALL GETPAI(COMLY2, COMLEN, 'CYS2',4, ' ', 0, SSPAIR(I,2))     
         IF(SSPAIR(I,1) .EQ. 0 .OR. SSPAIR(I,2) .EQ. 0) GOTO 20         
         SSPAIR(I,1) = SSPAIR(I,1) + 1                                  
         SSPAIR(I,2) = SSPAIR(I,2) + 1                                  
   10 CONTINUE                                                          
C                                                                       
   20 NUSS = I - 1                                                      
C                                                                       
      WRITE(IOUT02,*)'     *** CROSS LINK ***'                          
      WRITE(IOUT06,*)'     *** CROSS LINK ***'                          
      DO 30 I=1,NUSS                                                    
      WRITE(IOUT02,*)'       CYS1 : ',SSPAIR(I,1),' CYS2 : ',SSPAIR(I,2)
      WRITE(IOUT06,*)'       CYS1 : ',SSPAIR(I,1),' CYS2 : ',SSPAIR(I,2)
   30 CONTINUE                                                          
C                                                                       
      RETURN                                                            
      END                                                               
C                                                                       
C     THIS SUBROUTINE READ AMID ACID SEQUENCE AND GENERATE LIST(I)      
C     WHICH ARE AMINO ACID NUMBER                                       
C                                                                       
      SUBROUTINE PRIM(NURES)                                            
C                                                                       
C     *** DECLARE ***                                                   
C                                                                       
      IMPLICIT REAL*8 (A-H,O-Z)                                         
C                                                                       
CMSP  INCLUDE (MAXSIZE)                                                 
      INCLUDE '/labo/qclib/inspidas/common/maxsize'
CMSP  INCLUDE (COMMAND)                                                 
      INCLUDE '/labo/qclib/inspidas/common/command'
CMSP  INCLUDE (UNITNUMS)                                                
      INCLUDE '/labo/qclib/inspidas/common/unitnums'
CMSP  INCLUDE (PRIMRY)                                                  
      INCLUDE '/labo/qclib/inspidas/common/primry'
C                                                                       
      INTEGER NURES                                                     
      CHARACTER*4 AA(MAXRES)                                            
      CHARACTER*4 RESNAM                                                
      CHARACTER*144 BAA                                                 
C                                                                       
C     *** VARIABLE LIST ***                                             
C     BAA = 36 AMINO ACIDS REPRESENTED BY 4 CHARACTERS                  
C                                                                       
      BAA='ALA ASP CYS GLU PHE GLY HIS ILE LYS LEU MET ASN ' //         
     1    'PRO GLN ARG SER THR VAL TRP TYR CYE HPR NLE ORN ' //         
     2    'ORN+HIS2HIS+LYS+ARG+ASB ASP-GLU-PROUPROFHPRUHPRF'            
C                                                                       
C     *** READ AMINO ACID SEQUENCE FORM INPUT DATA                      
C                                                                       
      DO 10 I=2,99999                                                   
         CALL NXTWRD(COMLY2, COMLEN, RESNAM, 4)                         
         IF(RESNAM .EQ. 'END ') THEN                                    
            GOTO 20                                                     
         ELSE                                                           
            AA(I) = RESNAM                                              
         ENDIF                                                          
   10 CONTINUE                                                          
C                                                                       
   20 NURES = I                                                         
C                                                                       
C     *** CONVERT AA(I) TO LIST(I) **                                   
C                                                                       
      DO 30 I=2,NURES-1                                                 
         J = INDEX(BAA,AA(I))                                           
         LIST(I) = (J+3)/4                                              
   30 CONTINUE                                                          
C                                                                       
      WRITE(IOUT02,* ) '     *** PRIMARY STRUCTURE *** '                
      WRITE(IOUT02,11) (AA(I),  I=2,NURES-1)                            
      WRITE(IOUT02,21) (LIST(I), I=2,NURES-1)                           
      WRITE(IOUT06,* ) '     *** PRIMARY STRUCTURE *** '                
      WRITE(IOUT06,11) (AA(I),  I=2,NURES-1)                            
      WRITE(IOUT06,21) (LIST(I), I=2,NURES-1)                           
   11 FORMAT(8X,10(A4,2X))                                              
   21 FORMAT(7X,10(I4,2X))                                              
C                                                                       
      RETURN                                                            
      END                                                               
C                                                                       
C     THIS SUBROUTINE WRITE DATA TO PRECEP INPUT FILE                   
C                                                                       
      SUBROUTINE WTPRIN(NURES,IPRNT,NUSS,SSPAIR,DAOP,NURESV,            
     1               RESNU,NUDA,DANU)                                   
C                                                                       
C     *** DECLARE ***                                                   
C                                                                       
      IMPLICIT REAL*8 (A-H,O-Z)                                         
C                                                                       
CMSP  INCLUDE (MAXSIZE)                                                 
      INCLUDE '/labo/qclib/inspidas/common/maxsize'
CMSP  INCLUDE (COMMAND)                                                 
      INCLUDE '/labo/qclib/inspidas/common/command'
CMSP  INCLUDE (ALPHA)                                                   
      INCLUDE '/labo/qclib/inspidas/common/alpha'
CMSP  INCLUDE (UNITNUMS)                                                
      INCLUDE '/labo/qclib/inspidas/common/unitnums'
CMSP  INCLUDE (PRIMRY)                                                  
      INCLUDE '/labo/qclib/inspidas/common/primry'
CMSP  INCLUDE (VARANG)                                                  
      INCLUDE '/labo/qclib/inspidas/common/varang'
C                                                                       
      CHARACTER*4 DAOP                                                  
      INTEGER NURES,IPRNT,SSPAIR(MAXSS,2),NURESV                        
      INTEGER RESNU(MAXRES),NUDA(MAXRES),DANU(MAXRES,10)                
C                                                                       
C     *** WRITE DATA TO PRECEP INPUT FILE ***                           
C                                                                       
C     IOUT02=20                                                         
C                                                                       
      WRITE(IOUT12,2000)TITLE                                           
 2000 FORMAT(A80)                                                       
      WRITE(IOUT12,2001)NURES,IPRNT                                     
 2001 FORMAT(I5,'    1',I5,'    6    6')                                
      WRITE(IOUT12,2002)(LIST(I),I=2,(NURES-1))                         
 2002 FORMAT(20I3)                                                      
      WRITE(IOUT12,2003)LIST(1),LIST(NURES)                             
 2003 FORMAT(2I3)                                                       
      IF(NUSS.NE.0)THEN                                                 
        WRITE(IOUT12,2004)NUSS                                          
 2004   FORMAT('   -1',I5)                                              
        WRITE(IOUT12,2005)((SSPAIR(I,J),J=1,2),I=1,NUSS)                
 2005   FORMAT(16I5)                                                    
      ENDIF                                                             
      DO 10 I=1,NURES                                                   
        WRITE(IOUT12,2006)(ANGLES(J,I),J=1,10)                          
 2006   FORMAT(10F8.3)                                                  
   10 CONTINUE                                                          
      WRITE(IOUT12,2007)DAOP                                            
 2007 FORMAT(A4)                                                        
      IF(DAOP.EQ.'SPEC')THEN                                            
        DO 20 I=1,NURESV                                                
          WRITE(IOUT12,2008)RESNU(I),NUDA(I),DANU(I,J)                  
 2008     FORMAT(16I5)                                                  
   20   CONTINUE                                                        
        WRITE(IOUT12,2009)                                              
 2009   FORMAT('    0')                                                 
      ENDIF                                                             
C                                                                       
      RETURN                                                            
      END                                                               
./ ADD NAME=REG1
./ NUMBER NEW1=10,INCR=10
C ** CONNECTING OF ATOMS IN PROTEINS                                    
C -WHEN WITH    FORMAT==>  EX CONNECT1.CLIST LIST -------------------   
C*********** COMAND OF INPUT DATA *********************************     
C*  ALLOC DA(AC.DATA) F(FT01F001) SH ;READ CONNECTING DATA        *     
C****************CHANGE OF ATOM NAME OF X-RAY.DATA; ***************     
C*                       7  HIS(11 ND1 <=11 AD1)                  *     
C*                       7  HIS(12 CD2 <=12 AD2)                  *     
C*                       7  HIS(14 CE1 <=14 AE1)                  *     
C*                       7  HIS(15 NE2 <=15 AE2)                  *     
C*                      12  ASN(11 ND2 =>11 AD2)                  *     
C*                      12  ASN(12 OD1 <=12 AD1)                  *     
C*                      14  GLN(14 NE2 <=14 AE2)                  *     
C*                      14  GLN(15 OE1 <=15 AE1)                  *     
C*                                         L-> FROM DATA-BANK     *     
C*  ATTR I INPUT                                                  *     
C*  ALLOC DA('F0033.BNL.DATA(#3PTI)') F(FT02F001) SH US(I)        *     
C*     =======>  READ ATOMIC-COORDINATES OF PROTEIN DATA BANK     *     
C*********** COMAND OF OUTPUT DATA ********************************     
C*  ATTR N LR(80) BL(3200) REC(F B) DS(PS)                        *     
C*  ALLOC DA(PTI3C.DATA) F(FT10F001) NEW CA TR SP(5 5) REL US(N)   *    
C******************************************************************     
      COMMON /CONEC0/ RENAM1(21),ATNAM1(21,24)                          
      COMMON /CONEC1/ NUMAT(21),NO(21,24),NOBOND(21,24),ICON(21,24,4)   
      COMMON /TITL/TITLE(15),RELIST(500)                                
      COMMON /SSBND/LAST,NC,NCYS,NPAIR(15,2)                            
*                                                                       
      DIMENSION NUM(5000),                                              
     * CHAIN(5000),NUMRES(5000),COORD(3,5000),OCUP(5000),TF(5000)       
C                                                                       
      DIMENSION LBOND(5000),LCON(5000,6)                                
      DIMENSION NPOINT(500),JC(5),JN(5)                                 
      DIMENSION NUMRE2(5000),CO2(3,5000),OCUP2(5000),TF2(5000)          
      CHARACTER*4 RENAM1,ATNAM1,AMJ1,DC,DN,TITLE,RELIST                 
      CHARACTER*4 ATNAM2(5000),RENAM2(5000),RNAM                        
      CHARACTER*4 NAMAT2(5000),NAMRE2(5000)                             
C                                                                       
      DATA  ND,MD,NRES /2,10,21/                                        
*                                                                       
C *** INPUT CONNECTING DATA                                             
C                                                                       
      CALL CONNEC(NRES)                                                 
C *** INPUT COORDINATES DATA                                            
C                                                                       
      CALL INPUT(ND,NATOM,ATNAM2,RENAM2,NUMRES,COORD,OCUP,TF)           
      WRITE(6, 5) NATOM                                                 
    5 FORMAT(' NATOM =',I4)                                             
* REGULAR NUMBERING OF AMINO ACID NUMBER                                
      CALL CONVR2(NATOM,NUMRES)                                         
*                                                                       
** CONVERT TO BNL FORMAT                                                
**                                                                      
      CALL CONVR(NATOM,ATNAM2,RENAM2,NUMRES,COORD,OCUP,TF,NAMAT2,       
     *  NAMRE2,NUMRE2,CO2,OCUP2,TF2 )                                   
C                                                                       
** CONNECTING OF BNL DATA                                               
*                                                                       
      CALL COBNL(NATOM,NAMAT2,NAMRE2,NUMRE2,LBOND,LCON,NPOINT,          
     *    JN,JC,NRES)                                                   
* OUTPUT                                                                
      CALL OUTPUT(MD,NATOM,NAMAT2,NAMRE2,NUMRE2,CO2,OCUP2,TF2,          
     *       LBOND,LCON)                                                
C                                                                       
      END                                                               
C                                                                       
C ** INPUT CONNECTING DATA                                              
C                                                                       
      SUBROUTINE CONNEC(NRES)                                           
      COMMON /CONEC0/ RENAM1(21),ATNAM1(21,24)                          
      COMMON /CONEC1/ NUMAT(21),NO(21,24),NOBOND(21,24),ICON(21,24,4)   
      CHARACTER*4 RENAM1,ATNAM1                                         
      DO 100 I=1,NRES                                                   
      READ(1,10) RENAM1(I)                                              
      READ(1,20) NUMAT(I)                                               
      DO 200 J=1,NUMAT(I)                                               
  200 READ(1,30) NO(I,J),ATNAM1(I,J),NOBOND(I,J),(ICON(I,J,K),K=1,4)    
  100 CONTINUE                                                          
C                                                                       
   10 FORMAT(A4)                                                        
   20 FORMAT(I5)                                                        
   30 FORMAT(I4,1X,A4,8X,I1,1X,4I4)                                     
C                                                                       
CC    DO 120 I=1,NRES                                                   
C     DO 120 I=1,2                                                      
C     WRITE(6,12) RENAM1(I)                                             
C     WRITE(6,20) NUMAT(I)                                              
C     DO 220 J=1,NUMAT(I)                                               
C 220 WRITE(6,30) NO(I,J),ATNAM1(I,J),NOBOND(I,J),(ICON(I,J,K),K=1,4)   
C 120 CONTINUE                                                          
C  12 FORMAT(1X,A4)                                                     
      RETURN                                                            
      END                                                               
C                                                                       
C ** READ COORDINATES DATA                                              
C                                                                       
      SUBROUTINE INPUT(ND,NATOM,ATNAM2,RENAM2,NUMRES,COORD,OCUP,TF)     
      CHARACTER*4 ATNAM2(5000),RENAM2(5000),TITLE,RELIST                
      COMMON /TITL/  TITLE(15),RELIST(500)                              
      COMMON /SSBND/LAST,NC,NCYS,NPAIR(15,2)                            
      DIMENSION NUM(5000),                                              
     * CHAIN(5000),NUMRES(5000),COORD(3,5000),OCUP(5000),TF(5000)       
      DIMENSION C(3)                                                    
      CHARACTER*4 NCOMP,NSEQR,NSSBO,DATOM,DD,ATN2,WORK(15)              
      CHARACTER*4 RNAM,RAMFUL(20)                                       
      DATA NCOMP/'COMP'/,NSEQR/'SEQR'/,NSSBO/'SSBO'/,DATOM/'ATOM'/      
      DATA RAMFUL/'ALA ','ASP ','CYS ','GLU ','PHE ',                   
     1           'GLY ','HIS ','ILE ','LYS ','LEU ',                    
     2           'MET ','ASN ','PRO ','GLN ','ARG ',                    
     3           'SER ','THR ','VAL ','TRP ','TYR '/                    
C                                                                       
        DATA           NST,NED/1,13/                                    
          NC=  0                                                        
          NCYS=0                                                        
C ****** READ REMARK & ATOMIC COORDINATES *************************     
    1        READ(ND,200) DD,(WORK(I),I=1,15)                           
  200   FORMAT(A4,6X,15A4)                                              
C  ---- READ 'COMP'ND  --- NAME OF PROTEIN  ----                        
           IF (DD.NE. NCOMP ) GO TO 555                                 
        DO 10 I=1,15                                                    
        TITLE(I)=WORK(I)                                                
   10    CONTINUE                                                       
      WRITE(6,610) (TITLE(I),I=1,10)                                    
  610 FORMAT(' **** DATA OF  ',10A4,'*****')                            
                 GO TO 1                                                
C                                                                       
  555      IF (DD.NE. NSEQR ) GO TO 556                                 
C  ----- READ  'SEQR'ES  --- SEQUENCE OF RESIDUES --------              
              BACKSPACE ND                                              
       READ(ND,300) DD,LAST,(RELIST(I),I=NST,NED)                       
      WRITE( 6,301) DD,LAST,(RELIST(I),I=NST,NED)                       
  300 FORMAT(A4,9X,I4,2X,13A4)                                          
  301 FORMAT(5X,A4,9X,I4,1X,13A4)                                       
            NST=NED+1                                                   
            NED=NST+12                                                  
                 GO TO 1                                                
C ---- READ 'SSBO'ND ------ INFORMATION OF SSBOND -----                 
  556  IF(DD.NE.NSSBO ) GO TO 557                                       
        BACKSPACE ND                                                    
       READ(ND,500) IDD,NP,N1,N2                                        
  500  FORMAT(A4,3X,I3,7X,I4,10X,I4)                                    
          NPAIR(NP,1)=N1                                                
          NPAIR(NP,2)=N2                                                
            NC=-1                                                       
            NCYS=NCYS+1                                                 
                 GO TO 1                                                
C ---- READ 'ATOM'   ------COORDNATES OF ATOMS---------                 
  557  IF(DD.NE.DATOM ) GO TO 1                                         
              NA=0                                                      
            BACKSPACE ND                                                
   55  READ(ND,660) DD,ID,ATN2,RNAM,NUMR,(C(I),I=1,3),OCU,T             
C     WRITE( 6,669) DD,ID,ATN2,RNAM,NUMR,(C(I),I=1,3),OCU,T             
C*                      14  GLN(15 OE1 =>12 AE1)                  *     
  660 FORMAT(A4,2X,I5,2X,A4,   A4,1X,I4,4X,3F8.3,2F6.2)                 
  669 FORMAT(2X,A4,2X,I5,1X,A4,   A4,2X,I4,4X,3F8.3,2F6.2)              
             IF(DD.NE.DATOM ) GO TO 999                                 
             IF(NUMR.EQ.0) GO TO 55                                     
      NA=NA+1                                                           
            NUM(NA)   =NA                                               
            ATNAM2(NA)=ATN2                                             
            RENAM2(NA)=RNAM                                             
            NUMRES(NA)=NUMR                                             
            OCUP(NA)  =OCU                                              
            TF(NA)    =T                                                
                DO 66 J=1,3                                             
   66               COORD(J,NA)=C(J)                                    
                                GO TO 55                                
C -----------    DEBUG -------------------------------------            
C                                                                       
C                                                                       
C 999     NATOM=NA-1                                                    
  999     CONTINUE                                                      
          NATOM=NA                                                      
C                                                                       
C****************CHANGE OF ATOM NAME OF X-RAY.DATA; ***************     
C*                       7  HIS(11 ND1 <=11 AD1)                  *     
C*                       7  HIS(12 CD2 <=12 AD2)                  *     
C*                       7  HIS(14 CE1 <=14 AE1)                  *     
C*                       7  HIS(15 NE2 <=15 AE2)                  *     
C*                      12  ASN(11 ND2 =>11 AD2)                  *     
C*                      12  ASN(12 OD1 <=12 AD1)                  *     
C*                      14  GLN(14 NE2 <=14 AE2)                  *     
C*                      14  GLN(15 OE1 <=15 AE1)                  *     
C***********  FOR  ECEPP ***************   L-> FROM DATA-BANK *****     
         DO 4990 J=1,NATOM                                              
            IF(RENAM2(J).NE.'HIS ') GO TO 4910                          
               IF(ATNAM2(J).EQ.'AD1 ') ATNAM2(J)='ND1 '                 
               IF(ATNAM2(J).EQ.'AD2 ') ATNAM2(J)='CD2 '                 
               IF(ATNAM2(J).EQ.'AE1 ') ATNAM2(J)='CE1 '                 
               IF(ATNAM2(J).EQ.'AE2 ') ATNAM2(J)='NE2 '                 
 4910       IF(RENAM2(J).NE.'ASN ') GO TO 4920                          
               IF(ATNAM2(J).EQ.'AD1 ') ATNAM2(J)='OD1 '                 
               IF(ATNAM2(J).EQ.'AD2 ') ATNAM2(J)='ND2 '                 
 4920       IF(RENAM2(J).NE.'GLN ') GO TO 4990                          
               IF(ATNAM2(J).EQ.'AE1 ') ATNAM2(J)='OE1 '                 
               IF(ATNAM2(J).EQ.'AE2 ') ATNAM2(J)='NE2 '                 
 4990    CONTINUE                                                       
C ========================= END OF CHECK OF ATOM NAME ===============   
      WRITE(6,620) LAST                                                 
      WRITE(6,621) (RELIST(I),I=1,LAST)                                 
  620 FORMAT(' NO. OF RESIDUE=',I5, '  SEQUENCE OF RESIDUE;RELIST(I)=') 
  621 FORMAT(13(1X,A4))                                                 
      WRITE(6,630) NC,NCYS                                              
  630 FORMAT('  SSBOND ===> NC=',I4,'  NCYS=',I5)                       
           DO 635 I=1,NCYS                                              
      WRITE(6,1640) (NPAIR(I,J),J=1,2)                                  
  635   CONTINUE                                                        
 1640  FORMAT('        PAIR OF SSBOND=', I5,' <===>',I5)                
C                                                                       
             DO 645 I=1,20                                              
               IF(RELIST(1).EQ.RAMFUL(I) ) GO TO 649                    
  645       CONTINUE                                                    
            RELIST(1)='H3N '                                            
              LAST=LAST+1                                               
            RELIST(LAST)='COO '                                         
C                                                                       
           GO TO 659                                                    
  649 CONTINUE                                                          
         DO 651 JJ=LAST,1,-1                                            
            RELIST(JJ+1)=RELIST(JJ)                                     
  651       CONTINUE                                                    
          RELIST(1)='H3N '                                              
          LAST=LAST+2                                                   
             RELIST(LAST)='COO '                                        
  659 WRITE(6,3660) NA                                                  
 3660 FORMAT(' NUMBER OF ATOMS=', I7)                                   
            IF(NC) 1600,1699,1699                                       
 1600     DO 1646 I=1,NCYS                                              
               NPAIR(I,1)=NPAIR(I,1) +1                                 
 1646          NPAIR(I,2)=NPAIR(I,2) +1                                 
          WRITE(6,1647)                                                 
 1647  FORMAT( ' ****** AS N-TERMINAL, SHIFT S-S BOND*******')          
           DO 1648 I=1,NCYS                                             
      WRITE(6,1640) (NPAIR(I,J),J=1,2)                                  
 1648   CONTINUE                                                        
 1699   CONTINUE                                                        
CCC        DO 6669 J=1,NA                                               
           DO 6669 J=1,20                                               
      WRITE(6,690) NUM(J),ATNAM2(J),RENAM2(J),NUMRES(J),                
     *           (COORD(K,J),K=1,3),OCUP(J),TF(J)                       
 6669  CONTINUE                                                         
  690 FORMAT(2X,I5,1X,A4,1X,A4,2X,I4,4X,3F8.3,2F6.2)                    
C     J=NATOM                                                           
C     WRITE(6,660) NUM(J),ATNAM2(J),RENAM2(J),CHAIN(J),NUMRES(J),       
C    *           (COORD(K,J),K=1,3),OCUP(J),TF(J)                       
      RETURN                                                            
      END                                                               
*                                                                       
      SUBROUTINE CONVR(NATOM,NAMAT,NAMRE,NUMRE,CO,OCUP,TF,NAMAT2,       
     *  NAMRE2,NUMRE2,CO2,OCUP2,TF2 )                                   
      DIMENSION NUMRE(NATOM),NUMRE2(NATOM),CO(3,NATOM),CO2(3,NATOM),    
     * CO1(3,5000),IRES(5000),OCUP(NATOM),OCUP1(5000),OCUP2(NATOM),     
     * TF(NATOM),TF1(5000),TF2(NATOM)                                   
      DIMENSION NOATM(20),JATORO(16,200),ISEQ(200),JMAX(200),IODR(36)   
      CHARACTER*4 AMINO(20),RESNAM(5000),ATMTYP(5000),ATYPE(36)         
      CHARACTER*4 NAMAT(NATOM),NAMRE(NATOM),NAMAT2(NATOM),NAMRE2(NATOM) 
        DATA AMINO/'ALA ','ASP ','CYS ','GLU ','PHE ','GLY ','HIS '     
     *            ,'ILE ','LYS ','LEU ','MET ','ASN ','PRO ','GLN '     
     *            ,'ARG ','SER ','THR ','VAL ','TRP ','TYR '/           
        DATA NOATM / 5, 8, 6, 9,11, 4,10, 8, 9, 8,                      
     *               8, 8, 7, 9,11, 6, 7, 7,14,12 /                     
        DATA ATYPE/'N   ','CA  ','C   ','O   ','CB  ',                  
     *             'CG  ','CG1 ','CG2 ',                                
     *             'CD  ','CD1 ','CD2 ',                                
     *             'CE  ','CE1 ','CE2 ','CE3 ',                         
     *             'CZ  ','CZ2 ','CZ3 ','CH2 ',                         
     *      'ND1 ','ND2 ','NE  ','NE1 ','NE2 ','NZ  ','NH1 ','NH2 ',    
     *             'OG  ','OG1 ','OD1 ','OD2 ','OE1 ','OE2 ','OH  ',    
     *             'SG  ','SD  '/                                       
        DATA IODR/  1, 2, 3, 4, 5,                                      
     *              6, 6, 7,      7, 7, 8,                              
     *              8, 9,10,11,  11,12,13,14,                           
     *              7, 8, 8, 9,10, 9,10,11,                             
     *              6, 6, 7, 8, 8, 9,12,    6, 7 /                      
** PICK UP PROPER ATOMS                                                 
         INUMRS=0                                                       
         IA=0                                                           
      DO 100 J=1,NATOM                                                  
      IF(NAMAT(J)(1:1).EQ.'H' )  THEN                                   
          WRITE(6,'(''NAMAT'',A)') NAMAT(J)                             
          GOTO 100                                                      
      END IF                                                            
                 II=0                                                   
              DO 20 I=1,20                                              
                   IF(NAMRE(J).EQ.AMINO(I)) II=1                        
20            CONTINUE                                                  
      IF (II.NE.1) GOTO 100                                             
      IRS = NUMRE(J)                                                    
C     WRITE(6,'('' NUMRE ='',I4)') NUMRE(J)                             
      INUMRS=MAX( IRS    ,INUMRS)                                       
         IA=IA+1                                                        
            ATMTYP(IA)= NAMAT(J)                                        
            RESNAM(IRS)= NAMRE(J)                                       
            IRES(IA)=IRS                                                
            OCUP1(IA) = OCUP(J)                                         
            TF1(IA)   = TF(J)                                           
            CO1(1,IA)= CO(1,J)                                          
            CO1(2,IA)= CO(2,J)                                          
            CO1(3,IA)= CO(3,J)                                          
C     IF(J.LE.15.OR.J.EQ.NATOM)                                         
C     WRITE(6,'('' IRS ='',I4,''  RESNAM ='',A)') IRS,RESNAM(IRS)       
C     WRITE(6,3000)IA,ATMTYP(IA),RESNAM(IRS),IRES(IA),(CO1(K,IA),K=1,3) 
100   CONTINUE                                                          
 3000 FORMAT(I5,1X,A4,A4,I4,3F8.3)                                      
      NATM=IA                                                           
      WRITE(6,'( '' INUMRS = '',I4)') INUMRS                            
      WRITE(6,'( '' NATM   = '',I4)') NATM                              
*                                                                       
      DO 1 L=1,INUMRS                                                   
      DO 1 J=1,16                                                       
1           JATORO(J ,L      )= 0                                       
*                                                                       
      DO 30 J=1,INUMRS                                                  
      DO 30 I=1,20                                                      
          IF (RESNAM(J).EQ.AMINO(I)) THEN                               
               ISEQ(J)=I                                                
               JMAX(J)=NOATM(I)                                         
          ENDIF                                                         
 30   CONTINUE                                                          
      DO 50 J=1,NATM                                                    
        IO=0                                                            
        DO 40 I=1,36                                                    
           IF (ATMTYP(J).EQ.ATYPE(I)) IO=IODR(I)                        
 40     CONTINUE                                                        
      IF((RESNAM(IRES(J)).EQ.'ILE ').AND.(ATMTYP(J).EQ.'CD1 ')) IO=8    
      IF((RESNAM(IRES(J)).EQ.'GLN ').AND.(ATMTYP(J).EQ.'NE2 ')) IO=9    
      IF((RESNAM(IRES(J)).EQ.'ARG ').AND.(ATMTYP(J).EQ.'CZ  ')) IO=9    
      IF((RESNAM(IRES(J)).EQ.'TYR ').AND.(ATMTYP(J).EQ.'NH2 ')) IO=16   
        IF(IO.NE.0) JATORO(IO,IRES(J))=J                                
 50   CONTINUE                                                          
*                                                                       
      IA = 0                                                            
      DO 60 K=1,INUMRS                                                  
      DO 60 J=1,JMAX(K)                                                 
          IB=JATORO(J,K)                                                
      IF(IB.EQ.0) GOTO 60                                               
         IA = IA + 1                                                    
           NAMAT2(IA) = ATMTYP(IB)                                      
           NUMRE2(IA) = IRES(IB)                                        
           NAMRE2(IA) = RESNAM( NUMRE2(IA) )                            
           OCUP2(IA)  = OCUP1(IB)                                       
           TF2(IA)    = TF1(IB)                                         
           CO2(1,IA) = CO1(1,IB)                                        
           CO2(2,IA) = CO1(2,IB)                                        
           CO2(3,IA) = CO1(3,IB)                                        
 60   CONTINUE                                                          
      PRINT *,' NATM=', IA                                              
           NATOM=IA                                                     
C     DO  7666 J=1,NATOM                                                
      DO  7666 J=1,10                                                   
          WRITE(6 ,4000) J,NAMAT2(J),NAMRE2(J),NUMRE2(J),               
     *   (CO2(K,J),K=1,3)                                               
 7666      CONTINUE                                                     
C         WRITE(6 ,4000) NATM,NAMAT2(NATM),NAMRE2(NATM),                
C    *                   NUMRE2(NATM),( CO2(K,NATM),K=1,3)              
 4000 FORMAT(6X,I5,2X,A4,A4,1X,I4,4X,3F8.3)                             
      RETURN                                                            
      END                                                               
*                                                                       
      SUBROUTINE CONVR2(N1,NUMRE1)                                      
*                                                                       
      DIMENSION NUMRE1(5000)                                            
*                                                                       
      NUM1 = NUMRE1(1)                                                  
*                                                                       
      IF(NUM1.GE.2) THEN                                                
            DO 710 I=1,N1                                               
            IF( ABS(NUMRE1(I+1) - NUMRE1(I)).LE.1 ) THEN                
                              NUMRE1(I) = NUMRE1(I) - NUM1 + 1          
            ELSE                                                        
            NUMRE1(I) = NUMRE1(I) - NUM1 + 1                            
            NUM1 = NUMRE1(I+1) - NUMRE1(I)                              
            ENDIF                                                       
710   CONTINUE                                                          
        ELSE                                                            
            NUM1 = 1                                                    
            DO 720 I=1,N1                                               
            IF( ABS(NUMRE1(I+1) - NUMRE1(I)).LE.1 ) THEN                
                              NUMRE1(I) = NUMRE1(I) - NUM1 + 1          
            ELSE                                                        
            NUMRE1(I) = NUMRE1(I) - NUM1 + 1                            
            NUM1 = NUMRE1(I+1) - NUMRE1(I)                              
            ENDIF                                                       
720   CONTINUE                                                          
        ENDIF                                                           
*       DO 790 I=1,N1                                                   
*790     PRINT *,'NUMRE1 =',NUMRE1(I)                                   
*                                                                       
      RETURN                                                            
      END                                                               
C                                                                       
** CONNECTING OF BNL DATA                                               
*                                                                       
      SUBROUTINE COBNL(NATOM,ATNAM2,RENAM2,NUMRES,LBOND,LCON,NPOINT,    
     *    JN,JC,NRES)                                                   
*                                                                       
      CHARACTER*4 ATNAM1,RENAM1,ATNAM2(5000),RENAM2(5000)               
      CHARACTER*4 AMJ1,DC,DN,RNAM                                       
      COMMON /CONEC0/ RENAM1(21),ATNAM1(21,24)                          
      COMMON /CONEC1/ NUMAT(21),NO(21,24),NOBOND(21,24),ICON(21,24,4)   
      DIMENSION NUMRES(5000),LBOND(5000),LCON(5000,6)                   
      DIMENSION NPOINT(500),JC(5),JN(5)                                 
      DATA DC/'C   '/,DN/'N   '/                                        
*                                                                       
      DO 6 J=1,NATOM                                                    
      LBOND(J)=0                                                        
      DO 6 K=1,6                                                        
    6 LCON(J,K) = 0                                                     
C                                                                       
C                                                                       
      NR=1                                                              
      NPOINT(1)=1                                                       
      NCURR=NUMRES(1)                                                   
      DO 105 J=2,NATOM                                                  
        IF(NUMRES(J).EQ.NCURR)GOTO 105                                  
        NR=NR+1                                                         
        NPOINT(NR)=J                                                    
C          WRITE(6,*) NR,NPOINT(NR)                                     
        NCURR=NUMRES(J)                                                 
 105  CONTINUE                                                          
      NPOINT(NR+1)=NATOM+1                                              
C                                                                       
          WRITE(6,*) NATOM,NR                                           
C                                                                       
      DO 200 JR=1,NR                                                    
        JBEG=NPOINT(JR)                                                 
        JEND=NPOINT(JR+1)-1                                             
        IF(JR.EQ.NR)GOTO 215                                            
C CONNECT C WITH N OF NEXT RESIDUE                                      
        JBEGN=JEND+1                                                    
        IF(NUMRES(JBEG).NE.(NUMRES(JBEGN)-1))GOTO 215                   
        JENDN=NPOINT(JR+2)-1                                            
C                                                                       
        LC=0                                                            
        DO 202 J=JBEG,JEND                                              
C              WRITE(6,6202) JR,J,ATNAM2(J),DC,LC                       
 6202    FORMAT('  JR =',I5,' J=',I5,' ATNAM2=',A4,2X A4,'  LC=',I4)    
           IF(ATNAM2(J).NE.DC )GO TO 202                                
           LC=LC+1                                                      
           JC(LC)=J                                                     
 202    CONTINUE                                                        
        LN=0                                                            
        DO 204 J=JBEGN,JENDN                                            
           IF(ATNAM2(J).NE.DN )GOTO 204                                 
           LN=LN+1                                                      
           JN(LN)=J                                                     
 204    CONTINUE                                                        
C                                                                       
C                                                                       
C          WRITE(6,6215) JR,LC,LN                                       
      IF(LC.EQ.0.OR.LN.EQ.0)GOTO 215                                    
 6215  FORMAT('  JR=',I5,' LC=', I5,'  LN=',I5)                         
      DO 206 L1=1,LC                                                    
         JC1=JC(L1)                                                     
         DO 206 L2=1,LN                                                 
           JN1=JN(L2)                                                   
           LBOND(JC1)=LBOND(JC1)+1                                      
           LBOND(JN1)=LBOND(JN1)+1                                      
           LCON(JC1,LBOND(JC1))=JN1                                     
           LCON(JN1,LBOND(JN1))=JC1                                     
C          WRITE(6,*)JR,L1,L2, LBOND(JC1),LBOND(JN1),JN1,JC1            
  206   CONTINUE                                                        
C                                                                       
C CONNECT WITHIN RESIDUES                                               
  215  RNAM=RENAM2(JBEG)                                                
       DO 220 IC=1,NRES                                                 
         IF(RNAM.EQ.RENAM1(IC))GOTO 221                                 
 220   CONTINUE                                                         
       GOTO 199                                                         
 221   DO 230 J=JBEG,JEND-1                                             
          DO 240 K=1,NUMAT(IC)                                          
          IF(ATNAM2(J).EQ.ATNAM1(IC,K))GOTO 241                         
 240      CONTINUE                                                      
          GOTO 230                                                      
 241      NB=NOBOND(IC,K)                                               
          DO 250 L=1,NB                                                 
            AMJ1=ATNAM1(IC,ICON(IC,K,L))                                
            DO 260 J1=J+1,JEND                                          
              IF(AMJ1.EQ.ATNAM2(J1))GOTO 261                            
  260       CONTINUE                                                    
            GOTO 250                                                    
  261       LBOND(J)=LBOND(J)+1                                         
            LCON(J,LBOND(J))=J1                                         
                    LD1=LCON(J,LBOND(J))                                
            LBOND(J1)=LBOND(J1)+1                                       
            LCON(J1,LBOND(J1))=J                                        
                    LD2=LCON(J1,LBOND(J1))                              
C ****** DEBUG *************************                                
C         WRITE(6,*) JR,J,J1,LBOND(J),LD1,LBOND(J1),LD2                 
  250     CONTINUE                                                      
  230     CONTINUE                                                      
  199     CONTINUE                                                      
  200     CONTINUE                                                      
C              DO  6665 J=1,NATOM                                       
C         WRITE(6 ,1640)     J ,ATNAM2(J),RENAM2(J),NUMRES(J),          
C    *                                    LBOND(J),(LCON(J,K),K=1,4)    
 6665      CONTINUE                                                     
 1640  FORMAT(I5,1X,A4,A4,I4,            I2,4I5)                        
C                                                                       
      RETURN                                                            
            END                                                         
*                                                                       
* OUTPUT                                                                
      SUBROUTINE OUTPUT(MD,NATOM,ATNAM2,RENAM2,NUMRES,COORD,OCUP,TF,    
     *       LBOND,LCON)                                                
C                                                                       
      CHARACTER*4 ATNAM2(5000),RENAM2(5000)                             
      COMMON /TITL/TITLE(15),RELIST(500)                                
      COMMON /SSBND/LAST,NC,NCYS,NPAIR(15,2)                            
      DIMENSION NUMRES(5000),COORD(3,5000),OCUP(5000),TF(5000)          
     *         ,LBOND(5000),LCON(5000,6)                                
          WRITE(6,1610) (TITLE(I),I=1,15)                               
          WRITE(6,1620) LAST,NATOM,NC,NCYS                              
          WRITE(6,1630) (RELIST(I),I=1,LAST)                            
              IF(NC)  1641,1645,1645                                    
 1641     WRITE(6,1640) ((NPAIR(I,J),J=1,2),I=1,NCYS)                   
 1645    CONTINUE                                                       
C              DO  1665 J=1,NATOM                                       
               DO  1665 J=1,10                                          
          WRITE(6,1650)     J ,ATNAM2(J),RENAM2(J),NUMRES(J),           
     *   (COORD(K,J),K=1,3),OCUP(J),TF(J),LBOND(J),(LCON(J,K),K=1,4)    
 1665      CONTINUE                                                     
C *******************************************************************   
C ********** OUTPUT TO DISK ****************************************    
          WRITE(MD,1610) (TITLE(I),I=1,15)                              
          WRITE(MD,1620) LAST,NATOM,NC,NCYS                             
          WRITE(MD,1630) (RELIST(I),I=1,LAST)                           
              IF(NC)  6641,6645,6645                                    
 6641     WRITE(MD,1640) ((NPAIR(I,J),J=1,2),I=1,NCYS)                  
 6645    CONTINUE                                                       
               DO  6665 J=1,NATOM                                       
          WRITE(MD,1650)     J ,ATNAM2(J),RENAM2(J),NUMRES(J),          
     *   (COORD(K,J),K=1,3),OCUP(J),TF(J),LBOND(J),(LCON(J,K),K=1,4)    
 6665      CONTINUE                                                     
 1610  FORMAT(5X,15A4)                                                  
 1620  FORMAT(4I5)                                                      
 1630  FORMAT(5X,10A4)                                                  
 1640  FORMAT(20I4)                                                     
 1650  FORMAT(I5,1X,A4,A4,I4,3F8.3,2F6.2,I2,4I5)                        
       RETURN                                                           
             END                                                        
./ ADD NAME=REG2V2
./ NUMBER NEW1=10,INCR=10
C PROGRAM TO                                                            
C 1)CALCULATE DISTANCE CONSTRAINTS AND PUT THEM IN                      
C   LOWER DATA AND UPPER.DATA                                           
C 2)CALCULATE DIHEDRAL DIRECTLY FROM X-RAY COORDINATES.                 
C                      WERNER BRAUN     9/'83                           
C                  ED. HARUO ABE      2/8/'84                           
C                  MD. YASUNOBU SENO    1/'85                           
C *BY THIS MODIFICATION OMEGA AND SIDECHAIN ANGLES CAN BE CALUCULATED.  
C                  MD. T.NOGUTI        12/'85                           
C *FORMAT OF OUTPUT DIHEDRAL ANGLES IS CHANGED TO 10F8.3                
C                  MD. K.MORIKAMI      11/'86                           
C *CONSTRAINTS TYPE3 CHANGE                                             
C *ADD AND DELETE COMMENTS                                              
C *DELETE UNUSED ROUTINES                                               
C *MODIFY TO READ PROGRAM EASILY                                        
C                  MD. K.MORIKAMI      12/'86                           
C *ADD TYPE4 CONSTRAINTS                                                
C                                                                       
C     INPUT FILE                                                        
C          20  :  ATOM COORDINATE AND CONNECTIVITY FILE (ABE FORMAT)    
C          24  :  SIDE CHAIN DATA (OVREG2.DATA)                         
C     OUTPUT FILE                                                       
C          23  :  DIHEDRAL DATA (ECEPP FORMAT)                          
C          51  :  LOWER AND UPPER CONSTRAINTS DATA (NO FORMAT)          
C          21  :  LOWER CONSTRAINTS DATA (WITH FORMAT)  *USUALLY DUMMY  
C          22  :  UPPER CONSTRAINTS DATA (WITH FORMAT)  *USUALLY DUMMY  
C                                                                       
      COMMON /LISTRS/ NPREA,LIST(500)                                   
      COMMON /SCHDAT/ NHEAVY(21),NCHI(21),NCHANG(4,7,21)                
      COMMON /COORD/  CO(3,5000)                                        
      DIMENSION NPAIR(20,2),NUM(5000),NUMRE(5000),                      
     1        OCUP(5000),TF(5000),NC(5000),IC(4,5000)                   
      CHARACTER*4 TITLE(15),RELIST(500),NAMAT(5000),NAMRE(5000)         
      CHARACTER*8 PAN1(40000),PAN3(40000)                               
      DIMENSION   NPRN2(40000),NPRN4(40000)                             
      REAL*8 DSLW5(40000),DSUP5(40000),DIFF,DIS,DLOW,DUP,DSL,CUT        
C                                                                       
C     MODIFIED K.MORIKAMI                                               
C                                                                       
      DATA  NTLMIT/40000/                                               
      DIMENSION LMARK(5000),X(3,4),ANG(10)                              
C                                                                       
      CHARACTER*4 NAM,N1T(6),NMC1,NMC2                                  
      CHARACTER*80 SPACE/' '/                                           
C                                                                       
      DATA N1T/'N   ','CA  ',4HC'  ,'NP  ','O   ' ,'CB  '/              
      DATA NMC1,NMC2/'C   ' ,4HC'  /                                    
      CHARACTER*4 IFORM,ISAME,IYES                                      
      DATA IYES/'Y   '/,NTN/0/                                          
C                                                                       
C     MODIFIED BY K.MORIKAMI                                            
      INTEGER EVERY                                                     
      INTEGER RESNS(10)                                                 
      CHARACTER*1 ENRICH                                                
C                                                                       
C ************** INPUT OF INITIAL PARAMETERS ********************       
C     MODIFIED BY K.MORIKAMI                                            
C                                                                       
            WRITE(6,6900)                                               
 6900 FORMAT(//' ****   ANSWER  FOLLOWING  QUETIONS *******'//          
     1     ' 1) FORMAT  ? ; WITH => Y , WITHOUT => N ')                 
            READ(5,5900) IFORM                                          
 5900 FORMAT(A4)                                                        
            WRITE(6,6901)                                               
 6901 FORMAT(' 2) DSL = ?;(F-TYPE) VALUE OF LOWER LIMIT OR UPPER LIMIT')
            READ(5,*) DSL                                               
C                                                                       
C     MODIFIED BY K.MORIKAMI                                            
C                                                                       
            IF(DSL.EQ.0.0)THEN                                          
              ISAME='Y   '                                              
            ELSE                                                        
              ISAME='N   '                                              
            ENDIF                                                       
            WRITE(6,6903)                                               
 6903 FORMAT(' 3) CUT= ?, EVERY ? (F-TYPE)  ')                          
            READ(5,*) CUT,EVERY                                         
            WRITE(6,6904)                                               
 6904 FORMAT(' 4) LBPAIR = ? ; PAIR OF LONGRANGE BACBONE (F TYPE)')     
            READ(5,*) LBPAIR                                            
C                                                                       
C     MODIFIED BY K.MORIKAMI 1986.12.08                                 
C                                                                       
      WRITE(6,6902)                                                     
 6902 FORMAT(' ','5) DO YOU ENRICH CONSTRAINTS ? (Y OR N) (A1)')        
      READ(5,5902)ENRICH                                                
 5902 FORMAT(A1)                                                        
      IF(ENRICH.EQ.'Y')THEN                                             
        WRITE(6,7000)                                                   
 7000   FORMAT(' ','   NUMBER OF RESIDUES TO ENRICH CONSTRAINTS ?')     
        READ(5,*)NRE                                                    
        DO 7001 I=1,NRE                                                 
          WRITE(6,7002)I                                                
 7002     FORMAT(' ',I5,'   RESIDUE NUMBER ?')                          
          READ(5,*)RESNS(I)                                             
 7001   CONTINUE                                                        
      ENDIF                                                             
C ***************** END OF INITIAL PARAMETERS *********************     
C                                                                       
C============= READ DATA FROM COORDINATE FILE (ABE FORMAT)=======       
C        SUBROUTINE INPUT : READ DATA FROM STEP1 FILE                   
C                                                                       
         CALL   INPUT(TITLE,LAST,NUATOM,NSS,NCYS,RELIST,NPAIR,NUM,      
     1                NAMAT,NAMRE,NUMRE,OCUP,TF,NC,IC)                  
C                                                                       
C                                                                       
C============= READ SIDE CHAIN DATA FROM OVREG2.DATA ============       
C        SUBROUTINE INPUT2 : READ DATA FROM OVREG2.DATA                 
C                                                                       
      CALL INPUT2                                                       
C============= CHECK RESIDUES AND CONVERTION =====================      
      CALL RSNANU(LAST,RELIST)                                          
C                                                                       
      WRITE(6,1000)TITLE,NUATOM                                         
 1000 FORMAT(' STRUCTURE: ',15A4//' NUMBER OF ATOMS:',I5)               
C                                                                       
C                                                                       
C================  CHANGE ATOMNAME FOR C   (C==>C')==============       
C================  CHANGE ATOMNAME FOR PRO (N==>NP)==============       
C     MODIFIED BY K.MORIKAMI                                            
C                                                                       
      DO 5 IND=1,NUATOM                                                 
        IF((NAMAT(IND).EQ.'N   ').AND.(NAMRE(IND).EQ.'PRO '))THEN       
          NAMAT(IND)='NP  '                                             
        ENDIF                                                           
        IF(NAMAT(IND).EQ.NMC1)NAMAT(IND)=NMC2                           
    5 CONTINUE                                                          
C                                                                       
C CALCULATE DIHEDRAL ANGLES OF BACKBONE AND SIDE CHAIN                  
C                                                                       
       LMAX=0                                                           
C                                                                       
C      LMAX = NUMBER OF BACKBONE ATOMS (CA,C',N,NP)                     
C                                                                       
C     PREPARATION FOR CALCULATION OF DIHEDRAL ANGLES                    
C       LMARK(I) : BACKBONE ATOM NUMBERS                                
C                                                                       
      DO 35 IND=1,NUATOM                                                
        NAM=NAMAT(IND)                                                  
        DO 36 K=1,4                                                     
          IF(NAM.NE.N1T(K))GOTO 36                                      
          LMAX=LMAX+1                                                   
          LMARK(LMAX)=IND                                               
  36    CONTINUE                                                        
  35  CONTINUE                                                          
C                                                                       
      NPREA=0                                                           
C                                                                       
C                                                                       
C                                                                       
COMMENT BY NOGUTI 12/'85                                                
* TOP LINE IN OUTPUT FILE FOR DIHEDRAL ANGLES ARE FILLED WITH SPACE.    
COMMENT END                                                             
C                                                                       
C      WRITE N-END GROUP DIHEDRAL ANGLES TO DIHEDRAL ANGLES DATA FILE   
C            DIHEDRAL ANGLES ARE ALL 0.0                                
C                                                                       
       WRITE(23,6957) SPACE                                             
 6957  FORMAT(A80)                                                      
C                                                                       
C      CALCULATE FIRST AMINO ACID'S DIHEDRAL ANGLES AND WRITE THEM      
C      TO DATA FILE                                                     
C                                                                       
       DO 40 L=1,4                                                      
         DO 41 K=1,3                                                    
           X(K,L)=CO(K,LMARK(L))                                        
  41     CONTINUE                                                       
  40   CONTINUE                                                         
C                                                                       
C      SUBROUTINE DHD CALCULATE DIHEDRAL ANGLES                         
C                                                                       
       CALL DHD(X,PSI)                                                  
C                                                                       
C                                                                       
      IND=1                                                             
      DO 42 L=1,4                                                       
        IND=IND+1                                                       
        DO 43 K=1,3                                                     
          X(K,L)=CO(K,LMARK(IND))                                       
  43    CONTINUE                                                        
  42  CONTINUE                                                          
C                                                                       
      CALL DHD(X,OMEGA)                                                 
C                                                                       
C                                                                       
      LIST2=LIST(2)                                                     
      CALL KAIANG(LIST2,NUMANG,ANG)                                     
C                                                                       
C     FIRST AMINO ACID'S PHI IS 180.0                                   
C                                                                       
      ANG(1)=180.0                                                      
      ANG(2)=PSI                                                        
      ANG(3)=OMEGA                                                      
      IF (LIST2.EQ.8) THEN                                              
C                                                                       
C     IF AMINO ACID IS ILE(NUMBER=8) , CHANGE DIHEDRAL ANGLE'S ORDER    
C                                                                       
            T=ANG(5)                                                    
            ANG(5)=ANG(6)                                               
            ANG(6)=T                                                    
      ENDIF                                                             
C                                                                       
C     NUMANG = NUMBER OF DIHEDRAL ANGLES                                
C                                                                       
      WRITE(23,2000) (ANG(K),K=1,NUMANG)                                
C                                                                       
C  LOOP OVER ALL RESIDUES BUT THE FIRST AND THE LAST                    
C                                                                       
        IR=LMAX/3-2                                                     
C                                                                       
      DO 50 IRES=1,IR                                                   
        LISTI=LIST(IRES+2)                                              
        DO 48 IW=1,3                                                    
          IND=3*IRES+IW-2                                               
          DO 45 L=1,4                                                   
            IND=IND+1                                                   
            DO 46 K=1,3                                                 
              X(K,L)=CO(K,LMARK(IND))                                   
  46        CONTINUE                                                    
  45      CONTINUE                                                      
C                                                                       
          CALL DHD(X,ANG(IW))                                           
  48    CONTINUE                                                        
C                                                                       
        CALL KAIANG(LISTI,NUMANG,ANG)                                   
        IF (LISTI.EQ.8) THEN                                            
          T=ANG(5)                                                      
          ANG(5)=ANG(6)                                                 
          ANG(6)=T                                                      
        ENDIF                                                           
C                                                                       
        WRITE(23,2000) (ANG(K),K=1,NUMANG)                              
C                                                                       
   50 CONTINUE                                                          
C                                                                       
C LAST RESIDUE                                                          
C                                                                       
      LASTFL=LIST(LAST-1)                                               
      IND=LMAX-4                                                        
      DO 52 L=1,4                                                       
        IND=IND+1                                                       
        DO 53 K=1,3                                                     
          X(K,L)=CO(K,LMARK(IND))                                       
  53    CONTINUE                                                        
  52  CONTINUE                                                          
C                                                                       
      CALL DHD(X,PHI)                                                   
C                                                                       
      CALL KAIANG(LASTFL,NUMANG,ANG)                                    
      ANG(1)=PHI                                                        
C                                                                       
C     LAST AMINO ACID'S PSI AND OMEGA ARE 180.0                         
C                                                                       
      ANG(2)=180.0                                                      
      ANG(3)=180.0                                                      
      IF (LASTFL.EQ.8) THEN                                             
            T=ANG(5)                                                    
            ANG(5)=ANG(6)                                               
            ANG(6)=T                                                    
      ENDIF                                                             
      WRITE(23,2000) (ANG(K),K=1,NUMANG)                                
*MODIFICATION BY NOGUTI                                                 
 2000 FORMAT(10F8.3)                                                    
*MODIFICATION END                                                       
*INSERTION BY NOGUTI                                                    
C     WRITE C-END GROUP'S DIHEDRAL ANGLES TO DATA FILE                  
C           DIHEDRAL ANGLES ARE ALL 0.0                                 
C                                                                       
      WRITE(23,6957)SPACE                                               
COMMENT BY NOGUTI                                                       
*      BOTTOM LINE IS FILLED WITH SPACE                                 
COOMENT END                                                             
C============ DIHEDRAL ANGLES CALCULATION ENDED =====================   
C                                                                       
C                                                                       
C============ CALCULATE DISTANCE CONSTRAINTS =========================  
C                                                                       
C     CALCULATE TYPE1 CONSTRAINTS                                       
C               TYPE1 : BACKBONE DISTANCES                              
C                       EVERY LBPAIR ATOM NUMBERS                       
C                       FAR 4 ATOMS                                     
C                                                                       
C                       PERHAPS THESE CONSTRAINTS DETERMINE             
C                       BACKBONE STRUCTURE                              
C                                                                       
C         NTN = NUMBER OF TOTAL CONSTRAINTS                             
C         IT1 = NUMBER OF TYPE1 CONSTRAINTS                             
C         IT2 = NUMBER OF TYPE2 CONSTRAINTS                             
C         IT3 = NUMBER OF TYPE3 CONSTRAINTS                             
C         IT3A = NUMBER OF TYPE3(DISTANCE<=CUT) CONSTRAINTS             
C         IT3B = NUMBER OF TYPE3(DISTANCE> CUT) CONSTRAINTS             
C         IT4 = NUMBER OF TYPE4 CONSTRAINTS                             
C                                                                       
          IT1=0                                                         
C                                                                       
      DO 720 I=1,LMAX-LBPAIR                                            
        IND=LMARK(I)                                                    
        DO 725 J=I+4,LMAX,LBPAIR                                        
          JND=LMARK(J)                                                  
          DIS=0                                                         
          DO 730  K=1,3                                                 
            DIFF=CO(K,IND)-CO(K,JND)                                    
            DIS=DIS+DIFF*DIFF                                           
  730     CONTINUE                                                      
          DIS=SQRT(DIS)                                                 
          NTN=NTN+1                                                     
          IT1=IT1+1                                                     
          IF(IFORM.NE.IYES) GO TO  1755                                 
          WRITE(21,5001)NAMAT(IND),NUMRE(IND),NAMAT(JND),NUMRE(JND),DIS 
          IF(ISAME.EQ.IYES) GO TO 725                                   
          WRITE(22,5001)NAMAT(IND),NUMRE(IND),NAMAT(JND),NUMRE(JND),DIS 
          GO TO 725                                                     
C  -------- WHEN   WRITE WITHOUT FORMAT ------------------------        
 1755     PAN1(NTN)=NAMAT(IND)                                          
          NPRN2(NTN)=NUMRE(IND)                                         
          PAN3(NTN)=NAMAT(JND)                                          
          NPRN4(NTN)=NUMRE(JND)                                         
          DSLW5(NTN)=DIS                                                
          DSUP5(NTN)=DIS                                                
  725   CONTINUE                                                        
  720 CONTINUE                                                          
C                                                                       
C     CALCULATE TYPE2 CONSTRAINTS                                       
C               TYPE2 : 1-4 DISTANCES                                   
C                       SHORT RANGE CONSTRAINTS                         
C                       PERHAPS THESE CONSTRAINTS DETERMINE             
C                       LOCAL STRUCTURE SUCH AS AMINO ACID'S            
C                       STRUCTURE                                       
C                                                                       
C                                                                       
      IT2=0                                                             
      DO 110 IND=1,NUATOM                                               
        DO 120 JB=1,NC(IND)                                             
          IBEG=IC(JB,IND)                                               
          IF(NC(IBEG).LE.1)GOTO 120                                     
C                                                                       
            DO 130 JE=1,NC(IBEG)                                        
              IEND=IC(JE,IBEG)                                          
              IF(IEND.LT.IBEG)GOTO 130                                  
              IF(IEND.EQ.IND)GOTO 130                                   
              IF(NC(IEND).LE.1)GOTO 130                                 
C                                                                       
              DO 140 JN=1,NC(IEND)                                      
                JND=IC(JN,IEND)                                         
                IF(JND.LE.IEND)GOTO 140                                 
C------ OMITED BY IRISA FOR OMEGA VARIABLE VERSION. ('88 7/25)
C       THIS BUG IS POINTED OUT BY DR. SENOU
CC              IF(NAMAT(JND).EQ.N1T(2)) THEN                           
CC                IF(NAMAT(IND).EQ.N1T(2))GOTO 140                      
CC                IF(NAMAT(IND).EQ.N1T(5))GOTO 140                      
CC              ENDIF                                                   
C------ OMISSION END
                DIS=0.0                                                 
                DO 150  K=1,3                                           
                  DIFF=CO(K,IND)-CO(K,JND)                              
                  DIS=DIS+DIFF*DIFF                                     
150             CONTINUE                                                
                DIS=SQRT(DIS)                                           
                DLOW=DIS                                                
                DUP=DIS                                                 
                NTN=NTN+1                                               
                IT2=IT2+1                                               
                IF(IFORM.NE.IYES) GO TO  2755                           
       WRITE(21,5002)NAMAT(IND),NUMRE(IND),NAMAT(JND),NUMRE(JND),DLOW   
                IF(ISAME.EQ.IYES) GO TO 140                             
       WRITE(22,5002)NAMAT(IND),NUMRE(IND),NAMAT(JND),NUMRE(JND),DUP    
                GO TO 140                                               
C ------------- WHEN WRITE WITHOUT FORMAT --------------------          
 2755           PAN1(NTN)=NAMAT(IND)                                    
                NPRN2(NTN)=NUMRE(IND)                                   
                PAN3(NTN)=NAMAT(JND)                                    
                NPRN4(NTN)=NUMRE(JND)                                   
                DSLW5(NTN)=DLOW                                         
                DSUP5(NTN)=DUP                                          
 5001         FORMAT(A3,I3,1X,A3,I3,F10.4,5X,'TYPE-1')                  
 5002         FORMAT(A3,I3,1X,A3,I3,F10.4,5X,'TYPE-2')                  
 5003         FORMAT(A3,I3,1X,A3,I3,F10.4,5X,'TYPE-3')                  
 5004         FORMAT(A3,I3,1X,A3,I3,F10.4,5X,'TYPE-4')                  
 140        CONTINUE                                                    
 130      CONTINUE                                                      
 120    CONTINUE                                                        
 110  CONTINUE                                                          
C                                                                       
           IT3=0                                                        
           IT3A=0                                                       
           IT3B=0                                                       
C                                                                       
C     CALCULATE TYPE3 CONSTRAINTS                                       
C               TYPE3 : ALL ATOMS CONSTRAINTS                           
C                       HOPE DEFINING SIDE CHAIN                        
C                                                                       
C             DISTANCE <= CUT                                           
C                  DIFFERENCE OF TWO RESIDUE NUMBERS >= 2               
C             DISTANCE >  CUT                                           
C                  CA OF EVERY 'EVERY' RESIDUES                         
C                  EXCEPT SAME RESIDUE                                  
C                                                                       
C     MODIFIED BY K.MORIKAMI 1986.11.26                                 
C                                                                       
      DO 400 NA=1,NUATOM-1                                              
        DO 405 NA2=NUATOM,NA+1,-1                                       
          DIS=0.0                                                       
          IDNRE=IABS(NUMRE(NA)-NUMRE(NA2))                              
          DO 401 K=1,3                                                  
            DIFF=CO(K,NA)-CO(K,NA2)                                     
            DIS=DIS+DIFF**2                                             
 401      CONTINUE                                                      
          DIS=SQRT(DIS)                                                 
          IF(DIS.LE.CUT)THEN                                            
            IF(IDNRE.LE.1)GO TO 405                                     
              IT3A=IT3A+1                                               
          ELSE                                                          
           IF(MOD(IDNRE,EVERY).NE.0)GO TO 405                           
           IF(IDNRE.EQ.0)GO TO 405                                      
           IF((NAMAT(NA).NE.'CA  ').AND.(NAMAT(NA2).NE.'CA  '))GO TO 405
             IT3B=IT3B+1                                                
          ENDIF                                                         
C                                                                       
C                                                                       
           DLOW=DIS-DSL                                                 
           DUP=DIS+DSL                                                  
          NTN=NTN+1                                                     
          IT3=IT3+1                                                     
C  ========= CHACK OF NTLMIT ========================                   
            IF(NTN.GT.NTLMIT) GO TO 9998                                
           IF(IFORM.NE.IYES) GO TO  3755                                
       WRITE(21,5003)NAMAT(NA),NUMRE(NA),NAMAT(NA2),NUMRE(NA2),DLOW     
           IF(ISAME.EQ.IYES) GO TO 405                                  
       WRITE(22,5003)NAMAT(NA),NUMRE(NA),NAMAT(NA2),NUMRE(NA2),DUP      
                GO TO 405                                               
C ------------- WHEN WRITE WITHOUT FORMAT --------------------          
 3755     PAN1(NTN)=NAMAT(NA)                                           
          NPRN2(NTN)=NUMRE(NA)                                          
          PAN3(NTN)=NAMAT(NA2)                                          
          NPRN4(NTN)=NUMRE(NA2)                                         
          DSLW5(NTN)=DLOW                                               
          DSUP5(NTN)=DUP                                                
 405    CONTINUE                                                        
  400 CONTINUE                                                          
C                                                                       
C     CALCULATE TYPE4 CONSTRAINTS                                       
C               TYPE4 : ALL ATOMS CONSTRAINTSOF RESIDUES TO BE DEFINED  
C                       NON USUSAL USE                                  
C                       HOPE TO DELETE PEAKS OF CONFFIT                 
C                                                                       
C     MODIFIED BY K.MORIKAMI 1986.12.08                                 
C                                                                       
      IF(ENRICH.EQ.'Y')THEN                                             
        DO 500 I=1,NUATOM                                               
          DO 501 J=1,NRE                                                
            IF(NUMRE(I).EQ.RESNS(J))THEN                                
              DO 502 K=1,NUATOM                                         
                IDNRE=IABS(NUMRE(I)-NUMRE(K))                           
                IF(IDNRE.LE.1)GO TO 502                                 
                NAM=NAMAT(K)                                            
                DO 503 L=1,4                                            
                  IF(NAM.NE.N1T(L))GO TO 503                            
                    DIS=0.0                                             
                    DO 504 M=1,3                                        
                      DIFF=CO(M,I)-CO(M,K)                              
                      DIS=DIS+DIFF**2                                   
  504               CONTINUE                                            
                  DIS=SQRT(DIS)                                         
                  IT4=IT4+1                                             
                  NTN=NTN+1                                             
C  ========= CHACK OF NTLMIT ========================                   
            IF(NTN.GT.NTLMIT) GO TO 9998                                
           IF(IFORM.NE.IYES) GO TO  4755                                
       WRITE(21,5004)NAMAT(I),NUMRE(I),NAMAT(K),NUMRE(K),DIS            
           IF(ISAME.EQ.IYES) GO TO 502                                  
       WRITE(22,5004)NAMAT(I),NUMRE(I),NAMAT(K),NUMRE(K),DIS            
                GO TO 502                                               
C ------------- WHEN WRITE WITHOUT FORMAT --------------------          
 4755     PAN1(NTN)=NAMAT(I)                                            
          NPRN2(NTN)=NUMRE(I)                                           
          PAN3(NTN)=NAMAT(K)                                            
          NPRN4(NTN)=NUMRE(K)                                           
          DSLW5(NTN)=DIS                                                
          DSUP5(NTN)=DIS                                                
  503           CONTINUE                                                
  502         CONTINUE                                                  
            ENDIF                                                       
  501     CONTINUE                                                      
  500   CONTINUE                                                        
      ENDIF                                                             
C                                                                       
C ========= END OF CALCULATION CONSTRAINTS =============                
C                                                                       
      WRITE(6,6259) IT1,IT2                                             
      WRITE(6,6998)IT3,IT4                                              
      WRITE(6,6999)IT3A,IT3B                                            
      WRITE(6,6260) NTN                                                 
 6259 FORMAT(/' ** NO. OF PAIRS OF TYPE-1, TYPE-2=',2I10)               
 6998 FORMAT(/' ** NO. OF PAIRS OF TYPE-3, TYPE-4=',2I10)               
 6999 FORMAT(/' ** NO. OF PAIRS OF TYPE-3A , TYPE-3B= ',2I10)           
 6260 FORMAT(/' **TOTAL NO. OF PAIRS OF ATOMA IN DIS. CONSTRAINTS=',I10)
            IF(IFORM.EQ.IYES) GO TO 9999                                
C ******  OUTPUT OF VALUES OF DISTANCE CONSTRAINTS WITHOUT FORMAT*****  
      WRITE(51) NTN,( PAN1(I),NPRN2(I), PAN3(I),NPRN4(I),               
     1                DSLW5(I),DSUP5(I),I=1,NTN)                        
C ------------------------------------------------------------------    
 9999  CONTINUE                                                         
         WRITE(6,6250) IFORM,ISAME                                      
 6250 FORMAT(//' IFORM=  ',A4,'  ISAME=  ',A4)                          
             GO TO 9979                                                 
 9998  WRITE(6,6398) NTN,NTLMIT                                         
 6398  FORMAT('  DIMENSION IS SMALL ; NTN=',I9,'  NTLIMIT=',I9)         
 9979  STOP                                                             
       END                                                              
C                                                                       
C                                                                       
C                                                                       
      SUBROUTINE INPUT(TITLE,LAST,NUATOM,NSS,NCYS,RELIST,NPAIR,NUM,     
     1 NAMAT,NAMRE,NUMRE,OCUP,TF,NC,IC)                                 
C **************** INPUT READS DATA FROM PTI3C.DATA (UNIT=20) *******   
C                                                                       
      COMMON /COORD/  CO(3,5000)                                        
C                                                                       
      DIMENSION NPAIR(20,2),NUM(5000),NUMRE(5000),                      
     1        OCUP(5000),TF(5000),NC(5000),IC(4,5000)                   
      CHARACTER*4 TITLE(15),RELIST(500),NAMAT(5000),NAMRE(5000)         
      DATA MD/20/                                                       
C ********** INPUT FROM DISK ****************************************   
           READ(MD,1610) (TITLE(I),I=1,15)                              
           READ(MD,1620) LAST,NUATOM,NSS,NCYS                           
           READ(MD,1630) (RELIST(I),I=1,LAST)                           
              IF(NSS)  6641,6645,6645                                   
 6641      READ(MD,1640) ((NPAIR(I,J),J=1,2),I=1,NCYS)                  
 6645    CONTINUE                                                       
               DO  6665 J=1,NUATOM                                      
           READ(MD,1650) NUM(J),NAMAT(J),NAMRE(J),NUMRE(J),             
     *   (CO(K,J),K=1,3),OCUP(J),TF(J),NC(J),(IC(K,J),K=1,4)            
 6665      CONTINUE                                                     
C ********** DEBUG OF INPUT ****************************************    
         MD=6                                                           
          WRITE(MD,1610) (TITLE(I),I=1,15)                              
          WRITE(MD,1620) LAST,NUATOM,NSS,NCYS                           
          WRITE(MD,1630) (RELIST(I),I=1,LAST)                           
              IF(NSS)  7641,7645,7645                                   
 7641     WRITE(MD,1640) ((NPAIR(I,J),J=1,2),I=1,NCYS)                  
 7645    CONTINUE                                                       
               DO  7665 J=1,20                                          
          WRITE(MD,1650) NUM(J),NAMAT(J),NAMRE(J),NUMRE(J),             
     *   (CO(K,J),K=1,3),OCUP(J),TF(J),NC(J),(IC(K,J),K=1,4)            
 7665      CONTINUE                                                     
 1610  FORMAT(5X,15A4)                                                  
 1620  FORMAT(4I5)                                                      
 1630  FORMAT(5X,10A4)                                                  
 1640  FORMAT(20I4)                                                     
 1650  FORMAT(I5,1X,A4,A4,I4,3F8.3,2F6.2,I2,4I5)                        
      RETURN                                                            
      END                                                               
C...                                                                    
C...                                                                    
C...                                                                    
      SUBROUTINE INPUT2                                                 
C                                                                       
C     THIS SUBROUTINE READS SIDE CHAIN DATA FROM OVREG2.DATA            
C                                                                       
      COMMON /SCHDAT/ NHEAVY(21),NCHI(21),NCHANG(4,7,21)                
      CHARACTER*80 DUMMY                                                
      DO 10 I=1,21                                                      
        READ(24,500) DUMMY                                              
        READ(24,501) NHEAVY(I),NCHI(I)                                  
        NC=NCHI(I)                                                      
        DO 11 J=1,NC                                                    
          READ(24,502) (NCHANG(K,J,I),K=1,4)                            
   11   CONTINUE                                                        
   10 CONTINUE                                                          
      RETURN                                                            
  500 FORMAT(A80)                                                       
  501 FORMAT(2I5)                                                       
  502 FORMAT(4I5)                                                       
      END                                                               
C...                                                                    
C...                                                                    
C...                                                                    
C SUBROUTINE DHD TO CALCULATE DIHEDRALANGLES                            
      SUBROUTINE DHD(X,ANG)                                             
      DIMENSION X(3,4)                                                  
      DIMENSION E1(3),E2(3),E3(3),U(3),V(3)                             
C                                                                       
      DATA PI/3.141593/                                                 
        NLOW=0                                                          
      DO 10 K=1,3                                                       
        E1(K)=X(K,1)-X(K,2)                                             
        E2(K)=X(K,3)-X(K,2)                                             
        E3(K)=X(K,4)-X(K,3)                                             
 10   CONTINUE                                                          
      CALL DOT(E1,E1,DS1)                                               
      CALL DOT(E2,E2,DS2)                                               
      CALL DOT(E3,E3,DS3)                                               
        DS1=SQRT(DS1)                                                   
        DS2=SQRT(DS2)                                                   
        DS3=SQRT(DS3)                                                   
      DO 30 K=1,3                                                       
       E1(K)=E1(K)/DS1                                                  
       E2(K)=E2(K)/DS2                                                  
       E3(K)=E3(K)/DS3                                                  
 30    CONTINUE                                                         
C                                                                       
       CALL DOT(E1,E2,S12)                                              
       CALL DOT(E2,E3,S23)                                              
      DO 50 K=1,3                                                       
        U(K)=E1(K)-S12*E2(K)                                            
        V(K)=E3(K)-S23*E2(K)                                            
  50   CONTINUE                                                         
       CALL DOT(U,U,UN)                                                 
       CALL DOT(V,V,VN)                                                 
       UN=SQRT(UN)                                                      
       VN=SQRT(VN)                                                      
       DO 70 K=1,3                                                      
       U(K)=U(K)/UN                                                     
       V(K)=V(K)/VN                                                     
  70   CONTINUE                                                         
       CALL DOT(U,V,S)                                                  
C                                                                       
C DETERMINE SIGN                                                        
       CALL CROSS(U,E2,E1)                                              
       CALL DOT(E1,V,DET)                                               
       SIGN=-1.0                                                        
       IF(DET.LT.0.0)SIGN=1.0                                           
       ANG=SIGN*ACOS(S)                                                 
       ANG=(ANG*180.)/PI                                                
       RETURN                                                           
       END                                                              
C                                                                       
C SUBROUTINE DOT TO CALCULATE SCALARPRODUCT                             
C                                                                       
      SUBROUTINE DOT(X,Y,S)                                             
      DIMENSION X(3),Y(3)                                               
      S=0.                                                              
      DO 10 K=1,3                                                       
10    S=S+X(K)*Y(K)                                                     
      RETURN                                                            
      END                                                               
C                                                                       
C SUBROUTINE CROSS TO CALCULATE THE CROSSPRODUCT                        
C                                                                       
      SUBROUTINE CROSS(X,Y,Z)                                           
      DIMENSION X(3),Y(3),Z(3)                                          
      Z(1)=X(2)*Y(3)-X(3)*Y(2)                                          
      Z(2)=X(3)*Y(1)-X(1)*Y(3)                                          
      Z(3)=X(1)*Y(2)-X(2)*Y(1)                                          
      RETURN                                                            
      END                                                               
C                                                                       
C...                                                                    
C...                                                                    
C...                                                                    
      SUBROUTINE RSNANU(INUMRS,NAMRE)                                   
      COMMON /LISTRS/ NPREA,LIST(500)                                   
      CHARACTER*4 NAMEND(20),NAMFUL(26),NAMRE(500)                      
C                                                                       
C                                                                       
      DATA NAMEND/'H2N ','H3N ','CH3N','MCON','HCON',                   
     1           'CISH','TRAH','H2NP','P-GL','HN  ',                    
     2           'COOH','COO ','COM ','CONH','CONM',                    
     3           'COM2','COOM','COOE','CO  ','CO  '/                    
                                                                        
C                                                                       
      DATA NAMFUL/'ALA ','ASP ','CYS ','GLU ','PHE ',                   
     1           'GLY ','HIS ','ILE ','LYS ','LEU ',                    
     2           'MET ','ASN ','PRO ','GLN ','ARG ',                    
     3           'SER ','THR ','VAL ','TRP ','TYR ',                    
     4           'CYE ','H-PR','NORL','ORN ','HISE','BEAS'/             
C                                                                       
      DO 10 L=1,10                                                      
      IF(NAMRE(1).NE.NAMEND(L))GOTO 10                                  
      LIST(1)=L                                                         
      GOTO 15                                                           
 10   CONTINUE                                                          
C                                                                       
      STOP' NO VALID AMINO ENDGROUP'                                    
C                                                                       
 15   CONTINUE                                                          
      LAST=INUMRS-1                                                     
      DO 20 N=2,LAST                                                    
C                                                                       
        DO 30 L=1,26                                                    
        IF(NAMRE(N).NE.NAMFUL(L))GOTO 30                                
        LIST(N)=L                                                       
        GOTO 20                                                         
 30   CONTINUE                                                          
      WRITE(6,2000)NAMRE(N)                                             
 2000 FORMAT(A4,' IS NOT A VALID RESIDUE')                              
      STOP                                                              
C                                                                       
C                                                                       
 20   CONTINUE                                                          
C                                                                       
      DO 40 L=11,20                                                     
C                                                                       
      IF(NAMRE(INUMRS).NE.NAMEND(L))GOTO 40                             
      LIST(INUMRS)=L                                                    
      GOTO 45                                                           
C                                                                       
 40    CONTINUE                                                         
C                                                                       
      STOP' NO VALID CARBOXYL ENDGROUP'                                 
C                                                                       
 45   CONTINUE                                                          
      RETURN                                                            
      END                                                               
C...                                                                    
C...                                                                    
C...                                                                    
      SUBROUTINE KAIANG(LISTI,KEND,ANG)                                 
      COMMON /LISTRS/ NPREA,LIST(500)                                   
      COMMON /SCHDAT/ NHEAVY(21),NCHI(21),NCHANG(4,7,21)                
      COMMON /COORD/  CO(3,5000)                                        
      DIMENSION X(3,4),ANG(10)                                          
      NC=NCHI(LISTI)                                                    
      IF (NC.EQ.0) GO TO 1000                                           
      DO 10 J=1,NC                                                      
      IF (NCHANG(1,J,LISTI).NE.0) THEN                                  
           DO 20 L=1,4                                                  
           LN=NPREA+NCHANG(L,J,LISTI)                                   
           DO 21 K=1,3                                                  
   21      X(K,L)=CO(K,LN)                                              
   20      CONTINUE                                                     
           CALL DHD(X,AKAI)                                             
           ANG(J+3)=AKAI                                                
      ELSE                                                              
           ANG(J+3)=180.0                                               
      ENDIF                                                             
   10 CONTINUE                                                          
 1000 KEND=NC+3                                                         
      NPREA=NPREA+NHEAVY(LISTI)                                         
      RETURN                                                            
      END                                                               
./ ADD NAME=UTILITIE
./ NUMBER NEW1=10,INCR=10
C*    DEC/CMS REPLACEMENT HISTORY, ELEMENT UTILITIES.FOR                
C*    *70   23-JAN-1989 13:11:45 DBK ""                                 
C*    *69   20-JAN-1989 18:05:00 DBK ""                                 
C*    *68   20-JAN-1989 18:02:35 DBK ""                                 
C*    *67   20-JAN-1989 17:42:40 DBK "FIX PARSER ERROR CHECKING SO THAT 
C*    *66   19-JAN-1989 13:12:02 DBK "REMOVE CFLX CARDS"                
C*    *65   18-JAN-1989 16:23:34 DBK "FIX CALL GTRMSTR IN ATNA ROUTINE" 
C*    *64   18-JAN-1989 13:15:43 DBK "CHANGE CALL FRESTK TO = FRESTK"   
C*    *63   15-DEC-1988 15:56:55 DBK "ADD GETFILNM"                     
C*    *62    8-DEC-1988 19:40:41 DBK ""                                 
C*    *61    8-DEC-1988 18:41:57 DBK "FIX COMPRES"                      
C*    *60    8-DEC-1988 18:26:50 DBK "FIX LCRMSTR FOR ZERO LENGTH LINE" 
C*    *59    6-DEC-1988 12:35:24 DBK "ADD GETRESN AND GETATNA"          
C*    *58   21-NOV-1988 18:38:58 DBK "ADD NEW PARSING COMMAND"          
C*    *57   11-NOV-1988 12:00:18 DBK ""                                 
C*    *56   10-NOV-1988 13:28:45 DBK ""                                 
C*    *55   10-NOV-1988 13:20:25 DBK ""                                 
C*    *54   10-NOV-1988 13:07:19 DBK ""                                 
C*    *53   10-NOV-1988 12:35:19 DBK ""                                 
C*    *52   10-NOV-1988 12:19:46 DBK ""                                 
C*    *51   10-NOV-1988 11:49:07 DBK ""                                 
C*    *50   10-NOV-1988 11:38:13 DBK ""                                 
C*    *49    9-NOV-1988 17:54:05 DBK ""                                 
C*    *48    9-NOV-1988 17:45:28 DBK ""                                 
C*    *47    9-NOV-1988 17:33:50 DBK ""                                 
C*    *46    9-NOV-1988 17:08:23 DBK ""                                 
C*    *45    9-NOV-1988 14:42:41 DBK ""                                 
C*    *44    8-NOV-1988 18:13:25 DBK ""                                 
C*    *43    8-NOV-1988 16:38:47 DBK ""                                 
C*    *42    8-NOV-1988 16:23:39 DBK ""                                 
C*    *41    8-NOV-1988 15:44:25 DBK ""                                 
C*    *40    8-NOV-1988 14:52:48 DBK ""                                 
C*    *39    8-NOV-1988 14:43:15 DBK "ADD NXTWRD"                       
C*    *38    8-NOV-1988 14:35:43 DBK ""                                 
C*    *37    7-NOV-1988 18:39:21 DBK ""                                 
C*    *36    7-NOV-1988 18:31:20 DBK ""                                 
C*    *35    7-NOV-1988 18:22:12 DBK ""                                 
C*    *34    7-NOV-1988 18:09:05 DBK "FIX LCRMSTR"                      
C*    *33    7-NOV-1988 17:17:47 DBK ""                                 
C*    *32    4-NOV-1988 15:18:18 DBK "GET RID OF JOINWD"                
C*    *31    4-NOV-1988 15:14:51 DBK ""                                 
C*    *30    4-NOV-1988 10:52:32 DBK "FIX KYWRD"                        
C*    *29    1-NOV-1988 17:18:26 DBK "REMOVE UNUSED ROUTINES"           
C*    *28    1-NOV-1988 16:55:30 DBK ""                                 
C*    *27    1-NOV-1988 15:06:33 DBK "ADD NEW PARSER ROUTINES"          
C*    *26   12-OCT-1988 11:12:00 DBK "REMOVE GRAPHICS ROUTINES"         
C*    *25   10-OCT-1988 15:15:40 DBK "ADD SEND1D ROUTINE - 1D PLOTTING" 
C*    *24   20-SEP-1988 16:32:24 BACK ""                                
C*    *23   20-SEP-1988 11:12:46 BACK ""                                
C*    *22   19-SEP-1988 17:33:21 DBK ""                                 
C*    *21   19-SEP-1988 16:16:44 BACK ""                                
C*    *20   19-SEP-1988 15:45:02 BACK ""                                
C*    *19   19-SEP-1988 15:10:49 BACK "FIXED MALLADJSTMENT ERROR IN -NUM
C*    *18   19-SEP-1988 13:15:00 DBK ""                                 
C*    *17   15-SEP-1988 13:25:18 DBK ""                                 
C*    *16   14-SEP-1988 14:23:19 DBK ""                                 
C*    *15   14-SEP-1988 14:21:36 DBK ""                                 
C*    *14   14-SEP-1988 12:02:58 DBK ""                                 
C*    *13    8-SEP-1988 18:27:07 DBK "FIX DLPRBL ROUTINE - PROBLEM ON CO
C*    *12    7-SEP-1988 16:55:39 DBK "REMOVE EXCLAMATION PTS"           
C*    *11    1-SEP-1988 20:27:50 DK "CHANGED ARGUMENT FOR OPENING FILES 
C*    *10    1-SEP-1988 16:35:00 DK ""                                  
C*    *9     1-SEP-1988 16:30:57 DK ""                                  
C*    *8     1-SEP-1988 16:05:53 DK "CHANGED C.A.'S ON SEND2D"          
C*    *7     1-SEP-1988 11:28:41 DK "CHANGED CALLING ARGUMENTS TO SEND2D
C*    *6    31-AUG-1988 16:17:56 DK "CORRECTION TO UNITNUMBERS"         
C*    *5    31-AUG-1988 16:11:06 DK "ADDED SEND2D AND MORE OPTIONS TO PA
C*    *4    30-AUG-1988 17:35:58 DK "CHANGED REFERENCE DIRECTORY OF COMM
C*    *3    30-AUG-1988 17:29:11 DK "ADDED PARSPLOT TO UTILITIES"       
C*    *2    19-JUL-1988 12:13:49 DBK ""                                 
C*    *1     6-JUL-1988 15:36:49 DBK "PARSER + DIE + READTITL"          
C*    DEC/CMS REPLACEMENT HISTORY, ELEMENT UTILITIES.FOR                
C                                                                       
C                                                                       
C*MODULE PARSER *DECK CHCNBL                                            
      SUBROUTINE CHCNBL(ST,STLEN)                                       
C                                                                       
C     THIS SUBROUTINE CONVERTS ALL NONACCEPTABLE CONTROL CHARACTERS     
C     INTO BLANKS. ST IS DESTINED TO GO INTO A FORMAT BETWEEN           
C     QUOTES. THIS SUBROUTINE IS MACHINE DEPENDENT.                     
C                                                                       
      IMPLICIT INTEGER(A-Z)                                             
      CHARACTER*1 BLANK,LOWPRT,HGHPRT                                   
      CHARACTER*(*) ST                                                  
      DATA BLANK /' '/                                                  
CCVX  LOWPRT = CHAR(32)                                                 
CCVX  HGHPRT = CHAR(125)                                                
CCYB  LOWPRT = CHAR(32)                                                 
CCYB  HGHPRT = CHAR(125)                                                
CVAX  LOWPRT = CHAR(32)                                                 
CVAX  HGHPRT = CHAR(125)                                                
      LOWPRT = CHAR(64)                                                 
      HGHPRT = CHAR(255)                                                
C                                                                       
      IF (STLEN.EQ.0) RETURN                                            
      DO 1 I=1,STLEN                                                    
        IF(ST(I:I).GE.LOWPRT .AND. ST(I:I).LE.HGHPRT) GOTO 1            
          ST(I:I)=BLANK                                                 
    1   CONTINUE                                                        
      RETURN                                                            
      END                                                               
C                                                                       
C*MODULE PARSER *DECK CLCSPC                                            
      SUBROUTINE CLCSPC(ST,IFST)                                        
CJDW 22-MAR-88 FIX THE CASE FOR NO TRAILING SPACE.                      
C                                                                       
C FINDS LOCATION OF FIRST SPACE OR NULL IN ST OR LEN(ST) + 1 IF         
C  NO SPACE IS FOUND. THE RESULT IS RETURNED IN IFST                    
C                                                                       
      CHARACTER*(*) ST                                                  
      CHARACTER NULL*1                                                  
      NULL=CHAR(0)                                                      
      IFST = LEN(ST) + 1                                                
      DO 1 I=1,LEN(ST)                                                  
        IF ((ST(I:I) .EQ. ' ').OR.(ST(I:I).EQ.NULL)) THEN               
           IFST = I                                                     
           GO TO 2                                                      
        ENDIF                                                           
  1   CONTINUE                                                          
2     CONTINUE                                                          
      RETURN                                                            
      END                                                               
C                                                                       
C*MODULE PARSER *DECK CNVTUC                                            
      SUBROUTINE CNVTUC(ST,STLEN)                                       
C                                                                       
C     THIS CONVERTS A STRING TO ALL UPPERCASE. IT USES BYTE VARIABLES   
C     AND THE PROPERTY OF ASCII CODES THAT LETTERS ARE CONTIGUOUS AND   
C     UPPER CASE LETTERS ARE ALWAYS OFFSET A CONSTANT AMOUNT FROM THE   
C     EQUIVALENT LOWERCASE LETTER SO IT IS MACHINE DEPENDENT.           
C                                                                       
      IMPLICIT INTEGER(A-Z)                                             
      CHARACTER*(*) ST                                                  
      CHARACTER*1 A                                                     
C                                                                       
      DO 10 I=1,STLEN                                                   
         A= ST(I:I)                                                     
         IA = ICHAR(A)                                                  
CCVX     IF(IA.GE.97)THEN                                               
CCVX        IA=IA - 32                                                  
CCYB     IF(IA.GE.97)THEN                                               
CCYB        IA=IA - 32                                                  
CVAX     IF(IA.GE.97)THEN                                               
CVAX        IA=IA - 32                                                  
         IF(IA.GE.129.AND.IA.LE.169)THEN                                
            IA=IA + 64                                                  
            A = CHAR (IA)                                               
            ST(I:I)=A                                                   
         ENDIF                                                          
10    CONTINUE                                                          
      RETURN                                                            
      END                                                               
C*MODULE PARSER *DECK COMPARE                                           
      SUBROUTINE COMPAR (DATA,VARI,IFLAG)                               
      CHARACTER*4 DATA                                                  
      CHARACTER*1 VARI(4)                                               
C                                                                       
         DO 124 J=1,4                                                   
         IFLAG=INDEX(DATA(J:J),VARI(J))                                 
           IF(IFLAG.EQ.0) RETURN                                        
124      CONTINUE                                                       
128   CONTINUE                                                          
      RETURN                                                            
      END                                                               
C*MODULE DECODE.F *DECK DCWORK.F                                        
C PROCEDURES DECODI DECODF                                              
C PROJECT IMPACT                                                        
C PROGRAMER STEVEN BACK                                                 
C : TOCONVERT A STRING INTO A NUMBER.                                   
C                                                                       
C    ICTRL                                                              
C     0         INTEGER VALUE                                           
C     1         REAL VALUE                                              
       SUBROUTINE DCWORK(STRIN1,ICTRL,IOUT,ROUT)                        
       IMPLICIT REAL*8 (A-H,O-Z)                                        
       CHARACTER*(*) STRIN1                                             
       CHARACTER STRWOR *80                                             
       I=1                                                              
        IPNT = 1                                                        
 50    IF (STRIN1(I:I).EQ.' ') THEN                                     
           I=I+1                                                        
           GOTO 50                                                      
       ENDIF                                                            
       SIGN=1.0D0                                                       
       STRWOR ='0'                                                      
       IF (STRIN1(I:I).EQ.'-') THEN                                     
           SIGN=-1.0D0                                                  
       ENDIF                                                            
       IF (STRIN1(I:I).EQ.'+'.OR. STRIN1(I:I).EQ.'-') THEN              
           I=I+1                                                        
       ENDIF                                                            
 100   IF (STRIN1(I:I).GE.'0' .AND. STRIN1(I:I).LE.'9') THEN            
           STRWOR (IPNT:IPNT)=STRIN1(I:I)                               
           IPNT = IPNT + 1                                              
           I=I+1                                                        
           GOTO 100                                                     
       ENDIF                                                            
       DMENT=STRVAL(STRWOR ,IPNT-1)                                     
C                                                                       
C     IF ICTRL=0 THEN RETURN INTEGER PORTION                            
C                                                                       
           IF (ICTRL.EQ.0) THEN                                         
               DMENT = (DMENT+0.001D+00)*SIGN                           
               IOUT=INT(DMENT)                                          
               RETURN                                                   
           ENDIF                                                        
C                                                                       
C     OTHERWISE LOOK FOR '.'                                            
C                                                                       
           IF (STRIN1(I:I).EQ.'.') THEN                                 
               I=I+1                                                    
               J=1                                                      
               STRWOR ='0'                                              
 200           IF (STRIN1(I:I).GE.'0' .AND. STRIN1(I:I).LE.'9') THEN    
                   STRWOR (J:J)=STRIN1(I:I)                             
                   I=I+1                                                
                   J=J+1                                                
                   GOTO 200                                             
               ENDIF                                                    
               DFRACT=STRVAL(STRWOR ,J-1)/(10.0D+00**DFLOAT(J-1))       
               DMENT=DMENT+DFRACT                                       
           ENDIF                                                        
C                                                                       
C     THEN CHECK FOR EXPONENT.                                          
C                                                                       
           IF (STRIN1(I:I).EQ.'E'.OR.STRIN1(I:I)                        
     1     .EQ.'E'.OR.    STRIN1(I:I).EQ.'D'.OR.STRIN1(I:I).EQ.'D') THEN
               I=I+1                                                    
           ENDIF                                                        
           ESIGN=1.0D0                                                  
           IF (STRIN1(I:I).EQ.'-') THEN                                 
               ESIGN=-1.0D0                                             
           ENDIF                                                        
           IF (STRIN1(I:I).EQ.'+'.OR.STRIN1(I:I).EQ.'-') THEN           
               I=I+1                                                    
           ENDIF                                                        
           J=1                                                          
           STRWOR ='0'                                                  
 300       IF (STRIN1(I:I).GE.'0' .AND. STRIN1(I:I).LE.'9') THEN        
               STRWOR (J:J)=STRIN1(I:I)                                 
               I=I+1                                                    
               J=J+1                                                    
               GOTO 300                                                 
           ENDIF                                                        
           IF (J.GT.1) THEN                                             
               DEXP=STRVAL(STRWOR ,J-1)                                 
               ELSE                                                     
               DEXP=0.0                                                 
           ENDIF                                                        
           DTEST=(10.0D0**(ESIGN*DEXP))                                 
           IF (ESIGN.GT.0.0D0) THEN                                     
               DMENT=DMENT*(10.0D0**(DEXP))                             
               ELSE                                                     
               DMENT=DMENT/(10.0D0**(DEXP))                             
           ENDIF                                                        
           ROUT=DMENT*SIGN                                              
           RETURN                                                       
           END                                                          
C*MODULE DECODE.F *DECK DECODF.F                                        
C                                                                       
C                                                                       
CFH    REAL*8 FUNCTION DECODF(TXT,ISTRLEN)                              
       DOUBLE PRECISION FUNCTION DECODF(TXT,ISTRLE )                    
       IMPLICIT REAL*8 (A-H,O-Z)                                        
          INTEGER*4       ISTRLE                                        
       CHARACTER*1 TXT(ISTRLE +1)                                       
       CHARACTER WORK*40                                                
       DO 100 I=1,ISTRLE                                                
           WORK(I:I)=TXT(I)                                             
  100  CONTINUE                                                         
       WORK(ISTRLE +1:ISTRLE +1)=' '                                    
       CALL DCWORK(WORK,1,IOUT,ROUT)                                    
       DECODF=ROUT                                                      
       RETURN                                                           
       END                                                              
C*MODULE DECODE.F *DECK DECODI.F                                        
C                                                                       
C                                                                       
       INTEGER FUNCTION DECODI(TXT,ISTRLE )                             
       IMPLICIT REAL*8 (A-H,O-Z)                                        
          INTEGER*4       ISTRLE                                        
       CHARACTER*1 TXT(ISTRLE )                                         
       CHARACTER WORK*40                                                
       DO 100 I=1,ISTRLE                                                
           WORK(I:I)=TXT(I)                                             
  100  CONTINUE                                                         
       WORK(ISTRLE +1:ISTRLE +1)=' '                                    
       CALL DCWORK(WORK,0,IOUT,ROUT)                                    
       DECODI=IOUT                                                      
       RETURN                                                           
       END                                                              
C ----------------------------------------------------------------      
        SUBROUTINE DIE                                                  
C ----------------------------------------------------------------      
C PURPOSE: TO PROVIDE A TRACEBACK OF ERRORS                             
C                                                                       
C                                                                       
        DIE1 = 0.0                                                      
        DIE2 = 1.0/DIE1                                                 
C                                                                       
        STOP                                                            
        END                                                             
C                                                                       
C*MODULE PARSER *DECK DLPRBLK                                           
      SUBROUTINE DLPRBL (ST)                                            
CDBK 07-APR-88 FIX THE CASE FOR A PRECEDING BLANK                       
C                                                                       
C DELETES PRECEDING BLANK OR NULL CHARACTERS OF STRING IF FOUND         
C                                                                       
C                                                                       
      CHARACTER*(*) ST                                                  
        CHARACTER*80 TMP                                                
        CHARACTER*1 NULL                                                
        NULL = CHAR(0)                                                  
      ILNGTH = LEN(ST)                                                  
        ITOT = LEN(ST)                                                  
        TMP(1:ITOT) = ST(1:ITOT)                                        
        I=1                                                             
10      CONTINUE                                                        
        IF ((ST(I:I) .EQ. ' ').OR.(ST(I:I).EQ.NULL)) THEN               
           ILNGTH = ITOT - I                                            
           IBEG = I + 1                                                 
           TMP(1:ILNGTH) = ST(IBEG:ITOT)                                
           I = I + 1                                                    
           IF (I .EQ. ITOT) GO TO 2                                     
           GO TO 10                                                     
        ENDIF                                                           
2     CONTINUE                                                          
        ST(1:ITOT) = TMP(1:ILNGTH)                                      
      RETURN                                                            
      END                                                               
C*MODULE PARSER *DECK ECHO                                              
      SUBROUTINE ECHOIN(NLINE)                                          
CMSP  INCLUDE (UNITNUMS)                                                
      INCLUDE '/labo/qclib/inspidas/common/unitnums'
CMSP  INCLUDE (ECHO)                                                    
      INCLUDE '/labo/qclib/inspidas/common/echo'
C                                                                       
      DO 100 I=1,500                                                    
       READ(IN01,10,END=999) INLINE(I)                                  
100   CONTINUE                                                          
999   NLINE=I - 1                                                       
10    FORMAT(A80)                                                       
      REWIND IN01                                                       
      RETURN                                                            
      END                                                               
C*MODULE PARSER *DECK ECHOOUT                                           
      SUBROUTINE ECHOOU (NLINE)                                         
CMSP  INCLUDE (UNITNUMS)                                                
      INCLUDE '/labo/qclib/inspidas/common/unitnums'
CMSP  INCLUDE (ECHO)                                                    
      INCLUDE '/labo/qclib/inspidas/common/echo'
C                                                                       
      DO 100 I=1,NLINE                                                  
       WRITE(IOUT02,10) INLINE(I)                                       
100   CONTINUE                                                          
C                                                                       
10    FORMAT(6X,A80)                                                    
      WRITE(IOUT02,*)                                                   
      RETURN                                                            
      END                                                               
C*MODULE ENCODE.F *DECK ENCODF.F                                        
C                                                                       
C ENCODF: CONVERT REAL NUMBER TO STRING                                 
C     WITH MINIMUZATION OF RESULTING STRING                             
C     (WHICH MEANS UNEEDED SPACES, ZEROS AND DECIMAL                    
C     POINTS ARE REMOVED)                                               
C                                                                       
       SUBROUTINE ENCODF(RNUMBE ,TXT,MAXSIZ ,NUMSIZ )                   
       IMPLICIT REAL*8 (A-H,O-Z)                                        
          REAL*8          RNUMBE                                        
          INTEGER*4       MAXSIZ                                        
          INTEGER*4       NUMSIZ                                        
       CHARACTER*(*) TXT                                                
       CHARACTER TEMP*1,HOLD*25                                         
       RNUM=RNUMBE                                                      
       IFRMT=0                                                          
       TXT='                      '                                     
       CALL XYITOS(RNUM,TXT,NUMSIZ ,IFRMT,14,7)                         
 100   IF (TXT(1:1).EQ.' ') THEN                                        
           CALL XYDELC (TXT,1,1)                                        
           GOTO 100                                                     
       ENDIF                                                            
       CALL XYLSCH(TXT,NUMSIZ )                                         
       TEMP=TXT(NUMSIZ :NUMSIZ )                                        
 200   IF ((TEMP.EQ.' '.OR.TEMP.EQ.'0'.OR.TEMP.EQ.'.').AND.             
     * NUMSIZ .GT.1) THEN                                               
           CALL XYDELC (TXT,NUMSIZ ,1)                                  
           NUMSIZ =NUMSIZ -1                                            
           TEMP=TXT(NUMSIZ :NUMSIZ )                                    
           GOTO 200                                                     
       ENDIF                                                            
       END                                                              
C*MODULE ENCODE.F *DECK ENCODI.F                                        
C                                                                       
C SUBROUTINE ENCODI, CONVERT AN INTEGER TO A STRING                     
C                                                                       
       SUBROUTINE ENCODI(NUMBER,TXT,MAXSIZ ,NUMSIZ )                    
       IMPLICIT REAL*8 (A-H,O-Z)                                        
          INTEGER*4       MAXSIZ                                        
          INTEGER*4       NUMSIZ                                        
       CHARACTER*(*) TXT                                                
       CHARACTER TEMP*12                                                
       TXT=' '                                                          
       IF (NUMBER.LT.0) THEN                                            
           ISIGN=-1                                                     
           ELSE                                                         
           ISIGN=1                                                      
       ENDIF                                                            
       CALL XYITOC(NUMBER,TXT,MAXSIZ )                                  
 100   IF (TXT(1:1).EQ.' ') THEN                                        
           CALL XYDELC (TXT,1,1)                                        
           GOTO 100                                                     
       ENDIF                                                            
       IF (ISIGN.EQ.-1) THEN                                            
           CALL XYAPPD(TEMP,'-',TXT)                                    
           TXT=TEMP                                                     
       ENDIF                                                            
       CALL XYLSCH(TXT,NUMSIZ )                                         
       END                                                              
C                                                                       
C*MODULE PARSER *DECK EQST                                              
      FUNCTION EQST(ST1,LEN1,ST2,LEN2)                                  
C                                                                       
C     COMPARES TWO STRINGS AND RETURNS TRUE IF THEY ARE EQUAL.          
C                                                                       
      IMPLICIT INTEGER(A-Z)                                             
      LOGICAL EQST                                                      
      CHARACTER*1 ST1(1),ST2(2)                                         
C                                                                       
      IF(LEN1.EQ.LEN2) GOTO 1                                           
      EQST=.FALSE.                                                      
      RETURN                                                            
    1 EQST=.TRUE.                                                       
      IF (LEN1.EQ.0) RETURN                                             
      DO 2 I=1,LEN1                                                     
        IF(ST1(I).NE.ST2(I)) GOTO 3                                     
    2   CONTINUE                                                        
      RETURN                                                            
    3 EQST=.FALSE.                                                      
      RETURN                                                            
      END                                                               
C*MODULE PARSER *DECK FILNUL                                            
      SUBROUTINE FILNUL(ST,STMAX,STLEN)                                 
C                                                                       
C     THIS SUBROUTINE FILLS THE UNUSED PART OF ST WITH ASCII NUL (0)    
C                                                                       
      IMPLICIT INTEGER(A-Z)                                             
      CHARACTER*(*) ST                                                  
      CHARACTER*(1) NUL                                                 
C                                                                       
      NUL=CHAR(0)                                                       
      IF(STLEN.EQ.STMAX) RETURN                                         
      S=STLEN+1                                                         
      DO 1 I=S,STMAX                                                    
    1   ST(I:I)=NUL                                                     
      RETURN                                                            
      END                                                               
C*MODULE PARSER *DECK FILSPC                                            
      SUBROUTINE FILSPC(ST,STMAX,STLEN)                                 
C                                                                       
C     THIS SUBROUTINE FILLS THE UNUSED PART OF ST WITH SPACES.          
C                                                                       
      IMPLICIT INTEGER(A-Z)                                             
      CHARACTER*(*) ST                                                  
      CHARACTER*1 BLANK                                                 
      DATA BLANK/' '/                                                   
C                                                                       
      IF(STLEN.EQ.STMAX) RETURN                                         
      S=STLEN+1                                                         
      DO 1 I=S,STMAX                                                    
    1   ST(I:I)=BLANK                                                   
      RETURN                                                            
      END                                                               
C*MODULE DECODE.F *DECK STRVAL.F                                        
C                                                                       
C SUBROUTINE STRVAL: USED BY DECODE, CONVERTES A SIMPLE,                
C INTEGER (STYLELIZED) NUMBER IN CHARACTER FORM INTO A REAL             
C                                                                       
CFH    REAL*8 FUNCTION STRVAL(TXT,ISIZE)                                
       DOUBLE PRECISION FUNCTION STRVAL(TXT,ISIZE)                      
       IMPLICIT REAL*8 (A-H,O-Z)                                        
          INTEGER*4       LETZER                                        
       CHARACTER*(*) TXT                                                
       TENVAL=10.0D0**DFLOAT(ISIZE-1)                                   
       RVAL=0                                                           
C GET THE ASCII VALUE OF ZERO                                           
       LETZER =ICHAR('0')                                               
       ICOUNT=1                                                         
 100   IF (ICOUNT.LE.ISIZE) THEN                                        
           RVAL=RVAL+TENVAL*DFLOAT(ICHAR(TXT(ICOUNT:ICOUNT))-LETZER )   
           TENVAL=TENVAL/10.0D0                                         
           ICOUNT=ICOUNT+1                                              
           GOTO 100                                                     
       ENDIF                                                            
       STRVAL=RVAL                                                      
       RETURN                                                           
       END                                                              
C*MODULE PARSER *DECK GTFLNM                                            
        SUBROUTINE GTFLNM(FILNAM)                                       
CMSP  INCLUDE (COMMAND)                                                 
      INCLUDE '/labo/qclib/inspidas/common/command'
        CHARACTER*(*) FILNAM                                            
         LENFL = LEN(FILNAM)                                            
         CALL NXTWRD(COMLY2 ,COMLEN,FILNAM,LENFL)                       
CVAX     CALL FILSPC(FILNAM,60,LENFL)                                   
CCYB     CALL FILSPC(FILNAM,60,LENFL)                                   
CCVX     CALL FILNUL(FILNAM,60,LENFL)                                   
         CALL FILNUL(FILNAM,60,LENFL)                                   
         RETURN                                                         
         END                                                            
       SUBROUTINE KYWRD(KEYWOR ,KEY,NSIZE)                              
       IMPLICIT REAL*8 (A-H,O-Z)                                        
       CHARACTER*(*) KEYWOR                                             
       CHARACTER*1  KEY(NSIZE)                                          
       DO 10 I=1,NSIZE                                                  
         KEY(I)=KEYWOR (I:I)                                            
10     CONTINUE                                                         
       RETURN                                                           
       END                                                              
C*MODULE PARSER *DECK NXTCMND                                           
      SUBROUTINE NXTCMN (NXTSTR)                                        
C     DECLARATIONS FOR COMMAND SCANNING.                                
C                                                                       
CMSP  INCLUDE (COMMAND)                                                 
      INCLUDE '/labo/qclib/inspidas/common/command'
CMSP  INCLUDE (UNITNUMS)                                                
      INCLUDE '/labo/qclib/inspidas/common/unitnums'
      INTEGER CEIL,TASK,INUNIT,PRUNIT                                   
      INTEGER DELEN                                                     
      INTEGER WDLEN,WDMAX,SRCHWD,INDX,ST,STLEN                          
      LOGICAL  DELIM                                                    
      CHARACTER*(*) NXTSTR                                              
      LOGICAL EOF                                                       
C                                                                       
C     PARAMETER NWORD1=24,NWORD2=12,NWORD3 = 4                          
C                                                                       
C                                                                       
      DIMENSION WORDYN(12),ICNTRL(20)                                   
C                                                                       
      DATA MXCMSZ/2000/                                                 
      ISTRM=1                                                           
C THIS IS THE .INP FILE IT IS READING FROM                              
C                                                                       
C     THIS IS THE MAIN LOOP FOR READING AND PROCESSING COMMANDS. BEFORE 
C     READING THE NEXT COMMAND, MAKE SURE THAT THE VARIABLES HAVE NOT   
C     EXCEEDED THEIR BOUNDS.                                            
C                                                                       
   60 CONTINUE                                                          
      CALL TRIMST (COMLY2 ,COMLEN)                                      
      IF ( COMLEN .GT. 0 ) THEN                                         
         WRITE(IOUT06,91)                                               
         WRITE(IOUT06,90) COMLY2 (1:COMLEN)                             
         WRITE(IOUT06,92)                                               
   91 FORMAT(/20X,60('*'),                                              
     1       /20X,'WARNING : FOLLOWING EXTRANEOUS CHARCTERS ',          
     2            'FOUND.')                                             
   90 FORMAT(25(/20X,A80))                                              
   92 FORMAT(/20X,60('*'))                                              
      ENDIF                                                             
C                                                                       
      CALL RDCMND(COMLY2 ,MXCMSZ,COMLEN,ISTRM,EOF,.TRUE.)               
      IF (EOF)THEN                                                      
C                                                                       
C      EOF = .FALSE.                                                    
      WRITE(IOUT06,*)' EOF '                                            
      CALL TIMIT(IOUT02,1)                                              
      STOP ' END OF TASK FILE '                                         
      ENDIF                                                             
C                                                                       
      NXTSTR = ' '                                                      
      LENSTR = LEN(NXTSTR)                                              
      CALL NXTWRD(COMLY2 ,COMLEN,NXTSTR,LENSTR)                         
C                                                                       
C     SHORTEN WORD TO FOUR CHARACTERS OR LESS AND PAD WITH BLANKS TO    
C     PREPARE FOR SEARCH INTO COMMAND ARRAY.                            
C                                                                       
      IF (NXTSTR .NE. ' ') THEN                                         
        RETURN                                                          
      ELSE                                                              
       WRITE(IOUT06,*)' ERROR IN READING NEXT LINE '                    
       RETURN                                                           
      ENDIF                                                             
      END                                                               
C*MODULE PARSER *DECK RDCMND                                            
      SUBROUTINE RDCMND(COMLYN,MXCMSZ,CMNLEN,UNIT,EOF,QPRINT)           
C                                                                       
C             THIS SUBROUTINE READS A COMMAND IN FROM UNIT. THE COMMAND 
C     FIELD ON A LINE MAY EXTEND TO COLUMN 80 OR MAY BE TERMINATED BY AN
C     EXCLAMATION MARK ANYWHERE ON THE LINE. A COMMAND IS ONE COMMAND   
C     FIELD OF INFORMATION UNLESS THE LAST NONBLANK CHARACTER IN THAT   
C     FIELD IS A HYPHEN. IN THAT CASE, THE COMMAND FIELD ON THE NEXT    
C     RECORD IS APPENDED TO THE CHARACTERS PRECEDING THE HYPHEN.        
C     TRAILING BLANKS ARE REMOVED FROM ALL COMMAND FIELDS, AND LOWERCASE
C     LETTERS ARE CONVERTED TO UPPERCASE. IF AN END OF FILE IS SEEN     
C     WHILE READING A COMMAND, EOF IS TURNED ON. IF EOF IS TURNED ON    
C     WHEN CALLED, THE SUBROUTINE RETURNS IMMEDIATELY. IF QPRINT IS ON, 
C     THE RECORDS ARE PRINTED ON UNIT 6 AS THEY ARE READ.               
C                                                                       
      IMPLICIT INTEGER(A-Z)                                             
          INTEGER*4       NEWLEN                                        
CMSP  INCLUDE (UNITNUMS)                                                
      INCLUDE '/labo/qclib/inspidas/common/unitnums'
      CHARACTER*(*) COMLYN                                              
      CHARACTER*1 HYPHEN,EXCLMK                                         
      CHARACTER*80 CARD                                                 
      LOGICAL EOF,QPRINT                                                
      DATA HYPHEN/'-'/,EXCLMK/']'/                                      
C                                                                       
      IF(EOF) RETURN                                                    
      CMNLEN=0                                                          
      IF (QPRINT) WRITE(IOUT06,201)                                     
  201 FORMAT('  ')                                                      
    1 READ(UNIT,100,END=9) CARD                                         
  100 FORMAT(A80)                                                       
  200 FORMAT(14X,80A1)                                                  
      CARDLN=80                                                         
      IEND = INDEX(CARD,EXCLMK)                                         
      IF (IEND.NE.0) CARDLN=IEND-1                                      
      CALL TRIMST (CARD,CARDLN)                                         
      CALL CHCNBL(CARD,CARDLN)                                          
      CALL CNVTUC(CARD,CARDLN)                                          
      IF(CARDLN.EQ.0) GOTO 1                                            
      IF(CARD(CARDLN:CARDLN).NE.HYPHEN) THEN                            
    2    NEWLEN  = CMNLEN + CARDLN                                      
         COMLYN(CMNLEN+1:NEWLEN ) = CARD(1:CARDLN)                      
         CMNLEN = NEWLEN                                                
         RETURN                                                         
      ELSE                                                              
        IF(CARDLN.EQ.1) GOTO 1                                          
        NEWLEN  = CMNLEN + CARDLN - 1                                   
        COMLYN(CMNLEN+1:NEWLEN ) = CARD(1:CARDLN-1)                     
        CMNLEN = NEWLEN                                                 
        GOTO 1                                                          
      ENDIF                                                             
    9 EOF=.TRUE.                                                        
      RETURN                                                            
      END                                                               
C* DEC/CMS REPLACEMENT HISTORY, ELEMENT READTITL.FOR                    
C* *3    10-MAR-1988 14:28:01 DBK ""                                    
C* *2    10-MAR-1988 12:42:58 DBK ""                                    
C* *1     7-MAR-1988 15:05:20 DBK "UTILITY ROUTINES"                    
C* DEC/CMS REPLACEMENT HISTORY, ELEMENT READTITL.FOR                    
      SUBROUTINE READTI  (INUNIT,IOUT,IPRN)                             
      IMPLICIT REAL*8 (A-H,O-Z)                                         
      IMPLICIT INTEGER*4(I-N)                                           
C                                                                       
      CHARACTER*80  TITLE                                               
      CHARACTER*1 STAR,BLANK                                            
      DATA  STAR/'*'/, BLANK/' '/                                       
C                                                                       
C IPRN IS A PRINT FLAG IPRN = 1         PRINT                           
C                             OTHERWISE NORPINT                         
C                                                                       
10    READ(INUNIT,95) TITLE                                             
      IF (TITLE(1:1) .NE. STAR)  THEN                                   
        WRITE(IOUT,110)                                                 
        CALL DIE                                                        
      ENDIF                                                             
C                                                                       
      DO 20 I=80,2,-1                                                   
         IF(TITLE(I:I).NE.BLANK) THEN                                   
           IF(IPRN.EQ.1) WRITE(IOUT,100) TITLE                          
           GO TO 10                                                     
         ENDIF                                                          
20      CONTINUE                                                        
C                                                                       
 95   FORMAT(A80)                                                       
100   FORMAT(1X,A80)                                                    
110   FORMAT(' TITLE CARDS MUST HAVE A * IN THE COLUMN 1 OF EACH LINE', 
     . //,' *** EXECUTION TERMINATING *** ')                            
C                                                                       
      RETURN                                                            
      END                                                               
        SUBROUTINE COMPRE (COMLYN,LENCOM)                               
        IMPLICIT REAL*8 (A-H,O-Z)                                       
C                                                                       
C REMOVES EXTRA SPACES FROM THE LINE                                    
C  COMLYN - COMMAND LINE                                                
C  LENCOM - LENGTH OF COMMAND LINE                                      
C                                                                       
        CHARACTER*(*) COMLYN                                            
        CHARACTER*1 TEST                                                
        IF (LENCOM .LE. 0) RETURN                                       
        N = 1                                                           
30      CONTINUE                                                        
        IBEG = N                                                        
        IEND = LENCOM                                                   
        DO 10 I=IBEG,IEND                                               
         TEST = COMLYN(I:I)                                             
         IF (TEST .EQ. ' ') THEN                                        
           IF (COMLYN(I+1:I+1) .EQ. ' ') THEN                           
               DO 20 J=I,IEND                                           
                COMLYN(J:J) = COMLYN(J+1:J+1)                           
20             CONTINUE                                                 
           LENCOM = LENCOM - 1                                          
           N = I                                                        
           GOTO 30                                                      
           ENDIF                                                        
         ENDIF                                                          
         N = I                                                          
10      CONTINUE                                                        
        LENCOM = N                                                      
        RETURN                                                          
        END                                                             
        SUBROUTINE RMVWBK  (COMLYN,LENCOM,LEN,IOFFSE )                  
        IMPLICIT REAL*8 (A-H,O-Z)                                       
          INTEGER*4       IOFFSE                                        
        CHARACTER*(*) COMLYN                                            
C                                                                       
C REMOVES A WORD FROM A COMMAND LINE BEGINNING FROM THE LAST CHARACTER  
C  OF THE WORD                                                          
C  COMLYN - COMMAND LINE                                                
C  LENCOM - LENGTH OF COMMAND LINE                                      
C  LEN - LENGTH OF WORD TO BE REMOVED                                   
C  IOFFSET - INDEX OF LAST CHARACTER OF WORD                            
        IOFF1 = IOFFSE                                                  
        IBEG = IOFF1 - LEN                                              
        IEND = IOFF1                                                    
        COMLYN(IBEG:IOFF1) = ' '                                        
        CALL COMPRE (COMLYN,LENCOM)                                     
        RETURN                                                          
        END                                                             
        SUBROUTINE RMVWFD  (COMLYN,LENCOM,LEN,IOFFSE )                  
        IMPLICIT REAL*8 (A-H,O-Z)                                       
          INTEGER*4       IOFFSE                                        
        CHARACTER*(*) COMLYN                                            
C                                                                       
C REMOVES A WORD FROM A COMMAND LINE BEGINNING WITH THE FIRST CHARACTER 
C  OF THE WORD                                                          
C  COMLYN - COMMAND LINE                                                
C  LENCOM - LENGTH OF COMMAND LINE                                      
C  LEN - LENGTH OF WORD TO BE REMOVED                                   
C  IOFFSET - INDEX OF FIRST CHARACTER OF WORD                           
        IOFF1 = IOFFSE  + LEN + 1                                       
        IBEG = IOFF1 - LEN                                              
        COMLYN(IBEG:IOFF1) = ' '                                        
        CALL COMPRE (COMLYN,LENCOM)                                     
        RETURN                                                          
        END                                                             
        INTEGER FUNCTION LCRMST (COMLYN,LENCOM,STRING,LEN1,OPTION,LEN2) 
        IMPLICIT REAL*8 (A-H,O-Z)                                       
          INTEGER*4       IOFFSE                                        
          INTEGER*4       IOFFBE                                        
C                                                                       
C  FUNCTION WHICH DETERMINES IF A WORD (OR A FRACTIONAL PART ) EXISTS   
C   THE VALUE RETURNED IS THE INDEX OF THE LAST CHARACTER OF THE WORD   
C   COMLYN - COMMAND LINE                                               
C   LENCOM - LENGTH OF LINE                                             
C   STRING - THE FIRST LEN1 CHARACTERS WHICH MUST OCCUR FOR THE WORD TO 
C            BE FOUND                                                   
C   OPTION - AN OPTIONAL EXTENSION OF THE WORD - SOME OF IT MAY OR MAY  
C            NOT EXIST ( E.G. IF STRING IS 'BIG' AND 'GER' IS OPTIONAL  
C            'BIGGEST' WOULD NOT BE FOUND BUY BIG,BIGG,BIGGE,OR BIGGER  
C            COULD ALL BE FOUND                                         
C                                                                       
        CHARACTER*(*) COMLYN,STRING,OPTION                              
        CHARACTER*(800) NXTWD                                           
        CHARACTER*1 SPACE                                               
        IOFF = 0                                                        
        LCRMST  = 0                                                     
        IF (LENCOM .LE. 0) RETURN                                       
CCVX    SPACE = CHAR(32)                                                
CCYB    SPACE = CHAR(32)                                                
CVAX    SPACE = CHAR(32)                                                
        SPACE = CHAR(64)                                                
        IOFFSE  = 1                                                     
        IOFFBE  = 1                                                     
C FIND THE MANDATORY PART OF THE KEYWORD IN COMLYN                      
20      IF (IOFFBE  .GT. LENCOM) RETURN                                 
        IOFF = INDEX(COMLYN(IOFFBE :LENCOM),STRING) + IOFFBE  - 1       
C IOFF IS 0 IF IT IS NOT THERE                                          
        IF (IOFF .EQ. 0) RETURN                                         
C IF THE PRECEDING CHARACTER IN THE COMMAND LINE IS NOT A BLANK         
C    THEN THIS IS THE MIDDLE OF A WORD                                  
       IF (IOFF .GT. 1) THEN                                            
C       TRY AGAIN IF THIS IS IN THE MIDDLE OF A WORD                    
        IOFFM1 = IOFF - 1                                               
        IF (COMLYN(IOFFM1:IOFFM1) .NE. SPACE) THEN                      
         IOFFBE  = IOFF + 1                                             
         GOTO 20                                                        
        ENDIF                                                           
       ENDIF                                                            
C LTEST WOULD BE THE MAXIMUM LENGTH OF THE STRING+OPTION + THE OFFSET   
C   OF STRING + 1 TO ACCOUNT FOR SPACE AFTER ALL WORDS                  
        LTEST = LEN1 + LEN2 + IOFF + 1                                  
        IF (LTEST .GT. LENCOM) LTEST = LENCOM                           
        LBEGIN = IOFF + LEN1                                            
        IF (LBEGIN .GT. LENCOM) LBEGIN = LENCOM                         
C SEARCH FOR OPTION IN COMLYN                                           
C   FIND FIRST SPACE AFTER STRING BUT BEFORE THE END OF OPTION          
        IOFF2 = INDEX(COMLYN(LBEGIN:LTEST),SPACE)                       
C IF THERE IS NO SPACE THEN THE REST OF THE WORD AFTER STRING MUST      
C   BE LONGER THAN OPTION THEREFORE THIS CAN'T BE WORD WE ARE LOOKING FO
        IF (IOFF2 .EQ. 0) THEN                                          
           IF (LTEST .GE. LENCOM) THEN                                  
             IOFF2 = LENCOM - IOFF - LEN1 + 2                           
             LTEST = LENCOM                                             
           ELSE                                                         
             RETURN                                                     
           ENDIF                                                        
        ENDIF                                                           
        IENDWD = IOFF2 + IOFF + LEN1 - 1                                
C  FILL NXTWD WITH THE PORTION OF COMLYN WHICH WOULD CORRESPOND TO OPTIO
        NXTWD = COMLYN(LBEGIN:IENDWD)                                   
C NDIFF IS THE NUMBER OF CHARACTERS BEFORE THE NEXT SPACE               
        NDIFF = IOFF2 - 1                                               
C SEARCH CHAR. BY CHAR. THROUGH NXTWD TO MAKE SURE THAT IT CORRESPONDS T
C   OPTION - NOTE THAT NOT ALL OF OPTION MUST EXIST                     
        DO 10 I=1,NDIFF                                                 
          IF (NXTWD(I:I) .NE. OPTION(I:I)) RETURN                       
10      CONTINUE                                                        
C CALCULATE THE OFFSET TO THE END OF THE WORD WHICH ACTUALLY IS IN THE L
           IOFFSE  = IOFF + LEN1 + NDIFF                                
C CALCULATE LENGTH OF WORD IN LINE (INCLUDE ROOM FOR SPACE AT END OF WOR
           LTOT = IOFFSE  - IOFF + 1                                    
C REMOVE THE WORD FROM LINE                                             
           CALL RMVWBK  (COMLYN,LENCOM,LTOT,IOFFSE )                    
           IOFFSE  = IOFFSE  - LTOT                                     
C PUT VALUE OF OFFSET IN VALUE OF FUNCTION                              
           LCRMST  = IOFFSE                                             
        IF (IOFFSE  .EQ. 0) LCRMST  = 1                                 
           RETURN                                                       
           END                                                          
        SUBROUTINE GETNXT  (COMLYN,LENCOM,STRING,LEN1,OPTION,LEN2,      
     *                      RETSTR,LEN)                                 
        IMPLICIT REAL*8 (A-H,O-Z)                                       
C                                                                       
C GETS THE NEXT STRING -                                                
C  COMLYN - COMMAND LINE                                                
C  LENCOM - LENGTH OF COMMAND LINE                                      
C  STRING - SEARCHES FOR THIS STRING OF LENGTH, LEN1                    
C  OPTION - OPTIONAL PORTION OF STRING, LENGTH = LEN2                   
C  RETSTR - STRING TO BE RETURNED, LENGTH = LEN                         
C                                                                       
        CHARACTER*(*) COMLYN,STRING,OPTION                              
        CHARACTER*(*) RETSTR                                            
        CHARACTER*1 DELIM                                               
        DELIM = ' '                                                     
        RETSTR = ' '                                                    
        CALL COMPRE (COMLYN,LENCOM)                                     
        IOFF1 = LCRMST (COMLYN,LENCOM,STRING,LEN1,OPTION,LEN2)          
        IF (IOFF1 .GE. LENCOM) RETURN                                   
        IF (IOFF1 .GT. 0) THEN                                          
          IF (COMLYN(IOFF1:IOFF1) .EQ. ' ') IOFF1 = IOFF1 + 1           
          CALL NEWWD(COMLYN,LENCOM,RETSTR,IOFF1,LEN,DELIM)              
        ELSE                                                            
         RETURN                                                         
        ENDIF                                                           
        RETURN                                                          
        END                                                             
        SUBROUTINE NEWWD(COMLYN,LENCOM,STRING,IOFFSE ,LENGTH,DELIM)     
        IMPLICIT REAL*8 (A-H,O-Z)                                       
          INTEGER*4       IOFFSE                                        
          INTEGER*4       LENGTH                                        
C                                                                       
C RETURNS A WORD (ALL CHARACTERS UP TO A DELIMITER)                     
C  COMLYN - COMMAND LINE                                                
C  LENCOM - LENGTH OF COMMANDLINE                                       
C  STRING - NEXT WORD                                                   
C  IOFFSET - BEGINNING OF WORD IN COMLYN                                
C  LENGTH - LENGTH OF WORD RETURNED                                     
C  DELIM - DELIMITER                                                    
C                                                                       
        CHARACTER*(*) COMLYN,STRING,DELIM                               
        IF (LENCOM .EQ. 0) THEN                                         
          STRING = ' '                                                  
          RETURN                                                        
        ENDIF                                                           
        LENGTH = INDEX(COMLYN(IOFFSE :LENCOM),DELIM)                    
C IF THERE IS NO SPACE AT END OF LINE GET ALL CHARACTERS TO END OF LINE 
         IF (LENGTH .EQ. 0) THEN                                        
           LENGTH = LENCOM - IOFFSE  + 1                                
          ENDIF                                                         
        IEND = IOFFSE  + LENGTH - 1                                     
C                                                                       
C  PROTECT AGAINST READING IN A WORD WHICH IS TOO LONG TO FIT IN STRING 
C                                                                       
        IF (LEN(STRING) .LT. LENGTH) THEN                               
          LENGTH  = LEN(STRING)                                         
          IENDN = IOFFSE  + LENGTH  - 1                                 
        ELSE                                                            
          LENGTH  = LENGTH                                              
          IENDN = IEND                                                  
        ENDIF                                                           
        STRING = COMLYN(IOFFSE :IENDN)                                  
        CALL RMVWBK  (COMLYN,LENCOM,LENGTH,IEND)                        
        RETURN                                                          
        END                                                             
        SUBROUTINE GETPAF  (COMLYN,LENCOM,STRING,LEN1,OPTION,LEN2,FVALU)
        IMPLICIT REAL*8 (A-H,O-Z)                                       
C FINDS A FLOATING POINT PARAMETER AFTER A STRING                       
C  COMLYN,LENCOM - COMMAND LINE & ITS LENGTH                            
C  STRING - STRING TO BE SEARCHED FOR TO LOCATE PARAMETER               
C  OPTION - OPTIONAL STRING WHICH MAY BE PRESENT                        
C  LEN1,LEN2 - LENGTH OF STRING AND OPTION, RESPECTIVELY                
C  FVALU - VALUE OF THE PARAMETER TO BE RETURNED                        
C                                                                       
        CHARACTER*(*) COMLYN,STRING,OPTION                              
        CHARACTER*80 RETSTR                                             
        CALL GETNXT  (COMLYN,LENCOM,STRING,LEN1,OPTION,LEN2,RETSTR,LEN) 
        IF (RETSTR .EQ. ' ') RETURN                                     
C       FVALU = DECODF(RETSTR,LEN)                                      
        CALL DCWORK(RETSTR,1,IOUT,ROUT)                                 
        FVALU = ROUT                                                    
        RETURN                                                          
        END                                                             
        SUBROUTINE GETPAI  (COMLYN,LENCOM,STRING,LEN1,OPTION,LEN2,NVALU)
        IMPLICIT REAL*8 (A-H,O-Z)                                       
C GETS AN INTEGER PARAMETER VALUE                                       
C  COMLYN,LENCOM - COMMAND LINE & ITS LENGTH                            
C  STRING - STRING TO BE SEARCHED FOR TO LOCATE PARAMETER               
C  OPTION - OPTIONAL STRING WHICH MAY BE PRESENT                        
C  LEN1,LEN2 - LENGTH OF STRING AND OPTION, RESPECTIVELY                
C  NVALU - VALUE OF THE PARAMETER TO BE RETURNED                        
C                                                                       
        CHARACTER*(*) COMLYN,STRING,OPTION                              
        CHARACTER*80 RETSTR                                             
        CALL GETNXT  (COMLYN,LENCOM,STRING,LEN1,OPTION,LEN2,RETSTR,LEN) 
        IF (RETSTR .EQ. ' ') RETURN                                     
        CALL DCWORK(RETSTR,0,IOUT,ROUT)                                 
C       NVALU = DECODI(RETSTR,LEN)                                      
        NVALU = IOUT                                                    
        RETURN                                                          
        END                                                             
        SUBROUTINE NXTWRD(COMLYN,LENCOM,STRING,NLENG)                   
        IMPLICIT REAL*8 (A-H,O-Z)                                       
          INTEGER*4       IOFFSE                                        
C                                                                       
C RETURNS A WORD OF LENG NLENG, DELETES FULL WORD                       
C   COMLYN - COMMAND LINE                                               
C   LENCOM - LENGTH OF COMMAND LINE                                     
C   STRING - WORD TO BE RETURNED                                        
C   NLENG - NUMBER OF CHARACTERS IN STRING                              
C                                                                       
        CHARACTER*(*) COMLYN,STRING                                     
        CHARACTER*(80) TEMP                                             
        CHARACTER*(1) SPACE                                             
C                                                                       
        SPACE = ' '                                                     
C                                                                       
        STRING(1:NLENG) = ' '                                           
        TEMP(1:NLENG) = ' '                                             
C                                                                       
        CALL TRIMST (COMLYN,LENCOM)                                     
        IOFFSE  = 1                                                     
        CALL NEWWD(COMLYN,LENCOM,TEMP,IOFFSE ,LEN,SPACE)                
        IF (NLENG .GT. LEN) THEN                                        
          NTEMP = LEN                                                   
        ELSE                                                            
          NTEMP = NLENG                                                 
        ENDIF                                                           
        STRING(1:NTEMP) = TEMP(1:NTEMP)                                 
        RETURN                                                          
        END                                                             
        SUBROUTINE CNVSTB (WD,NEXTWD,LENWD)                             
        IMPLICIT REAL*8 (A-H,O-Z)                                       
C                                                                       
C  CONV CHAR *1 ARRAY(LENWD) TO CHAR *LENWD ARRAY                       
C                                                                       
        CHARACTER*1 WD                                                  
        CHARACTER*(*) NEXTWD                                            
        DIMENSION WD(LENWD)                                             
        NEXTWD=' '                                                      
        DO 10 I=1,LENWD                                                 
          NEXTWD(I:I)=WD(I)                                             
 10     CONTINUE                                                        
        RETURN                                                          
        END                                                             
        SUBROUTINE TRIMST (STRING,LENCOM)                               
        IMPLICIT REAL*8 (A-H,O-Z)                                       
C                                                                       
C TRIMS LEADING BLANK FROM STRING                                       
C  LENCOM IS LENGTH OF STRING                                           
C                                                                       
        CHARACTER*(*) STRING                                            
        CHARACTER*1 NULL                                                
        IF (LENCOM .EQ. 0) RETURN                                       
        NULL = CHAR(0)                                                  
        IOLD = LENCOM                                                   
C                                                                       
C REMOVE PRECEDING BLANKS                                               
C                                                                       
        DO 20 J=1,IOLD                                                  
         IF (STRING(1:1) .EQ. ' ' .OR. STRING(1:1) .EQ. NULL) THEN      
         DO 10 I=1,LENCOM                                               
10        STRING(I:I) = STRING(I+1:I+1)                                 
          LENCOM = LENCOM - 1                                           
        ELSE                                                            
          IOLD1 = LENCOM                                                
          DO 30 K=IOLD1,1,-1                                            
           IF (STRING(K:K) .EQ. ' ' .OR. STRING(K:K) .EQ. NULL) THEN    
            STRING(K:K) = NULL                                          
            LENCOM = LENCOM - 1                                         
           ELSE                                                         
            RETURN                                                      
           ENDIF                                                        
30        CONTINUE                                                      
        ENDIF                                                           
20      CONTINUE                                                        
        RETURN                                                          
        END                                                             
        SUBROUTINE GTRMST (COMLYN,LENCOM,STRING,LEN1,OPTION,LEN2,       
     *                      RETSTR,DELIM,LENGTH)                        
        IMPLICIT REAL*8 (A-H,O-Z)                                       
C                                                                       
C GETS THE NEXT STRING -                                                
C  COMLYN - COMMAND LINE                                                
C  LENCOM - LENGTH OF COMMAND LINE                                      
C  STRING - SEARCHES FOR THIS STRING OF LENGTH, LEN1                    
C  OPTION - OPTIONAL PORTION OF STRING, LENGTH = LEN2                   
C  RETSTR - STRING TO BE RETURNED, LENGTH = LEN                         
C  DELIM -  DELIMITER FOR STRING                                        
        CHARACTER*(*) COMLYN,STRING,OPTION                              
        CHARACTER*(*) RETSTR                                            
        CHARACTER*(*) DELIM                                             
        RETSTR = ' '                                                    
        CALL COMPRE (COMLYN,LENCOM)                                     
        IOFF1 = LCRMST (COMLYN,LENCOM,STRING,LEN1,OPTION,LEN2)          
        IF (IOFF1 .GE. LENCOM) RETURN                                   
        IF (IOFF1 .GT. 0) THEN                                          
          IF (COMLYN(IOFF1:IOFF1) .EQ. ' ') IOFF1 = IOFF1 + 1           
          CALL NEWWD(COMLYN,LENCOM,RETSTR,IOFF1,LENGTH,DELIM)           
C GET RID OF THE DELIMITER FROM RETSTR                                  
        LDEL = LEN(DELIM)                                               
         IF (RETSTR(LENGTH-LDEL+1:LENGTH) .EQ. DELIM) THEN              
          RETSTR(LENGTH-LDEL+1:LENGTH) = ' '                            
          LENGTH = LENGTH - LDEL                                        
         ENDIF                                                          
        ELSE                                                            
         RETURN                                                         
        ENDIF                                                           
        RETURN                                                          
        END                                                             
        SUBROUTINE GETRES (IRES,IOUT)                                   
        IMPLICIT REAL*8 (A-H,O-Z)                                       
CMSP  INCLUDE (COMMAND)                                                 
      INCLUDE '/labo/qclib/inspidas/common/command'
C                                                                       
C   RETURNS THE VALUE, IRES, AFTER THE NEXT OCCURENCE OF RESNUMBER IN TH
C    COMMAND LINE                                                       
C                                                                       
C     EVENTUALLY THIS ROUTINE SHOULD ALSO TRANSLATE INSERTION/DELETION/C
C       CODES                                                           
        CALL GETPAI  (COMLY2 ,COMLEN,'RESN',4,'UMBER',5,IRES)           
        RETURN                                                          
        END                                                             
C------------------------------------------                             
        SUBROUTINE GETATN (INAME,IOUT)                                  
        IMPLICIT REAL*8 (A-H,O-Z)                                       
CMSP  INCLUDE (COMMAND)                                                 
      INCLUDE '/labo/qclib/inspidas/common/command'
        CHARACTER*(*) INAME                                             
C                                                                       
C   RETURNS THE VALUE, INAME , AFTER THE NEXT OCCURENCE OF ATOMNAME IN T
C    COMMAND LINE                                                       
C   INAME IS THE CHARACTER NAME OF THE ATOM WHICH IS ACTUALLY FOUND IN T
C    COMMAND LINE                                                       
C                                                                       
        LENGTH = 0                                                      
         CALL GTRMST (COMLY2 ,COMLEN,'ATOM',4,'NAME',4,INAME,' ',LENGTH)
        IF (LENGTH .EQ. 0) THEN                                         
          CALL GTRMST (COMLY2 ,COMLEN,'ATNA',4,'ME',2,INAME,' ',LENGTH) 
        ENDIF                                                           
        RETURN                                                          
        END                                                             
        SUBROUTINE GETFIL  (FILNAM)                                     
        IMPLICIT REAL*8 (A-H,O-Z)                                       
          INTEGER*4       MATMTY                                        
          INTEGER*4       MPLT1D                                        
          INTEGER*4       MPLT2D                                        
          INTEGER*4       MSUBTY                                        
          INTEGER*4       MCONTU                                        
          INTEGER*4       MCHWOR                                        
          INTEGER*4       MPTSST                                        
C                                                                       
C  RETRIEVES A FILE NAME FROM A COMMAND LINE AFTER THE WORD 'FILE'      
C                                                                       
CMSP  INCLUDE (MAXSIZE)                                                 
      INCLUDE '/labo/qclib/inspidas/common/maxsize'
CMSP  INCLUDE (COMMAND)                                                 
      INCLUDE '/labo/qclib/inspidas/common/command'
C                                                                       
        CHARACTER*(*) FILNAM                                            
C                                                                       
        FILNAM = ' '                                                    
        CALL GETNXT  (COMLY2 ,COMLEN,'FILE',4,'NAME',4,FILNAM,LENGTH)   
C                                                                       
        RETURN                                                          
        END                                                             
C*MODULEENCODE.F *DECK XYAPPD.F                                         
C                                                                       
C     APPENDS TWO FORTRAN STRINGS, (BETTER THAN BUILTIN APPEND)         
C                                                                       
      SUBROUTINE XYAPPD(FRONT,UTXT,ALL)                                 
      IMPLICIT REAL*8 (A-H,O-Z)                                         
      CHARACTER*(*) FRONT,UTXT,ALL                                      
      CALL XYLSCH(UTXT,IONE)                                            
      FRONT=' '                                                         
      DO 100 I=1,IONE                                                   
         FRONT(I:I)=UTXT(I:I)                                           
 100  CONTINUE                                                          
      CALL XYLSCH(ALL,ITWO)                                             
      DO 200 I=1,ITWO                                                   
         FRONT(I+IONE:I+IONE)=ALL(I:I)                                  
 200  CONTINUE                                                          
      RETURN                                                            
      END                                                               
C*MODULE ENCODE.F *DECK XYDELCH.F                                       
C                                                                       
C XYDELCH: DELETES FROM A STRING A RANGE OF CHARACTER                   
C                                                                       
       SUBROUTINE XYDELC (TXT,ISTART,ISIZE)                             
       IMPLICIT REAL*8 (A-H,O-Z)                                        
       CHARACTER*(*) TXT                                                
       CALL XYLSCH(TXT,IMAX)                                            
       DO 100 I=ISTART,IMAX-ISIZE                                       
           TXT(I:I)=TXT(I+ISIZE:I+ISIZE)                                
 100   CONTINUE                                                         
       DO 200 I=IMAX-ISIZE+1,IMAX                                       
           TXT(I:I)=' '                                                 
 200   CONTINUE                                                         
       RETURN                                                           
       END                                                              
C*MODULEENCODE.F *DECK XYITOC.F                                         
C                                                                       
C     CONVERTS AN INTEGER TO A STRING.                                  
C     IVAL IS THE INTEGER TO CONVERT                                    
C     STR IS THE STRING VARABLE TO PUT THE RESULT                       
C     ISIZE IS THE MAXIMUM SIZE THAT THE RESULT IS ALLOWED TO BE        
C                                                                       
       SUBROUTINE XYITOC(IVAL,STR,ISIZE)                                
       IMPLICIT REAL*8 (A-H,O-Z)                                        
       CHARACTER*(*) STR                                                
       CHARACTER*40 DIGITS                                              
       CHARACTER*1 K                                                    
       INTVAL=ABS(IVAL)                                                 
       I=1                                                              
       DIGITS='0123456789'                                              
       IF (IVAL.EQ.0) THEN                                              
          STR='0'                                                       
       ELSE                                                             
          STR(1:1)=' '                                                  
 100      I=I+1                                                         
          ID = MOD(INTVAL,10)                                           
          STR(I:I)=DIGITS(ID+1:ID+1)                                    
          INTVAL = INTVAL / 10                                          
          IF (INTVAL.NE.0 .AND. I.LE.ISIZE) GOTO 100                    
          J=1                                                           
          IOLD=I                                                        
 200      IF (J.LT.I) THEN                                              
             K=STR(I:I)                                                 
             STR(I:I)=STR(J:J)                                          
             STR(J:J)=K                                                 
             I=I-1                                                      
             J=J+1                                                      
             GOTO 200                                                   
          ENDIF                                                         
       ENDIF                                                            
       RETURN                                                           
       END                                                              
C*MODULEENCODE.F*DECK XYITOS.F                                          
C                                                                       
C     CONVERTS A REAL NUMBER TO A STRING, I1 AND I2 ARE THE FIELD SIZES 
C     ILEN IS RETURNED AS THE SIZE OF THE RESULTING STRING              
C     IFRMT CONTROLS IF NORMAL OF SCIENTIFIC NOTIONS IS TO BE USED      
C                                                                       
       SUBROUTINE XYITOS(X,RESULT,ILEN,IFRMT,I1,I2)                     
       IMPLICIT REAL*8 (A-H,O-Z)                                        
       CHARACTER*(*) RESULT                                             
       CHARACTER*40 PART1,PART2,PART3                                   
       PART1=' '                                                        
       IF (IFRMT.GT.0) THEN                                             
          WRITE(PART1,1) X                                              
 1        FORMAT(1E16.8)                                                
       ELSE                                                             
          WRITE(PART1,2) X                                              
 2        FORMAT(1F16.8)                                                
       ENDIF                                                            
       I=1                                                              
 100   IF (PART1(I:I).EQ.' '.AND.I.LT.32) THEN                          
          I=I+1                                                         
          GOTO 100                                                      
       ENDIF                                                            
       ILOC=1                                                           
       PART2=' '                                                        
       PART3=' '                                                        
       IEFLAG=0                                                         
       IDFLAG=0                                                         
       CALL XYLSCH(PART1,ILEN)                                          
 200   IF (ILOC.LT.(I1+I2).AND.I.LT.ILEN) THEN                          
          IF (PART1(I:I).EQ.'.') IDFLAG=1                               
          IF (PART1(I:I).EQ.'E') IEFLAG=1                               
          PART2(ILOC:ILOC)=PART1(I:I)                                   
          ILOC=ILOC+1                                                   
          I=I+1                                                         
          GOTO 200                                                      
       ENDIF                                                            
       IF (IFRMT.GT.0.OR.IEFLAG.EQ.1) THEN                              
          IF (IEFLAG.EQ.0) THEN                                         
 300         IF (PART1(I:I).NE.'E'.AND.I.LT.ILEN) THEN                  
                I=I+1                                                   
                GOTO 300                                                
             ENDIF                                                      
          ENDIF                                                         
 400      IF (I.LE.ILEN) THEN                                           
             PART2(ILOC:ILOC)=PART1(I:I)                                
             ILOC=ILOC+1                                                
             I=I+1                                                      
             GOTO 400                                                   
          ENDIF                                                         
       ELSE IF (IFRMT.EQ.0) THEN                                        
          IF (IDFLAG.EQ.0) THEN                                         
             CALL XYAPPD(PART3,'ERR',PART2(1:(I1+I2)-3))                
          ENDIF                                                         
       ENDIF                                                            
       CALL XYLSCH(PART2,ILEN)                                          
       RESULT=PART2                                                     
       RETURN                                                           
       END                                                              
C                                                                       
C RETURNS LENGHT OF STRING, (ASSUMES STRING ENDS IN                     
C SPACES OR NULLS)                                                      
C                                                                       
       SUBROUTINE XYLSCH(UTXT,ILGTH)                                    
       IMPLICIT REAL*8 (A-H,O-Z)                                        
       CHARACTER*(*) UTXT                                               
       IACTU=LEN(UTXT)                                                  
       ILGTH=IACTU                                                      
 100   IF ((UTXT(ILGTH:ILGTH).EQ.' ' .OR. UTXT(ILGTH:ILGTH).EQ.CHAR(0)) 
     1  .AND. ILGTH.GT.1 ) THEN                                         
           ILGTH=ILGTH-1                                                
           GOTO 100                                                     
       ENDIF                                                            
       RETURN                                                           
       END                                                              
C*MODULEENCODE.F *DECK TENLOG.F                                         
C                                                                       
C     RETURNS LOGS BASE 10 (VERSES NATURAL LOGS)                        
C                                                                       
CFH    REAL*8 FUNCTION TENLOG(X)                                        
       DOUBLE PRECISION FUNCTION TENLOG(X)                              
       IMPLICIT REAL*8 (A-H,O-Z)                                        
       VAL=1.0D0                                                        
       IF (X.GT.0.0) THEN                                               
          VAL=LOG(X)/LOG(10.0D0)                                        
       ENDIF                                                            
       TENLOG=VAL                                                       
       RETURN                                                           
       END                                                              
C                                                                       
       SUBROUTINE XYRTOC(X,RESULT,ISZ,I1,I2)                            
       IMPLICIT REAL*8 (A-H,O-Z)                                        
          REAL*8          DILIMI                                        
       CHARACTER*(*) RESULT                                             
       CHARACTER*40 FRONT,BACK,ALL                                      
       DATA TEN/10.0D+00/                                               
       ALL=' '                                                          
       FRONT=' '                                                        
       BACK=' '                                                         
       IF (X.LE.-1.0D0) THEN                                            
          SIGN=-1.0D0                                                   
          X=X                                                           
       ELSE                                                             
          SIGN=1.0D0                                                    
       ENDIF                                                            
       ISZ=0                                                            
       RTEMP=X                                                          
       ILIMIT=I1+I2                                                     
       DILIMI  = DFLOAT(ILIMIT)                                         
       IF (DABS(RTEMP).GE.TEN**DILIMI ) THEN                            
 50       IF (DABS(RTEMP).GT.TEN**DILIMI ) THEN                         
             RTEMP=RTEMP/TEN                                            
             ISZ=ISZ+1                                                  
             GOTO 50                                                    
          ENDIF                                                         
          IPARTA=INT(RTEMP+0.1*SIGN)                                    
          CALL XYITOC(IPARTA,FRONT,ILIMIT)                              
          BACK='0'                                                      
       ELSE IF (DABS(RTEMP).LE.TEN**(-DILIMI )) THEN                    
          ISZ=I2                                                        
 100      IF (DABS(RTEMP).LT.TEN**(-DILIMI )) THEN                      
             RTEMP=RTEMP*TEN                                            
             ISZ=ISZ-1                                                  
             GOTO 100                                                   
          ENDIF                                                         
          IPARTA=INT(RTEMP*TEN**DILIMI )                                
          CALL XYITOC(IPARTA,BACK,ILIMIT)                               
          FRONT='0'                                                     
       ELSE                                                             
          IPARTA=(RTEMP+0.1D+00*SIGN)                                   
          CALL XYITOC(IPARTA,FRONT,ILIMIT)                              
          IPARTB=((RTEMP-IPARTA)*TEN**DILIMI )                          
          CALL XYITOC(IPARTB,BACK,ILIMIT)                               
       ENDIF                                                            
       CALL XYLSCH(FRONT,J)                                             
       ALL=' '                                                          
       DO 200 I=I1,J                                                    
          FRONT(I:I)=' '                                                
          ISZ=ISZ+1                                                     
 200   CONTINUE                                                         
       CALL XYLSCH(BACK,K)                                              
       DO 300 I=I2,K                                                    
          BACK(I:I)=' '                                                 
C          ISZ=ISZ+1                                                    
 300   CONTINUE                                                         
       ALL=' '                                                          
       CALL XYLSCH(FRONT,J)                                             
       DO 400 I=1,J                                                     
          ALL(I:I)=FRONT(I:I)                                           
 400   CONTINUE                                                         
       ILOC=J+1                                                         
       ALL(ILOC:ILOC)='.'                                               
       ILOC=ILOC+1                                                      
       CALL XYLSCH(BACK,K)                                              
       DO 500 I=1,K                                                     
          ALL(ILOC:ILOC)=BACK(I:I)                                      
          ILOC=ILOC+1                                                   
 500   CONTINUE                                                         
       IF (X.LT.0) THEN                                                 
          CALL XYAPPD(FRONT,'-',ALL)                                    
          ALL=FRONT                                                     
       ENDIF                                                            
       IF (SIGN.LT.0) THEN                                              
          X=X+1.0D0                                                     
       ENDIF                                                            
       RESULT=ALL                                                       
       RETURN                                                           
       END                                                              
        SUBROUTINE CENLIN(STRING,IOUT,IWIDTH)                           
        IMPLICIT REAL*8 (A-H,O-Z)                                       
        CHARACTER*(*) STRING                                            
        CHARACTER*80 TEMP,FORM                                          
        CHARACTER*(10) NUMCHA ,LENCHA                                   
        CHARACTER*1 XX,COMMA                                            
C                                                                       
C WRITES OUT STRING TO IOUT ON A CENTERED LINE 80 CHARACTER LINE        
C   ADDS A PRECEDING AND TRAILING BLANK LINE                            
C                                                                       
         XX = 'X'                                                       
         COMMA = ','                                                    
         IF (IWIDTH .EQ. 0) THEN                                        
          IWIDTH = 80                                                   
         ENDIF                                                          
         LENGTH = LEN(STRING)                                           
         CALL TRIMST (STRING,LENGTH)                                    
         IDIF = IWIDTH - LENGTH                                         
         ISPAC = IDIF/2                                                 
         NSIZE = 0                                                      
         NSIZE1 = 0                                                     
         CALL ENCODI(ISPAC,NUMCHA ,10,NSIZE1)                           
         CALL ENCODI(LENGTH,LENCHA ,10,NSIZE)                           
         TEMP(1:1) = '('                                                
         NSIZE2 = NSIZE1 + 2                                            
         TEMP(2:NSIZE1+1) = NUMCHA                                      
         TEMP(NSIZE2:NSIZE2)= XX                                        
         NSIZE2 = NSIZE2 + 1                                            
         TEMP(NSIZE2:NSIZE2) = COMMA                                    
         NSIZE2 = NSIZE2 + 1                                            
         TEMP(NSIZE2:NSIZE2) = 'A'                                      
         FORM = TEMP(1:NSIZE2)//LENCHA (1:NSIZE)                        
         IEND = NSIZE2 + NSIZE + 1                                      
         FORM(IEND:IEND) = ')'                                          
         WRITE(IOUT,*)                                                  
         WRITE(IOUT,FORM) STRING(1:LENGTH)                              
         WRITE(IOUT,*)                                                  
         RETURN                                                         
         END                                                            
./ ADD NAME=UTILITIE
./ NUMBER NEW1=10,INCR=10
C*    DEC/CMS REPLACEMENT HISTORY, ELEMENT UTILITIES.FOR                
C*    *70   23-JAN-1989 13:11:45 DBK ""                                 
C*    *69   20-JAN-1989 18:05:00 DBK ""                                 
C*    *68   20-JAN-1989 18:02:35 DBK ""                                 
C*    *67   20-JAN-1989 17:42:40 DBK "FIX PARSER ERROR CHECKING SO THAT 
C*    *66   19-JAN-1989 13:12:02 DBK "REMOVE CFLX CARDS"                
C*    *65   18-JAN-1989 16:23:34 DBK "FIX CALL GTRMSTR IN ATNA ROUTINE" 
C*    *64   18-JAN-1989 13:15:43 DBK "CHANGE CALL FRESTK TO = FRESTK"   
C*    *63   15-DEC-1988 15:56:55 DBK "ADD GETFILNM"                     
C*    *62    8-DEC-1988 19:40:41 DBK ""                                 
C*    *61    8-DEC-1988 18:41:57 DBK "FIX COMPRES"                      
C*    *60    8-DEC-1988 18:26:50 DBK "FIX LCRMSTR FOR ZERO LENGTH LINE" 
C*    *59    6-DEC-1988 12:35:24 DBK "ADD GETRESN AND GETATNA"          
C*    *58   21-NOV-1988 18:38:58 DBK "ADD NEW PARSING COMMAND"          
C*    *57   11-NOV-1988 12:00:18 DBK ""                                 
C*    *56   10-NOV-1988 13:28:45 DBK ""                                 
C*    *55   10-NOV-1988 13:20:25 DBK ""                                 
C*    *54   10-NOV-1988 13:07:19 DBK ""                                 
C*    *53   10-NOV-1988 12:35:19 DBK ""                                 
C*    *52   10-NOV-1988 12:19:46 DBK ""                                 
C*    *51   10-NOV-1988 11:49:07 DBK ""                                 
C*    *50   10-NOV-1988 11:38:13 DBK ""                                 
C*    *49    9-NOV-1988 17:54:05 DBK ""                                 
C*    *48    9-NOV-1988 17:45:28 DBK ""                                 
C*    *47    9-NOV-1988 17:33:50 DBK ""                                 
C*    *46    9-NOV-1988 17:08:23 DBK ""                                 
C*    *45    9-NOV-1988 14:42:41 DBK ""                                 
C*    *44    8-NOV-1988 18:13:25 DBK ""                                 
C*    *43    8-NOV-1988 16:38:47 DBK ""                                 
C*    *42    8-NOV-1988 16:23:39 DBK ""                                 
C*    *41    8-NOV-1988 15:44:25 DBK ""                                 
C*    *40    8-NOV-1988 14:52:48 DBK ""                                 
C*    *39    8-NOV-1988 14:43:15 DBK "ADD NXTWRD"                       
C*    *38    8-NOV-1988 14:35:43 DBK ""                                 
C*    *37    7-NOV-1988 18:39:21 DBK ""                                 
C*    *36    7-NOV-1988 18:31:20 DBK ""                                 
C*    *35    7-NOV-1988 18:22:12 DBK ""                                 
C*    *34    7-NOV-1988 18:09:05 DBK "FIX LCRMSTR"                      
C*    *33    7-NOV-1988 17:17:47 DBK ""                                 
C*    *32    4-NOV-1988 15:18:18 DBK "GET RID OF JOINWD"                
C*    *31    4-NOV-1988 15:14:51 DBK ""                                 
C*    *30    4-NOV-1988 10:52:32 DBK "FIX KYWRD"                        
C*    *29    1-NOV-1988 17:18:26 DBK "REMOVE UNUSED ROUTINES"           
C*    *28    1-NOV-1988 16:55:30 DBK ""                                 
C*    *27    1-NOV-1988 15:06:33 DBK "ADD NEW PARSER ROUTINES"          
C*    *26   12-OCT-1988 11:12:00 DBK "REMOVE GRAPHICS ROUTINES"         
C*    *25   10-OCT-1988 15:15:40 DBK "ADD SEND1D ROUTINE - 1D PLOTTING" 
C*    *24   20-SEP-1988 16:32:24 BACK ""                                
C*    *23   20-SEP-1988 11:12:46 BACK ""                                
C*    *22   19-SEP-1988 17:33:21 DBK ""                                 
C*    *21   19-SEP-1988 16:16:44 BACK ""                                
C*    *20   19-SEP-1988 15:45:02 BACK ""                                
C*    *19   19-SEP-1988 15:10:49 BACK "FIXED MALLADJSTMENT ERROR IN -NUM
C*    *18   19-SEP-1988 13:15:00 DBK ""                                 
C*    *17   15-SEP-1988 13:25:18 DBK ""                                 
C*    *16   14-SEP-1988 14:23:19 DBK ""                                 
C*    *15   14-SEP-1988 14:21:36 DBK ""                                 
C*    *14   14-SEP-1988 12:02:58 DBK ""                                 
C*    *13    8-SEP-1988 18:27:07 DBK "FIX DLPRBL ROUTINE - PROBLEM ON CO
C*    *12    7-SEP-1988 16:55:39 DBK "REMOVE EXCLAMATION PTS"           
C*    *11    1-SEP-1988 20:27:50 DK "CHANGED ARGUMENT FOR OPENING FILES 
C*    *10    1-SEP-1988 16:35:00 DK ""                                  
C*    *9     1-SEP-1988 16:30:57 DK ""                                  
C*    *8     1-SEP-1988 16:05:53 DK "CHANGED C.A.'S ON SEND2D"          
C*    *7     1-SEP-1988 11:28:41 DK "CHANGED CALLING ARGUMENTS TO SEND2D
C*    *6    31-AUG-1988 16:17:56 DK "CORRECTION TO UNITNUMBERS"         
C*    *5    31-AUG-1988 16:11:06 DK "ADDED SEND2D AND MORE OPTIONS TO PA
C*    *4    30-AUG-1988 17:35:58 DK "CHANGED REFERENCE DIRECTORY OF COMM
C*    *3    30-AUG-1988 17:29:11 DK "ADDED PARSPLOT TO UTILITIES"       
C*    *2    19-JUL-1988 12:13:49 DBK ""                                 
C*    *1     6-JUL-1988 15:36:49 DBK "PARSER + DIE + READTITL"          
C*    DEC/CMS REPLACEMENT HISTORY, ELEMENT UTILITIES.FOR                
C                                                                       
C                                                                       
C*MODULE PARSER *DECK CHCNBL                                            
      SUBROUTINE CHCNBL(ST,STLEN)                                       
C                                                                       
C     THIS SUBROUTINE CONVERTS ALL NONACCEPTABLE CONTROL CHARACTERS     
C     INTO BLANKS. ST IS DESTINED TO GO INTO A FORMAT BETWEEN           
C     QUOTES. THIS SUBROUTINE IS MACHINE DEPENDENT.                     
C                                                                       
      IMPLICIT INTEGER(A-Z)                                             
      CHARACTER*1 BLANK,LOWPRT,HGHPRT                                   
      CHARACTER*(*) ST                                                  
      DATA BLANK /' '/                                                  
CCVX  LOWPRT = CHAR(32)                                                 
CCVX  HGHPRT = CHAR(125)                                                
CCYB  LOWPRT = CHAR(32)                                                 
CCYB  HGHPRT = CHAR(125)                                                
CVAX  LOWPRT = CHAR(32)                                                 
CVAX  HGHPRT = CHAR(125)                                                
      LOWPRT = CHAR(64)                                                 
      HGHPRT = CHAR(255)                                                
C                                                                       
      IF (STLEN.EQ.0) RETURN                                            
      DO 1 I=1,STLEN                                                    
        IF(ST(I:I).GE.LOWPRT .AND. ST(I:I).LE.HGHPRT) GOTO 1            
          ST(I:I)=BLANK                                                 
    1   CONTINUE                                                        
      RETURN                                                            
      END                                                               
C                                                                       
C*MODULE PARSER *DECK CLCSPC                                            
      SUBROUTINE CLCSPC(ST,IFST)                                        
CJDW 22-MAR-88 FIX THE CASE FOR NO TRAILING SPACE.                      
C                                                                       
C FINDS LOCATION OF FIRST SPACE OR NULL IN ST OR LEN(ST) + 1 IF         
C  NO SPACE IS FOUND. THE RESULT IS RETURNED IN IFST                    
C                                                                       
      CHARACTER*(*) ST                                                  
      CHARACTER NULL*1                                                  
      NULL=CHAR(0)                                                      
      IFST = LEN(ST) + 1                                                
      DO 1 I=1,LEN(ST)                                                  
        IF ((ST(I:I) .EQ. ' ').OR.(ST(I:I).EQ.NULL)) THEN               
           IFST = I                                                     
           GO TO 2                                                      
        ENDIF                                                           
  1   CONTINUE                                                          
2     CONTINUE                                                          
      RETURN                                                            
      END                                                               
C                                                                       
C*MODULE PARSER *DECK CNVTUC                                            
      SUBROUTINE CNVTUC(ST,STLEN)                                       
C                                                                       
C     THIS CONVERTS A STRING TO ALL UPPERCASE. IT USES BYTE VARIABLES   
C     AND THE PROPERTY OF ASCII CODES THAT LETTERS ARE CONTIGUOUS AND   
C     UPPER CASE LETTERS ARE ALWAYS OFFSET A CONSTANT AMOUNT FROM THE   
C     EQUIVALENT LOWERCASE LETTER SO IT IS MACHINE DEPENDENT.           
C                                                                       
      IMPLICIT INTEGER(A-Z)                                             
      CHARACTER*(*) ST                                                  
      CHARACTER*1 A                                                     
C                                                                       
      DO 10 I=1,STLEN                                                   
         A= ST(I:I)                                                     
         IA = ICHAR(A)                                                  
CCVX     IF(IA.GE.97)THEN                                               
CCVX        IA=IA - 32                                                  
CCYB     IF(IA.GE.97)THEN                                               
CCYB        IA=IA - 32                                                  
CVAX     IF(IA.GE.97)THEN                                               
CVAX        IA=IA - 32                                                  
         IF(IA.GE.129.AND.IA.LE.169)THEN                                
            IA=IA + 64                                                  
            A = CHAR (IA)                                               
            ST(I:I)=A                                                   
         ENDIF                                                          
10    CONTINUE                                                          
      RETURN                                                            
      END                                                               
C*MODULE PARSER *DECK COMPARE                                           
      SUBROUTINE COMPAR (DATA,VARI,IFLAG)                               
      CHARACTER*4 DATA                                                  
      CHARACTER*1 VARI(4)                                               
C                                                                       
         DO 124 J=1,4                                                   
         IFLAG=INDEX(DATA(J:J),VARI(J))                                 
           IF(IFLAG.EQ.0) RETURN                                        
124      CONTINUE                                                       
128   CONTINUE                                                          
      RETURN                                                            
      END                                                               
C*MODULE DECODE.F *DECK DCWORK.F                                        
C PROCEDURES DECODI DECODF                                              
C PROJECT IMPACT                                                        
C PROGRAMER STEVEN BACK                                                 
C : TOCONVERT A STRING INTO A NUMBER.                                   
C                                                                       
C    ICTRL                                                              
C     0         INTEGER VALUE                                           
C     1         REAL VALUE                                              
       SUBROUTINE DCWORK(STRIN1,ICTRL,IOUT,ROUT)                        
       IMPLICIT REAL*8 (A-H,O-Z)                                        
       CHARACTER*(*) STRIN1                                             
       CHARACTER STRWOR *80                                             
       I=1                                                              
        IPNT = 1                                                        
 50    IF (STRIN1(I:I).EQ.' ') THEN                                     
           I=I+1                                                        
           GOTO 50                                                      
       ENDIF                                                            
       SIGN=1.0D0                                                       
       STRWOR ='0'                                                      
       IF (STRIN1(I:I).EQ.'-') THEN                                     
           SIGN=-1.0D0                                                  
       ENDIF                                                            
       IF (STRIN1(I:I).EQ.'+'.OR. STRIN1(I:I).EQ.'-') THEN              
           I=I+1                                                        
       ENDIF                                                            
 100   IF (STRIN1(I:I).GE.'0' .AND. STRIN1(I:I).LE.'9') THEN            
           STRWOR (IPNT:IPNT)=STRIN1(I:I)                               
           IPNT = IPNT + 1                                              
           I=I+1                                                        
           GOTO 100                                                     
       ENDIF                                                            
       DMENT=STRVAL(STRWOR ,IPNT-1)                                     
C                                                                       
C     IF ICTRL=0 THEN RETURN INTEGER PORTION                            
C                                                                       
           IF (ICTRL.EQ.0) THEN                                         
               DMENT = (DMENT+0.001D+00)*SIGN                           
               IOUT=INT(DMENT)                                          
               RETURN                                                   
           ENDIF                                                        
C                                                                       
C     OTHERWISE LOOK FOR '.'                                            
C                                                                       
           IF (STRIN1(I:I).EQ.'.') THEN                                 
               I=I+1                                                    
               J=1                                                      
               STRWOR ='0'                                              
 200           IF (STRIN1(I:I).GE.'0' .AND. STRIN1(I:I).LE.'9') THEN    
                   STRWOR (J:J)=STRIN1(I:I)                             
                   I=I+1                                                
                   J=J+1                                                
                   GOTO 200                                             
               ENDIF                                                    
               DFRACT=STRVAL(STRWOR ,J-1)/(10.0D+00**DFLOAT(J-1))       
               DMENT=DMENT+DFRACT                                       
           ENDIF                                                        
C                                                                       
C     THEN CHECK FOR EXPONENT.                                          
C                                                                       
           IF (STRIN1(I:I).EQ.'E'.OR.STRIN1(I:I)                        
     1     .EQ.'E'.OR.    STRIN1(I:I).EQ.'D'.OR.STRIN1(I:I).EQ.'D') THEN
               I=I+1                                                    
           ENDIF                                                        
           ESIGN=1.0D0                                                  
           IF (STRIN1(I:I).EQ.'-') THEN                                 
               ESIGN=-1.0D0                                             
           ENDIF                                                        
           IF (STRIN1(I:I).EQ.'+'.OR.STRIN1(I:I).EQ.'-') THEN           
               I=I+1                                                    
           ENDIF                                                        
           J=1                                                          
           STRWOR ='0'                                                  
 300       IF (STRIN1(I:I).GE.'0' .AND. STRIN1(I:I).LE.'9') THEN        
               STRWOR (J:J)=STRIN1(I:I)                                 
               I=I+1                                                    
               J=J+1                                                    
               GOTO 300                                                 
           ENDIF                                                        
           IF (J.GT.1) THEN                                             
               DEXP=STRVAL(STRWOR ,J-1)                                 
               ELSE                                                     
               DEXP=0.0                                                 
           ENDIF                                                        
           DTEST=(10.0D0**(ESIGN*DEXP))                                 
           IF (ESIGN.GT.0.0D0) THEN                                     
               DMENT=DMENT*(10.0D0**(DEXP))                             
               ELSE                                                     
               DMENT=DMENT/(10.0D0**(DEXP))                             
           ENDIF                                                        
           ROUT=DMENT*SIGN                                              
           RETURN                                                       
           END                                                          
C*MODULE DECODE.F *DECK DECODF.F                                        
C                                                                       
C                                                                       
CFH    REAL*8 FUNCTION DECODF(TXT,ISTRLEN)                              
       DOUBLE PRECISION FUNCTION DECODF(TXT,ISTRLE )                    
       IMPLICIT REAL*8 (A-H,O-Z)                                        
          INTEGER*4       ISTRLE                                        
       CHARACTER*1 TXT(ISTRLE +1)                                       
       CHARACTER WORK*40                                                
       DO 100 I=1,ISTRLE                                                
           WORK(I:I)=TXT(I)                                             
  100  CONTINUE                                                         
       WORK(ISTRLE +1:ISTRLE +1)=' '                                    
       CALL DCWORK(WORK,1,IOUT,ROUT)                                    
       DECODF=ROUT                                                      
       RETURN                                                           
       END                                                              
C*MODULE DECODE.F *DECK DECODI.F                                        
C                                                                       
C                                                                       
       INTEGER FUNCTION DECODI(TXT,ISTRLE )                             
       IMPLICIT REAL*8 (A-H,O-Z)                                        
          INTEGER*4       ISTRLE                                        
       CHARACTER*1 TXT(ISTRLE )                                         
       CHARACTER WORK*40                                                
       DO 100 I=1,ISTRLE                                                
           WORK(I:I)=TXT(I)                                             
  100  CONTINUE                                                         
       WORK(ISTRLE +1:ISTRLE +1)=' '                                    
       CALL DCWORK(WORK,0,IOUT,ROUT)                                    
       DECODI=IOUT                                                      
       RETURN                                                           
       END                                                              
C ----------------------------------------------------------------      
        SUBROUTINE DIE                                                  
C ----------------------------------------------------------------      
C PURPOSE: TO PROVIDE A TRACEBACK OF ERRORS                             
C                                                                       
C                                                                       
        DIE1 = 0.0                                                      
        DIE2 = 1.0/DIE1                                                 
C                                                                       
        STOP                                                            
        END                                                             
C                                                                       
C*MODULE PARSER *DECK DLPRBLK                                           
      SUBROUTINE DLPRBL (ST)                                            
CDBK 07-APR-88 FIX THE CASE FOR A PRECEDING BLANK                       
C                                                                       
C DELETES PRECEDING BLANK OR NULL CHARACTERS OF STRING IF FOUND         
C                                                                       
C                                                                       
      CHARACTER*(*) ST                                                  
        CHARACTER*80 TMP                                                
        CHARACTER*1 NULL                                                
        NULL = CHAR(0)                                                  
      ILNGTH = LEN(ST)                                                  
        ITOT = LEN(ST)                                                  
        TMP(1:ITOT) = ST(1:ITOT)                                        
        I=1                                                             
10      CONTINUE                                                        
        IF ((ST(I:I) .EQ. ' ').OR.(ST(I:I).EQ.NULL)) THEN               
           ILNGTH = ITOT - I                                            
           IBEG = I + 1                                                 
           TMP(1:ILNGTH) = ST(IBEG:ITOT)                                
           I = I + 1                                                    
           IF (I .EQ. ITOT) GO TO 2                                     
           GO TO 10                                                     
        ENDIF                                                           
2     CONTINUE                                                          
        ST(1:ITOT) = TMP(1:ILNGTH)                                      
      RETURN                                                            
      END                                                               
C*MODULE PARSER *DECK ECHO                                              
      SUBROUTINE ECHOIN(NLINE)                                          
CMSP  INCLUDE (UNITNUMS)                                                
      INCLUDE '/labo/qclib/inspidas/common/unitnums'
CMSP  INCLUDE (ECHO)                                                    
      INCLUDE '/labo/qclib/inspidas/common/echo'
C                                                                       
      DO 100 I=1,500                                                    
       READ(IN01,10,END=999) INLINE(I)                                  
100   CONTINUE                                                          
999   NLINE=I - 1                                                       
10    FORMAT(A80)                                                       
      REWIND IN01                                                       
      RETURN                                                            
      END                                                               
C*MODULE PARSER *DECK ECHOOUT                                           
      SUBROUTINE ECHOOU (NLINE)                                         
CMSP  INCLUDE (UNITNUMS)                                                
      INCLUDE '/labo/qclib/inspidas/common/unitnums'
CMSP  INCLUDE (ECHO)                                                    
      INCLUDE '/labo/qclib/inspidas/common/echo'
C                                                                       
      DO 100 I=1,NLINE                                                  
       WRITE(IOUT02,10) INLINE(I)                                       
100   CONTINUE                                                          
C                                                                       
10    FORMAT(6X,A80)                                                    
      WRITE(IOUT02,*)                                                   
      RETURN                                                            
      END                                                               
C*MODULE ENCODE.F *DECK ENCODF.F                                        
C                                                                       
C ENCODF: CONVERT REAL NUMBER TO STRING                                 
C     WITH MINIMUZATION OF RESULTING STRING                             
C     (WHICH MEANS UNEEDED SPACES, ZEROS AND DECIMAL                    
C     POINTS ARE REMOVED)                                               
C                                                                       
       SUBROUTINE ENCODF(RNUMBE ,TXT,MAXSIZ ,NUMSIZ )                   
       IMPLICIT REAL*8 (A-H,O-Z)                                        
          REAL*8          RNUMBE                                        
          INTEGER*4       MAXSIZ                                        
          INTEGER*4       NUMSIZ                                        
       CHARACTER*(*) TXT                                                
       CHARACTER TEMP*1,HOLD*25                                         
       RNUM=RNUMBE                                                      
       IFRMT=0                                                          
       TXT='                      '                                     
       CALL XYITOS(RNUM,TXT,NUMSIZ ,IFRMT,14,7)                         
 100   IF (TXT(1:1).EQ.' ') THEN                                        
           CALL XYDELC (TXT,1,1)                                        
           GOTO 100                                                     
       ENDIF                                                            
       CALL XYLSCH(TXT,NUMSIZ )                                         
       TEMP=TXT(NUMSIZ :NUMSIZ )                                        
 200   IF ((TEMP.EQ.' '.OR.TEMP.EQ.'0'.OR.TEMP.EQ.'.').AND.             
     * NUMSIZ .GT.1) THEN                                               
           CALL XYDELC (TXT,NUMSIZ ,1)                                  
           NUMSIZ =NUMSIZ -1                                            
           TEMP=TXT(NUMSIZ :NUMSIZ )                                    
           GOTO 200                                                     
       ENDIF                                                            
       END                                                              
C*MODULE ENCODE.F *DECK ENCODI.F                                        
C                                                                       
C SUBROUTINE ENCODI, CONVERT AN INTEGER TO A STRING                     
C                                                                       
       SUBROUTINE ENCODI(NUMBER,TXT,MAXSIZ ,NUMSIZ )                    
       IMPLICIT REAL*8 (A-H,O-Z)                                        
          INTEGER*4       MAXSIZ                                        
          INTEGER*4       NUMSIZ                                        
       CHARACTER*(*) TXT                                                
       CHARACTER TEMP*12                                                
       TXT=' '                                                          
       IF (NUMBER.LT.0) THEN                                            
           ISIGN=-1                                                     
           ELSE                                                         
           ISIGN=1                                                      
       ENDIF                                                            
       CALL XYITOC(NUMBER,TXT,MAXSIZ )                                  
 100   IF (TXT(1:1).EQ.' ') THEN                                        
           CALL XYDELC (TXT,1,1)                                        
           GOTO 100                                                     
       ENDIF                                                            
       IF (ISIGN.EQ.-1) THEN                                            
           CALL XYAPPD(TEMP,'-',TXT)                                    
           TXT=TEMP                                                     
       ENDIF                                                            
       CALL XYLSCH(TXT,NUMSIZ )                                         
       END                                                              
C                                                                       
C*MODULE PARSER *DECK EQST                                              
      FUNCTION EQST(ST1,LEN1,ST2,LEN2)                                  
C                                                                       
C     COMPARES TWO STRINGS AND RETURNS TRUE IF THEY ARE EQUAL.          
C                                                                       
      IMPLICIT INTEGER(A-Z)                                             
      LOGICAL EQST                                                      
      CHARACTER*1 ST1(1),ST2(2)                                         
C                                                                       
      IF(LEN1.EQ.LEN2) GOTO 1                                           
      EQST=.FALSE.                                                      
      RETURN                                                            
    1 EQST=.TRUE.                                                       
      IF (LEN1.EQ.0) RETURN                                             
      DO 2 I=1,LEN1                                                     
        IF(ST1(I).NE.ST2(I)) GOTO 3                                     
    2   CONTINUE                                                        
      RETURN                                                            
    3 EQST=.FALSE.                                                      
      RETURN                                                            
      END                                                               
C*MODULE PARSER *DECK FILNUL                                            
      SUBROUTINE FILNUL(ST,STMAX,STLEN)                                 
C                                                                       
C     THIS SUBROUTINE FILLS THE UNUSED PART OF ST WITH ASCII NUL (0)    
C                                                                       
      IMPLICIT INTEGER(A-Z)                                             
      CHARACTER*(*) ST                                                  
      CHARACTER*(1) NUL                                                 
C                                                                       
      NUL=CHAR(0)                                                       
      IF(STLEN.EQ.STMAX) RETURN                                         
      S=STLEN+1                                                         
      DO 1 I=S,STMAX                                                    
    1   ST(I:I)=NUL                                                     
      RETURN                                                            
      END                                                               
C*MODULE PARSER *DECK FILSPC                                            
      SUBROUTINE FILSPC(ST,STMAX,STLEN)                                 
C                                                                       
C     THIS SUBROUTINE FILLS THE UNUSED PART OF ST WITH SPACES.          
C                                                                       
      IMPLICIT INTEGER(A-Z)                                             
      CHARACTER*(*) ST                                                  
      CHARACTER*1 BLANK                                                 
      DATA BLANK/' '/                                                   
C                                                                       
      IF(STLEN.EQ.STMAX) RETURN                                         
      S=STLEN+1                                                         
      DO 1 I=S,STMAX                                                    
    1   ST(I:I)=BLANK                                                   
      RETURN                                                            
      END                                                               
C*MODULE DECODE.F *DECK STRVAL.F                                        
C                                                                       
C SUBROUTINE STRVAL: USED BY DECODE, CONVERTES A SIMPLE,                
C INTEGER (STYLELIZED) NUMBER IN CHARACTER FORM INTO A REAL             
C                                                                       
CFH    REAL*8 FUNCTION STRVAL(TXT,ISIZE)                                
       DOUBLE PRECISION FUNCTION STRVAL(TXT,ISIZE)                      
       IMPLICIT REAL*8 (A-H,O-Z)                                        
          INTEGER*4       LETZER                                        
       CHARACTER*(*) TXT                                                
       TENVAL=10.0D0**DFLOAT(ISIZE-1)                                   
       RVAL=0                                                           
C GET THE ASCII VALUE OF ZERO                                           
       LETZER =ICHAR('0')                                               
       ICOUNT=1                                                         
 100   IF (ICOUNT.LE.ISIZE) THEN                                        
           RVAL=RVAL+TENVAL*DFLOAT(ICHAR(TXT(ICOUNT:ICOUNT))-LETZER )   
           TENVAL=TENVAL/10.0D0                                         
           ICOUNT=ICOUNT+1                                              
           GOTO 100                                                     
       ENDIF                                                            
       STRVAL=RVAL                                                      
       RETURN                                                           
       END                                                              
C*MODULE PARSER *DECK GTFLNM                                            
        SUBROUTINE GTFLNM(FILNAM)                                       
CMSP  INCLUDE (COMMAND)                                                 
      INCLUDE '/labo/qclib/inspidas/common/command'
        CHARACTER*(*) FILNAM                                            
         LENFL = LEN(FILNAM)                                            
         CALL NXTWRD(COMLY2 ,COMLEN,FILNAM,LENFL)                       
CVAX     CALL FILSPC(FILNAM,60,LENFL)                                   
CCYB     CALL FILSPC(FILNAM,60,LENFL)                                   
CCVX     CALL FILNUL(FILNAM,60,LENFL)                                   
         CALL FILNUL(FILNAM,60,LENFL)                                   
         RETURN                                                         
         END                                                            
       SUBROUTINE KYWRD(KEYWOR ,KEY,NSIZE)                              
       IMPLICIT REAL*8 (A-H,O-Z)                                        
       CHARACTER*(*) KEYWOR                                             
       CHARACTER*1  KEY(NSIZE)                                          
       DO 10 I=1,NSIZE                                                  
         KEY(I)=KEYWOR (I:I)                                            
10     CONTINUE                                                         
       RETURN                                                           
       END                                                              
C*MODULE PARSER *DECK NXTCMND                                           
      SUBROUTINE NXTCMN (NXTSTR)                                        
C     DECLARATIONS FOR COMMAND SCANNING.                                
C                                                                       
CMSP  INCLUDE (COMMAND)                                                 
      INCLUDE '/labo/qclib/inspidas/common/command'
CMSP  INCLUDE (UNITNUMS)                                                
      INCLUDE '/labo/qclib/inspidas/common/unitnums'
      INTEGER CEIL,TASK,INUNIT,PRUNIT                                   
      INTEGER DELEN                                                     
      INTEGER WDLEN,WDMAX,SRCHWD,INDX,ST,STLEN                          
      LOGICAL  DELIM                                                    
      CHARACTER*(*) NXTSTR                                              
      LOGICAL EOF                                                       
C                                                                       
C     PARAMETER NWORD1=24,NWORD2=12,NWORD3 = 4                          
C                                                                       
C                                                                       
      DIMENSION WORDYN(12),ICNTRL(20)                                   
C                                                                       
      DATA MXCMSZ/2000/                                                 
      ISTRM=1                                                           
C THIS IS THE .INP FILE IT IS READING FROM                              
C                                                                       
C     THIS IS THE MAIN LOOP FOR READING AND PROCESSING COMMANDS. BEFORE 
C     READING THE NEXT COMMAND, MAKE SURE THAT THE VARIABLES HAVE NOT   
C     EXCEEDED THEIR BOUNDS.                                            
C                                                                       
   60 CONTINUE                                                          
      CALL TRIMST (COMLY2 ,COMLEN)                                      
      IF ( COMLEN .GT. 0 ) THEN                                         
         WRITE(IOUT06,91)                                               
         WRITE(IOUT06,90) COMLY2 (1:COMLEN)                             
         WRITE(IOUT06,92)                                               
   91 FORMAT(/20X,60('*'),                                              
     1       /20X,'WARNING : FOLLOWING EXTRANEOUS CHARCTERS ',          
     2            'FOUND.')                                             
   90 FORMAT(25(/20X,A80))                                              
   92 FORMAT(/20X,60('*'))                                              
      ENDIF                                                             
C                                                                       
      CALL RDCMND(COMLY2 ,MXCMSZ,COMLEN,ISTRM,EOF,.TRUE.)               
      IF (EOF)THEN                                                      
C                                                                       
C      EOF = .FALSE.                                                    
      WRITE(IOUT06,*)' EOF '                                            
      CALL TIMIT(IOUT02,1)                                              
      STOP ' END OF TASK FILE '                                         
      ENDIF                                                             
C                                                                       
      NXTSTR = ' '                                                      
      LENSTR = LEN(NXTSTR)                                              
      CALL NXTWRD(COMLY2 ,COMLEN,NXTSTR,LENSTR)                         
C                                                                       
C     SHORTEN WORD TO FOUR CHARACTERS OR LESS AND PAD WITH BLANKS TO    
C     PREPARE FOR SEARCH INTO COMMAND ARRAY.                            
C                                                                       
      IF (NXTSTR .NE. ' ') THEN                                         
        RETURN                                                          
      ELSE                                                              
       WRITE(IOUT06,*)' ERROR IN READING NEXT LINE '                    
       RETURN                                                           
      ENDIF                                                             
      END                                                               
C*MODULE PARSER *DECK RDCMND                                            
      SUBROUTINE RDCMND(COMLYN,MXCMSZ,CMNLEN,UNIT,EOF,QPRINT)           
C                                                                       
C             THIS SUBROUTINE READS A COMMAND IN FROM UNIT. THE COMMAND 
C     FIELD ON A LINE MAY EXTEND TO COLUMN 80 OR MAY BE TERMINATED BY AN
C     EXCLAMATION MARK ANYWHERE ON THE LINE. A COMMAND IS ONE COMMAND   
C     FIELD OF INFORMATION UNLESS THE LAST NONBLANK CHARACTER IN THAT   
C     FIELD IS A HYPHEN. IN THAT CASE, THE COMMAND FIELD ON THE NEXT    
C     RECORD IS APPENDED TO THE CHARACTERS PRECEDING THE HYPHEN.        
C     TRAILING BLANKS ARE REMOVED FROM ALL COMMAND FIELDS, AND LOWERCASE
C     LETTERS ARE CONVERTED TO UPPERCASE. IF AN END OF FILE IS SEEN     
C     WHILE READING A COMMAND, EOF IS TURNED ON. IF EOF IS TURNED ON    
C     WHEN CALLED, THE SUBROUTINE RETURNS IMMEDIATELY. IF QPRINT IS ON, 
C     THE RECORDS ARE PRINTED ON UNIT 6 AS THEY ARE READ.               
C                                                                       
      IMPLICIT INTEGER(A-Z)                                             
          INTEGER*4       NEWLEN                                        
CMSP  INCLUDE (UNITNUMS)                                                
      INCLUDE '/labo/qclib/inspidas/common/unitnums'
      CHARACTER*(*) COMLYN                                              
      CHARACTER*1 HYPHEN,EXCLMK                                         
      CHARACTER*80 CARD                                                 
      LOGICAL EOF,QPRINT                                                
      DATA HYPHEN/'-'/,EXCLMK/']'/                                      
C                                                                       
      IF(EOF) RETURN                                                    
      CMNLEN=0                                                          
      IF (QPRINT) WRITE(IOUT06,201)                                     
  201 FORMAT('  ')                                                      
    1 READ(UNIT,100,END=9) CARD                                         
  100 FORMAT(A80)                                                       
  200 FORMAT(14X,80A1)                                                  
      CARDLN=80                                                         
      IEND = INDEX(CARD,EXCLMK)                                         
      IF (IEND.NE.0) CARDLN=IEND-1                                      
      CALL TRIMST (CARD,CARDLN)                                         
      CALL CHCNBL(CARD,CARDLN)                                          
      CALL CNVTUC(CARD,CARDLN)                                          
      IF(CARDLN.EQ.0) GOTO 1                                            
      IF(CARD(CARDLN:CARDLN).NE.HYPHEN) THEN                            
    2    NEWLEN  = CMNLEN + CARDLN                                      
         COMLYN(CMNLEN+1:NEWLEN ) = CARD(1:CARDLN)                      
         CMNLEN = NEWLEN                                                
         RETURN                                                         
      ELSE                                                              
        IF(CARDLN.EQ.1) GOTO 1                                          
        NEWLEN  = CMNLEN + CARDLN - 1                                   
        COMLYN(CMNLEN+1:NEWLEN ) = CARD(1:CARDLN-1)                     
        CMNLEN = NEWLEN                                                 
        GOTO 1                                                          
      ENDIF                                                             
    9 EOF=.TRUE.                                                        
      RETURN                                                            
      END                                                               
C* DEC/CMS REPLACEMENT HISTORY, ELEMENT READTITL.FOR                    
C* *3    10-MAR-1988 14:28:01 DBK ""                                    
C* *2    10-MAR-1988 12:42:58 DBK ""                                    
C* *1     7-MAR-1988 15:05:20 DBK "UTILITY ROUTINES"                    
C* DEC/CMS REPLACEMENT HISTORY, ELEMENT READTITL.FOR                    
      SUBROUTINE READTI  (INUNIT,IOUT,IPRN)                             
      IMPLICIT REAL*8 (A-H,O-Z)                                         
      IMPLICIT INTEGER*4(I-N)                                           
C                                                                       
      CHARACTER*80  TITLE                                               
      CHARACTER*1 STAR,BLANK                                            
      DATA  STAR/'*'/, BLANK/' '/                                       
C                                                                       
C IPRN IS A PRINT FLAG IPRN = 1         PRINT                           
C                             OTHERWISE NORPINT                         
C                                                                       
10    READ(INUNIT,95) TITLE                                             
      IF (TITLE(1:1) .NE. STAR)  THEN                                   
        WRITE(IOUT,110)                                                 
        CALL DIE                                                        
      ENDIF                                                             
C                                                                       
      DO 20 I=80,2,-1                                                   
         IF(TITLE(I:I).NE.BLANK) THEN                                   
           IF(IPRN.EQ.1) WRITE(IOUT,100) TITLE                          
           GO TO 10                                                     
         ENDIF                                                          
20      CONTINUE                                                        
C                                                                       
 95   FORMAT(A80)                                                       
100   FORMAT(1X,A80)                                                    
110   FORMAT(' TITLE CARDS MUST HAVE A * IN THE COLUMN 1 OF EACH LINE', 
     . //,' *** EXECUTION TERMINATING *** ')                            
C                                                                       
      RETURN                                                            
      END                                                               
        SUBROUTINE COMPRE (COMLYN,LENCOM)                               
        IMPLICIT REAL*8 (A-H,O-Z)                                       
C                                                                       
C REMOVES EXTRA SPACES FROM THE LINE                                    
C  COMLYN - COMMAND LINE                                                
C  LENCOM - LENGTH OF COMMAND LINE                                      
C                                                                       
        CHARACTER*(*) COMLYN                                            
        CHARACTER*1 TEST                                                
        IF (LENCOM .LE. 0) RETURN                                       
        N = 1                                                           
30      CONTINUE                                                        
        IBEG = N                                                        
        IEND = LENCOM                                                   
        DO 10 I=IBEG,IEND                                               
         TEST = COMLYN(I:I)                                             
         IF (TEST .EQ. ' ') THEN                                        
           IF (COMLYN(I+1:I+1) .EQ. ' ') THEN                           
               DO 20 J=I,IEND                                           
                COMLYN(J:J) = COMLYN(J+1:J+1)                           
20             CONTINUE                                                 
           LENCOM = LENCOM - 1                                          
           N = I                                                        
           GOTO 30                                                      
           ENDIF                                                        
         ENDIF                                                          
         N = I                                                          
10      CONTINUE                                                        
        LENCOM = N                                                      
        RETURN                                                          
        END                                                             
        SUBROUTINE RMVWBK  (COMLYN,LENCOM,LEN,IOFFSE )                  
        IMPLICIT REAL*8 (A-H,O-Z)                                       
          INTEGER*4       IOFFSE                                        
        CHARACTER*(*) COMLYN                                            
C                                                                       
C REMOVES A WORD FROM A COMMAND LINE BEGINNING FROM THE LAST CHARACTER  
C  OF THE WORD                                                          
C  COMLYN - COMMAND LINE                                                
C  LENCOM - LENGTH OF COMMAND LINE                                      
C  LEN - LENGTH OF WORD TO BE REMOVED                                   
C  IOFFSET - INDEX OF LAST CHARACTER OF WORD                            
        IOFF1 = IOFFSE                                                  
        IBEG = IOFF1 - LEN                                              
        IEND = IOFF1                                                    
        COMLYN(IBEG:IOFF1) = ' '                                        
        CALL COMPRE (COMLYN,LENCOM)                                     
        RETURN                                                          
        END                                                             
        SUBROUTINE RMVWFD  (COMLYN,LENCOM,LEN,IOFFSE )                  
        IMPLICIT REAL*8 (A-H,O-Z)                                       
          INTEGER*4       IOFFSE                                        
        CHARACTER*(*) COMLYN                                            
C                                                                       
C REMOVES A WORD FROM A COMMAND LINE BEGINNING WITH THE FIRST CHARACTER 
C  OF THE WORD                                                          
C  COMLYN - COMMAND LINE                                                
C  LENCOM - LENGTH OF COMMAND LINE                                      
C  LEN - LENGTH OF WORD TO BE REMOVED                                   
C  IOFFSET - INDEX OF FIRST CHARACTER OF WORD                           
        IOFF1 = IOFFSE  + LEN + 1                                       
        IBEG = IOFF1 - LEN                                              
        COMLYN(IBEG:IOFF1) = ' '                                        
        CALL COMPRE (COMLYN,LENCOM)                                     
        RETURN                                                          
        END                                                             
        INTEGER FUNCTION LCRMST (COMLYN,LENCOM,STRING,LEN1,OPTION,LEN2) 
        IMPLICIT REAL*8 (A-H,O-Z)                                       
          INTEGER*4       IOFFSE                                        
          INTEGER*4       IOFFBE                                        
C                                                                       
C  FUNCTION WHICH DETERMINES IF A WORD (OR A FRACTIONAL PART ) EXISTS   
C   THE VALUE RETURNED IS THE INDEX OF THE LAST CHARACTER OF THE WORD   
C   COMLYN - COMMAND LINE                                               
C   LENCOM - LENGTH OF LINE                                             
C   STRING - THE FIRST LEN1 CHARACTERS WHICH MUST OCCUR FOR THE WORD TO 
C            BE FOUND                                                   
C   OPTION - AN OPTIONAL EXTENSION OF THE WORD - SOME OF IT MAY OR MAY  
C            NOT EXIST ( E.G. IF STRING IS 'BIG' AND 'GER' IS OPTIONAL  
C            'BIGGEST' WOULD NOT BE FOUND BUY BIG,BIGG,BIGGE,OR BIGGER  
C            COULD ALL BE FOUND                                         
C                                                                       
        CHARACTER*(*) COMLYN,STRING,OPTION                              
        CHARACTER*(800) NXTWD                                           
        CHARACTER*1 SPACE                                               
        IOFF = 0                                                        
        LCRMST  = 0                                                     
        IF (LENCOM .LE. 0) RETURN                                       
CCVX    SPACE = CHAR(32)                                                
CCYB    SPACE = CHAR(32)                                                
CVAX    SPACE = CHAR(32)                                                
        SPACE = CHAR(64)                                                
        IOFFSE  = 1                                                     
        IOFFBE  = 1                                                     
C FIND THE MANDATORY PART OF THE KEYWORD IN COMLYN                      
20      IF (IOFFBE  .GT. LENCOM) RETURN                                 
        IOFF = INDEX(COMLYN(IOFFBE :LENCOM),STRING) + IOFFBE  - 1       
C IOFF IS 0 IF IT IS NOT THERE                                          
        IF (IOFF .EQ. 0) RETURN                                         
C IF THE PRECEDING CHARACTER IN THE COMMAND LINE IS NOT A BLANK         
C    THEN THIS IS THE MIDDLE OF A WORD                                  
       IF (IOFF .GT. 1) THEN                                            
C       TRY AGAIN IF THIS IS IN THE MIDDLE OF A WORD                    
        IOFFM1 = IOFF - 1                                               
        IF (COMLYN(IOFFM1:IOFFM1) .NE. SPACE) THEN                      
         IOFFBE  = IOFF + 1                                             
         GOTO 20                                                        
        ENDIF                                                           
       ENDIF                                                            
C LTEST WOULD BE THE MAXIMUM LENGTH OF THE STRING+OPTION + THE OFFSET   
C   OF STRING + 1 TO ACCOUNT FOR SPACE AFTER ALL WORDS                  
        LTEST = LEN1 + LEN2 + IOFF + 1                                  
        IF (LTEST .GT. LENCOM) LTEST = LENCOM                           
        LBEGIN = IOFF + LEN1                                            
        IF (LBEGIN .GT. LENCOM) LBEGIN = LENCOM                         
C SEARCH FOR OPTION IN COMLYN                                           
C   FIND FIRST SPACE AFTER STRING BUT BEFORE THE END OF OPTION          
        IOFF2 = INDEX(COMLYN(LBEGIN:LTEST),SPACE)                       
C IF THERE IS NO SPACE THEN THE REST OF THE WORD AFTER STRING MUST      
C   BE LONGER THAN OPTION THEREFORE THIS CAN'T BE WORD WE ARE LOOKING FO
        IF (IOFF2 .EQ. 0) THEN                                          
           IF (LTEST .GE. LENCOM) THEN                                  
             IOFF2 = LENCOM - IOFF - LEN1 + 2                           
             LTEST = LENCOM                                             
           ELSE                                                         
             RETURN                                                     
           ENDIF                                                        
        ENDIF                                                           
        IENDWD = IOFF2 + IOFF + LEN1 - 1                                
C  FILL NXTWD WITH THE PORTION OF COMLYN WHICH WOULD CORRESPOND TO OPTIO
        NXTWD = COMLYN(LBEGIN:IENDWD)                                   
C NDIFF IS THE NUMBER OF CHARACTERS BEFORE THE NEXT SPACE               
        NDIFF = IOFF2 - 1                                               
C SEARCH CHAR. BY CHAR. THROUGH NXTWD TO MAKE SURE THAT IT CORRESPONDS T
C   OPTION - NOTE THAT NOT ALL OF OPTION MUST EXIST                     
        DO 10 I=1,NDIFF                                                 
          IF (NXTWD(I:I) .NE. OPTION(I:I)) RETURN                       
10      CONTINUE                                                        
C CALCULATE THE OFFSET TO THE END OF THE WORD WHICH ACTUALLY IS IN THE L
           IOFFSE  = IOFF + LEN1 + NDIFF                                
C CALCULATE LENGTH OF WORD IN LINE (INCLUDE ROOM FOR SPACE AT END OF WOR
           LTOT = IOFFSE  - IOFF + 1                                    
C REMOVE THE WORD FROM LINE                                             
           CALL RMVWBK  (COMLYN,LENCOM,LTOT,IOFFSE )                    
           IOFFSE  = IOFFSE  - LTOT                                     
C PUT VALUE OF OFFSET IN VALUE OF FUNCTION                              
           LCRMST  = IOFFSE                                             
        IF (IOFFSE  .EQ. 0) LCRMST  = 1                                 
           RETURN                                                       
           END                                                          
        SUBROUTINE GETNXT  (COMLYN,LENCOM,STRING,LEN1,OPTION,LEN2,      
     *                      RETSTR,LEN)                                 
        IMPLICIT REAL*8 (A-H,O-Z)                                       
C                                                                       
C GETS THE NEXT STRING -                                                
C  COMLYN - COMMAND LINE                                                
C  LENCOM - LENGTH OF COMMAND LINE                                      
C  STRING - SEARCHES FOR THIS STRING OF LENGTH, LEN1                    
C  OPTION - OPTIONAL PORTION OF STRING, LENGTH = LEN2                   
C  RETSTR - STRING TO BE RETURNED, LENGTH = LEN                         
C                                                                       
        CHARACTER*(*) COMLYN,STRING,OPTION                              
        CHARACTER*(*) RETSTR                                            
        CHARACTER*1 DELIM                                               
        DELIM = ' '                                                     
        RETSTR = ' '                                                    
        CALL COMPRE (COMLYN,LENCOM)                                     
        IOFF1 = LCRMST (COMLYN,LENCOM,STRING,LEN1,OPTION,LEN2)          
        IF (IOFF1 .GE. LENCOM) RETURN                                   
        IF (IOFF1 .GT. 0) THEN                                          
          IF (COMLYN(IOFF1:IOFF1) .EQ. ' ') IOFF1 = IOFF1 + 1           
          CALL NEWWD(COMLYN,LENCOM,RETSTR,IOFF1,LEN,DELIM)              
        ELSE                                                            
         RETURN                                                         
        ENDIF                                                           
        RETURN                                                          
        END                                                             
        SUBROUTINE NEWWD(COMLYN,LENCOM,STRING,IOFFSE ,LENGTH,DELIM)     
        IMPLICIT REAL*8 (A-H,O-Z)                                       
          INTEGER*4       IOFFSE                                        
          INTEGER*4       LENGTH                                        
C                                                                       
C RETURNS A WORD (ALL CHARACTERS UP TO A DELIMITER)                     
C  COMLYN - COMMAND LINE                                                
C  LENCOM - LENGTH OF COMMANDLINE                                       
C  STRING - NEXT WORD                                                   
C  IOFFSET - BEGINNING OF WORD IN COMLYN                                
C  LENGTH - LENGTH OF WORD RETURNED                                     
C  DELIM - DELIMITER                                                    
C                                                                       
        CHARACTER*(*) COMLYN,STRING,DELIM                               
        IF (LENCOM .EQ. 0) THEN                                         
          STRING = ' '                                                  
          RETURN                                                        
        ENDIF                                                           
        LENGTH = INDEX(COMLYN(IOFFSE :LENCOM),DELIM)                    
C IF THERE IS NO SPACE AT END OF LINE GET ALL CHARACTERS TO END OF LINE 
         IF (LENGTH .EQ. 0) THEN                                        
           LENGTH = LENCOM - IOFFSE  + 1                                
          ENDIF                                                         
        IEND = IOFFSE  + LENGTH - 1                                     
C                                                                       
C  PROTECT AGAINST READING IN A WORD WHICH IS TOO LONG TO FIT IN STRING 
C                                                                       
        IF (LEN(STRING) .LT. LENGTH) THEN                               
          LENGTH  = LEN(STRING)                                         
          IENDN = IOFFSE  + LENGTH  - 1                                 
        ELSE                                                            
          LENGTH  = LENGTH                                              
          IENDN = IEND                                                  
        ENDIF                                                           
        STRING = COMLYN(IOFFSE :IENDN)                                  
        CALL RMVWBK  (COMLYN,LENCOM,LENGTH,IEND)                        
        RETURN                                                          
        END                                                             
        SUBROUTINE GETPAF  (COMLYN,LENCOM,STRING,LEN1,OPTION,LEN2,FVALU)
        IMPLICIT REAL*8 (A-H,O-Z)                                       
C FINDS A FLOATING POINT PARAMETER AFTER A STRING                       
C  COMLYN,LENCOM - COMMAND LINE & ITS LENGTH                            
C  STRING - STRING TO BE SEARCHED FOR TO LOCATE PARAMETER               
C  OPTION - OPTIONAL STRING WHICH MAY BE PRESENT                        
C  LEN1,LEN2 - LENGTH OF STRING AND OPTION, RESPECTIVELY                
C  FVALU - VALUE OF THE PARAMETER TO BE RETURNED                        
C                                                                       
        CHARACTER*(*) COMLYN,STRING,OPTION                              
        CHARACTER*80 RETSTR                                             
        CALL GETNXT  (COMLYN,LENCOM,STRING,LEN1,OPTION,LEN2,RETSTR,LEN) 
        IF (RETSTR .EQ. ' ') RETURN                                     
C       FVALU = DECODF(RETSTR,LEN)                                      
        CALL DCWORK(RETSTR,1,IOUT,ROUT)                                 
        FVALU = ROUT                                                    
        RETURN                                                          
        END                                                             
        SUBROUTINE GETPAI  (COMLYN,LENCOM,STRING,LEN1,OPTION,LEN2,NVALU)
        IMPLICIT REAL*8 (A-H,O-Z)                                       
C GETS AN INTEGER PARAMETER VALUE                                       
C  COMLYN,LENCOM - COMMAND LINE & ITS LENGTH                            
C  STRING - STRING TO BE SEARCHED FOR TO LOCATE PARAMETER               
C  OPTION - OPTIONAL STRING WHICH MAY BE PRESENT                        
C  LEN1,LEN2 - LENGTH OF STRING AND OPTION, RESPECTIVELY                
C  NVALU - VALUE OF THE PARAMETER TO BE RETURNED                        
C                                                                       
        CHARACTER*(*) COMLYN,STRING,OPTION                              
        CHARACTER*80 RETSTR                                             
        CALL GETNXT  (COMLYN,LENCOM,STRING,LEN1,OPTION,LEN2,RETSTR,LEN) 
        IF (RETSTR .EQ. ' ') RETURN                                     
        CALL DCWORK(RETSTR,0,IOUT,ROUT)                                 
C       NVALU = DECODI(RETSTR,LEN)                                      
        NVALU = IOUT                                                    
        RETURN                                                          
        END                                                             
        SUBROUTINE NXTWRD(COMLYN,LENCOM,STRING,NLENG)                   
        IMPLICIT REAL*8 (A-H,O-Z)                                       
          INTEGER*4       IOFFSE                                        
C                                                                       
C RETURNS A WORD OF LENG NLENG, DELETES FULL WORD                       
C   COMLYN - COMMAND LINE                                               
C   LENCOM - LENGTH OF COMMAND LINE                                     
C   STRING - WORD TO BE RETURNED                                        
C   NLENG - NUMBER OF CHARACTERS IN STRING                              
C                                                                       
        CHARACTER*(*) COMLYN,STRING                                     
        CHARACTER*(80) TEMP                                             
        CHARACTER*(1) SPACE                                             
C                                                                       
        SPACE = ' '                                                     
C                                                                       
        STRING(1:NLENG) = ' '                                           
        TEMP(1:NLENG) = ' '                                             
C                                                                       
        CALL TRIMST (COMLYN,LENCOM)                                     
        IOFFSE  = 1                                                     
        CALL NEWWD(COMLYN,LENCOM,TEMP,IOFFSE ,LEN,SPACE)                
        IF (NLENG .GT. LEN) THEN                                        
          NTEMP = LEN                                                   
        ELSE                                                            
          NTEMP = NLENG                                                 
        ENDIF                                                           
        STRING(1:NTEMP) = TEMP(1:NTEMP)                                 
        RETURN                                                          
        END                                                             
        SUBROUTINE CNVSTB (WD,NEXTWD,LENWD)                             
        IMPLICIT REAL*8 (A-H,O-Z)                                       
C                                                                       
C  CONV CHAR *1 ARRAY(LENWD) TO CHAR *LENWD ARRAY                       
C                                                                       
        CHARACTER*1 WD                                                  
        CHARACTER*(*) NEXTWD                                            
        DIMENSION WD(LENWD)                                             
        NEXTWD=' '                                                      
        DO 10 I=1,LENWD                                                 
          NEXTWD(I:I)=WD(I)                                             
 10     CONTINUE                                                        
        RETURN                                                          
        END                                                             
        SUBROUTINE TRIMST (STRING,LENCOM)                               
        IMPLICIT REAL*8 (A-H,O-Z)                                       
C                                                                       
C TRIMS LEADING BLANK FROM STRING                                       
C  LENCOM IS LENGTH OF STRING                                           
C                                                                       
        CHARACTER*(*) STRING                                            
        CHARACTER*1 NULL                                                
        IF (LENCOM .EQ. 0) RETURN                                       
        NULL = CHAR(0)                                                  
        IOLD = LENCOM                                                   
C                                                                       
C REMOVE PRECEDING BLANKS                                               
C                                                                       
        DO 20 J=1,IOLD                                                  
         IF (STRING(1:1) .EQ. ' ' .OR. STRING(1:1) .EQ. NULL) THEN      
         DO 10 I=1,LENCOM                                               
10        STRING(I:I) = STRING(I+1:I+1)                                 
          LENCOM = LENCOM - 1                                           
        ELSE                                                            
          IOLD1 = LENCOM                                                
          DO 30 K=IOLD1,1,-1                                            
           IF (STRING(K:K) .EQ. ' ' .OR. STRING(K:K) .EQ. NULL) THEN    
            STRING(K:K) = NULL                                          
            LENCOM = LENCOM - 1                                         
           ELSE                                                         
            RETURN                                                      
           ENDIF                                                        
30        CONTINUE                                                      
        ENDIF                                                           
20      CONTINUE                                                        
        RETURN                                                          
        END                                                             
        SUBROUTINE GTRMST (COMLYN,LENCOM,STRING,LEN1,OPTION,LEN2,       
     *                      RETSTR,DELIM,LENGTH)                        
        IMPLICIT REAL*8 (A-H,O-Z)                                       
C                                                                       
C GETS THE NEXT STRING -                                                
C  COMLYN - COMMAND LINE                                                
C  LENCOM - LENGTH OF COMMAND LINE                                      
C  STRING - SEARCHES FOR THIS STRING OF LENGTH, LEN1                    
C  OPTION - OPTIONAL PORTION OF STRING, LENGTH = LEN2                   
C  RETSTR - STRING TO BE RETURNED, LENGTH = LEN                         
C  DELIM -  DELIMITER FOR STRING                                        
        CHARACTER*(*) COMLYN,STRING,OPTION                              
        CHARACTER*(*) RETSTR                                            
        CHARACTER*(*) DELIM                                             
        RETSTR = ' '                                                    
        CALL COMPRE (COMLYN,LENCOM)                                     
        IOFF1 = LCRMST (COMLYN,LENCOM,STRING,LEN1,OPTION,LEN2)          
        IF (IOFF1 .GE. LENCOM) RETURN                                   
        IF (IOFF1 .GT. 0) THEN                                          
          IF (COMLYN(IOFF1:IOFF1) .EQ. ' ') IOFF1 = IOFF1 + 1           
          CALL NEWWD(COMLYN,LENCOM,RETSTR,IOFF1,LENGTH,DELIM)           
C GET RID OF THE DELIMITER FROM RETSTR                                  
        LDEL = LEN(DELIM)                                               
         IF (RETSTR(LENGTH-LDEL+1:LENGTH) .EQ. DELIM) THEN              
          RETSTR(LENGTH-LDEL+1:LENGTH) = ' '                            
          LENGTH = LENGTH - LDEL                                        
         ENDIF                                                          
        ELSE                                                            
         RETURN                                                         
        ENDIF                                                           
        RETURN                                                          
        END                                                             
        SUBROUTINE GETRES (IRES,IOUT)                                   
        IMPLICIT REAL*8 (A-H,O-Z)                                       
CMSP  INCLUDE (COMMAND)                                                 
      INCLUDE '/labo/qclib/inspidas/common/command'
C                                                                       
C   RETURNS THE VALUE, IRES, AFTER THE NEXT OCCURENCE OF RESNUMBER IN TH
C    COMMAND LINE                                                       
C                                                                       
C     EVENTUALLY THIS ROUTINE SHOULD ALSO TRANSLATE INSERTION/DELETION/C
C       CODES                                                           
        CALL GETPAI  (COMLY2 ,COMLEN,'RESN',4,'UMBER',5,IRES)           
        RETURN                                                          
        END                                                             
C------------------------------------------                             
        SUBROUTINE GETATN (INAME,IOUT)                                  
        IMPLICIT REAL*8 (A-H,O-Z)                                       
CMSP  INCLUDE (COMMAND)                                                 
      INCLUDE '/labo/qclib/inspidas/common/command'
        CHARACTER*(*) INAME                                             
C                                                                       
C   RETURNS THE VALUE, INAME , AFTER THE NEXT OCCURENCE OF ATOMNAME IN T
C    COMMAND LINE                                                       
C   INAME IS THE CHARACTER NAME OF THE ATOM WHICH IS ACTUALLY FOUND IN T
C    COMMAND LINE                                                       
C                                                                       
        LENGTH = 0                                                      
         CALL GTRMST (COMLY2 ,COMLEN,'ATOM',4,'NAME',4,INAME,' ',LENGTH)
        IF (LENGTH .EQ. 0) THEN                                         
          CALL GTRMST (COMLY2 ,COMLEN,'ATNA',4,'ME',2,INAME,' ',LENGTH) 
        ENDIF                                                           
        RETURN                                                          
        END                                                             
        SUBROUTINE GETFIL  (FILNAM)                                     
        IMPLICIT REAL*8 (A-H,O-Z)                                       
          INTEGER*4       MATMTY                                        
          INTEGER*4       MPLT1D                                        
          INTEGER*4       MPLT2D                                        
          INTEGER*4       MSUBTY                                        
          INTEGER*4       MCONTU                                        
          INTEGER*4       MCHWOR                                        
          INTEGER*4       MPTSST                                        
C                                                                       
C  RETRIEVES A FILE NAME FROM A COMMAND LINE AFTER THE WORD 'FILE'      
C                                                                       
CMSP  INCLUDE (MAXSIZE)                                                 
      INCLUDE '/labo/qclib/inspidas/common/maxsize'
CMSP  INCLUDE (COMMAND)                                                 
      INCLUDE '/labo/qclib/inspidas/common/command'
C                                                                       
        CHARACTER*(*) FILNAM                                            
C                                                                       
        FILNAM = ' '                                                    
        CALL GETNXT  (COMLY2 ,COMLEN,'FILE',4,'NAME',4,FILNAM,LENGTH)   
C                                                                       
        RETURN                                                          
        END                                                             
C*MODULEENCODE.F *DECK XYAPPD.F                                         
C                                                                       
C     APPENDS TWO FORTRAN STRINGS, (BETTER THAN BUILTIN APPEND)         
C                                                                       
      SUBROUTINE XYAPPD(FRONT,UTXT,ALL)                                 
      IMPLICIT REAL*8 (A-H,O-Z)                                         
      CHARACTER*(*) FRONT,UTXT,ALL                                      
      CALL XYLSCH(UTXT,IONE)                                            
      FRONT=' '                                                         
      DO 100 I=1,IONE                                                   
         FRONT(I:I)=UTXT(I:I)                                           
 100  CONTINUE                                                          
      CALL XYLSCH(ALL,ITWO)                                             
      DO 200 I=1,ITWO                                                   
         FRONT(I+IONE:I+IONE)=ALL(I:I)                                  
 200  CONTINUE                                                          
      RETURN                                                            
      END                                                               
C*MODULE ENCODE.F *DECK XYDELCH.F                                       
C                                                                       
C XYDELCH: DELETES FROM A STRING A RANGE OF CHARACTER                   
C                                                                       
       SUBROUTINE XYDELC (TXT,ISTART,ISIZE)                             
       IMPLICIT REAL*8 (A-H,O-Z)                                        
       CHARACTER*(*) TXT                                                
       CALL XYLSCH(TXT,IMAX)                                            
       DO 100 I=ISTART,IMAX-ISIZE                                       
           TXT(I:I)=TXT(I+ISIZE:I+ISIZE)                                
 100   CONTINUE                                                         
       DO 200 I=IMAX-ISIZE+1,IMAX                                       
           TXT(I:I)=' '                                                 
 200   CONTINUE                                                         
       RETURN                                                           
       END                                                              
C*MODULEENCODE.F *DECK XYITOC.F                                         
C                                                                       
C     CONVERTS AN INTEGER TO A STRING.                                  
C     IVAL IS THE INTEGER TO CONVERT                                    
C     STR IS THE STRING VARABLE TO PUT THE RESULT                       
C     ISIZE IS THE MAXIMUM SIZE THAT THE RESULT IS ALLOWED TO BE        
C                                                                       
       SUBROUTINE XYITOC(IVAL,STR,ISIZE)                                
       IMPLICIT REAL*8 (A-H,O-Z)                                        
       CHARACTER*(*) STR                                                
       CHARACTER*40 DIGITS                                              
       CHARACTER*1 K                                                    
       INTVAL=ABS(IVAL)                                                 
       I=1                                                              
       DIGITS='0123456789'                                              
       IF (IVAL.EQ.0) THEN                                              
          STR='0'                                                       
       ELSE                                                             
          STR(1:1)=' '                                                  
 100      I=I+1                                                         
          ID = MOD(INTVAL,10)                                           
          STR(I:I)=DIGITS(ID+1:ID+1)                                    
          INTVAL = INTVAL / 10                                          
          IF (INTVAL.NE.0 .AND. I.LE.ISIZE) GOTO 100                    
          J=1                                                           
          IOLD=I                                                        
 200      IF (J.LT.I) THEN                                              
             K=STR(I:I)                                                 
             STR(I:I)=STR(J:J)                                          
             STR(J:J)=K                                                 
             I=I-1                                                      
             J=J+1                                                      
             GOTO 200                                                   
          ENDIF                                                         
       ENDIF                                                            
       RETURN                                                           
       END                                                              
C*MODULEENCODE.F*DECK XYITOS.F                                          
C                                                                       
C     CONVERTS A REAL NUMBER TO A STRING, I1 AND I2 ARE THE FIELD SIZES 
C     ILEN IS RETURNED AS THE SIZE OF THE RESULTING STRING              
C     IFRMT CONTROLS IF NORMAL OF SCIENTIFIC NOTIONS IS TO BE USED      
C                                                                       
       SUBROUTINE XYITOS(X,RESULT,ILEN,IFRMT,I1,I2)                     
       IMPLICIT REAL*8 (A-H,O-Z)                                        
       CHARACTER*(*) RESULT                                             
       CHARACTER*40 PART1,PART2,PART3                                   
       PART1=' '                                                        
       IF (IFRMT.GT.0) THEN                                             
          WRITE(PART1,1) X                                              
 1        FORMAT(1E16.8)                                                
       ELSE                                                             
          WRITE(PART1,2) X                                              
 2        FORMAT(1F16.8)                                                
       ENDIF                                                            
       I=1                                                              
 100   IF (PART1(I:I).EQ.' '.AND.I.LT.32) THEN                          
          I=I+1                                                         
          GOTO 100                                                      
       ENDIF                                                            
       ILOC=1                                                           
       PART2=' '                                                        
       PART3=' '                                                        
       IEFLAG=0                                                         
       IDFLAG=0                                                         
       CALL XYLSCH(PART1,ILEN)                                          
 200   IF (ILOC.LT.(I1+I2).AND.I.LT.ILEN) THEN                          
          IF (PART1(I:I).EQ.'.') IDFLAG=1                               
          IF (PART1(I:I).EQ.'E') IEFLAG=1                               
          PART2(ILOC:ILOC)=PART1(I:I)                                   
          ILOC=ILOC+1                                                   
          I=I+1                                                         
          GOTO 200                                                      
       ENDIF                                                            
       IF (IFRMT.GT.0.OR.IEFLAG.EQ.1) THEN                              
          IF (IEFLAG.EQ.0) THEN                                         
 300         IF (PART1(I:I).NE.'E'.AND.I.LT.ILEN) THEN                  
                I=I+1                                                   
                GOTO 300                                                
             ENDIF                                                      
          ENDIF                                                         
 400      IF (I.LE.ILEN) THEN                                           
             PART2(ILOC:ILOC)=PART1(I:I)                                
             ILOC=ILOC+1                                                
             I=I+1                                                      
             GOTO 400                                                   
          ENDIF                                                         
       ELSE IF (IFRMT.EQ.0) THEN                                        
          IF (IDFLAG.EQ.0) THEN                                         
             CALL XYAPPD(PART3,'ERR',PART2(1:(I1+I2)-3))                
          ENDIF                                                         
       ENDIF                                                            
       CALL XYLSCH(PART2,ILEN)                                          
       RESULT=PART2                                                     
       RETURN                                                           
       END                                                              
C                                                                       
C RETURNS LENGHT OF STRING, (ASSUMES STRING ENDS IN                     
C SPACES OR NULLS)                                                      
C                                                                       
       SUBROUTINE XYLSCH(UTXT,ILGTH)                                    
       IMPLICIT REAL*8 (A-H,O-Z)                                        
       CHARACTER*(*) UTXT                                               
       IACTU=LEN(UTXT)                                                  
       ILGTH=IACTU                                                      
 100   IF ((UTXT(ILGTH:ILGTH).EQ.' ' .OR. UTXT(ILGTH:ILGTH).EQ.CHAR(0)) 
     1  .AND. ILGTH.GT.1 ) THEN                                         
           ILGTH=ILGTH-1                                                
           GOTO 100                                                     
       ENDIF                                                            
       RETURN                                                           
       END                                                              
C*MODULEENCODE.F *DECK TENLOG.F                                         
C                                                                       
C     RETURNS LOGS BASE 10 (VERSES NATURAL LOGS)                        
C                                                                       
CFH    REAL*8 FUNCTION TENLOG(X)                                        
       DOUBLE PRECISION FUNCTION TENLOG(X)                              
       IMPLICIT REAL*8 (A-H,O-Z)                                        
       VAL=1.0D0                                                        
       IF (X.GT.0.0) THEN                                               
          VAL=LOG(X)/LOG(10.0D0)                                        
       ENDIF                                                            
       TENLOG=VAL                                                       
       RETURN                                                           
       END                                                              
C                                                                       
       SUBROUTINE XYRTOC(X,RESULT,ISZ,I1,I2)                            
       IMPLICIT REAL*8 (A-H,O-Z)                                        
          REAL*8          DILIMI                                        
       CHARACTER*(*) RESULT                                             
       CHARACTER*40 FRONT,BACK,ALL                                      
       DATA TEN/10.0D+00/                                               
       ALL=' '                                                          
       FRONT=' '                                                        
       BACK=' '                                                         
       IF (X.LE.-1.0D0) THEN                                            
          SIGN=-1.0D0                                                   
          X=X                                                           
       ELSE                                                             
          SIGN=1.0D0                                                    
       ENDIF                                                            
       ISZ=0                                                            
       RTEMP=X                                                          
       ILIMIT=I1+I2                                                     
       DILIMI  = DFLOAT(ILIMIT)                                         
       IF (DABS(RTEMP).GE.TEN**DILIMI ) THEN                            
 50       IF (DABS(RTEMP).GT.TEN**DILIMI ) THEN                         
             RTEMP=RTEMP/TEN                                            
             ISZ=ISZ+1                                                  
             GOTO 50                                                    
          ENDIF                                                         
          IPARTA=INT(RTEMP+0.1*SIGN)                                    
          CALL XYITOC(IPARTA,FRONT,ILIMIT)                              
          BACK='0'                                                      
       ELSE IF (DABS(RTEMP).LE.TEN**(-DILIMI )) THEN                    
          ISZ=I2                                                        
 100      IF (DABS(RTEMP).LT.TEN**(-DILIMI )) THEN                      
             RTEMP=RTEMP*TEN                                            
             ISZ=ISZ-1                                                  
             GOTO 100                                                   
          ENDIF                                                         
          IPARTA=INT(RTEMP*TEN**DILIMI )                                
          CALL XYITOC(IPARTA,BACK,ILIMIT)                               
          FRONT='0'                                                     
       ELSE                                                             
          IPARTA=(RTEMP+0.1D+00*SIGN)                                   
          CALL XYITOC(IPARTA,FRONT,ILIMIT)                              
          IPARTB=((RTEMP-IPARTA)*TEN**DILIMI )                          
          CALL XYITOC(IPARTB,BACK,ILIMIT)                               
       ENDIF                                                            
       CALL XYLSCH(FRONT,J)                                             
       ALL=' '                                                          
       DO 200 I=I1,J                                                    
          FRONT(I:I)=' '                                                
          ISZ=ISZ+1                                                     
 200   CONTINUE                                                         
       CALL XYLSCH(BACK,K)                                              
       DO 300 I=I2,K                                                    
          BACK(I:I)=' '                                                 
C          ISZ=ISZ+1                                                    
 300   CONTINUE                                                         
       ALL=' '                                                          
       CALL XYLSCH(FRONT,J)                                             
       DO 400 I=1,J                                                     
          ALL(I:I)=FRONT(I:I)                                           
 400   CONTINUE                                                         
       ILOC=J+1                                                         
       ALL(ILOC:ILOC)='.'                                               
       ILOC=ILOC+1                                                      
       CALL XYLSCH(BACK,K)                                              
       DO 500 I=1,K                                                     
          ALL(ILOC:ILOC)=BACK(I:I)                                      
          ILOC=ILOC+1                                                   
 500   CONTINUE                                                         
       IF (X.LT.0) THEN                                                 
          CALL XYAPPD(FRONT,'-',ALL)                                    
          ALL=FRONT                                                     
       ENDIF                                                            
       IF (SIGN.LT.0) THEN                                              
          X=X+1.0D0                                                     
       ENDIF                                                            
       RESULT=ALL                                                       
       RETURN                                                           
       END                                                              
        SUBROUTINE CENLIN(STRING,IOUT,IWIDTH)                           
        IMPLICIT REAL*8 (A-H,O-Z)                                       
        CHARACTER*(*) STRING                                            
        CHARACTER*80 TEMP,FORM                                          
        CHARACTER*(10) NUMCHA ,LENCHA                                   
        CHARACTER*1 XX,COMMA                                            
C                                                                       
C WRITES OUT STRING TO IOUT ON A CENTERED LINE 80 CHARACTER LINE        
C   ADDS A PRECEDING AND TRAILING BLANK LINE                            
C                                                                       
         XX = 'X'                                                       
         COMMA = ','                                                    
         IF (IWIDTH .EQ. 0) THEN                                        
          IWIDTH = 80                                                   
         ENDIF                                                          
         LENGTH = LEN(STRING)                                           
         CALL TRIMST (STRING,LENGTH)                                    
         IDIF = IWIDTH - LENGTH                                         
         ISPAC = IDIF/2                                                 
         NSIZE = 0                                                      
         NSIZE1 = 0                                                     
         CALL ENCODI(ISPAC,NUMCHA ,10,NSIZE1)                           
         CALL ENCODI(LENGTH,LENCHA ,10,NSIZE)                           
         TEMP(1:1) = '('                                                
         NSIZE2 = NSIZE1 + 2                                            
         TEMP(2:NSIZE1+1) = NUMCHA                                      
         TEMP(NSIZE2:NSIZE2)= XX                                        
         NSIZE2 = NSIZE2 + 1                                            
         TEMP(NSIZE2:NSIZE2) = COMMA                                    
         NSIZE2 = NSIZE2 + 1                                            
         TEMP(NSIZE2:NSIZE2) = 'A'                                      
         FORM = TEMP(1:NSIZE2)//LENCHA (1:NSIZE)                        
         IEND = NSIZE2 + NSIZE + 1                                      
         FORM(IEND:IEND) = ')'                                          
         WRITE(IOUT,*)                                                  
         WRITE(IOUT,FORM) STRING(1:LENGTH)                              
         WRITE(IOUT,*)                                                  
         RETURN                                                         
         END                                                            
./ ADD NAME=UTILITIE
./ NUMBER NEW1=10,INCR=10
C*    DEC/CMS REPLACEMENT HISTORY, ELEMENT UTILITIES.FOR                
C*    *70   23-JAN-1989 13:11:45 DBK ""                                 
C*    *69   20-JAN-1989 18:05:00 DBK ""                                 
C*    *68   20-JAN-1989 18:02:35 DBK ""                                 
C*    *67   20-JAN-1989 17:42:40 DBK "FIX PARSER ERROR CHECKING SO THAT 
C*    *66   19-JAN-1989 13:12:02 DBK "REMOVE CFLX CARDS"                
C*    *65   18-JAN-1989 16:23:34 DBK "FIX CALL GTRMSTR IN ATNA ROUTINE" 
C*    *64   18-JAN-1989 13:15:43 DBK "CHANGE CALL FRESTK TO = FRESTK"   
C*    *63   15-DEC-1988 15:56:55 DBK "ADD GETFILNM"                     
C*    *62    8-DEC-1988 19:40:41 DBK ""                                 
C*    *61    8-DEC-1988 18:41:57 DBK "FIX COMPRES"                      
C*    *60    8-DEC-1988 18:26:50 DBK "FIX LCRMSTR FOR ZERO LENGTH LINE" 
C*    *59    6-DEC-1988 12:35:24 DBK "ADD GETRESN AND GETATNA"          
C*    *58   21-NOV-1988 18:38:58 DBK "ADD NEW PARSING COMMAND"          
C*    *57   11-NOV-1988 12:00:18 DBK ""                                 
C*    *56   10-NOV-1988 13:28:45 DBK ""                                 
C*    *55   10-NOV-1988 13:20:25 DBK ""                                 
C*    *54   10-NOV-1988 13:07:19 DBK ""                                 
C*    *53   10-NOV-1988 12:35:19 DBK ""                                 
C*    *52   10-NOV-1988 12:19:46 DBK ""                                 
C*    *51   10-NOV-1988 11:49:07 DBK ""                                 
C*    *50   10-NOV-1988 11:38:13 DBK ""                                 
C*    *49    9-NOV-1988 17:54:05 DBK ""                                 
C*    *48    9-NOV-1988 17:45:28 DBK ""                                 
C*    *47    9-NOV-1988 17:33:50 DBK ""                                 
C*    *46    9-NOV-1988 17:08:23 DBK ""                                 
C*    *45    9-NOV-1988 14:42:41 DBK ""                                 
C*    *44    8-NOV-1988 18:13:25 DBK ""                                 
C*    *43    8-NOV-1988 16:38:47 DBK ""                                 
C*    *42    8-NOV-1988 16:23:39 DBK ""                                 
C*    *41    8-NOV-1988 15:44:25 DBK ""                                 
C*    *40    8-NOV-1988 14:52:48 DBK ""                                 
C*    *39    8-NOV-1988 14:43:15 DBK "ADD NXTWRD"                       
C*    *38    8-NOV-1988 14:35:43 DBK ""                                 
C*    *37    7-NOV-1988 18:39:21 DBK ""                                 
C*    *36    7-NOV-1988 18:31:20 DBK ""                                 
C*    *35    7-NOV-1988 18:22:12 DBK ""                                 
C*    *34    7-NOV-1988 18:09:05 DBK "FIX LCRMSTR"                      
C*    *33    7-NOV-1988 17:17:47 DBK ""                                 
C*    *32    4-NOV-1988 15:18:18 DBK "GET RID OF JOINWD"                
C*    *31    4-NOV-1988 15:14:51 DBK ""                                 
C*    *30    4-NOV-1988 10:52:32 DBK "FIX KYWRD"                        
C*    *29    1-NOV-1988 17:18:26 DBK "REMOVE UNUSED ROUTINES"           
C*    *28    1-NOV-1988 16:55:30 DBK ""                                 
C*    *27    1-NOV-1988 15:06:33 DBK "ADD NEW PARSER ROUTINES"          
C*    *26   12-OCT-1988 11:12:00 DBK "REMOVE GRAPHICS ROUTINES"         
C*    *25   10-OCT-1988 15:15:40 DBK "ADD SEND1D ROUTINE - 1D PLOTTING" 
C*    *24   20-SEP-1988 16:32:24 BACK ""                                
C*    *23   20-SEP-1988 11:12:46 BACK ""                                
C*    *22   19-SEP-1988 17:33:21 DBK ""                                 
C*    *21   19-SEP-1988 16:16:44 BACK ""                                
C*    *20   19-SEP-1988 15:45:02 BACK ""                                
C*    *19   19-SEP-1988 15:10:49 BACK "FIXED MALLADJSTMENT ERROR IN -NUM
C*    *18   19-SEP-1988 13:15:00 DBK ""                                 
C*    *17   15-SEP-1988 13:25:18 DBK ""                                 
C*    *16   14-SEP-1988 14:23:19 DBK ""                                 
C*    *15   14-SEP-1988 14:21:36 DBK ""                                 
C*    *14   14-SEP-1988 12:02:58 DBK ""                                 
C*    *13    8-SEP-1988 18:27:07 DBK "FIX DLPRBL ROUTINE - PROBLEM ON CO
C*    *12    7-SEP-1988 16:55:39 DBK "REMOVE EXCLAMATION PTS"           
C*    *11    1-SEP-1988 20:27:50 DK "CHANGED ARGUMENT FOR OPENING FILES 
C*    *10    1-SEP-1988 16:35:00 DK ""                                  
C*    *9     1-SEP-1988 16:30:57 DK ""                                  
C*    *8     1-SEP-1988 16:05:53 DK "CHANGED C.A.'S ON SEND2D"          
C*    *7     1-SEP-1988 11:28:41 DK "CHANGED CALLING ARGUMENTS TO SEND2D
C*    *6    31-AUG-1988 16:17:56 DK "CORRECTION TO UNITNUMBERS"         
C*    *5    31-AUG-1988 16:11:06 DK "ADDED SEND2D AND MORE OPTIONS TO PA
C*    *4    30-AUG-1988 17:35:58 DK "CHANGED REFERENCE DIRECTORY OF COMM
C*    *3    30-AUG-1988 17:29:11 DK "ADDED PARSPLOT TO UTILITIES"       
C*    *2    19-JUL-1988 12:13:49 DBK ""                                 
C*    *1     6-JUL-1988 15:36:49 DBK "PARSER + DIE + READTITL"          
C*    DEC/CMS REPLACEMENT HISTORY, ELEMENT UTILITIES.FOR                
C                                                                       
C                                                                       
C*MODULE PARSER *DECK CHCNBL                                            
      SUBROUTINE CHCNBL(ST,STLEN)                                       
C                                                                       
C     THIS SUBROUTINE CONVERTS ALL NONACCEPTABLE CONTROL CHARACTERS     
C     INTO BLANKS. ST IS DESTINED TO GO INTO A FORMAT BETWEEN           
C     QUOTES. THIS SUBROUTINE IS MACHINE DEPENDENT.                     
C                                                                       
      IMPLICIT INTEGER(A-Z)                                             
      CHARACTER*1 BLANK,LOWPRT,HGHPRT                                   
      CHARACTER*(*) ST                                                  
      DATA BLANK /' '/                                                  
CCVX  LOWPRT = CHAR(32)                                                 
CCVX  HGHPRT = CHAR(125)                                                
CCYB  LOWPRT = CHAR(32)                                                 
CCYB  HGHPRT = CHAR(125)                                                
CVAX  LOWPRT = CHAR(32)                                                 
CVAX  HGHPRT = CHAR(125)                                                
      LOWPRT = CHAR(64)                                                 
      HGHPRT = CHAR(255)                                                
C                                                                       
      IF (STLEN.EQ.0) RETURN                                            
      DO 1 I=1,STLEN                                                    
        IF(ST(I:I).GE.LOWPRT .AND. ST(I:I).LE.HGHPRT) GOTO 1            
          ST(I:I)=BLANK                                                 
    1   CONTINUE                                                        
      RETURN                                                            
      END                                                               
C                                                                       
C*MODULE PARSER *DECK CLCSPC                                            
      SUBROUTINE CLCSPC(ST,IFST)                                        
CJDW 22-MAR-88 FIX THE CASE FOR NO TRAILING SPACE.                      
C                                                                       
C FINDS LOCATION OF FIRST SPACE OR NULL IN ST OR LEN(ST) + 1 IF         
C  NO SPACE IS FOUND. THE RESULT IS RETURNED IN IFST                    
C                                                                       
      CHARACTER*(*) ST                                                  
      CHARACTER NULL*1                                                  
      NULL=CHAR(0)                                                      
      IFST = LEN(ST) + 1                                                
      DO 1 I=1,LEN(ST)                                                  
        IF ((ST(I:I) .EQ. ' ').OR.(ST(I:I).EQ.NULL)) THEN               
           IFST = I                                                     
           GO TO 2                                                      
        ENDIF                                                           
  1   CONTINUE                                                          
2     CONTINUE                                                          
      RETURN                                                            
      END                                                               
C                                                                       
C*MODULE PARSER *DECK CNVTUC                                            
      SUBROUTINE CNVTUC(ST,STLEN)                                       
C                                                                       
C     THIS CONVERTS A STRING TO ALL UPPERCASE. IT USES BYTE VARIABLES   
C     AND THE PROPERTY OF ASCII CODES THAT LETTERS ARE CONTIGUOUS AND   
C     UPPER CASE LETTERS ARE ALWAYS OFFSET A CONSTANT AMOUNT FROM THE   
C     EQUIVALENT LOWERCASE LETTER SO IT IS MACHINE DEPENDENT.           
C                                                                       
      IMPLICIT INTEGER(A-Z)                                             
      CHARACTER*(*) ST                                                  
      CHARACTER*1 A                                                     
C                                                                       
      DO 10 I=1,STLEN                                                   
         A= ST(I:I)                                                     
         IA = ICHAR(A)                                                  
CCVX     IF(IA.GE.97)THEN                                               
CCVX        IA=IA - 32                                                  
CCYB     IF(IA.GE.97)THEN                                               
CCYB        IA=IA - 32                                                  
CVAX     IF(IA.GE.97)THEN                                               
CVAX        IA=IA - 32                                                  
         IF(IA.GE.129.AND.IA.LE.169)THEN                                
            IA=IA + 64                                                  
            A = CHAR (IA)                                               
            ST(I:I)=A                                                   
         ENDIF                                                          
10    CONTINUE                                                          
      RETURN                                                            
      END                                                               
C*MODULE PARSER *DECK COMPARE                                           
      SUBROUTINE COMPAR (DATA,VARI,IFLAG)                               
      CHARACTER*4 DATA                                                  
      CHARACTER*1 VARI(4)                                               
C                                                                       
         DO 124 J=1,4                                                   
         IFLAG=INDEX(DATA(J:J),VARI(J))                                 
           IF(IFLAG.EQ.0) RETURN                                        
124      CONTINUE                                                       
128   CONTINUE                                                          
      RETURN                                                            
      END                                                               
C*MODULE DECODE.F *DECK DCWORK.F                                        
C PROCEDURES DECODI DECODF                                              
C PROJECT IMPACT                                                        
C PROGRAMER STEVEN BACK                                                 
C : TOCONVERT A STRING INTO A NUMBER.                                   
C                                                                       
C    ICTRL                                                              
C     0         INTEGER VALUE                                           
C     1         REAL VALUE                                              
       SUBROUTINE DCWORK(STRIN1,ICTRL,IOUT,ROUT)                        
       IMPLICIT REAL*8 (A-H,O-Z)                                        
       CHARACTER*(*) STRIN1                                             
       CHARACTER STRWOR *80                                             
       I=1                                                              
        IPNT = 1                                                        
 50    IF (STRIN1(I:I).EQ.' ') THEN                                     
           I=I+1                                                        
           GOTO 50                                                      
       ENDIF                                                            
       SIGN=1.0D0                                                       
       STRWOR ='0'                                                      
       IF (STRIN1(I:I).EQ.'-') THEN                                     
           SIGN=-1.0D0                                                  
       ENDIF                                                            
       IF (STRIN1(I:I).EQ.'+'.OR. STRIN1(I:I).EQ.'-') THEN              
           I=I+1                                                        
       ENDIF                                                            
 100   IF (STRIN1(I:I).GE.'0' .AND. STRIN1(I:I).LE.'9') THEN            
           STRWOR (IPNT:IPNT)=STRIN1(I:I)                               
           IPNT = IPNT + 1                                              
           I=I+1                                                        
           GOTO 100                                                     
       ENDIF                                                            
       DMENT=STRVAL(STRWOR ,IPNT-1)                                     
C                                                                       
C     IF ICTRL=0 THEN RETURN INTEGER PORTION                            
C                                                                       
           IF (ICTRL.EQ.0) THEN                                         
               DMENT = (DMENT+0.001D+00)*SIGN                           
               IOUT=INT(DMENT)                                          
               RETURN                                                   
           ENDIF                                                        
C                                                                       
C     OTHERWISE LOOK FOR '.'                                            
C                                                                       
           IF (STRIN1(I:I).EQ.'.') THEN                                 
               I=I+1                                                    
               J=1                                                      
               STRWOR ='0'                                              
 200           IF (STRIN1(I:I).GE.'0' .AND. STRIN1(I:I).LE.'9') THEN    
                   STRWOR (J:J)=STRIN1(I:I)                             
                   I=I+1                                                
                   J=J+1                                                
                   GOTO 200                                             
               ENDIF                                                    
               DFRACT=STRVAL(STRWOR ,J-1)/(10.0D+00**DFLOAT(J-1))       
               DMENT=DMENT+DFRACT                                       
           ENDIF                                                        
C                                                                       
C     THEN CHECK FOR EXPONENT.                                          
C                                                                       
           IF (STRIN1(I:I).EQ.'E'.OR.STRIN1(I:I)                        
     1     .EQ.'E'.OR.    STRIN1(I:I).EQ.'D'.OR.STRIN1(I:I).EQ.'D') THEN
               I=I+1                                                    
           ENDIF                                                        
           ESIGN=1.0D0                                                  
           IF (STRIN1(I:I).EQ.'-') THEN                                 
               ESIGN=-1.0D0                                             
           ENDIF                                                        
           IF (STRIN1(I:I).EQ.'+'.OR.STRIN1(I:I).EQ.'-') THEN           
               I=I+1                                                    
           ENDIF                                                        
           J=1                                                          
           STRWOR ='0'                                                  
 300       IF (STRIN1(I:I).GE.'0' .AND. STRIN1(I:I).LE.'9') THEN        
               STRWOR (J:J)=STRIN1(I:I)                                 
               I=I+1                                                    
               J=J+1                                                    
               GOTO 300                                                 
           ENDIF                                                        
           IF (J.GT.1) THEN                                             
               DEXP=STRVAL(STRWOR ,J-1)                                 
               ELSE                                                     
               DEXP=0.0                                                 
           ENDIF                                                        
           DTEST=(10.0D0**(ESIGN*DEXP))                                 
           IF (ESIGN.GT.0.0D0) THEN                                     
               DMENT=DMENT*(10.0D0**(DEXP))                             
               ELSE                                                     
               DMENT=DMENT/(10.0D0**(DEXP))                             
           ENDIF                                                        
           ROUT=DMENT*SIGN                                              
           RETURN                                                       
           END                                                          
C*MODULE DECODE.F *DECK DECODF.F                                        
C                                                                       
C                                                                       
CFH    REAL*8 FUNCTION DECODF(TXT,ISTRLEN)                              
       DOUBLE PRECISION FUNCTION DECODF(TXT,ISTRLE )                    
       IMPLICIT REAL*8 (A-H,O-Z)                                        
          INTEGER*4       ISTRLE                                        
       CHARACTER*1 TXT(ISTRLE +1)                                       
       CHARACTER WORK*40                                                
       DO 100 I=1,ISTRLE                                                
           WORK(I:I)=TXT(I)                                             
  100  CONTINUE                                                         
       WORK(ISTRLE +1:ISTRLE +1)=' '                                    
       CALL DCWORK(WORK,1,IOUT,ROUT)                                    
       DECODF=ROUT                                                      
       RETURN                                                           
       END                                                              
C*MODULE DECODE.F *DECK DECODI.F                                        
C                                                                       
C                                                                       
       INTEGER FUNCTION DECODI(TXT,ISTRLE )                             
       IMPLICIT REAL*8 (A-H,O-Z)                                        
          INTEGER*4       ISTRLE                                        
       CHARACTER*1 TXT(ISTRLE )                                         
       CHARACTER WORK*40                                                
       DO 100 I=1,ISTRLE                                                
           WORK(I:I)=TXT(I)                                             
  100  CONTINUE                                                         
       WORK(ISTRLE +1:ISTRLE +1)=' '                                    
       CALL DCWORK(WORK,0,IOUT,ROUT)                                    
       DECODI=IOUT                                                      
       RETURN                                                           
       END                                                              
C ----------------------------------------------------------------      
        SUBROUTINE DIE                                                  
C ----------------------------------------------------------------      
C PURPOSE: TO PROVIDE A TRACEBACK OF ERRORS                             
C                                                                       
C                                                                       
        DIE1 = 0.0                                                      
        DIE2 = 1.0/DIE1                                                 
C                                                                       
        STOP                                                            
        END                                                             
C                                                                       
C*MODULE PARSER *DECK DLPRBLK                                           
      SUBROUTINE DLPRBL (ST)                                            
CDBK 07-APR-88 FIX THE CASE FOR A PRECEDING BLANK                       
C                                                                       
C DELETES PRECEDING BLANK OR NULL CHARACTERS OF STRING IF FOUND         
C                                                                       
C                                                                       
      CHARACTER*(*) ST                                                  
        CHARACTER*80 TMP                                                
        CHARACTER*1 NULL                                                
        NULL = CHAR(0)                                                  
      ILNGTH = LEN(ST)                                                  
        ITOT = LEN(ST)                                                  
        TMP(1:ITOT) = ST(1:ITOT)                                        
        I=1                                                             
10      CONTINUE                                                        
        IF ((ST(I:I) .EQ. ' ').OR.(ST(I:I).EQ.NULL)) THEN               
           ILNGTH = ITOT - I                                            
           IBEG = I + 1                                                 
           TMP(1:ILNGTH) = ST(IBEG:ITOT)                                
           I = I + 1                                                    
           IF (I .EQ. ITOT) GO TO 2                                     
           GO TO 10                                                     
        ENDIF                                                           
2     CONTINUE                                                          
        ST(1:ITOT) = TMP(1:ILNGTH)                                      
      RETURN                                                            
      END                                                               
C*MODULE PARSER *DECK ECHO                                              
      SUBROUTINE ECHOIN(NLINE)                                          
CMSP  INCLUDE (UNITNUMS)                                                
      INCLUDE '/labo/qclib/inspidas/common/unitnums'
CMSP  INCLUDE (ECHO)                                                    
      INCLUDE '/labo/qclib/inspidas/common/echo'
C                                                                       
      DO 100 I=1,500                                                    
       READ(IN01,10,END=999) INLINE(I)                                  
100   CONTINUE                                                          
999   NLINE=I - 1                                                       
10    FORMAT(A80)                                                       
      REWIND IN01                                                       
      RETURN                                                            
      END                                                               
C*MODULE PARSER *DECK ECHOOUT                                           
      SUBROUTINE ECHOOU (NLINE)                                         
CMSP  INCLUDE (UNITNUMS)                                                
      INCLUDE '/labo/qclib/inspidas/common/unitnums'
CMSP  INCLUDE (ECHO)                                                    
      INCLUDE '/labo/qclib/inspidas/common/echo'
C                                                                       
      DO 100 I=1,NLINE                                                  
       WRITE(IOUT02,10) INLINE(I)                                       
100   CONTINUE                                                          
C                                                                       
10    FORMAT(6X,A80)                                                    
      WRITE(IOUT02,*)                                                   
      RETURN                                                            
      END                                                               
C*MODULE ENCODE.F *DECK ENCODF.F                                        
C                                                                       
C ENCODF: CONVERT REAL NUMBER TO STRING                                 
C     WITH MINIMUZATION OF RESULTING STRING                             
C     (WHICH MEANS UNEEDED SPACES, ZEROS AND DECIMAL                    
C     POINTS ARE REMOVED)                                               
C                                                                       
       SUBROUTINE ENCODF(RNUMBE ,TXT,MAXSIZ ,NUMSIZ )                   
       IMPLICIT REAL*8 (A-H,O-Z)                                        
          REAL*8          RNUMBE                                        
          INTEGER*4       MAXSIZ                                        
          INTEGER*4       NUMSIZ                                        
       CHARACTER*(*) TXT                                                
       CHARACTER TEMP*1,HOLD*25                                         
       RNUM=RNUMBE                                                      
       IFRMT=0                                                          
       TXT='                      '                                     
       CALL XYITOS(RNUM,TXT,NUMSIZ ,IFRMT,14,7)                         
 100   IF (TXT(1:1).EQ.' ') THEN                                        
           CALL XYDELC (TXT,1,1)                                        
           GOTO 100                                                     
       ENDIF                                                            
       CALL XYLSCH(TXT,NUMSIZ )                                         
       TEMP=TXT(NUMSIZ :NUMSIZ )                                        
 200   IF ((TEMP.EQ.' '.OR.TEMP.EQ.'0'.OR.TEMP.EQ.'.').AND.             
     * NUMSIZ .GT.1) THEN                                               
           CALL XYDELC (TXT,NUMSIZ ,1)                                  
           NUMSIZ =NUMSIZ -1                                            
           TEMP=TXT(NUMSIZ :NUMSIZ )                                    
           GOTO 200                                                     
       ENDIF                                                            
       END                                                              
C*MODULE ENCODE.F *DECK ENCODI.F                                        
C                                                                       
C SUBROUTINE ENCODI, CONVERT AN INTEGER TO A STRING                     
C                                                                       
       SUBROUTINE ENCODI(NUMBER,TXT,MAXSIZ ,NUMSIZ )                    
       IMPLICIT REAL*8 (A-H,O-Z)                                        
          INTEGER*4       MAXSIZ                                        
          INTEGER*4       NUMSIZ                                        
       CHARACTER*(*) TXT                                                
       CHARACTER TEMP*12                                                
       TXT=' '                                                          
       IF (NUMBER.LT.0) THEN                                            
           ISIGN=-1                                                     
           ELSE                                                         
           ISIGN=1                                                      
       ENDIF                                                            
       CALL XYITOC(NUMBER,TXT,MAXSIZ )                                  
 100   IF (TXT(1:1).EQ.' ') THEN                                        
           CALL XYDELC (TXT,1,1)                                        
           GOTO 100                                                     
       ENDIF                                                            
       IF (ISIGN.EQ.-1) THEN                                            
           CALL XYAPPD(TEMP,'-',TXT)                                    
           TXT=TEMP                                                     
       ENDIF                                                            
       CALL XYLSCH(TXT,NUMSIZ )                                         
       END                                                              
C                                                                       
C*MODULE PARSER *DECK EQST                                              
      FUNCTION EQST(ST1,LEN1,ST2,LEN2)                                  
C                                                                       
C     COMPARES TWO STRINGS AND RETURNS TRUE IF THEY ARE EQUAL.          
C                                                                       
      IMPLICIT INTEGER(A-Z)                                             
      LOGICAL EQST                                                      
      CHARACTER*1 ST1(1),ST2(2)                                         
C                                                                       
      IF(LEN1.EQ.LEN2) GOTO 1                                           
      EQST=.FALSE.                                                      
      RETURN                                                            
    1 EQST=.TRUE.                                                       
      IF (LEN1.EQ.0) RETURN                                             
      DO 2 I=1,LEN1                                                     
        IF(ST1(I).NE.ST2(I)) GOTO 3                                     
    2   CONTINUE                                                        
      RETURN                                                            
    3 EQST=.FALSE.                                                      
      RETURN                                                            
      END                                                               
C*MODULE PARSER *DECK FILNUL                                            
      SUBROUTINE FILNUL(ST,STMAX,STLEN)                                 
C                                                                       
C     THIS SUBROUTINE FILLS THE UNUSED PART OF ST WITH ASCII NUL (0)    
C                                                                       
      IMPLICIT INTEGER(A-Z)                                             
      CHARACTER*(*) ST                                                  
      CHARACTER*(1) NUL                                                 
C                                                                       
      NUL=CHAR(0)                                                       
      IF(STLEN.EQ.STMAX) RETURN                                         
      S=STLEN+1                                                         
      DO 1 I=S,STMAX                                                    
    1   ST(I:I)=NUL                                                     
      RETURN                                                            
      END                                                               
C*MODULE PARSER *DECK FILSPC                                            
      SUBROUTINE FILSPC(ST,STMAX,STLEN)                                 
C                                                                       
C     THIS SUBROUTINE FILLS THE UNUSED PART OF ST WITH SPACES.          
C                                                                       
      IMPLICIT INTEGER(A-Z)                                             
      CHARACTER*(*) ST                                                  
      CHARACTER*1 BLANK                                                 
      DATA BLANK/' '/                                                   
C                                                                       
      IF(STLEN.EQ.STMAX) RETURN                                         
      S=STLEN+1                                                         
      DO 1 I=S,STMAX                                                    
    1   ST(I:I)=BLANK                                                   
      RETURN                                                            
      END                                                               
C*MODULE DECODE.F *DECK STRVAL.F                                        
C                                                                       
C SUBROUTINE STRVAL: USED BY DECODE, CONVERTES A SIMPLE,                
C INTEGER (STYLELIZED) NUMBER IN CHARACTER FORM INTO A REAL             
C                                                                       
CFH    REAL*8 FUNCTION STRVAL(TXT,ISIZE)                                
       DOUBLE PRECISION FUNCTION STRVAL(TXT,ISIZE)                      
       IMPLICIT REAL*8 (A-H,O-Z)                                        
          INTEGER*4       LETZER                                        
       CHARACTER*(*) TXT                                                
       TENVAL=10.0D0**DFLOAT(ISIZE-1)                                   
       RVAL=0                                                           
C GET THE ASCII VALUE OF ZERO                                           
       LETZER =ICHAR('0')                                               
       ICOUNT=1                                                         
 100   IF (ICOUNT.LE.ISIZE) THEN                                        
           RVAL=RVAL+TENVAL*DFLOAT(ICHAR(TXT(ICOUNT:ICOUNT))-LETZER )   
           TENVAL=TENVAL/10.0D0                                         
           ICOUNT=ICOUNT+1                                              
           GOTO 100                                                     
       ENDIF                                                            
       STRVAL=RVAL                                                      
       RETURN                                                           
       END                                                              
C*MODULE PARSER *DECK GTFLNM                                            
        SUBROUTINE GTFLNM(FILNAM)                                       
CMSP  INCLUDE (COMMAND)                                                 
      INCLUDE '/labo/qclib/inspidas/common/command'
        CHARACTER*(*) FILNAM                                            
         LENFL = LEN(FILNAM)                                            
         CALL NXTWRD(COMLY2 ,COMLEN,FILNAM,LENFL)                       
CVAX     CALL FILSPC(FILNAM,60,LENFL)                                   
CCYB     CALL FILSPC(FILNAM,60,LENFL)                                   
CCVX     CALL FILNUL(FILNAM,60,LENFL)                                   
         CALL FILNUL(FILNAM,60,LENFL)                                   
         RETURN                                                         
         END                                                            
       SUBROUTINE KYWRD(KEYWOR ,KEY,NSIZE)                              
       IMPLICIT REAL*8 (A-H,O-Z)                                        
       CHARACTER*(*) KEYWOR                                             
       CHARACTER*1  KEY(NSIZE)                                          
       DO 10 I=1,NSIZE                                                  
         KEY(I)=KEYWOR (I:I)                                            
10     CONTINUE                                                         
       RETURN                                                           
       END                                                              
C*MODULE PARSER *DECK NXTCMND                                           
      SUBROUTINE NXTCMN (NXTSTR)                                        
C     DECLARATIONS FOR COMMAND SCANNING.                                
C                                                                       
CMSP  INCLUDE (COMMAND)                                                 
      INCLUDE '/labo/qclib/inspidas/common/command'
CMSP  INCLUDE (UNITNUMS)                                                
      INCLUDE '/labo/qclib/inspidas/common/unitnums'
      INTEGER CEIL,TASK,INUNIT,PRUNIT                                   
      INTEGER DELEN                                                     
      INTEGER WDLEN,WDMAX,SRCHWD,INDX,ST,STLEN                          
      LOGICAL  DELIM                                                    
      CHARACTER*(*) NXTSTR                                              
      LOGICAL EOF                                                       
C                                                                       
C     PARAMETER NWORD1=24,NWORD2=12,NWORD3 = 4                          
C                                                                       
C                                                                       
      DIMENSION WORDYN(12),ICNTRL(20)                                   
C                                                                       
      DATA MXCMSZ/2000/                                                 
      ISTRM=1                                                           
C THIS IS THE .INP FILE IT IS READING FROM                              
C                                                                       
C     THIS IS THE MAIN LOOP FOR READING AND PROCESSING COMMANDS. BEFORE 
C     READING THE NEXT COMMAND, MAKE SURE THAT THE VARIABLES HAVE NOT   
C     EXCEEDED THEIR BOUNDS.                                            
C                                                                       
   60 CONTINUE                                                          
      CALL TRIMST (COMLY2 ,COMLEN)                                      
      IF ( COMLEN .GT. 0 ) THEN                                         
         WRITE(IOUT06,91)                                               
         WRITE(IOUT06,90) COMLY2 (1:COMLEN)                             
         WRITE(IOUT06,92)                                               
   91 FORMAT(/20X,60('*'),                                              
     1       /20X,'WARNING : FOLLOWING EXTRANEOUS CHARCTERS ',          
     2            'FOUND.')                                             
   90 FORMAT(25(/20X,A80))                                              
   92 FORMAT(/20X,60('*'))                                              
      ENDIF                                                             
C                                                                       
      CALL RDCMND(COMLY2 ,MXCMSZ,COMLEN,ISTRM,EOF,.TRUE.)               
      IF (EOF)THEN                                                      
C                                                                       
C      EOF = .FALSE.                                                    
      WRITE(IOUT06,*)' EOF '                                            
      CALL TIMIT(IOUT02,1)                                              
      STOP ' END OF TASK FILE '                                         
      ENDIF                                                             
C                                                                       
      NXTSTR = ' '                                                      
      LENSTR = LEN(NXTSTR)                                              
      CALL NXTWRD(COMLY2 ,COMLEN,NXTSTR,LENSTR)                         
C                                                                       
C     SHORTEN WORD TO FOUR CHARACTERS OR LESS AND PAD WITH BLANKS TO    
C     PREPARE FOR SEARCH INTO COMMAND ARRAY.                            
C                                                                       
      IF (NXTSTR .NE. ' ') THEN                                         
        RETURN                                                          
      ELSE                                                              
       WRITE(IOUT06,*)' ERROR IN READING NEXT LINE '                    
       RETURN                                                           
      ENDIF                                                             
      END                                                               
C*MODULE PARSER *DECK RDCMND                                            
      SUBROUTINE RDCMND(COMLYN,MXCMSZ,CMNLEN,UNIT,EOF,QPRINT)           
C                                                                       
C             THIS SUBROUTINE READS A COMMAND IN FROM UNIT. THE COMMAND 
C     FIELD ON A LINE MAY EXTEND TO COLUMN 80 OR MAY BE TERMINATED BY AN
C     EXCLAMATION MARK ANYWHERE ON THE LINE. A COMMAND IS ONE COMMAND   
C     FIELD OF INFORMATION UNLESS THE LAST NONBLANK CHARACTER IN THAT   
C     FIELD IS A HYPHEN. IN THAT CASE, THE COMMAND FIELD ON THE NEXT    
C     RECORD IS APPENDED TO THE CHARACTERS PRECEDING THE HYPHEN.        
C     TRAILING BLANKS ARE REMOVED FROM ALL COMMAND FIELDS, AND LOWERCASE
C     LETTERS ARE CONVERTED TO UPPERCASE. IF AN END OF FILE IS SEEN     
C     WHILE READING A COMMAND, EOF IS TURNED ON. IF EOF IS TURNED ON    
C     WHEN CALLED, THE SUBROUTINE RETURNS IMMEDIATELY. IF QPRINT IS ON, 
C     THE RECORDS ARE PRINTED ON UNIT 6 AS THEY ARE READ.               
C                                                                       
      IMPLICIT INTEGER(A-Z)                                             
          INTEGER*4       NEWLEN                                        
CMSP  INCLUDE (UNITNUMS)                                                
      INCLUDE '/labo/qclib/inspidas/common/unitnums'
      CHARACTER*(*) COMLYN                                              
      CHARACTER*1 HYPHEN,EXCLMK                                         
      CHARACTER*80 CARD                                                 
      LOGICAL EOF,QPRINT                                                
      DATA HYPHEN/'-'/,EXCLMK/']'/                                      
C                                                                       
      IF(EOF) RETURN                                                    
      CMNLEN=0                                                          
      IF (QPRINT) WRITE(IOUT06,201)                                     
  201 FORMAT('  ')                                                      
    1 READ(UNIT,100,END=9) CARD                                         
  100 FORMAT(A80)                                                       
  200 FORMAT(14X,80A1)                                                  
      CARDLN=80                                                         
      IEND = INDEX(CARD,EXCLMK)                                         
      IF (IEND.NE.0) CARDLN=IEND-1                                      
      CALL TRIMST (CARD,CARDLN)                                         
      CALL CHCNBL(CARD,CARDLN)                                          
      CALL CNVTUC(CARD,CARDLN)                                          
      IF(CARDLN.EQ.0) GOTO 1                                            
      IF(CARD(CARDLN:CARDLN).NE.HYPHEN) THEN                            
    2    NEWLEN  = CMNLEN + CARDLN                                      
         COMLYN(CMNLEN+1:NEWLEN ) = CARD(1:CARDLN)                      
         CMNLEN = NEWLEN                                                
         RETURN                                                         
      ELSE                                                              
        IF(CARDLN.EQ.1) GOTO 1                                          
        NEWLEN  = CMNLEN + CARDLN - 1                                   
        COMLYN(CMNLEN+1:NEWLEN ) = CARD(1:CARDLN-1)                     
        CMNLEN = NEWLEN                                                 
        GOTO 1                                                          
      ENDIF                                                             
    9 EOF=.TRUE.                                                        
      RETURN                                                            
      END                                                               
C* DEC/CMS REPLACEMENT HISTORY, ELEMENT READTITL.FOR                    
C* *3    10-MAR-1988 14:28:01 DBK ""                                    
C* *2    10-MAR-1988 12:42:58 DBK ""                                    
C* *1     7-MAR-1988 15:05:20 DBK "UTILITY ROUTINES"                    
C* DEC/CMS REPLACEMENT HISTORY, ELEMENT READTITL.FOR                    
      SUBROUTINE READTI  (INUNIT,IOUT,IPRN)                             
      IMPLICIT REAL*8 (A-H,O-Z)                                         
      IMPLICIT INTEGER*4(I-N)                                           
C                                                                       
      CHARACTER*80  TITLE                                               
      CHARACTER*1 STAR,BLANK                                            
      DATA  STAR/'*'/, BLANK/' '/                                       
C                                                                       
C IPRN IS A PRINT FLAG IPRN = 1         PRINT                           
C                             OTHERWISE NORPINT                         
C                                                                       
10    READ(INUNIT,95) TITLE                                             
      IF (TITLE(1:1) .NE. STAR)  THEN                                   
        WRITE(IOUT,110)                                                 
        CALL DIE                                                        
      ENDIF                                                             
C                                                                       
      DO 20 I=80,2,-1                                                   
         IF(TITLE(I:I).NE.BLANK) THEN                                   
           IF(IPRN.EQ.1) WRITE(IOUT,100) TITLE                          
           GO TO 10                                                     
         ENDIF                                                          
20      CONTINUE                                                        
C                                                                       
 95   FORMAT(A80)                                                       
100   FORMAT(1X,A80)                                                    
110   FORMAT(' TITLE CARDS MUST HAVE A * IN THE COLUMN 1 OF EACH LINE', 
     . //,' *** EXECUTION TERMINATING *** ')                            
C                                                                       
      RETURN                                                            
      END                                                               
        SUBROUTINE COMPRE (COMLYN,LENCOM)                               
        IMPLICIT REAL*8 (A-H,O-Z)                                       
C                                                                       
C REMOVES EXTRA SPACES FROM THE LINE                                    
C  COMLYN - COMMAND LINE                                                
C  LENCOM - LENGTH OF COMMAND LINE                                      
C                                                                       
        CHARACTER*(*) COMLYN                                            
        CHARACTER*1 TEST                                                
        IF (LENCOM .LE. 0) RETURN                                       
        N = 1                                                           
30      CONTINUE                                                        
        IBEG = N                                                        
        IEND = LENCOM                                                   
        DO 10 I=IBEG,IEND                                               
         TEST = COMLYN(I:I)                                             
         IF (TEST .EQ. ' ') THEN                                        
           IF (COMLYN(I+1:I+1) .EQ. ' ') THEN                           
               DO 20 J=I,IEND                                           
                COMLYN(J:J) = COMLYN(J+1:J+1)                           
20             CONTINUE                                                 
           LENCOM = LENCOM - 1                                          
           N = I                                                        
           GOTO 30                                                      
           ENDIF                                                        
         ENDIF                                                          
         N = I                                                          
10      CONTINUE                                                        
        LENCOM = N                                                      
        RETURN                                                          
        END                                                             
        SUBROUTINE RMVWBK  (COMLYN,LENCOM,LEN,IOFFSE )                  
        IMPLICIT REAL*8 (A-H,O-Z)                                       
          INTEGER*4       IOFFSE                                        
        CHARACTER*(*) COMLYN                                            
C                                                                       
C REMOVES A WORD FROM A COMMAND LINE BEGINNING FROM THE LAST CHARACTER  
C  OF THE WORD                                                          
C  COMLYN - COMMAND LINE                                                
C  LENCOM - LENGTH OF COMMAND LINE                                      
C  LEN - LENGTH OF WORD TO BE REMOVED                                   
C  IOFFSET - INDEX OF LAST CHARACTER OF WORD                            
        IOFF1 = IOFFSE                                                  
        IBEG = IOFF1 - LEN                                              
        IEND = IOFF1                                                    
        COMLYN(IBEG:IOFF1) = ' '                                        
        CALL COMPRE (COMLYN,LENCOM)                                     
        RETURN                                                          
        END                                                             
        SUBROUTINE RMVWFD  (COMLYN,LENCOM,LEN,IOFFSE )                  
        IMPLICIT REAL*8 (A-H,O-Z)                                       
          INTEGER*4       IOFFSE                                        
        CHARACTER*(*) COMLYN                                            
C                                                                       
C REMOVES A WORD FROM A COMMAND LINE BEGINNING WITH THE FIRST CHARACTER 
C  OF THE WORD                                                          
C  COMLYN - COMMAND LINE                                                
C  LENCOM - LENGTH OF COMMAND LINE                                      
C  LEN - LENGTH OF WORD TO BE REMOVED                                   
C  IOFFSET - INDEX OF FIRST CHARACTER OF WORD                           
        IOFF1 = IOFFSE  + LEN + 1                                       
        IBEG = IOFF1 - LEN                                              
        COMLYN(IBEG:IOFF1) = ' '                                        
        CALL COMPRE (COMLYN,LENCOM)                                     
        RETURN                                                          
        END                                                             
        INTEGER FUNCTION LCRMST (COMLYN,LENCOM,STRING,LEN1,OPTION,LEN2) 
        IMPLICIT REAL*8 (A-H,O-Z)                                       
          INTEGER*4       IOFFSE                                        
          INTEGER*4       IOFFBE                                        
C                                                                       
C  FUNCTION WHICH DETERMINES IF A WORD (OR A FRACTIONAL PART ) EXISTS   
C   THE VALUE RETURNED IS THE INDEX OF THE LAST CHARACTER OF THE WORD   
C   COMLYN - COMMAND LINE                                               
C   LENCOM - LENGTH OF LINE                                             
C   STRING - THE FIRST LEN1 CHARACTERS WHICH MUST OCCUR FOR THE WORD TO 
C            BE FOUND                                                   
C   OPTION - AN OPTIONAL EXTENSION OF THE WORD - SOME OF IT MAY OR MAY  
C            NOT EXIST ( E.G. IF STRING IS 'BIG' AND 'GER' IS OPTIONAL  
C            'BIGGEST' WOULD NOT BE FOUND BUY BIG,BIGG,BIGGE,OR BIGGER  
C            COULD ALL BE FOUND                                         
C                                                                       
        CHARACTER*(*) COMLYN,STRING,OPTION                              
        CHARACTER*(800) NXTWD                                           
        CHARACTER*1 SPACE                                               
        IOFF = 0                                                        
        LCRMST  = 0                                                     
        IF (LENCOM .LE. 0) RETURN                                       
CCVX    SPACE = CHAR(32)                                                
CCYB    SPACE = CHAR(32)                                                
CVAX    SPACE = CHAR(32)                                                
        SPACE = CHAR(64)                                                
        IOFFSE  = 1                                                     
        IOFFBE  = 1                                                     
C FIND THE MANDATORY PART OF THE KEYWORD IN COMLYN                      
20      IF (IOFFBE  .GT. LENCOM) RETURN                                 
        IOFF = INDEX(COMLYN(IOFFBE :LENCOM),STRING) + IOFFBE  - 1       
C IOFF IS 0 IF IT IS NOT THERE                                          
        IF (IOFF .EQ. 0) RETURN                                         
C IF THE PRECEDING CHARACTER IN THE COMMAND LINE IS NOT A BLANK         
C    THEN THIS IS THE MIDDLE OF A WORD                                  
       IF (IOFF .GT. 1) THEN                                            
C       TRY AGAIN IF THIS IS IN THE MIDDLE OF A WORD                    
        IOFFM1 = IOFF - 1                                               
        IF (COMLYN(IOFFM1:IOFFM1) .NE. SPACE) THEN                      
         IOFFBE  = IOFF + 1                                             
         GOTO 20                                                        
        ENDIF                                                           
       ENDIF                                                            
C LTEST WOULD BE THE MAXIMUM LENGTH OF THE STRING+OPTION + THE OFFSET   
C   OF STRING + 1 TO ACCOUNT FOR SPACE AFTER ALL WORDS                  
        LTEST = LEN1 + LEN2 + IOFF + 1                                  
        IF (LTEST .GT. LENCOM) LTEST = LENCOM                           
        LBEGIN = IOFF + LEN1                                            
        IF (LBEGIN .GT. LENCOM) LBEGIN = LENCOM                         
C SEARCH FOR OPTION IN COMLYN                                           
C   FIND FIRST SPACE AFTER STRING BUT BEFORE THE END OF OPTION          
        IOFF2 = INDEX(COMLYN(LBEGIN:LTEST),SPACE)                       
C IF THERE IS NO SPACE THEN THE REST OF THE WORD AFTER STRING MUST      
C   BE LONGER THAN OPTION THEREFORE THIS CAN'T BE WORD WE ARE LOOKING FO
        IF (IOFF2 .EQ. 0) THEN                                          
           IF (LTEST .GE. LENCOM) THEN                                  
             IOFF2 = LENCOM - IOFF - LEN1 + 2                           
             LTEST = LENCOM                                             
           ELSE                                                         
             RETURN                                                     
           ENDIF                                                        
        ENDIF                                                           
        IENDWD = IOFF2 + IOFF + LEN1 - 1                                
C  FILL NXTWD WITH THE PORTION OF COMLYN WHICH WOULD CORRESPOND TO OPTIO
        NXTWD = COMLYN(LBEGIN:IENDWD)                                   
C NDIFF IS THE NUMBER OF CHARACTERS BEFORE THE NEXT SPACE               
        NDIFF = IOFF2 - 1                                               
C SEARCH CHAR. BY CHAR. THROUGH NXTWD TO MAKE SURE THAT IT CORRESPONDS T
C   OPTION - NOTE THAT NOT ALL OF OPTION MUST EXIST                     
        DO 10 I=1,NDIFF                                                 
          IF (NXTWD(I:I) .NE. OPTION(I:I)) RETURN                       
10      CONTINUE                                                        
C CALCULATE THE OFFSET TO THE END OF THE WORD WHICH ACTUALLY IS IN THE L
           IOFFSE  = IOFF + LEN1 + NDIFF                                
C CALCULATE LENGTH OF WORD IN LINE (INCLUDE ROOM FOR SPACE AT END OF WOR
           LTOT = IOFFSE  - IOFF + 1                                    
C REMOVE THE WORD FROM LINE                                             
           CALL RMVWBK  (COMLYN,LENCOM,LTOT,IOFFSE )                    
           IOFFSE  = IOFFSE  - LTOT                                     
C PUT VALUE OF OFFSET IN VALUE OF FUNCTION                              
           LCRMST  = IOFFSE                                             
        IF (IOFFSE  .EQ. 0) LCRMST  = 1                                 
           RETURN                                                       
           END                                                          
        SUBROUTINE GETNXT  (COMLYN,LENCOM,STRING,LEN1,OPTION,LEN2,      
     *                      RETSTR,LEN)                                 
        IMPLICIT REAL*8 (A-H,O-Z)                                       
C                                                                       
C GETS THE NEXT STRING -                                                
C  COMLYN - COMMAND LINE                                                
C  LENCOM - LENGTH OF COMMAND LINE                                      
C  STRING - SEARCHES FOR THIS STRING OF LENGTH, LEN1                    
C  OPTION - OPTIONAL PORTION OF STRING, LENGTH = LEN2                   
C  RETSTR - STRING TO BE RETURNED, LENGTH = LEN                         
C                                                                       
        CHARACTER*(*) COMLYN,STRING,OPTION                              
        CHARACTER*(*) RETSTR                                            
        CHARACTER*1 DELIM                                               
        DELIM = ' '                                                     
        RETSTR = ' '                                                    
        CALL COMPRE (COMLYN,LENCOM)                                     
        IOFF1 = LCRMST (COMLYN,LENCOM,STRING,LEN1,OPTION,LEN2)          
        IF (IOFF1 .GE. LENCOM) RETURN                                   
        IF (IOFF1 .GT. 0) THEN                                          
          IF (COMLYN(IOFF1:IOFF1) .EQ. ' ') IOFF1 = IOFF1 + 1           
          CALL NEWWD(COMLYN,LENCOM,RETSTR,IOFF1,LEN,DELIM)              
        ELSE                                                            
         RETURN                                                         
        ENDIF                                                           
        RETURN                                                          
        END                                                             
        SUBROUTINE NEWWD(COMLYN,LENCOM,STRING,IOFFSE ,LENGTH,DELIM)     
        IMPLICIT REAL*8 (A-H,O-Z)                                       
          INTEGER*4       IOFFSE                                        
          INTEGER*4       LENGTH                                        
C                                                                       
C RETURNS A WORD (ALL CHARACTERS UP TO A DELIMITER)                     
C  COMLYN - COMMAND LINE                                                
C  LENCOM - LENGTH OF COMMANDLINE                                       
C  STRING - NEXT WORD                                                   
C  IOFFSET - BEGINNING OF WORD IN COMLYN                                
C  LENGTH - LENGTH OF WORD RETURNED                                     
C  DELIM - DELIMITER                                                    
C                                                                       
        CHARACTER*(*) COMLYN,STRING,DELIM                               
        IF (LENCOM .EQ. 0) THEN                                         
          STRING = ' '                                                  
          RETURN                                                        
        ENDIF                                                           
        LENGTH = INDEX(COMLYN(IOFFSE :LENCOM),DELIM)                    
C IF THERE IS NO SPACE AT END OF LINE GET ALL CHARACTERS TO END OF LINE 
         IF (LENGTH .EQ. 0) THEN                                        
           LENGTH = LENCOM - IOFFSE  + 1                                
          ENDIF                                                         
        IEND = IOFFSE  + LENGTH - 1                                     
C                                                                       
C  PROTECT AGAINST READING IN A WORD WHICH IS TOO LONG TO FIT IN STRING 
C                                                                       
        IF (LEN(STRING) .LT. LENGTH) THEN                               
          LENGTH  = LEN(STRING)                                         
          IENDN = IOFFSE  + LENGTH  - 1                                 
        ELSE                                                            
          LENGTH  = LENGTH                                              
          IENDN = IEND                                                  
        ENDIF                                                           
        STRING = COMLYN(IOFFSE :IENDN)                                  
        CALL RMVWBK  (COMLYN,LENCOM,LENGTH,IEND)                        
        RETURN                                                          
        END                                                             
        SUBROUTINE GETPAF  (COMLYN,LENCOM,STRING,LEN1,OPTION,LEN2,FVALU)
        IMPLICIT REAL*8 (A-H,O-Z)                                       
C FINDS A FLOATING POINT PARAMETER AFTER A STRING                       
C  COMLYN,LENCOM - COMMAND LINE & ITS LENGTH                            
C  STRING - STRING TO BE SEARCHED FOR TO LOCATE PARAMETER               
C  OPTION - OPTIONAL STRING WHICH MAY BE PRESENT                        
C  LEN1,LEN2 - LENGTH OF STRING AND OPTION, RESPECTIVELY                
C  FVALU - VALUE OF THE PARAMETER TO BE RETURNED                        
C                                                                       
        CHARACTER*(*) COMLYN,STRING,OPTION                              
        CHARACTER*80 RETSTR                                             
        CALL GETNXT  (COMLYN,LENCOM,STRING,LEN1,OPTION,LEN2,RETSTR,LEN) 
        IF (RETSTR .EQ. ' ') RETURN                                     
C       FVALU = DECODF(RETSTR,LEN)                                      
        CALL DCWORK(RETSTR,1,IOUT,ROUT)                                 
        FVALU = ROUT                                                    
        RETURN                                                          
        END                                                             
        SUBROUTINE GETPAI  (COMLYN,LENCOM,STRING,LEN1,OPTION,LEN2,NVALU)
        IMPLICIT REAL*8 (A-H,O-Z)                                       
C GETS AN INTEGER PARAMETER VALUE                                       
C  COMLYN,LENCOM - COMMAND LINE & ITS LENGTH                            
C  STRING - STRING TO BE SEARCHED FOR TO LOCATE PARAMETER               
C  OPTION - OPTIONAL STRING WHICH MAY BE PRESENT                        
C  LEN1,LEN2 - LENGTH OF STRING AND OPTION, RESPECTIVELY                
C  NVALU - VALUE OF THE PARAMETER TO BE RETURNED                        
C                                                                       
        CHARACTER*(*) COMLYN,STRING,OPTION                              
        CHARACTER*80 RETSTR                                             
        CALL GETNXT  (COMLYN,LENCOM,STRING,LEN1,OPTION,LEN2,RETSTR,LEN) 
        IF (RETSTR .EQ. ' ') RETURN                                     
        CALL DCWORK(RETSTR,0,IOUT,ROUT)                                 
C       NVALU = DECODI(RETSTR,LEN)                                      
        NVALU = IOUT                                                    
        RETURN                                                          
        END                                                             
        SUBROUTINE NXTWRD(COMLYN,LENCOM,STRING,NLENG)                   
        IMPLICIT REAL*8 (A-H,O-Z)                                       
          INTEGER*4       IOFFSE                                        
C                                                                       
C RETURNS A WORD OF LENG NLENG, DELETES FULL WORD                       
C   COMLYN - COMMAND LINE                                               
C   LENCOM - LENGTH OF COMMAND LINE                                     
C   STRING - WORD TO BE RETURNED                                        
C   NLENG - NUMBER OF CHARACTERS IN STRING                              
C                                                                       
        CHARACTER*(*) COMLYN,STRING                                     
        CHARACTER*(80) TEMP                                             
        CHARACTER*(1) SPACE                                             
C                                                                       
        SPACE = ' '                                                     
C                                                                       
        STRING(1:NLENG) = ' '                                           
        TEMP(1:NLENG) = ' '                                             
C                                                                       
        CALL TRIMST (COMLYN,LENCOM)                                     
        IOFFSE  = 1                                                     
        CALL NEWWD(COMLYN,LENCOM,TEMP,IOFFSE ,LEN,SPACE)                
        IF (NLENG .GT. LEN) THEN                                        
          NTEMP = LEN                                                   
        ELSE                                                            
          NTEMP = NLENG                                                 
        ENDIF                                                           
        STRING(1:NTEMP) = TEMP(1:NTEMP)                                 
        RETURN                                                          
        END                                                             
        SUBROUTINE CNVSTB (WD,NEXTWD,LENWD)                             
        IMPLICIT REAL*8 (A-H,O-Z)                                       
C                                                                       
C  CONV CHAR *1 ARRAY(LENWD) TO CHAR *LENWD ARRAY                       
C                                                                       
        CHARACTER*1 WD                                                  
        CHARACTER*(*) NEXTWD                                            
        DIMENSION WD(LENWD)                                             
        NEXTWD=' '                                                      
        DO 10 I=1,LENWD                                                 
          NEXTWD(I:I)=WD(I)                                             
 10     CONTINUE                                                        
        RETURN                                                          
        END                                                             
        SUBROUTINE TRIMST (STRING,LENCOM)                               
        IMPLICIT REAL*8 (A-H,O-Z)                                       
C                                                                       
C TRIMS LEADING BLANK FROM STRING                                       
C  LENCOM IS LENGTH OF STRING                                           
C                                                                       
        CHARACTER*(*) STRING                                            
        CHARACTER*1 NULL                                                
        IF (LENCOM .EQ. 0) RETURN                                       
        NULL = CHAR(0)                                                  
        IOLD = LENCOM                                                   
C                                                                       
C REMOVE PRECEDING BLANKS                                               
C                                                                       
        DO 20 J=1,IOLD                                                  
         IF (STRING(1:1) .EQ. ' ' .OR. STRING(1:1) .EQ. NULL) THEN      
         DO 10 I=1,LENCOM                                               
10        STRING(I:I) = STRING(I+1:I+1)                                 
          LENCOM = LENCOM - 1                                           
        ELSE                                                            
          IOLD1 = LENCOM                                                
          DO 30 K=IOLD1,1,-1                                            
           IF (STRING(K:K) .EQ. ' ' .OR. STRING(K:K) .EQ. NULL) THEN    
            STRING(K:K) = NULL                                          
            LENCOM = LENCOM - 1                                         
           ELSE                                                         
            RETURN                                                      
           ENDIF                                                        
30        CONTINUE                                                      
        ENDIF                                                           
20      CONTINUE                                                        
        RETURN                                                          
        END                                                             
        SUBROUTINE GTRMST (COMLYN,LENCOM,STRING,LEN1,OPTION,LEN2,       
     *                      RETSTR,DELIM,LENGTH)                        
        IMPLICIT REAL*8 (A-H,O-Z)                                       
C                                                                       
C GETS THE NEXT STRING -                                                
C  COMLYN - COMMAND LINE                                                
C  LENCOM - LENGTH OF COMMAND LINE                                      
C  STRING - SEARCHES FOR THIS STRING OF LENGTH, LEN1                    
C  OPTION - OPTIONAL PORTION OF STRING, LENGTH = LEN2                   
C  RETSTR - STRING TO BE RETURNED, LENGTH = LEN                         
C  DELIM -  DELIMITER FOR STRING                                        
        CHARACTER*(*) COMLYN,STRING,OPTION                              
        CHARACTER*(*) RETSTR                                            
        CHARACTER*(*) DELIM                                             
        RETSTR = ' '                                                    
        CALL COMPRE (COMLYN,LENCOM)                                     
        IOFF1 = LCRMST (COMLYN,LENCOM,STRING,LEN1,OPTION,LEN2)          
        IF (IOFF1 .GE. LENCOM) RETURN                                   
        IF (IOFF1 .GT. 0) THEN                                          
          IF (COMLYN(IOFF1:IOFF1) .EQ. ' ') IOFF1 = IOFF1 + 1           
          CALL NEWWD(COMLYN,LENCOM,RETSTR,IOFF1,LENGTH,DELIM)           
C GET RID OF THE DELIMITER FROM RETSTR                                  
        LDEL = LEN(DELIM)                                               
         IF (RETSTR(LENGTH-LDEL+1:LENGTH) .EQ. DELIM) THEN              
          RETSTR(LENGTH-LDEL+1:LENGTH) = ' '                            
          LENGTH = LENGTH - LDEL                                        
         ENDIF                                                          
        ELSE                                                            
         RETURN                                                         
        ENDIF                                                           
        RETURN                                                          
        END                                                             
        SUBROUTINE GETRES (IRES,IOUT)                                   
        IMPLICIT REAL*8 (A-H,O-Z)                                       
CMSP  INCLUDE (COMMAND)                                                 
      INCLUDE '/labo/qclib/inspidas/common/command'
C                                                                       
C   RETURNS THE VALUE, IRES, AFTER THE NEXT OCCURENCE OF RESNUMBER IN TH
C    COMMAND LINE                                                       
C                                                                       
C     EVENTUALLY THIS ROUTINE SHOULD ALSO TRANSLATE INSERTION/DELETION/C
C       CODES                                                           
        CALL GETPAI  (COMLY2 ,COMLEN,'RESN',4,'UMBER',5,IRES)           
        RETURN                                                          
        END                                                             
C------------------------------------------                             
        SUBROUTINE GETATN (INAME,IOUT)                                  
        IMPLICIT REAL*8 (A-H,O-Z)                                       
CMSP  INCLUDE (COMMAND)                                                 
      INCLUDE '/labo/qclib/inspidas/common/command'
        CHARACTER*(*) INAME                                             
C                                                                       
C   RETURNS THE VALUE, INAME , AFTER THE NEXT OCCURENCE OF ATOMNAME IN T
C    COMMAND LINE                                                       
C   INAME IS THE CHARACTER NAME OF THE ATOM WHICH IS ACTUALLY FOUND IN T
C    COMMAND LINE                                                       
C                                                                       
        LENGTH = 0                                                      
         CALL GTRMST (COMLY2 ,COMLEN,'ATOM',4,'NAME',4,INAME,' ',LENGTH)
        IF (LENGTH .EQ. 0) THEN                                         
          CALL GTRMST (COMLY2 ,COMLEN,'ATNA',4,'ME',2,INAME,' ',LENGTH) 
        ENDIF                                                           
        RETURN                                                          
        END                                                             
        SUBROUTINE GETFIL  (FILNAM)                                     
        IMPLICIT REAL*8 (A-H,O-Z)                                       
          INTEGER*4       MATMTY                                        
          INTEGER*4       MPLT1D                                        
          INTEGER*4       MPLT2D                                        
          INTEGER*4       MSUBTY                                        
          INTEGER*4       MCONTU                                        
          INTEGER*4       MCHWOR                                        
          INTEGER*4       MPTSST                                        
C                                                                       
C  RETRIEVES A FILE NAME FROM A COMMAND LINE AFTER THE WORD 'FILE'      
C                                                                       
CMSP  INCLUDE (MAXSIZE)                                                 
      INCLUDE '/labo/qclib/inspidas/common/maxsize'
CMSP  INCLUDE (COMMAND)                                                 
      INCLUDE '/labo/qclib/inspidas/common/command'
C                                                                       
        CHARACTER*(*) FILNAM                                            
C                                                                       
        FILNAM = ' '                                                    
        CALL GETNXT  (COMLY2 ,COMLEN,'FILE',4,'NAME',4,FILNAM,LENGTH)   
C                                                                       
        RETURN                                                          
        END                                                             
C*MODULEENCODE.F *DECK XYAPPD.F                                         
C                                                                       
C     APPENDS TWO FORTRAN STRINGS, (BETTER THAN BUILTIN APPEND)         
C                                                                       
      SUBROUTINE XYAPPD(FRONT,UTXT,ALL)                                 
      IMPLICIT REAL*8 (A-H,O-Z)                                         
      CHARACTER*(*) FRONT,UTXT,ALL                                      
      CALL XYLSCH(UTXT,IONE)                                            
      FRONT=' '                                                         
      DO 100 I=1,IONE                                                   
         FRONT(I:I)=UTXT(I:I)                                           
 100  CONTINUE                                                          
      CALL XYLSCH(ALL,ITWO)                                             
      DO 200 I=1,ITWO                                                   
         FRONT(I+IONE:I+IONE)=ALL(I:I)                                  
 200  CONTINUE                                                          
      RETURN                                                            
      END                                                               
C*MODULE ENCODE.F *DECK XYDELCH.F                                       
C                                                                       
C XYDELCH: DELETES FROM A STRING A RANGE OF CHARACTER                   
C                                                                       
       SUBROUTINE XYDELC (TXT,ISTART,ISIZE)                             
       IMPLICIT REAL*8 (A-H,O-Z)                                        
       CHARACTER*(*) TXT                                                
       CALL XYLSCH(TXT,IMAX)                                            
       DO 100 I=ISTART,IMAX-ISIZE                                       
           TXT(I:I)=TXT(I+ISIZE:I+ISIZE)                                
 100   CONTINUE                                                         
       DO 200 I=IMAX-ISIZE+1,IMAX                                       
           TXT(I:I)=' '                                                 
 200   CONTINUE                                                         
       RETURN                                                           
       END                                                              
C*MODULEENCODE.F *DECK XYITOC.F                                         
C                                                                       
C     CONVERTS AN INTEGER TO A STRING.                                  
C     IVAL IS THE INTEGER TO CONVERT                                    
C     STR IS THE STRING VARABLE TO PUT THE RESULT                       
C     ISIZE IS THE MAXIMUM SIZE THAT THE RESULT IS ALLOWED TO BE        
C                                                                       
       SUBROUTINE XYITOC(IVAL,STR,ISIZE)                                
       IMPLICIT REAL*8 (A-H,O-Z)                                        
       CHARACTER*(*) STR                                                
       CHARACTER*40 DIGITS                                              
       CHARACTER*1 K                                                    
       INTVAL=ABS(IVAL)                                                 
       I=1                                                              
       DIGITS='0123456789'                                              
       IF (IVAL.EQ.0) THEN                                              
          STR='0'                                                       
       ELSE                                                             
          STR(1:1)=' '                                                  
 100      I=I+1                                                         
          ID = MOD(INTVAL,10)                                           
          STR(I:I)=DIGITS(ID+1:ID+1)                                    
          INTVAL = INTVAL / 10                                          
          IF (INTVAL.NE.0 .AND. I.LE.ISIZE) GOTO 100                    
          J=1                                                           
          IOLD=I                                                        
 200      IF (J.LT.I) THEN                                              
             K=STR(I:I)                                                 
             STR(I:I)=STR(J:J)                                          
             STR(J:J)=K                                                 
             I=I-1                                                      
             J=J+1                                                      
             GOTO 200                                                   
          ENDIF                                                         
       ENDIF                                                            
       RETURN                                                           
       END                                                              
C*MODULEENCODE.F*DECK XYITOS.F                                          
C                                                                       
C     CONVERTS A REAL NUMBER TO A STRING, I1 AND I2 ARE THE FIELD SIZES 
C     ILEN IS RETURNED AS THE SIZE OF THE RESULTING STRING              
C     IFRMT CONTROLS IF NORMAL OF SCIENTIFIC NOTIONS IS TO BE USED      
C                                                                       
       SUBROUTINE XYITOS(X,RESULT,ILEN,IFRMT,I1,I2)                     
       IMPLICIT REAL*8 (A-H,O-Z)                                        
       CHARACTER*(*) RESULT                                             
       CHARACTER*40 PART1,PART2,PART3                                   
       PART1=' '                                                        
       IF (IFRMT.GT.0) THEN                                             
          WRITE(PART1,1) X                                              
 1        FORMAT(1E16.8)                                                
       ELSE                                                             
          WRITE(PART1,2) X                                              
 2        FORMAT(1F16.8)                                                
       ENDIF                                                            
       I=1                                                              
 100   IF (PART1(I:I).EQ.' '.AND.I.LT.32) THEN                          
          I=I+1                                                         
          GOTO 100                                                      
       ENDIF                                                            
       ILOC=1                                                           
       PART2=' '                                                        
       PART3=' '                                                        
       IEFLAG=0                                                         
       IDFLAG=0                                                         
       CALL XYLSCH(PART1,ILEN)                                          
 200   IF (ILOC.LT.(I1+I2).AND.I.LT.ILEN) THEN                          
          IF (PART1(I:I).EQ.'.') IDFLAG=1                               
          IF (PART1(I:I).EQ.'E') IEFLAG=1                               
          PART2(ILOC:ILOC)=PART1(I:I)                                   
          ILOC=ILOC+1                                                   
          I=I+1                                                         
          GOTO 200                                                      
       ENDIF                                                            
       IF (IFRMT.GT.0.OR.IEFLAG.EQ.1) THEN                              
          IF (IEFLAG.EQ.0) THEN                                         
 300         IF (PART1(I:I).NE.'E'.AND.I.LT.ILEN) THEN                  
                I=I+1                                                   
                GOTO 300                                                
             ENDIF                                                      
          ENDIF                                                         
 400      IF (I.LE.ILEN) THEN                                           
             PART2(ILOC:ILOC)=PART1(I:I)                                
             ILOC=ILOC+1                                                
             I=I+1                                                      
             GOTO 400                                                   
          ENDIF                                                         
       ELSE IF (IFRMT.EQ.0) THEN                                        
          IF (IDFLAG.EQ.0) THEN                                         
             CALL XYAPPD(PART3,'ERR',PART2(1:(I1+I2)-3))                
          ENDIF                                                         
       ENDIF                                                            
       CALL XYLSCH(PART2,ILEN)                                          
       RESULT=PART2                                                     
       RETURN                                                           
       END                                                              
C                                                                       
C RETURNS LENGHT OF STRING, (ASSUMES STRING ENDS IN                     
C SPACES OR NULLS)                                                      
C                                                                       
       SUBROUTINE XYLSCH(UTXT,ILGTH)                                    
       IMPLICIT REAL*8 (A-H,O-Z)                                        
       CHARACTER*(*) UTXT                                               
       IACTU=LEN(UTXT)                                                  
       ILGTH=IACTU                                                      
 100   IF ((UTXT(ILGTH:ILGTH).EQ.' ' .OR. UTXT(ILGTH:ILGTH).EQ.CHAR(0)) 
     1  .AND. ILGTH.GT.1 ) THEN                                         
           ILGTH=ILGTH-1                                                
           GOTO 100                                                     
       ENDIF                                                            
       RETURN                                                           
       END                                                              
C*MODULEENCODE.F *DECK TENLOG.F                                         
C                                                                       
C     RETURNS LOGS BASE 10 (VERSES NATURAL LOGS)                        
C                                                                       
CFH    REAL*8 FUNCTION TENLOG(X)                                        
       DOUBLE PRECISION FUNCTION TENLOG(X)                              
       IMPLICIT REAL*8 (A-H,O-Z)                                        
       VAL=1.0D0                                                        
       IF (X.GT.0.0) THEN                                               
          VAL=LOG(X)/LOG(10.0D0)                                        
       ENDIF                                                            
       TENLOG=VAL                                                       
       RETURN                                                           
       END                                                              
C                                                                       
       SUBROUTINE XYRTOC(X,RESULT,ISZ,I1,I2)                            
       IMPLICIT REAL*8 (A-H,O-Z)                                        
          REAL*8          DILIMI                                        
       CHARACTER*(*) RESULT                                             
       CHARACTER*40 FRONT,BACK,ALL                                      
       DATA TEN/10.0D+00/                                               
       ALL=' '                                                          
       FRONT=' '                                                        
       BACK=' '                                                         
       IF (X.LE.-1.0D0) THEN                                            
          SIGN=-1.0D0                                                   
          X=X                                                           
       ELSE                                                             
          SIGN=1.0D0                                                    
       ENDIF                                                            
       ISZ=0                                                            
       RTEMP=X                                                          
       ILIMIT=I1+I2                                                     
       DILIMI  = DFLOAT(ILIMIT)                                         
       IF (DABS(RTEMP).GE.TEN**DILIMI ) THEN                            
 50       IF (DABS(RTEMP).GT.TEN**DILIMI ) THEN                         
             RTEMP=RTEMP/TEN                                            
             ISZ=ISZ+1                                                  
             GOTO 50                                                    
          ENDIF                                                         
          IPARTA=INT(RTEMP+0.1*SIGN)                                    
          CALL XYITOC(IPARTA,FRONT,ILIMIT)                              
          BACK='0'                                                      
       ELSE IF (DABS(RTEMP).LE.TEN**(-DILIMI )) THEN                    
          ISZ=I2                                                        
 100      IF (DABS(RTEMP).LT.TEN**(-DILIMI )) THEN                      
             RTEMP=RTEMP*TEN                                            
             ISZ=ISZ-1                                                  
             GOTO 100                                                   
          ENDIF                                                         
          IPARTA=INT(RTEMP*TEN**DILIMI )                                
          CALL XYITOC(IPARTA,BACK,ILIMIT)                               
          FRONT='0'                                                     
       ELSE                                                             
          IPARTA=(RTEMP+0.1D+00*SIGN)                                   
          CALL XYITOC(IPARTA,FRONT,ILIMIT)                              
          IPARTB=((RTEMP-IPARTA)*TEN**DILIMI )                          
          CALL XYITOC(IPARTB,BACK,ILIMIT)                               
       ENDIF                                                            
       CALL XYLSCH(FRONT,J)                                             
       ALL=' '                                                          
       DO 200 I=I1,J                                                    
          FRONT(I:I)=' '                                                
          ISZ=ISZ+1                                                     
 200   CONTINUE                                                         
       CALL XYLSCH(BACK,K)                                              
       DO 300 I=I2,K                                                    
          BACK(I:I)=' '                                                 
C          ISZ=ISZ+1                                                    
 300   CONTINUE                                                         
       ALL=' '                                                          
       CALL XYLSCH(FRONT,J)                                             
       DO 400 I=1,J                                                     
          ALL(I:I)=FRONT(I:I)                                           
 400   CONTINUE                                                         
       ILOC=J+1                                                         
       ALL(ILOC:ILOC)='.'                                               
       ILOC=ILOC+1                                                      
       CALL XYLSCH(BACK,K)                                              
       DO 500 I=1,K                                                     
          ALL(ILOC:ILOC)=BACK(I:I)                                      
          ILOC=ILOC+1                                                   
 500   CONTINUE                                                         
       IF (X.LT.0) THEN                                                 
          CALL XYAPPD(FRONT,'-',ALL)                                    
          ALL=FRONT                                                     
       ENDIF                                                            
       IF (SIGN.LT.0) THEN                                              
          X=X+1.0D0                                                     
       ENDIF                                                            
       RESULT=ALL                                                       
       RETURN                                                           
       END                                                              
        SUBROUTINE CENLIN(STRING,IOUT,IWIDTH)                           
        IMPLICIT REAL*8 (A-H,O-Z)                                       
        CHARACTER*(*) STRING                                            
        CHARACTER*80 TEMP,FORM                                          
        CHARACTER*(10) NUMCHA ,LENCHA                                   
        CHARACTER*1 XX,COMMA                                            
C                                                                       
C WRITES OUT STRING TO IOUT ON A CENTERED LINE 80 CHARACTER LINE        
C   ADDS A PRECEDING AND TRAILING BLANK LINE                            
C                                                                       
         XX = 'X'                                                       
         COMMA = ','                                                    
         IF (IWIDTH .EQ. 0) THEN                                        
          IWIDTH = 80                                                   
         ENDIF                                                          
         LENGTH = LEN(STRING)                                           
         CALL TRIMST (STRING,LENGTH)                                    
         IDIF = IWIDTH - LENGTH                                         
         ISPAC = IDIF/2                                                 
         NSIZE = 0                                                      
         NSIZE1 = 0                                                     
         CALL ENCODI(ISPAC,NUMCHA ,10,NSIZE1)                           
         CALL ENCODI(LENGTH,LENCHA ,10,NSIZE)                           
         TEMP(1:1) = '('                                                
         NSIZE2 = NSIZE1 + 2                                            
         TEMP(2:NSIZE1+1) = NUMCHA                                      
         TEMP(NSIZE2:NSIZE2)= XX                                        
         NSIZE2 = NSIZE2 + 1                                            
         TEMP(NSIZE2:NSIZE2) = COMMA                                    
         NSIZE2 = NSIZE2 + 1                                            
         TEMP(NSIZE2:NSIZE2) = 'A'                                      
         FORM = TEMP(1:NSIZE2)//LENCHA (1:NSIZE)                        
         IEND = NSIZE2 + NSIZE + 1                                      
         FORM(IEND:IEND) = ')'                                          
         WRITE(IOUT,*)                                                  
         WRITE(IOUT,FORM) STRING(1:LENGTH)                              
         WRITE(IOUT,*)                                                  
         RETURN                                                         
         END                                                            
./ ADD NAME=UTILITIE
./ NUMBER NEW1=10,INCR=10
C*    DEC/CMS REPLACEMENT HISTORY, ELEMENT UTILITIES.FOR                
C*    *70   23-JAN-1989 13:11:45 DBK ""                                 
C*    *69   20-JAN-1989 18:05:00 DBK ""                                 
C*    *68   20-JAN-1989 18:02:35 DBK ""                                 
C*    *67   20-JAN-1989 17:42:40 DBK "FIX PARSER ERROR CHECKING SO THAT 
C*    *66   19-JAN-1989 13:12:02 DBK "REMOVE CFLX CARDS"                
C*    *65   18-JAN-1989 16:23:34 DBK "FIX CALL GTRMSTR IN ATNA ROUTINE" 
C*    *64   18-JAN-1989 13:15:43 DBK "CHANGE CALL FRESTK TO = FRESTK"   
C*    *63   15-DEC-1988 15:56:55 DBK "ADD GETFILNM"                     
C*    *62    8-DEC-1988 19:40:41 DBK ""                                 
C*    *61    8-DEC-1988 18:41:57 DBK "FIX COMPRES"                      
C*    *60    8-DEC-1988 18:26:50 DBK "FIX LCRMSTR FOR ZERO LENGTH LINE" 
C*    *59    6-DEC-1988 12:35:24 DBK "ADD GETRESN AND GETATNA"          
C*    *58   21-NOV-1988 18:38:58 DBK "ADD NEW PARSING COMMAND"          
C*    *57   11-NOV-1988 12:00:18 DBK ""                                 
C*    *56   10-NOV-1988 13:28:45 DBK ""                                 
C*    *55   10-NOV-1988 13:20:25 DBK ""                                 
C*    *54   10-NOV-1988 13:07:19 DBK ""                                 
C*    *53   10-NOV-1988 12:35:19 DBK ""                                 
C*    *52   10-NOV-1988 12:19:46 DBK ""                                 
C*    *51   10-NOV-1988 11:49:07 DBK ""                                 
C*    *50   10-NOV-1988 11:38:13 DBK ""                                 
C*    *49    9-NOV-1988 17:54:05 DBK ""                                 
C*    *48    9-NOV-1988 17:45:28 DBK ""                                 
C*    *47    9-NOV-1988 17:33:50 DBK ""                                 
C*    *46    9-NOV-1988 17:08:23 DBK ""                                 
C*    *45    9-NOV-1988 14:42:41 DBK ""                                 
C*    *44    8-NOV-1988 18:13:25 DBK ""                                 
C*    *43    8-NOV-1988 16:38:47 DBK ""                                 
C*    *42    8-NOV-1988 16:23:39 DBK ""                                 
C*    *41    8-NOV-1988 15:44:25 DBK ""                                 
C*    *40    8-NOV-1988 14:52:48 DBK ""                                 
C*    *39    8-NOV-1988 14:43:15 DBK "ADD NXTWRD"                       
C*    *38    8-NOV-1988 14:35:43 DBK ""                                 
C*    *37    7-NOV-1988 18:39:21 DBK ""                                 
C*    *36    7-NOV-1988 18:31:20 DBK ""                                 
C*    *35    7-NOV-1988 18:22:12 DBK ""                                 
C*    *34    7-NOV-1988 18:09:05 DBK "FIX LCRMSTR"                      
C*    *33    7-NOV-1988 17:17:47 DBK ""                                 
C*    *32    4-NOV-1988 15:18:18 DBK "GET RID OF JOINWD"                
C*    *31    4-NOV-1988 15:14:51 DBK ""                                 
C*    *30    4-NOV-1988 10:52:32 DBK "FIX KYWRD"                        
C*    *29    1-NOV-1988 17:18:26 DBK "REMOVE UNUSED ROUTINES"           
C*    *28    1-NOV-1988 16:55:30 DBK ""                                 
C*    *27    1-NOV-1988 15:06:33 DBK "ADD NEW PARSER ROUTINES"          
C*    *26   12-OCT-1988 11:12:00 DBK "REMOVE GRAPHICS ROUTINES"         
C*    *25   10-OCT-1988 15:15:40 DBK "ADD SEND1D ROUTINE - 1D PLOTTING" 
C*    *24   20-SEP-1988 16:32:24 BACK ""                                
C*    *23   20-SEP-1988 11:12:46 BACK ""                                
C*    *22   19-SEP-1988 17:33:21 DBK ""                                 
C*    *21   19-SEP-1988 16:16:44 BACK ""                                
C*    *20   19-SEP-1988 15:45:02 BACK ""                                
C*    *19   19-SEP-1988 15:10:49 BACK "FIXED MALLADJSTMENT ERROR IN -NUM
C*    *18   19-SEP-1988 13:15:00 DBK ""                                 
C*    *17   15-SEP-1988 13:25:18 DBK ""                                 
C*    *16   14-SEP-1988 14:23:19 DBK ""                                 
C*    *15   14-SEP-1988 14:21:36 DBK ""                                 
C*    *14   14-SEP-1988 12:02:58 DBK ""                                 
C*    *13    8-SEP-1988 18:27:07 DBK "FIX DLPRBL ROUTINE - PROBLEM ON CO
C*    *12    7-SEP-1988 16:55:39 DBK "REMOVE EXCLAMATION PTS"           
C*    *11    1-SEP-1988 20:27:50 DK "CHANGED ARGUMENT FOR OPENING FILES 
C*    *10    1-SEP-1988 16:35:00 DK ""                                  
C*    *9     1-SEP-1988 16:30:57 DK ""                                  
C*    *8     1-SEP-1988 16:05:53 DK "CHANGED C.A.'S ON SEND2D"          
C*    *7     1-SEP-1988 11:28:41 DK "CHANGED CALLING ARGUMENTS TO SEND2D
C*    *6    31-AUG-1988 16:17:56 DK "CORRECTION TO UNITNUMBERS"         
C*    *5    31-AUG-1988 16:11:06 DK "ADDED SEND2D AND MORE OPTIONS TO PA
C*    *4    30-AUG-1988 17:35:58 DK "CHANGED REFERENCE DIRECTORY OF COMM
C*    *3    30-AUG-1988 17:29:11 DK "ADDED PARSPLOT TO UTILITIES"       
C*    *2    19-JUL-1988 12:13:49 DBK ""                                 
C*    *1     6-JUL-1988 15:36:49 DBK "PARSER + DIE + READTITL"          
C*    DEC/CMS REPLACEMENT HISTORY, ELEMENT UTILITIES.FOR                
C                                                                       
C                                                                       
C*MODULE PARSER *DECK CHCNBL                                            
      SUBROUTINE CHCNBL(ST,STLEN)                                       
C                                                                       
C     THIS SUBROUTINE CONVERTS ALL NONACCEPTABLE CONTROL CHARACTERS     
C     INTO BLANKS. ST IS DESTINED TO GO INTO A FORMAT BETWEEN           
C     QUOTES. THIS SUBROUTINE IS MACHINE DEPENDENT.                     
C                                                                       
      IMPLICIT INTEGER(A-Z)                                             
      CHARACTER*1 BLANK,LOWPRT,HGHPRT                                   
      CHARACTER*(*) ST                                                  
      DATA BLANK /' '/                                                  
CCVX  LOWPRT = CHAR(32)                                                 
CCVX  HGHPRT = CHAR(125)                                                
CCYB  LOWPRT = CHAR(32)                                                 
CCYB  HGHPRT = CHAR(125)                                                
CVAX  LOWPRT = CHAR(32)                                                 
CVAX  HGHPRT = CHAR(125)                                                
      LOWPRT = CHAR(64)                                                 
      HGHPRT = CHAR(255)                                                
C                                                                       
      IF (STLEN.EQ.0) RETURN                                            
      DO 1 I=1,STLEN                                                    
        IF(ST(I:I).GE.LOWPRT .AND. ST(I:I).LE.HGHPRT) GOTO 1            
          ST(I:I)=BLANK                                                 
    1   CONTINUE                                                        
      RETURN                                                            
      END                                                               
C                                                                       
C*MODULE PARSER *DECK CLCSPC                                            
      SUBROUTINE CLCSPC(ST,IFST)                                        
CJDW 22-MAR-88 FIX THE CASE FOR NO TRAILING SPACE.                      
C                                                                       
C FINDS LOCATION OF FIRST SPACE OR NULL IN ST OR LEN(ST) + 1 IF         
C  NO SPACE IS FOUND. THE RESULT IS RETURNED IN IFST                    
C                                                                       
      CHARACTER*(*) ST                                                  
      CHARACTER NULL*1                                                  
      NULL=CHAR(0)                                                      
      IFST = LEN(ST) + 1                                                
      DO 1 I=1,LEN(ST)                                                  
        IF ((ST(I:I) .EQ. ' ').OR.(ST(I:I).EQ.NULL)) THEN               
           IFST = I                                                     
           GO TO 2                                                      
        ENDIF                                                           
  1   CONTINUE                                                          
2     CONTINUE                                                          
      RETURN                                                            
      END                                                               
C                                                                       
C*MODULE PARSER *DECK CNVTUC                                            
      SUBROUTINE CNVTUC(ST,STLEN)                                       
C                                                                       
C     THIS CONVERTS A STRING TO ALL UPPERCASE. IT USES BYTE VARIABLES   
C     AND THE PROPERTY OF ASCII CODES THAT LETTERS ARE CONTIGUOUS AND   
C     UPPER CASE LETTERS ARE ALWAYS OFFSET A CONSTANT AMOUNT FROM THE   
C     EQUIVALENT LOWERCASE LETTER SO IT IS MACHINE DEPENDENT.           
C                                                                       
      IMPLICIT INTEGER(A-Z)                                             
      CHARACTER*(*) ST                                                  
      CHARACTER*1 A                                                     
C                                                                       
      DO 10 I=1,STLEN                                                   
         A= ST(I:I)                                                     
         IA = ICHAR(A)                                                  
CCVX     IF(IA.GE.97)THEN                                               
CCVX        IA=IA - 32                                                  
CCYB     IF(IA.GE.97)THEN                                               
CCYB        IA=IA - 32                                                  
CVAX     IF(IA.GE.97)THEN                                               
CVAX        IA=IA - 32                                                  
         IF(IA.GE.129.AND.IA.LE.169)THEN                                
            IA=IA + 64                                                  
            A = CHAR (IA)                                               
            ST(I:I)=A                                                   
         ENDIF                                                          
10    CONTINUE                                                          
      RETURN                                                            
      END                                                               
C*MODULE PARSER *DECK COMPARE                                           
      SUBROUTINE COMPAR (DATA,VARI,IFLAG)                               
      CHARACTER*4 DATA                                                  
      CHARACTER*1 VARI(4)                                               
C                                                                       
         DO 124 J=1,4                                                   
         IFLAG=INDEX(DATA(J:J),VARI(J))                                 
           IF(IFLAG.EQ.0) RETURN                                        
124      CONTINUE                                                       
128   CONTINUE                                                          
      RETURN                                                            
      END                                                               
C*MODULE DECODE.F *DECK DCWORK.F                                        
C PROCEDURES DECODI DECODF                                              
C PROJECT IMPACT                                                        
C PROGRAMER STEVEN BACK                                                 
C : TOCONVERT A STRING INTO A NUMBER.                                   
C                                                                       
C    ICTRL                                                              
C     0         INTEGER VALUE                                           
C     1         REAL VALUE                                              
       SUBROUTINE DCWORK(STRIN1,ICTRL,IOUT,ROUT)                        
       IMPLICIT REAL*8 (A-H,O-Z)                                        
       CHARACTER*(*) STRIN1                                             
       CHARACTER STRWOR *80                                             
       I=1                                                              
        IPNT = 1                                                        
 50    IF (STRIN1(I:I).EQ.' ') THEN                                     
           I=I+1                                                        
           GOTO 50                                                      
       ENDIF                                                            
       SIGN=1.0D0                                                       
       STRWOR ='0'                                                      
       IF (STRIN1(I:I).EQ.'-') THEN                                     
           SIGN=-1.0D0                                                  
       ENDIF                                                            
       IF (STRIN1(I:I).EQ.'+'.OR. STRIN1(I:I).EQ.'-') THEN              
           I=I+1                                                        
       ENDIF                                                            
 100   IF (STRIN1(I:I).GE.'0' .AND. STRIN1(I:I).LE.'9') THEN            
           STRWOR (IPNT:IPNT)=STRIN1(I:I)                               
           IPNT = IPNT + 1                                              
           I=I+1                                                        
           GOTO 100                                                     
       ENDIF                                                            
       DMENT=STRVAL(STRWOR ,IPNT-1)                                     
C                                                                       
C     IF ICTRL=0 THEN RETURN INTEGER PORTION                            
C                                                                       
           IF (ICTRL.EQ.0) THEN                                         
               DMENT = (DMENT+0.001D+00)*SIGN                           
               IOUT=INT(DMENT)                                          
               RETURN                                                   
           ENDIF                                                        
C                                                                       
C     OTHERWISE LOOK FOR '.'                                            
C                                                                       
           IF (STRIN1(I:I).EQ.'.') THEN                                 
               I=I+1                                                    
               J=1                                                      
               STRWOR ='0'                                              
 200           IF (STRIN1(I:I).GE.'0' .AND. STRIN1(I:I).LE.'9') THEN    
                   STRWOR (J:J)=STRIN1(I:I)                             
                   I=I+1                                                
                   J=J+1                                                
                   GOTO 200                                             
               ENDIF                                                    
               DFRACT=STRVAL(STRWOR ,J-1)/(10.0D+00**DFLOAT(J-1))       
               DMENT=DMENT+DFRACT                                       
           ENDIF                                                        
C                                                                       
C     THEN CHECK FOR EXPONENT.                                          
C                                                                       
           IF (STRIN1(I:I).EQ.'E'.OR.STRIN1(I:I)                        
     1     .EQ.'E'.OR.    STRIN1(I:I).EQ.'D'.OR.STRIN1(I:I).EQ.'D') THEN
               I=I+1                                                    
           ENDIF                                                        
           ESIGN=1.0D0                                                  
           IF (STRIN1(I:I).EQ.'-') THEN                                 
               ESIGN=-1.0D0                                             
           ENDIF                                                        
           IF (STRIN1(I:I).EQ.'+'.OR.STRIN1(I:I).EQ.'-') THEN           
               I=I+1                                                    
           ENDIF                                                        
           J=1                                                          
           STRWOR ='0'                                                  
 300       IF (STRIN1(I:I).GE.'0' .AND. STRIN1(I:I).LE.'9') THEN        
               STRWOR (J:J)=STRIN1(I:I)                                 
               I=I+1                                                    
               J=J+1                                                    
               GOTO 300                                                 
           ENDIF                                                        
           IF (J.GT.1) THEN                                             
               DEXP=STRVAL(STRWOR ,J-1)                                 
               ELSE                                                     
               DEXP=0.0                                                 
           ENDIF                                                        
           DTEST=(10.0D0**(ESIGN*DEXP))                                 
           IF (ESIGN.GT.0.0D0) THEN                                     
               DMENT=DMENT*(10.0D0**(DEXP))                             
               ELSE                                                     
               DMENT=DMENT/(10.0D0**(DEXP))                             
           ENDIF                                                        
           ROUT=DMENT*SIGN                                              
           RETURN                                                       
           END                                                          
C*MODULE DECODE.F *DECK DECODF.F                                        
C                                                                       
C                                                                       
CFH    REAL*8 FUNCTION DECODF(TXT,ISTRLEN)                              
       DOUBLE PRECISION FUNCTION DECODF(TXT,ISTRLE )                    
       IMPLICIT REAL*8 (A-H,O-Z)                                        
          INTEGER*4       ISTRLE                                        
       CHARACTER*1 TXT(ISTRLE +1)                                       
       CHARACTER WORK*40                                                
       DO 100 I=1,ISTRLE                                                
           WORK(I:I)=TXT(I)                                             
  100  CONTINUE                                                         
       WORK(ISTRLE +1:ISTRLE +1)=' '                                    
       CALL DCWORK(WORK,1,IOUT,ROUT)                                    
       DECODF=ROUT                                                      
       RETURN                                                           
       END                                                              
C*MODULE DECODE.F *DECK DECODI.F                                        
C                                                                       
C                                                                       
       INTEGER FUNCTION DECODI(TXT,ISTRLE )                             
       IMPLICIT REAL*8 (A-H,O-Z)                                        
          INTEGER*4       ISTRLE                                        
       CHARACTER*1 TXT(ISTRLE )                                         
       CHARACTER WORK*40                                                
       DO 100 I=1,ISTRLE                                                
           WORK(I:I)=TXT(I)                                             
  100  CONTINUE                                                         
       WORK(ISTRLE +1:ISTRLE +1)=' '                                    
       CALL DCWORK(WORK,0,IOUT,ROUT)                                    
       DECODI=IOUT                                                      
       RETURN                                                           
       END                                                              
C ----------------------------------------------------------------      
        SUBROUTINE DIE                                                  
C ----------------------------------------------------------------      
C PURPOSE: TO PROVIDE A TRACEBACK OF ERRORS                             
C                                                                       
C                                                                       
        DIE1 = 0.0                                                      
        DIE2 = 1.0/DIE1                                                 
C                                                                       
        STOP                                                            
        END                                                             
C                                                                       
C*MODULE PARSER *DECK DLPRBLK                                           
      SUBROUTINE DLPRBL (ST)                                            
CDBK 07-APR-88 FIX THE CASE FOR A PRECEDING BLANK                       
C                                                                       
C DELETES PRECEDING BLANK OR NULL CHARACTERS OF STRING IF FOUND         
C                                                                       
C                                                                       
      CHARACTER*(*) ST                                                  
        CHARACTER*80 TMP                                                
        CHARACTER*1 NULL                                                
        NULL = CHAR(0)                                                  
      ILNGTH = LEN(ST)                                                  
        ITOT = LEN(ST)                                                  
        TMP(1:ITOT) = ST(1:ITOT)                                        
        I=1                                                             
10      CONTINUE                                                        
        IF ((ST(I:I) .EQ. ' ').OR.(ST(I:I).EQ.NULL)) THEN               
           ILNGTH = ITOT - I                                            
           IBEG = I + 1                                                 
           TMP(1:ILNGTH) = ST(IBEG:ITOT)                                
           I = I + 1                                                    
           IF (I .EQ. ITOT) GO TO 2                                     
           GO TO 10                                                     
        ENDIF                                                           
2     CONTINUE                                                          
        ST(1:ITOT) = TMP(1:ILNGTH)                                      
      RETURN                                                            
      END                                                               
C*MODULE PARSER *DECK ECHO                                              
      SUBROUTINE ECHOIN(NLINE)                                          
CMSP  INCLUDE (UNITNUMS)                                                
      INCLUDE '/labo/qclib/inspidas/common/unitnums'
CMSP  INCLUDE (ECHO)                                                    
      INCLUDE '/labo/qclib/inspidas/common/echo'
C                                                                       
      DO 100 I=1,500                                                    
       READ(IN01,10,END=999) INLINE(I)                                  
100   CONTINUE                                                          
999   NLINE=I - 1                                                       
10    FORMAT(A80)                                                       
      REWIND IN01                                                       
      RETURN                                                            
      END                                                               
C*MODULE PARSER *DECK ECHOOUT                                           
      SUBROUTINE ECHOOU (NLINE)                                         
CMSP  INCLUDE (UNITNUMS)                                                
      INCLUDE '/labo/qclib/inspidas/common/unitnums'
CMSP  INCLUDE (ECHO)                                                    
      INCLUDE '/labo/qclib/inspidas/common/echo'
C                                                                       
      DO 100 I=1,NLINE                                                  
       WRITE(IOUT02,10) INLINE(I)                                       
100   CONTINUE                                                          
C                                                                       
10    FORMAT(6X,A80)                                                    
      WRITE(IOUT02,*)                                                   
      RETURN                                                            
      END                                                               
C*MODULE ENCODE.F *DECK ENCODF.F                                        
C                                                                       
C ENCODF: CONVERT REAL NUMBER TO STRING                                 
C     WITH MINIMUZATION OF RESULTING STRING                             
C     (WHICH MEANS UNEEDED SPACES, ZEROS AND DECIMAL                    
C     POINTS ARE REMOVED)                                               
C                                                                       
       SUBROUTINE ENCODF(RNUMBE ,TXT,MAXSIZ ,NUMSIZ )                   
       IMPLICIT REAL*8 (A-H,O-Z)                                        
          REAL*8          RNUMBE                                        
          INTEGER*4       MAXSIZ                                        
          INTEGER*4       NUMSIZ                                        
       CHARACTER*(*) TXT                                                
       CHARACTER TEMP*1,HOLD*25                                         
       RNUM=RNUMBE                                                      
       IFRMT=0                                                          
       TXT='                      '                                     
       CALL XYITOS(RNUM,TXT,NUMSIZ ,IFRMT,14,7)                         
 100   IF (TXT(1:1).EQ.' ') THEN                                        
           CALL XYDELC (TXT,1,1)                                        
           GOTO 100                                                     
       ENDIF                                                            
       CALL XYLSCH(TXT,NUMSIZ )                                         
       TEMP=TXT(NUMSIZ :NUMSIZ )                                        
 200   IF ((TEMP.EQ.' '.OR.TEMP.EQ.'0'.OR.TEMP.EQ.'.').AND.             
     * NUMSIZ .GT.1) THEN                                               
           CALL XYDELC (TXT,NUMSIZ ,1)                                  
           NUMSIZ =NUMSIZ -1                                            
           TEMP=TXT(NUMSIZ :NUMSIZ )                                    
           GOTO 200                                                     
       ENDIF                                                            
       END                                                              
C*MODULE ENCODE.F *DECK ENCODI.F                                        
C                                                                       
C SUBROUTINE ENCODI, CONVERT AN INTEGER TO A STRING                     
C                                                                       
       SUBROUTINE ENCODI(NUMBER,TXT,MAXSIZ ,NUMSIZ )                    
       IMPLICIT REAL*8 (A-H,O-Z)                                        
          INTEGER*4       MAXSIZ                                        
          INTEGER*4       NUMSIZ                                        
       CHARACTER*(*) TXT                                                
       CHARACTER TEMP*12                                                
       TXT=' '                                                          
       IF (NUMBER.LT.0) THEN                                            
           ISIGN=-1                                                     
           ELSE                                                         
           ISIGN=1                                                      
       ENDIF                                                            
       CALL XYITOC(NUMBER,TXT,MAXSIZ )                                  
 100   IF (TXT(1:1).EQ.' ') THEN                                        
           CALL XYDELC (TXT,1,1)                                        
           GOTO 100                                                     
       ENDIF                                                            
       IF (ISIGN.EQ.-1) THEN                                            
           CALL XYAPPD(TEMP,'-',TXT)                                    
           TXT=TEMP                                                     
       ENDIF                                                            
       CALL XYLSCH(TXT,NUMSIZ )                                         
       END                                                              
C                                                                       
C*MODULE PARSER *DECK EQST                                              
      FUNCTION EQST(ST1,LEN1,ST2,LEN2)                                  
C                                                                       
C     COMPARES TWO STRINGS AND RETURNS TRUE IF THEY ARE EQUAL.          
C                                                                       
      IMPLICIT INTEGER(A-Z)                                             
      LOGICAL EQST                                                      
      CHARACTER*1 ST1(1),ST2(2)                                         
C                                                                       
      IF(LEN1.EQ.LEN2) GOTO 1                                           
      EQST=.FALSE.                                                      
      RETURN                                                            
    1 EQST=.TRUE.                                                       
      IF (LEN1.EQ.0) RETURN                                             
      DO 2 I=1,LEN1                                                     
        IF(ST1(I).NE.ST2(I)) GOTO 3                                     
    2   CONTINUE                                                        
      RETURN                                                            
    3 EQST=.FALSE.                                                      
      RETURN                                                            
      END                                                               
C*MODULE PARSER *DECK FILNUL                                            
      SUBROUTINE FILNUL(ST,STMAX,STLEN)                                 
C                                                                       
C     THIS SUBROUTINE FILLS THE UNUSED PART OF ST WITH ASCII NUL (0)    
C                                                                       
      IMPLICIT INTEGER(A-Z)                                             
      CHARACTER*(*) ST                                                  
      CHARACTER*(1) NUL                                                 
C                                                                       
      NUL=CHAR(0)                                                       
      IF(STLEN.EQ.STMAX) RETURN                                         
      S=STLEN+1                                                         
      DO 1 I=S,STMAX                                                    
    1   ST(I:I)=NUL                                                     
      RETURN                                                            
      END                                                               
C*MODULE PARSER *DECK FILSPC                                            
      SUBROUTINE FILSPC(ST,STMAX,STLEN)                                 
C                                                                       
C     THIS SUBROUTINE FILLS THE UNUSED PART OF ST WITH SPACES.          
C                                                                       
      IMPLICIT INTEGER(A-Z)                                             
      CHARACTER*(*) ST                                                  
      CHARACTER*1 BLANK                                                 
      DATA BLANK/' '/                                                   
C                                                                       
      IF(STLEN.EQ.STMAX) RETURN                                         
      S=STLEN+1                                                         
      DO 1 I=S,STMAX                                                    
    1   ST(I:I)=BLANK                                                   
      RETURN                                                            
      END                                                               
C*MODULE DECODE.F *DECK STRVAL.F                                        
C                                                                       
C SUBROUTINE STRVAL: USED BY DECODE, CONVERTES A SIMPLE,                
C INTEGER (STYLELIZED) NUMBER IN CHARACTER FORM INTO A REAL             
C                                                                       
CFH    REAL*8 FUNCTION STRVAL(TXT,ISIZE)                                
       DOUBLE PRECISION FUNCTION STRVAL(TXT,ISIZE)                      
       IMPLICIT REAL*8 (A-H,O-Z)                                        
          INTEGER*4       LETZER                                        
       CHARACTER*(*) TXT                                                
       TENVAL=10.0D0**DFLOAT(ISIZE-1)                                   
       RVAL=0                                                           
C GET THE ASCII VALUE OF ZERO                                           
       LETZER =ICHAR('0')                                               
       ICOUNT=1                                                         
 100   IF (ICOUNT.LE.ISIZE) THEN                                        
           RVAL=RVAL+TENVAL*DFLOAT(ICHAR(TXT(ICOUNT:ICOUNT))-LETZER )   
           TENVAL=TENVAL/10.0D0                                         
           ICOUNT=ICOUNT+1                                              
           GOTO 100                                                     
       ENDIF                                                            
       STRVAL=RVAL                                                      
       RETURN                                                           
       END                                                              
C*MODULE PARSER *DECK GTFLNM                                            
        SUBROUTINE GTFLNM(FILNAM)                                       
CMSP  INCLUDE (COMMAND)                                                 
      INCLUDE '/labo/qclib/inspidas/common/command'
        CHARACTER*(*) FILNAM                                            
         LENFL = LEN(FILNAM)                                            
         CALL NXTWRD(COMLY2 ,COMLEN,FILNAM,LENFL)                       
CVAX     CALL FILSPC(FILNAM,60,LENFL)                                   
CCYB     CALL FILSPC(FILNAM,60,LENFL)                                   
CCVX     CALL FILNUL(FILNAM,60,LENFL)                                   
         CALL FILNUL(FILNAM,60,LENFL)                                   
         RETURN                                                         
         END                                                            
       SUBROUTINE KYWRD(KEYWOR ,KEY,NSIZE)                              
       IMPLICIT REAL*8 (A-H,O-Z)                                        
       CHARACTER*(*) KEYWOR                                             
       CHARACTER*1  KEY(NSIZE)                                          
       DO 10 I=1,NSIZE                                                  
         KEY(I)=KEYWOR (I:I)                                            
10     CONTINUE                                                         
       RETURN                                                           
       END                                                              
C*MODULE PARSER *DECK NXTCMND                                           
      SUBROUTINE NXTCMN (NXTSTR)                                        
C     DECLARATIONS FOR COMMAND SCANNING.                                
C                                                                       
CMSP  INCLUDE (COMMAND)                                                 
      INCLUDE '/labo/qclib/inspidas/common/command'
CMSP  INCLUDE (UNITNUMS)                                                
      INCLUDE '/labo/qclib/inspidas/common/unitnums'
      INTEGER CEIL,TASK,INUNIT,PRUNIT                                   
      INTEGER DELEN                                                     
      INTEGER WDLEN,WDMAX,SRCHWD,INDX,ST,STLEN                          
      LOGICAL  DELIM                                                    
      CHARACTER*(*) NXTSTR                                              
      LOGICAL EOF                                                       
C                                                                       
C     PARAMETER NWORD1=24,NWORD2=12,NWORD3 = 4                          
C                                                                       
C                                                                       
      DIMENSION WORDYN(12),ICNTRL(20)                                   
C                                                                       
      DATA MXCMSZ/2000/                                                 
      ISTRM=1                                                           
C THIS IS THE .INP FILE IT IS READING FROM                              
C                                                                       
C     THIS IS THE MAIN LOOP FOR READING AND PROCESSING COMMANDS. BEFORE 
C     READING THE NEXT COMMAND, MAKE SURE THAT THE VARIABLES HAVE NOT   
C     EXCEEDED THEIR BOUNDS.                                            
C                                                                       
   60 CONTINUE                                                          
      CALL TRIMST (COMLY2 ,COMLEN)                                      
      IF ( COMLEN .GT. 0 ) THEN                                         
         WRITE(IOUT06,91)                                               
         WRITE(IOUT06,90) COMLY2 (1:COMLEN)                             
         WRITE(IOUT06,92)                                               
   91 FORMAT(/20X,60('*'),                                              
     1       /20X,'WARNING : FOLLOWING EXTRANEOUS CHARCTERS ',          
     2            'FOUND.')                                             
   90 FORMAT(25(/20X,A80))                                              
   92 FORMAT(/20X,60('*'))                                              
      ENDIF                                                             
C                                                                       
      CALL RDCMND(COMLY2 ,MXCMSZ,COMLEN,ISTRM,EOF,.TRUE.)               
      IF (EOF)THEN                                                      
C                                                                       
C      EOF = .FALSE.                                                    
      WRITE(IOUT06,*)' EOF '                                            
      CALL TIMIT(IOUT02,1)                                              
      STOP ' END OF TASK FILE '                                         
      ENDIF                                                             
C                                                                       
      NXTSTR = ' '                                                      
      LENSTR = LEN(NXTSTR)                                              
      CALL NXTWRD(COMLY2 ,COMLEN,NXTSTR,LENSTR)                         
C                                                                       
C     SHORTEN WORD TO FOUR CHARACTERS OR LESS AND PAD WITH BLANKS TO    
C     PREPARE FOR SEARCH INTO COMMAND ARRAY.                            
C                                                                       
      IF (NXTSTR .NE. ' ') THEN                                         
        RETURN                                                          
      ELSE                                                              
       WRITE(IOUT06,*)' ERROR IN READING NEXT LINE '                    
       RETURN                                                           
      ENDIF                                                             
      END                                                               
C*MODULE PARSER *DECK RDCMND                                            
      SUBROUTINE RDCMND(COMLYN,MXCMSZ,CMNLEN,UNIT,EOF,QPRINT)           
C                                                                       
C             THIS SUBROUTINE READS A COMMAND IN FROM UNIT. THE COMMAND 
C     FIELD ON A LINE MAY EXTEND TO COLUMN 80 OR MAY BE TERMINATED BY AN
C     EXCLAMATION MARK ANYWHERE ON THE LINE. A COMMAND IS ONE COMMAND   
C     FIELD OF INFORMATION UNLESS THE LAST NONBLANK CHARACTER IN THAT   
C     FIELD IS A HYPHEN. IN THAT CASE, THE COMMAND FIELD ON THE NEXT    
C     RECORD IS APPENDED TO THE CHARACTERS PRECEDING THE HYPHEN.        
C     TRAILING BLANKS ARE REMOVED FROM ALL COMMAND FIELDS, AND LOWERCASE
C     LETTERS ARE CONVERTED TO UPPERCASE. IF AN END OF FILE IS SEEN     
C     WHILE READING A COMMAND, EOF IS TURNED ON. IF EOF IS TURNED ON    
C     WHEN CALLED, THE SUBROUTINE RETURNS IMMEDIATELY. IF QPRINT IS ON, 
C     THE RECORDS ARE PRINTED ON UNIT 6 AS THEY ARE READ.               
C                                                                       
      IMPLICIT INTEGER(A-Z)                                             
          INTEGER*4       NEWLEN                                        
CMSP  INCLUDE (UNITNUMS)                                                
      INCLUDE '/labo/qclib/inspidas/common/unitnums'
      CHARACTER*(*) COMLYN                                              
      CHARACTER*1 HYPHEN,EXCLMK                                         
      CHARACTER*80 CARD                                                 
      LOGICAL EOF,QPRINT                                                
      DATA HYPHEN/'-'/,EXCLMK/']'/                                      
C                                                                       
      IF(EOF) RETURN                                                    
      CMNLEN=0                                                          
      IF (QPRINT) WRITE(IOUT06,201)                                     
  201 FORMAT('  ')                                                      
    1 READ(UNIT,100,END=9) CARD                                         
  100 FORMAT(A80)                                                       
  200 FORMAT(14X,80A1)                                                  
      CARDLN=80                                                         
      IEND = INDEX(CARD,EXCLMK)                                         
      IF (IEND.NE.0) CARDLN=IEND-1                                      
      CALL TRIMST (CARD,CARDLN)                                         
      CALL CHCNBL(CARD,CARDLN)                                          
      CALL CNVTUC(CARD,CARDLN)                                          
      IF(CARDLN.EQ.0) GOTO 1                                            
      IF(CARD(CARDLN:CARDLN).NE.HYPHEN) THEN                            
    2    NEWLEN  = CMNLEN + CARDLN                                      
         COMLYN(CMNLEN+1:NEWLEN ) = CARD(1:CARDLN)                      
         CMNLEN = NEWLEN                                                
         RETURN                                                         
      ELSE                                                              
        IF(CARDLN.EQ.1) GOTO 1                                          
        NEWLEN  = CMNLEN + CARDLN - 1                                   
        COMLYN(CMNLEN+1:NEWLEN ) = CARD(1:CARDLN-1)                     
        CMNLEN = NEWLEN                                                 
        GOTO 1                                                          
      ENDIF                                                             
    9 EOF=.TRUE.                                                        
      RETURN                                                            
      END                                                               
C* DEC/CMS REPLACEMENT HISTORY, ELEMENT READTITL.FOR                    
C* *3    10-MAR-1988 14:28:01 DBK ""                                    
C* *2    10-MAR-1988 12:42:58 DBK ""                                    
C* *1     7-MAR-1988 15:05:20 DBK "UTILITY ROUTINES"                    
C* DEC/CMS REPLACEMENT HISTORY, ELEMENT READTITL.FOR                    
      SUBROUTINE READTI  (INUNIT,IOUT,IPRN)                             
      IMPLICIT REAL*8 (A-H,O-Z)                                         
      IMPLICIT INTEGER*4(I-N)                                           
C                                                                       
      CHARACTER*80  TITLE                                               
      CHARACTER*1 STAR,BLANK                                            
      DATA  STAR/'*'/, BLANK/' '/                                       
C                                                                       
C IPRN IS A PRINT FLAG IPRN = 1         PRINT                           
C                             OTHERWISE NORPINT                         
C                                                                       
10    READ(INUNIT,95) TITLE                                             
      IF (TITLE(1:1) .NE. STAR)  THEN                                   
        WRITE(IOUT,110)                                                 
        CALL DIE                                                        
      ENDIF                                                             
C                                                                       
      DO 20 I=80,2,-1                                                   
         IF(TITLE(I:I).NE.BLANK) THEN                                   
           IF(IPRN.EQ.1) WRITE(IOUT,100) TITLE                          
           GO TO 10                                                     
         ENDIF                                                          
20      CONTINUE                                                        
C                                                                       
 95   FORMAT(A80)                                                       
100   FORMAT(1X,A80)                                                    
110   FORMAT(' TITLE CARDS MUST HAVE A * IN THE COLUMN 1 OF EACH LINE', 
     . //,' *** EXECUTION TERMINATING *** ')                            
C                                                                       
      RETURN                                                            
      END                                                               
        SUBROUTINE COMPRE (COMLYN,LENCOM)                               
        IMPLICIT REAL*8 (A-H,O-Z)                                       
C                                                                       
C REMOVES EXTRA SPACES FROM THE LINE                                    
C  COMLYN - COMMAND LINE                                                
C  LENCOM - LENGTH OF COMMAND LINE                                      
C                                                                       
        CHARACTER*(*) COMLYN                                            
        CHARACTER*1 TEST                                                
        IF (LENCOM .LE. 0) RETURN                                       
        N = 1                                                           
30      CONTINUE                                                        
        IBEG = N                                                        
        IEND = LENCOM                                                   
        DO 10 I=IBEG,IEND                                               
         TEST = COMLYN(I:I)                                             
         IF (TEST .EQ. ' ') THEN                                        
           IF (COMLYN(I+1:I+1) .EQ. ' ') THEN                           
               DO 20 J=I,IEND                                           
                COMLYN(J:J) = COMLYN(J+1:J+1)                           
20             CONTINUE                                                 
           LENCOM = LENCOM - 1                                          
           N = I                                                        
           GOTO 30                                                      
           ENDIF                                                        
         ENDIF                                                          
         N = I                                                          
10      CONTINUE                                                        
        LENCOM = N                                                      
        RETURN                                                          
        END                                                             
        SUBROUTINE RMVWBK  (COMLYN,LENCOM,LEN,IOFFSE )                  
        IMPLICIT REAL*8 (A-H,O-Z)                                       
          INTEGER*4       IOFFSE                                        
        CHARACTER*(*) COMLYN                                            
C                                                                       
C REMOVES A WORD FROM A COMMAND LINE BEGINNING FROM THE LAST CHARACTER  
C  OF THE WORD                                                          
C  COMLYN - COMMAND LINE                                                
C  LENCOM - LENGTH OF COMMAND LINE                                      
C  LEN - LENGTH OF WORD TO BE REMOVED                                   
C  IOFFSET - INDEX OF LAST CHARACTER OF WORD                            
        IOFF1 = IOFFSE                                                  
        IBEG = IOFF1 - LEN                                              
        IEND = IOFF1                                                    
        COMLYN(IBEG:IOFF1) = ' '                                        
        CALL COMPRE (COMLYN,LENCOM)                                     
        RETURN                                                          
        END                                                             
        SUBROUTINE RMVWFD  (COMLYN,LENCOM,LEN,IOFFSE )                  
        IMPLICIT REAL*8 (A-H,O-Z)                                       
          INTEGER*4       IOFFSE                                        
        CHARACTER*(*) COMLYN                                            
C                                                                       
C REMOVES A WORD FROM A COMMAND LINE BEGINNING WITH THE FIRST CHARACTER 
C  OF THE WORD                                                          
C  COMLYN - COMMAND LINE                                                
C  LENCOM - LENGTH OF COMMAND LINE                                      
C  LEN - LENGTH OF WORD TO BE REMOVED                                   
C  IOFFSET - INDEX OF FIRST CHARACTER OF WORD                           
        IOFF1 = IOFFSE  + LEN + 1                                       
        IBEG = IOFF1 - LEN                                              
        COMLYN(IBEG:IOFF1) = ' '                                        
        CALL COMPRE (COMLYN,LENCOM)                                     
        RETURN                                                          
        END                                                             
        INTEGER FUNCTION LCRMST (COMLYN,LENCOM,STRING,LEN1,OPTION,LEN2) 
        IMPLICIT REAL*8 (A-H,O-Z)                                       
          INTEGER*4       IOFFSE                                        
          INTEGER*4       IOFFBE                                        
C                                                                       
C  FUNCTION WHICH DETERMINES IF A WORD (OR A FRACTIONAL PART ) EXISTS   
C   THE VALUE RETURNED IS THE INDEX OF THE LAST CHARACTER OF THE WORD   
C   COMLYN - COMMAND LINE                                               
C   LENCOM - LENGTH OF LINE                                             
C   STRING - THE FIRST LEN1 CHARACTERS WHICH MUST OCCUR FOR THE WORD TO 
C            BE FOUND                                                   
C   OPTION - AN OPTIONAL EXTENSION OF THE WORD - SOME OF IT MAY OR MAY  
C            NOT EXIST ( E.G. IF STRING IS 'BIG' AND 'GER' IS OPTIONAL  
C            'BIGGEST' WOULD NOT BE FOUND BUY BIG,BIGG,BIGGE,OR BIGGER  
C            COULD ALL BE FOUND                                         
C                                                                       
        CHARACTER*(*) COMLYN,STRING,OPTION                              
        CHARACTER*(800) NXTWD                                           
        CHARACTER*1 SPACE                                               
        IOFF = 0                                                        
        LCRMST  = 0                                                     
        IF (LENCOM .LE. 0) RETURN                                       
CCVX    SPACE = CHAR(32)                                                
CCYB    SPACE = CHAR(32)                                                
CVAX    SPACE = CHAR(32)                                                
        SPACE = CHAR(64)                                                
        IOFFSE  = 1                                                     
        IOFFBE  = 1                                                     
C FIND THE MANDATORY PART OF THE KEYWORD IN COMLYN                      
20      IF (IOFFBE  .GT. LENCOM) RETURN                                 
        IOFF = INDEX(COMLYN(IOFFBE :LENCOM),STRING) + IOFFBE  - 1       
C IOFF IS 0 IF IT IS NOT THERE                                          
        IF (IOFF .EQ. 0) RETURN                                         
C IF THE PRECEDING CHARACTER IN THE COMMAND LINE IS NOT A BLANK         
C    THEN THIS IS THE MIDDLE OF A WORD                                  
       IF (IOFF .GT. 1) THEN                                            
C       TRY AGAIN IF THIS IS IN THE MIDDLE OF A WORD                    
        IOFFM1 = IOFF - 1                                               
        IF (COMLYN(IOFFM1:IOFFM1) .NE. SPACE) THEN                      
         IOFFBE  = IOFF + 1                                             
         GOTO 20                                                        
        ENDIF                                                           
       ENDIF                                                            
C LTEST WOULD BE THE MAXIMUM LENGTH OF THE STRING+OPTION + THE OFFSET   
C   OF STRING + 1 TO ACCOUNT FOR SPACE AFTER ALL WORDS                  
        LTEST = LEN1 + LEN2 + IOFF + 1                                  
        IF (LTEST .GT. LENCOM) LTEST = LENCOM                           
        LBEGIN = IOFF + LEN1                                            
        IF (LBEGIN .GT. LENCOM) LBEGIN = LENCOM                         
C SEARCH FOR OPTION IN COMLYN                                           
C   FIND FIRST SPACE AFTER STRING BUT BEFORE THE END OF OPTION          
        IOFF2 = INDEX(COMLYN(LBEGIN:LTEST),SPACE)                       
C IF THERE IS NO SPACE THEN THE REST OF THE WORD AFTER STRING MUST      
C   BE LONGER THAN OPTION THEREFORE THIS CAN'T BE WORD WE ARE LOOKING FO
        IF (IOFF2 .EQ. 0) THEN                                          
           IF (LTEST .GE. LENCOM) THEN                                  
             IOFF2 = LENCOM - IOFF - LEN1 + 2                           
             LTEST = LENCOM                                             
           ELSE                                                         
             RETURN                                                     
           ENDIF                                                        
        ENDIF                                                           
        IENDWD = IOFF2 + IOFF + LEN1 - 1                                
C  FILL NXTWD WITH THE PORTION OF COMLYN WHICH WOULD CORRESPOND TO OPTIO
        NXTWD = COMLYN(LBEGIN:IENDWD)                                   
C NDIFF IS THE NUMBER OF CHARACTERS BEFORE THE NEXT SPACE               
        NDIFF = IOFF2 - 1                                               
C SEARCH CHAR. BY CHAR. THROUGH NXTWD TO MAKE SURE THAT IT CORRESPONDS T
C   OPTION - NOTE THAT NOT ALL OF OPTION MUST EXIST                     
        DO 10 I=1,NDIFF                                                 
          IF (NXTWD(I:I) .NE. OPTION(I:I)) RETURN                       
10      CONTINUE                                                        
C CALCULATE THE OFFSET TO THE END OF THE WORD WHICH ACTUALLY IS IN THE L
           IOFFSE  = IOFF + LEN1 + NDIFF                                
C CALCULATE LENGTH OF WORD IN LINE (INCLUDE ROOM FOR SPACE AT END OF WOR
           LTOT = IOFFSE  - IOFF + 1                                    
C REMOVE THE WORD FROM LINE                                             
           CALL RMVWBK  (COMLYN,LENCOM,LTOT,IOFFSE )                    
           IOFFSE  = IOFFSE  - LTOT                                     
C PUT VALUE OF OFFSET IN VALUE OF FUNCTION                              
           LCRMST  = IOFFSE                                             
        IF (IOFFSE  .EQ. 0) LCRMST  = 1                                 
           RETURN                                                       
           END                                                          
        SUBROUTINE GETNXT  (COMLYN,LENCOM,STRING,LEN1,OPTION,LEN2,      
     *                      RETSTR,LEN)                                 
        IMPLICIT REAL*8 (A-H,O-Z)                                       
C                                                                       
C GETS THE NEXT STRING -                                                
C  COMLYN - COMMAND LINE                                                
C  LENCOM - LENGTH OF COMMAND LINE                                      
C  STRING - SEARCHES FOR THIS STRING OF LENGTH, LEN1                    
C  OPTION - OPTIONAL PORTION OF STRING, LENGTH = LEN2                   
C  RETSTR - STRING TO BE RETURNED, LENGTH = LEN                         
C                                                                       
        CHARACTER*(*) COMLYN,STRING,OPTION                              
        CHARACTER*(*) RETSTR                                            
        CHARACTER*1 DELIM                                               
        DELIM = ' '                                                     
        RETSTR = ' '                                                    
        CALL COMPRE (COMLYN,LENCOM)                                     
        IOFF1 = LCRMST (COMLYN,LENCOM,STRING,LEN1,OPTION,LEN2)          
        IF (IOFF1 .GE. LENCOM) RETURN                                   
        IF (IOFF1 .GT. 0) THEN                                          
          IF (COMLYN(IOFF1:IOFF1) .EQ. ' ') IOFF1 = IOFF1 + 1           
          CALL NEWWD(COMLYN,LENCOM,RETSTR,IOFF1,LEN,DELIM)              
        ELSE                                                            
         RETURN                                                         
        ENDIF                                                           
        RETURN                                                          
        END                                                             
        SUBROUTINE NEWWD(COMLYN,LENCOM,STRING,IOFFSE ,LENGTH,DELIM)     
        IMPLICIT REAL*8 (A-H,O-Z)                                       
          INTEGER*4       IOFFSE                                        
          INTEGER*4       LENGTH                                        
C                                                                       
C RETURNS A WORD (ALL CHARACTERS UP TO A DELIMITER)                     
C  COMLYN - COMMAND LINE                                                
C  LENCOM - LENGTH OF COMMANDLINE                                       
C  STRING - NEXT WORD                                                   
C  IOFFSET - BEGINNING OF WORD IN COMLYN                                
C  LENGTH - LENGTH OF WORD RETURNED                                     
C  DELIM - DELIMITER                                                    
C                                                                       
        CHARACTER*(*) COMLYN,STRING,DELIM                               
        IF (LENCOM .EQ. 0) THEN                                         
          STRING = ' '                                                  
          RETURN                                                        
        ENDIF                                                           
        LENGTH = INDEX(COMLYN(IOFFSE :LENCOM),DELIM)                    
C IF THERE IS NO SPACE AT END OF LINE GET ALL CHARACTERS TO END OF LINE 
         IF (LENGTH .EQ. 0) THEN                                        
           LENGTH = LENCOM - IOFFSE  + 1                                
          ENDIF                                                         
        IEND = IOFFSE  + LENGTH - 1                                     
C                                                                       
C  PROTECT AGAINST READING IN A WORD WHICH IS TOO LONG TO FIT IN STRING 
C                                                                       
        IF (LEN(STRING) .LT. LENGTH) THEN                               
          LENGTH  = LEN(STRING)                                         
          IENDN = IOFFSE  + LENGTH  - 1                                 
        ELSE                                                            
          LENGTH  = LENGTH                                              
          IENDN = IEND                                                  
        ENDIF                                                           
        STRING = COMLYN(IOFFSE :IENDN)                                  
        CALL RMVWBK  (COMLYN,LENCOM,LENGTH,IEND)                        
        RETURN                                                          
        END                                                             
        SUBROUTINE GETPAF  (COMLYN,LENCOM,STRING,LEN1,OPTION,LEN2,FVALU)
        IMPLICIT REAL*8 (A-H,O-Z)                                       
C FINDS A FLOATING POINT PARAMETER AFTER A STRING                       
C  COMLYN,LENCOM - COMMAND LINE & ITS LENGTH                            
C  STRING - STRING TO BE SEARCHED FOR TO LOCATE PARAMETER               
C  OPTION - OPTIONAL STRING WHICH MAY BE PRESENT                        
C  LEN1,LEN2 - LENGTH OF STRING AND OPTION, RESPECTIVELY                
C  FVALU - VALUE OF THE PARAMETER TO BE RETURNED                        
C                                                                       
        CHARACTER*(*) COMLYN,STRING,OPTION                              
        CHARACTER*80 RETSTR                                             
        CALL GETNXT  (COMLYN,LENCOM,STRING,LEN1,OPTION,LEN2,RETSTR,LEN) 
        IF (RETSTR .EQ. ' ') RETURN                                     
C       FVALU = DECODF(RETSTR,LEN)                                      
        CALL DCWORK(RETSTR,1,IOUT,ROUT)                                 
        FVALU = ROUT                                                    
        RETURN                                                          
        END                                                             
        SUBROUTINE GETPAI  (COMLYN,LENCOM,STRING,LEN1,OPTION,LEN2,NVALU)
        IMPLICIT REAL*8 (A-H,O-Z)                                       
C GETS AN INTEGER PARAMETER VALUE                                       
C  COMLYN,LENCOM - COMMAND LINE & ITS LENGTH                            
C  STRING - STRING TO BE SEARCHED FOR TO LOCATE PARAMETER               
C  OPTION - OPTIONAL STRING WHICH MAY BE PRESENT                        
C  LEN1,LEN2 - LENGTH OF STRING AND OPTION, RESPECTIVELY                
C  NVALU - VALUE OF THE PARAMETER TO BE RETURNED                        
C                                                                       
        CHARACTER*(*) COMLYN,STRING,OPTION                              
        CHARACTER*80 RETSTR                                             
        CALL GETNXT  (COMLYN,LENCOM,STRING,LEN1,OPTION,LEN2,RETSTR,LEN) 
        IF (RETSTR .EQ. ' ') RETURN                                     
        CALL DCWORK(RETSTR,0,IOUT,ROUT)                                 
C       NVALU = DECODI(RETSTR,LEN)                                      
        NVALU = IOUT                                                    
        RETURN                                                          
        END                                                             
        SUBROUTINE NXTWRD(COMLYN,LENCOM,STRING,NLENG)                   
        IMPLICIT REAL*8 (A-H,O-Z)                                       
          INTEGER*4       IOFFSE                                        
C                                                                       
C RETURNS A WORD OF LENG NLENG, DELETES FULL WORD                       
C   COMLYN - COMMAND LINE                                               
C   LENCOM - LENGTH OF COMMAND LINE                                     
C   STRING - WORD TO BE RETURNED                                        
C   NLENG - NUMBER OF CHARACTERS IN STRING                              
C                                                                       
        CHARACTER*(*) COMLYN,STRING                                     
        CHARACTER*(80) TEMP                                             
        CHARACTER*(1) SPACE                                             
C                                                                       
        SPACE = ' '                                                     
C                                                                       
        STRING(1:NLENG) = ' '                                           
        TEMP(1:NLENG) = ' '                                             
C                                                                       
        CALL TRIMST (COMLYN,LENCOM)                                     
        IOFFSE  = 1                                                     
        CALL NEWWD(COMLYN,LENCOM,TEMP,IOFFSE ,LEN,SPACE)                
        IF (NLENG .GT. LEN) THEN                                        
          NTEMP = LEN                                                   
        ELSE                                                            
          NTEMP = NLENG                                                 
        ENDIF                                                           
        STRING(1:NTEMP) = TEMP(1:NTEMP)                                 
        RETURN                                                          
        END                                                             
        SUBROUTINE CNVSTB (WD,NEXTWD,LENWD)                             
        IMPLICIT REAL*8 (A-H,O-Z)                                       
C                                                                       
C  CONV CHAR *1 ARRAY(LENWD) TO CHAR *LENWD ARRAY                       
C                                                                       
        CHARACTER*1 WD                                                  
        CHARACTER*(*) NEXTWD                                            
        DIMENSION WD(LENWD)                                             
        NEXTWD=' '                                                      
        DO 10 I=1,LENWD                                                 
          NEXTWD(I:I)=WD(I)                                             
 10     CONTINUE                                                        
        RETURN                                                          
        END                                                             
        SUBROUTINE TRIMST (STRING,LENCOM)                               
        IMPLICIT REAL*8 (A-H,O-Z)                                       
C                                                                       
C TRIMS LEADING BLANK FROM STRING                                       
C  LENCOM IS LENGTH OF STRING                                           
C                                                                       
        CHARACTER*(*) STRING                                            
        CHARACTER*1 NULL                                                
        IF (LENCOM .EQ. 0) RETURN                                       
        NULL = CHAR(0)                                                  
        IOLD = LENCOM                                                   
C                                                                       
C REMOVE PRECEDING BLANKS                                               
C                                                                       
        DO 20 J=1,IOLD                                                  
         IF (STRING(1:1) .EQ. ' ' .OR. STRING(1:1) .EQ. NULL) THEN      
         DO 10 I=1,LENCOM                                               
10        STRING(I:I) = STRING(I+1:I+1)                                 
          LENCOM = LENCOM - 1                                           
        ELSE                                                            
          IOLD1 = LENCOM                                                
          DO 30 K=IOLD1,1,-1                                            
           IF (STRING(K:K) .EQ. ' ' .OR. STRING(K:K) .EQ. NULL) THEN    
            STRING(K:K) = NULL                                          
            LENCOM = LENCOM - 1                                         
           ELSE                                                         
            RETURN                                                      
           ENDIF                                                        
30        CONTINUE                                                      
        ENDIF                                                           
20      CONTINUE                                                        
        RETURN                                                          
        END                                                             
        SUBROUTINE GTRMST (COMLYN,LENCOM,STRING,LEN1,OPTION,LEN2,       
     *                      RETSTR,DELIM,LENGTH)                        
        IMPLICIT REAL*8 (A-H,O-Z)                                       
C                                                                       
C GETS THE NEXT STRING -                                                
C  COMLYN - COMMAND LINE                                                
C  LENCOM - LENGTH OF COMMAND LINE                                      
C  STRING - SEARCHES FOR THIS STRING OF LENGTH, LEN1                    
C  OPTION - OPTIONAL PORTION OF STRING, LENGTH = LEN2                   
C  RETSTR - STRING TO BE RETURNED, LENGTH = LEN                         
C  DELIM -  DELIMITER FOR STRING                                        
        CHARACTER*(*) COMLYN,STRING,OPTION                              
        CHARACTER*(*) RETSTR                                            
        CHARACTER*(*) DELIM                                             
        RETSTR = ' '                                                    
        CALL COMPRE (COMLYN,LENCOM)                                     
        IOFF1 = LCRMST (COMLYN,LENCOM,STRING,LEN1,OPTION,LEN2)          
        IF (IOFF1 .GE. LENCOM) RETURN                                   
        IF (IOFF1 .GT. 0) THEN                                          
          IF (COMLYN(IOFF1:IOFF1) .EQ. ' ') IOFF1 = IOFF1 + 1           
          CALL NEWWD(COMLYN,LENCOM,RETSTR,IOFF1,LENGTH,DELIM)           
C GET RID OF THE DELIMITER FROM RETSTR                                  
        LDEL = LEN(DELIM)                                               
         IF (RETSTR(LENGTH-LDEL+1:LENGTH) .EQ. DELIM) THEN              
          RETSTR(LENGTH-LDEL+1:LENGTH) = ' '                            
          LENGTH = LENGTH - LDEL                                        
         ENDIF                                                          
        ELSE                                                            
         RETURN                                                         
        ENDIF                                                           
        RETURN                                                          
        END                                                             
        SUBROUTINE GETRES (IRES,IOUT)                                   
        IMPLICIT REAL*8 (A-H,O-Z)                                       
CMSP  INCLUDE (COMMAND)                                                 
      INCLUDE '/labo/qclib/inspidas/common/command'
C                                                                       
C   RETURNS THE VALUE, IRES, AFTER THE NEXT OCCURENCE OF RESNUMBER IN TH
C    COMMAND LINE                                                       
C                                                                       
C     EVENTUALLY THIS ROUTINE SHOULD ALSO TRANSLATE INSERTION/DELETION/C
C       CODES                                                           
        CALL GETPAI  (COMLY2 ,COMLEN,'RESN',4,'UMBER',5,IRES)           
        RETURN                                                          
        END                                                             
C------------------------------------------                             
        SUBROUTINE GETATN (INAME,IOUT)                                  
        IMPLICIT REAL*8 (A-H,O-Z)                                       
CMSP  INCLUDE (COMMAND)                                                 
      INCLUDE '/labo/qclib/inspidas/common/command'
        CHARACTER*(*) INAME                                             
C                                                                       
C   RETURNS THE VALUE, INAME , AFTER THE NEXT OCCURENCE OF ATOMNAME IN T
C    COMMAND LINE                                                       
C   INAME IS THE CHARACTER NAME OF THE ATOM WHICH IS ACTUALLY FOUND IN T
C    COMMAND LINE                                                       
C                                                                       
        LENGTH = 0                                                      
         CALL GTRMST (COMLY2 ,COMLEN,'ATOM',4,'NAME',4,INAME,' ',LENGTH)
        IF (LENGTH .EQ. 0) THEN                                         
          CALL GTRMST (COMLY2 ,COMLEN,'ATNA',4,'ME',2,INAME,' ',LENGTH) 
        ENDIF                                                           
        RETURN                                                          
        END                                                             
        SUBROUTINE GETFIL  (FILNAM)                                     
        IMPLICIT REAL*8 (A-H,O-Z)                                       
          INTEGER*4       MATMTY                                        
          INTEGER*4       MPLT1D                                        
          INTEGER*4       MPLT2D                                        
          INTEGER*4       MSUBTY                                        
          INTEGER*4       MCONTU                                        
          INTEGER*4       MCHWOR                                        
          INTEGER*4       MPTSST                                        
C                                                                       
C  RETRIEVES A FILE NAME FROM A COMMAND LINE AFTER THE WORD 'FILE'      
C                                                                       
CMSP  INCLUDE (MAXSIZE)                                                 
      INCLUDE '/labo/qclib/inspidas/common/maxsize'
CMSP  INCLUDE (COMMAND)                                                 
      INCLUDE '/labo/qclib/inspidas/common/command'
C                                                                       
        CHARACTER*(*) FILNAM                                            
C                                                                       
        FILNAM = ' '                                                    
        CALL GETNXT  (COMLY2 ,COMLEN,'FILE',4,'NAME',4,FILNAM,LENGTH)   
C                                                                       
        RETURN                                                          
        END                                                             
C*MODULEENCODE.F *DECK XYAPPD.F                                         
C                                                                       
C     APPENDS TWO FORTRAN STRINGS, (BETTER THAN BUILTIN APPEND)         
C                                                                       
      SUBROUTINE XYAPPD(FRONT,UTXT,ALL)                                 
      IMPLICIT REAL*8 (A-H,O-Z)                                         
      CHARACTER*(*) FRONT,UTXT,ALL                                      
      CALL XYLSCH(UTXT,IONE)                                            
      FRONT=' '                                                         
      DO 100 I=1,IONE                                                   
         FRONT(I:I)=UTXT(I:I)                                           
 100  CONTINUE                                                          
      CALL XYLSCH(ALL,ITWO)                                             
      DO 200 I=1,ITWO                                                   
         FRONT(I+IONE:I+IONE)=ALL(I:I)                                  
 200  CONTINUE                                                          
      RETURN                                                            
      END                                                               
C*MODULE ENCODE.F *DECK XYDELCH.F                                       
C                                                                       
C XYDELCH: DELETES FROM A STRING A RANGE OF CHARACTER                   
C                                                                       
       SUBROUTINE XYDELC (TXT,ISTART,ISIZE)                             
       IMPLICIT REAL*8 (A-H,O-Z)                                        
       CHARACTER*(*) TXT                                                
       CALL XYLSCH(TXT,IMAX)                                            
       DO 100 I=ISTART,IMAX-ISIZE                                       
           TXT(I:I)=TXT(I+ISIZE:I+ISIZE)                                
 100   CONTINUE                                                         
       DO 200 I=IMAX-ISIZE+1,IMAX                                       
           TXT(I:I)=' '                                                 
 200   CONTINUE                                                         
       RETURN                                                           
       END                                                              
C*MODULEENCODE.F *DECK XYITOC.F                                         
C                                                                       
C     CONVERTS AN INTEGER TO A STRING.                                  
C     IVAL IS THE INTEGER TO CONVERT                                    
C     STR IS THE STRING VARABLE TO PUT THE RESULT                       
C     ISIZE IS THE MAXIMUM SIZE THAT THE RESULT IS ALLOWED TO BE        
C                                                                       
       SUBROUTINE XYITOC(IVAL,STR,ISIZE)                                
       IMPLICIT REAL*8 (A-H,O-Z)                                        
       CHARACTER*(*) STR                                                
       CHARACTER*40 DIGITS                                              
       CHARACTER*1 K                                                    
       INTVAL=ABS(IVAL)                                                 
       I=1                                                              
       DIGITS='0123456789'                                              
       IF (IVAL.EQ.0) THEN                                              
          STR='0'                                                       
       ELSE                                                             
          STR(1:1)=' '                                                  
 100      I=I+1                                                         
          ID = MOD(INTVAL,10)                                           
          STR(I:I)=DIGITS(ID+1:ID+1)                                    
          INTVAL = INTVAL / 10                                          
          IF (INTVAL.NE.0 .AND. I.LE.ISIZE) GOTO 100                    
          J=1                                                           
          IOLD=I                                                        
 200      IF (J.LT.I) THEN                                              
             K=STR(I:I)                                                 
             STR(I:I)=STR(J:J)                                          
             STR(J:J)=K                                                 
             I=I-1                                                      
             J=J+1                                                      
             GOTO 200                                                   
          ENDIF                                                         
       ENDIF                                                            
       RETURN                                                           
       END                                                              
C*MODULEENCODE.F*DECK XYITOS.F                                          
C                                                                       
C     CONVERTS A REAL NUMBER TO A STRING, I1 AND I2 ARE THE FIELD SIZES 
C     ILEN IS RETURNED AS THE SIZE OF THE RESULTING STRING              
C     IFRMT CONTROLS IF NORMAL OF SCIENTIFIC NOTIONS IS TO BE USED      
C                                                                       
       SUBROUTINE XYITOS(X,RESULT,ILEN,IFRMT,I1,I2)                     
       IMPLICIT REAL*8 (A-H,O-Z)                                        
       CHARACTER*(*) RESULT                                             
       CHARACTER*40 PART1,PART2,PART3                                   
       PART1=' '                                                        
       IF (IFRMT.GT.0) THEN                                             
          WRITE(PART1,1) X                                              
 1        FORMAT(1E16.8)                                                
       ELSE                                                             
          WRITE(PART1,2) X                                              
 2        FORMAT(1F16.8)                                                
       ENDIF                                                            
       I=1                                                              
 100   IF (PART1(I:I).EQ.' '.AND.I.LT.32) THEN                          
          I=I+1                                                         
          GOTO 100                                                      
       ENDIF                                                            
       ILOC=1                                                           
       PART2=' '                                                        
       PART3=' '                                                        
       IEFLAG=0                                                         
       IDFLAG=0                                                         
       CALL XYLSCH(PART1,ILEN)                                          
 200   IF (ILOC.LT.(I1+I2).AND.I.LT.ILEN) THEN                          
          IF (PART1(I:I).EQ.'.') IDFLAG=1                               
          IF (PART1(I:I).EQ.'E') IEFLAG=1                               
          PART2(ILOC:ILOC)=PART1(I:I)                                   
          ILOC=ILOC+1                                                   
          I=I+1                                                         
          GOTO 200                                                      
       ENDIF                                                            
       IF (IFRMT.GT.0.OR.IEFLAG.EQ.1) THEN                              
          IF (IEFLAG.EQ.0) THEN                                         
 300         IF (PART1(I:I).NE.'E'.AND.I.LT.ILEN) THEN                  
                I=I+1                                                   
                GOTO 300                                                
             ENDIF                                                      
          ENDIF                                                         
 400      IF (I.LE.ILEN) THEN                                           
             PART2(ILOC:ILOC)=PART1(I:I)                                
             ILOC=ILOC+1                                                
             I=I+1                                                      
             GOTO 400                                                   
          ENDIF                                                         
       ELSE IF (IFRMT.EQ.0) THEN                                        
          IF (IDFLAG.EQ.0) THEN                                         
             CALL XYAPPD(PART3,'ERR',PART2(1:(I1+I2)-3))                
          ENDIF                                                         
       ENDIF                                                            
       CALL XYLSCH(PART2,ILEN)                                          
       RESULT=PART2                                                     
       RETURN                                                           
       END                                                              
C                                                                       
C RETURNS LENGHT OF STRING, (ASSUMES STRING ENDS IN                     
C SPACES OR NULLS)                                                      
C                                                                       
       SUBROUTINE XYLSCH(UTXT,ILGTH)                                    
       IMPLICIT REAL*8 (A-H,O-Z)                                        
       CHARACTER*(*) UTXT                                               
       IACTU=LEN(UTXT)                                                  
       ILGTH=IACTU                                                      
 100   IF ((UTXT(ILGTH:ILGTH).EQ.' ' .OR. UTXT(ILGTH:ILGTH).EQ.CHAR(0)) 
     1  .AND. ILGTH.GT.1 ) THEN                                         
           ILGTH=ILGTH-1                                                
           GOTO 100                                                     
       ENDIF                                                            
       RETURN                                                           
       END                                                              
C*MODULEENCODE.F *DECK TENLOG.F                                         
C                                                                       
C     RETURNS LOGS BASE 10 (VERSES NATURAL LOGS)                        
C                                                                       
CFH    REAL*8 FUNCTION TENLOG(X)                                        
       DOUBLE PRECISION FUNCTION TENLOG(X)                              
       IMPLICIT REAL*8 (A-H,O-Z)                                        
       VAL=1.0D0                                                        
       IF (X.GT.0.0) THEN                                               
          VAL=LOG(X)/LOG(10.0D0)                                        
       ENDIF                                                            
       TENLOG=VAL                                                       
       RETURN                                                           
       END                                                              
C                                                                       
       SUBROUTINE XYRTOC(X,RESULT,ISZ,I1,I2)                            
       IMPLICIT REAL*8 (A-H,O-Z)                                        
          REAL*8          DILIMI                                        
       CHARACTER*(*) RESULT                                             
       CHARACTER*40 FRONT,BACK,ALL                                      
       DATA TEN/10.0D+00/                                               
       ALL=' '                                                          
       FRONT=' '                                                        
       BACK=' '                                                         
       IF (X.LE.-1.0D0) THEN                                            
          SIGN=-1.0D0                                                   
          X=X                                                           
       ELSE                                                             
          SIGN=1.0D0                                                    
       ENDIF                                                            
       ISZ=0                                                            
       RTEMP=X                                                          
       ILIMIT=I1+I2                                                     
       DILIMI  = DFLOAT(ILIMIT)                                         
       IF (DABS(RTEMP).GE.TEN**DILIMI ) THEN                            
 50       IF (DABS(RTEMP).GT.TEN**DILIMI ) THEN                         
             RTEMP=RTEMP/TEN                                            
             ISZ=ISZ+1                                                  
             GOTO 50                                                    
          ENDIF                                                         
          IPARTA=INT(RTEMP+0.1*SIGN)                                    
          CALL XYITOC(IPARTA,FRONT,ILIMIT)                              
          BACK='0'                                                      
       ELSE IF (DABS(RTEMP).LE.TEN**(-DILIMI )) THEN                    
          ISZ=I2                                                        
 100      IF (DABS(RTEMP).LT.TEN**(-DILIMI )) THEN                      
             RTEMP=RTEMP*TEN                                            
             ISZ=ISZ-1                                                  
             GOTO 100                                                   
          ENDIF                                                         
          IPARTA=INT(RTEMP*TEN**DILIMI )                                
          CALL XYITOC(IPARTA,BACK,ILIMIT)                               
          FRONT='0'                                                     
       ELSE                                                             
          IPARTA=(RTEMP+0.1D+00*SIGN)                                   
          CALL XYITOC(IPARTA,FRONT,ILIMIT)                              
          IPARTB=((RTEMP-IPARTA)*TEN**DILIMI )                          
          CALL XYITOC(IPARTB,BACK,ILIMIT)                               
       ENDIF                                                            
       CALL XYLSCH(FRONT,J)                                             
       ALL=' '                                                          
       DO 200 I=I1,J                                                    
          FRONT(I:I)=' '                                                
          ISZ=ISZ+1                                                     
 200   CONTINUE                                                         
       CALL XYLSCH(BACK,K)                                              
       DO 300 I=I2,K                                                    
          BACK(I:I)=' '                                                 
C          ISZ=ISZ+1                                                    
 300   CONTINUE                                                         
       ALL=' '                                                          
       CALL XYLSCH(FRONT,J)                                             
       DO 400 I=1,J                                                     
          ALL(I:I)=FRONT(I:I)                                           
 400   CONTINUE                                                         
       ILOC=J+1                                                         
       ALL(ILOC:ILOC)='.'                                               
       ILOC=ILOC+1                                                      
       CALL XYLSCH(BACK,K)                                              
       DO 500 I=1,K                                                     
          ALL(ILOC:ILOC)=BACK(I:I)                                      
          ILOC=ILOC+1                                                   
 500   CONTINUE                                                         
       IF (X.LT.0) THEN                                                 
          CALL XYAPPD(FRONT,'-',ALL)                                    
          ALL=FRONT                                                     
       ENDIF                                                            
       IF (SIGN.LT.0) THEN                                              
          X=X+1.0D0                                                     
       ENDIF                                                            
       RESULT=ALL                                                       
       RETURN                                                           
       END                                                              
        SUBROUTINE CENLIN(STRING,IOUT,IWIDTH)                           
        IMPLICIT REAL*8 (A-H,O-Z)                                       
        CHARACTER*(*) STRING                                            
        CHARACTER*80 TEMP,FORM                                          
        CHARACTER*(10) NUMCHA ,LENCHA                                   
        CHARACTER*1 XX,COMMA                                            
C                                                                       
C WRITES OUT STRING TO IOUT ON A CENTERED LINE 80 CHARACTER LINE        
C   ADDS A PRECEDING AND TRAILING BLANK LINE                            
C                                                                       
         XX = 'X'                                                       
         COMMA = ','                                                    
         IF (IWIDTH .EQ. 0) THEN                                        
          IWIDTH = 80                                                   
         ENDIF                                                          
         LENGTH = LEN(STRING)                                           
         CALL TRIMST (STRING,LENGTH)                                    
         IDIF = IWIDTH - LENGTH                                         
         ISPAC = IDIF/2                                                 
         NSIZE = 0                                                      
         NSIZE1 = 0                                                     
         CALL ENCODI(ISPAC,NUMCHA ,10,NSIZE1)                           
         CALL ENCODI(LENGTH,LENCHA ,10,NSIZE)                           
         TEMP(1:1) = '('                                                
         NSIZE2 = NSIZE1 + 2                                            
         TEMP(2:NSIZE1+1) = NUMCHA                                      
         TEMP(NSIZE2:NSIZE2)= XX                                        
         NSIZE2 = NSIZE2 + 1                                            
         TEMP(NSIZE2:NSIZE2) = COMMA                                    
         NSIZE2 = NSIZE2 + 1                                            
         TEMP(NSIZE2:NSIZE2) = 'A'                                      
         FORM = TEMP(1:NSIZE2)//LENCHA (1:NSIZE)                        
         IEND = NSIZE2 + NSIZE + 1                                      
         FORM(IEND:IEND) = ')'                                          
         WRITE(IOUT,*)                                                  
         WRITE(IOUT,FORM) STRING(1:LENGTH)                              
         WRITE(IOUT,*)                                                  
         RETURN                                                         
         END                                                            
//SYSUT2 DD DSN=INSPIDAS.SOURCE,UNIT=PUB,
//  SPACE=(TRK,(100,10,40),RLSE),
//  DISP=(NEW,CATLG),
//  DCB=(RECFM=FB,LRECL=80,BLKSIZE=6320)
//
