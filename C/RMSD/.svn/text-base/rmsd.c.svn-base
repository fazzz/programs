
#include <stdio.h>
#include <stdlib.h>
#include <math.h>

#include "rmsd.h"
#include "PT.h"
#include "f2c.h"
#include "clapack.h"

double Coff0=1.0,Coff1=1.0,Coff2=1.0,rmsd2=0.0;

double rmsd_qcp(double *coordA,double *coordB,int numatom) {
  int i,j;
  double mat[3][3];
  double K[4][4];
  double det,lambda=0.0,GA=0.0,GB=0.0,rmsd=0.0;

  transCentroid(coordA,coordB,numatom);
  
  GA=CalcG(coordA,numatom);
  GB=CalcG(coordB,numatom);
  //  det=0.00001;
  det=0.0001;

  mmult(coordA,coordB,mat,numatom);
  fomKmat(K,mat);
 
  fomPolynominal(mat,K);  
  lambda=Newton_Rapson(det);
  
  rmsd=(abs(GA+GB-2.0*lambda))/numatom;
  rmsd=sqrt(rmsd);

  return rmsd;
}


void mmult(double *coordA, double *coordB, double matrix[3][3], int numatom) {
  int i,j,k;
  
  for (i=0;i<3;++i)
    for (j=0;j<3;++j)
      matrix[i][j] = 0.0;

  for (i=0;i<3;++i)
    for (j=0;j<3;++j)
      for (k=0;k<numatom;++k)
	matrix[i][j] += coordA[k*numatom+i]*coordB[k+numatom+j]*AP.AMASS[k];
}

void fomKmat(double Kmat[4][4], double mat[3][3]){
  Kmat[0][0] =  mat[0][0]+mat[1][1]+mat[2][2];
  Kmat[1][1] =  mat[0][0]-mat[1][1]-mat[2][2];
  Kmat[2][2] = -mat[0][0]+mat[1][1]-mat[2][2];
  Kmat[3][3] = -mat[0][0]-mat[1][1]+mat[2][2];
  
  Kmat[0][1] = mat[1][2]-mat[2][1];
  Kmat[0][2] = mat[2][0]-mat[0][2];
  Kmat[0][3] = mat[0][1]-mat[1][0];
  
  Kmat[1][2] = mat[0][1]+mat[1][0];
  Kmat[2][3] = mat[1][2]+mat[2][1];
  Kmat[1][3] = mat[2][0]+mat[0][2];
  
  Kmat[1][0] = Kmat[0][1];
  Kmat[2][0] = Kmat[0][2];
  Kmat[2][1] = Kmat[1][2];
  
  Kmat[3][0] = Kmat[0][3];
  Kmat[3][1] = Kmat[1][3];
  Kmat[3][2] = Kmat[2][3];
  
}

void fomPolynominal(/*double C0, double C1, double C2,*/double mat[3][3],double Kmat[4][4]) {
  double D=(mat[0][1]*mat[0][1]+mat[0][2]*mat[0][2]-mat[1][0]*mat[1][0]-mat[2][0]*mat[2][0])
    *(mat[0][1]*mat[0][1]+mat[0][2]*mat[0][2]-mat[1][0]*mat[1][0]-mat[2][0]*mat[2][0]);
  double E,F,G,H,I;

  double Sxzp=mat[0][2]+mat[2][0];
  double Sxyp=mat[0][1]+mat[1][0];
  double Syzp=mat[1][2]+mat[2][1];
  double Sxzm=mat[0][2]-mat[2][0];
  double Sxym=mat[0][1]-mat[1][0];
  double Syzm=mat[1][2]-mat[2][1];

  double Syyzz=mat[1][1]*mat[2][2]-mat[1][2]*mat[2][1];

  double Spmm=mat[0][0]-mat[1][1]-mat[2][2];
  double Sppp=mat[0][0]+mat[1][1]+mat[2][2];
  double Spmp=mat[0][0]-mat[1][1]+mat[2][2];
  double Sppm=mat[0][0]+mat[1][1]-mat[2][2];

  double Coff0_2;

  E= (-mat[0][0]*mat[0][0]+mat[1][1]*mat[1][1]+mat[2][2]*mat[2][2]+mat[1][2]*mat[1][2]+mat[2][1]*mat[2][1]
      -2.0*Syyzz)
    *(-mat[0][0]*mat[0][0]+mat[1][1]*mat[1][1]+mat[2][2]*mat[2][2]+mat[1][2]*mat[1][2]+mat[2][1]*mat[2][1]
      +2.0*Syyzz);

  F= (-Sxzp*Syzm+Sxym*Spmm)*(-Sxzm*Syzp+Sxym*Spmp);

  G= (-Sxzp*Syzp-Sxyp*Sppm)*(-Sxzm*Syzm-Sxyp*Sppp);

  H= (Sxyp*Syzp+Sxzp*Spmp)*(-Sxzm*Syzm+Sxzp*Sppp);

  I= (Sxyp*Syzm+Sxzm*Spmm)*(-Sxym*Syzp+Sxzm*Sppm);
  
  Coff2=-2.0*(mat[0][0]*mat[0][0]+mat[0][1]*mat[0][1]+mat[0][2]*mat[0][2]
	     +mat[1][0]*mat[1][0]+mat[1][1]*mat[1][1]+mat[1][2]*mat[1][2]
	     +mat[2][0]*mat[2][0]+mat[2][1]*mat[2][1]+mat[2][2]*mat[2][2]);

  Coff1=8.0*(mat[0][0]*mat[1][2]*mat[2][1]+mat[1][1]*mat[2][0]*mat[0][2]+mat[2][2]*mat[0][1]*mat[1][0])
       -8.0*(mat[0][0]*mat[1][1]*mat[2][2]+mat[1][2]*mat[2][0]*mat[0][1]+mat[2][1]*mat[1][0]*mat[0][2]);
 
  Coff0=D+E+F+G+H+I;
  Coff0      =(Kmat[0][0]*Kmat[1][1]-Kmat[0][1]*Kmat[0][1])*(Kmat[2][2]*Kmat[3][3]-Kmat[2][3]*Kmat[2][3])
             +(Kmat[0][1]*Kmat[0][2]-Kmat[0][0]*Kmat[1][2])*(Kmat[1][2]*Kmat[3][3]-Kmat[2][3]*Kmat[0][3])
             +(Kmat[0][0]*Kmat[1][3]-Kmat[0][1]*Kmat[0][3])*(Kmat[1][2]*Kmat[2][3]-Kmat[2][2]*Kmat[1][3])
             +(Kmat[0][1]*Kmat[1][2]-Kmat[1][1]*Kmat[0][2])*(Kmat[0][2]*Kmat[3][3]-Kmat[2][3]*Kmat[1][3])
             +(Kmat[1][1]*Kmat[0][3]-Kmat[0][1]*Kmat[1][3])*(Kmat[0][2]*Kmat[2][3]-Kmat[2][2]*Kmat[0][3])
             +(Kmat[0][2]*Kmat[1][3]-Kmat[1][2]*Kmat[0][3])*(Kmat[0][2]*Kmat[1][3]-Kmat[1][2]*Kmat[0][3]);
}

double Newton_Rapson(/*double C0, double C1, double C2, */double det) {
  int i;
  double lambda=1.0, lambda_old=0.0;
  i=abs(lambda-lambda_old);
  while (abs(lambda-lambda_old)>det)
  {
    lambda_old=lambda;
    lambda=lambda-(pow(lambda,4)+Coff2*pow(lambda,2)+Coff1*lambda+Coff0)/(4.0*pow(lambda,3)+2.0*Coff2*lambda+Coff1);
  }
  return lambda;
}

double CalcG(double *coordA,int numatom) {
  int i,j;
  double G=0.0;

  for (i=0;i<numatom;++i) 
    for (j=0;j<3;++j)
      G +=  coordA[i*3+j]*coordA[i*3+j];
  
  return G;

}

void transCentroid(double *coordA, double *coordB, int numatom) {
  int i,j;
  double cm_A[3],cm_B[3];
  double summass;

  summass=0.0;

  for (j=0;j<3;++j)  {
    cm_A[j] = 0.0;
    cm_B[j] = 0.0; 
  }
  
  for (i=0;i<numatom;++i) {
    for (j=0;j<3;++j) {
      cm_A[j] += coordA[i*3+j]*AP.AMASS[i];
      cm_B[j] += coordB[i*3+j]*AP.AMASS[i]; 
    }
    summass += AP.AMASS[i];
  }
  
 for (i=0;i<3;++i)  {
   cm_A[i] = cm_A[i]/(summass);
   cm_B[i] = cm_B[i]/(summass); 
 }
 
  for (i=0;i<numatom;++i) {
    for (j=0;j<3;++j)  {
      coordA[i*3+j] -= cm_A[j]; 
      coordB[i*3+j] -= cm_B[j]; 
    }
  }
  
}

